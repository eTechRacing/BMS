
MASTER CORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ffc  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e38  080071f4  080071f4  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800802c  0800802c  0000a224  2**0
                  CONTENTS
  4 .ARM          00000008  0800802c  0800802c  0000902c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008034  08008034  0000a224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008034  08008034  00009034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008038  08008038  00009038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800803c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  20000224  08008260  0000a224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001450  08008260  0000a450  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011551  00000000  00000000  0000a252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002904  00000000  00000000  0001b7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  0001f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ab9  00000000  00000000  0001fd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014797  00000000  00000000  00049845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff7a8  00000000  00000000  0005dfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004504  00000000  00000000  0015d7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00161ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000224 	.word	0x20000224
 8000214:	00000000 	.word	0x00000000
 8000218:	080071dc 	.word	0x080071dc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000228 	.word	0x20000228
 8000234:	080071dc 	.word	0x080071dc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <StateMachineSteps>:
//	PRECHARGE = 2;
//	CL_AIRS = 3;
//	CH_PRECHARGE = 4;
//	CL_CHARGER = 5;

uint8_t StateMachineSteps(uint8_t run_cur_state, uint8_t AIRs_request, uint8_t BMS_OK,uint8_t ETAS_SYNC_FLAG){
 8000528:	b490      	push	{r4, r7}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4604      	mov	r4, r0
 8000530:	4608      	mov	r0, r1
 8000532:	4611      	mov	r1, r2
 8000534:	461a      	mov	r2, r3
 8000536:	4623      	mov	r3, r4
 8000538:	71fb      	strb	r3, [r7, #7]
 800053a:	4603      	mov	r3, r0
 800053c:	71bb      	strb	r3, [r7, #6]
 800053e:	460b      	mov	r3, r1
 8000540:	717b      	strb	r3, [r7, #5]
 8000542:	4613      	mov	r3, r2
 8000544:	713b      	strb	r3, [r7, #4]
	switch(run_cur_state){
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3b01      	subs	r3, #1
 800054a:	2b04      	cmp	r3, #4
 800054c:	d879      	bhi.n	8000642 <StateMachineSteps+0x11a>
 800054e:	a201      	add	r2, pc, #4	@ (adr r2, 8000554 <StateMachineSteps+0x2c>)
 8000550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000554:	08000569 	.word	0x08000569
 8000558:	08000593 	.word	0x08000593
 800055c:	080005c7 	.word	0x080005c7
 8000560:	080005e7 	.word	0x080005e7
 8000564:	08000611 	.word	0x08000611
		  case 1:		//OK
			  if(AIRs_request == 6){
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	2b06      	cmp	r3, #6
 800056c:	d101      	bne.n	8000572 <StateMachineSteps+0x4a>
				  run_cur_state = 2;
 800056e:	2302      	movs	r3, #2
 8000570:	71fb      	strb	r3, [r7, #7]
			  }
			  if(AIRs_request == 8){
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	2b08      	cmp	r3, #8
 8000576:	d101      	bne.n	800057c <StateMachineSteps+0x54>
				  run_cur_state = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	71fb      	strb	r3, [r7, #7]
			  }
			  if(AIRs_request == 9){
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	2b09      	cmp	r3, #9
 8000580:	d101      	bne.n	8000586 <StateMachineSteps+0x5e>
				  run_cur_state = 5;
 8000582:	2305      	movs	r3, #5
 8000584:	71fb      	strb	r3, [r7, #7]
			  }
			  if(BMS_OK == 0){
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d151      	bne.n	8000630 <StateMachineSteps+0x108>
				  run_cur_state = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	71fb      	strb	r3, [r7, #7]
			  }
			  break;
 8000590:	e04e      	b.n	8000630 <StateMachineSteps+0x108>

		  case 2:		//PRECHARGE
			  if(AIRs_request == 0){
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <StateMachineSteps+0x74>
				  run_cur_state = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	71fb      	strb	r3, [r7, #7]
			  }
			  if(AIRs_request == 3){
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d101      	bne.n	80005a6 <StateMachineSteps+0x7e>
				  run_cur_state = 3;
 80005a2:	2303      	movs	r3, #3
 80005a4:	71fb      	strb	r3, [r7, #7]
			  }
			  if(AIRs_request == 8){
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	2b08      	cmp	r3, #8
 80005aa:	d101      	bne.n	80005b0 <StateMachineSteps+0x88>
				  run_cur_state = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	71fb      	strb	r3, [r7, #7]
			  }
			  if(ETAS_SYNC_FLAG == 1){
 80005b0:	793b      	ldrb	r3, [r7, #4]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d101      	bne.n	80005ba <StateMachineSteps+0x92>
				  run_cur_state = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
			  }
			  if(BMS_OK == 0){
 80005ba:	797b      	ldrb	r3, [r7, #5]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d139      	bne.n	8000634 <StateMachineSteps+0x10c>
				  run_cur_state = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	71fb      	strb	r3, [r7, #7]
			  }
			  break;
 80005c4:	e036      	b.n	8000634 <StateMachineSteps+0x10c>

		  case 3:	//CLOSED_AIRS
			  if(AIRs_request == 0){
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d101      	bne.n	80005d0 <StateMachineSteps+0xa8>
				  run_cur_state = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	71fb      	strb	r3, [r7, #7]
			  }
			  if(ETAS_SYNC_FLAG == 1){
 80005d0:	793b      	ldrb	r3, [r7, #4]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d101      	bne.n	80005da <StateMachineSteps+0xb2>
				  run_cur_state = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
			  }
			  if(BMS_OK == 0){
 80005da:	797b      	ldrb	r3, [r7, #5]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d12b      	bne.n	8000638 <StateMachineSteps+0x110>
				  run_cur_state = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	71fb      	strb	r3, [r7, #7]
			  }
			  break;
 80005e4:	e028      	b.n	8000638 <StateMachineSteps+0x110>

		  case 4:	//CHARGER_PRECHARGE
			  if(AIRs_request == 9){
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	2b09      	cmp	r3, #9
 80005ea:	d101      	bne.n	80005f0 <StateMachineSteps+0xc8>
				  run_cur_state = 5;
 80005ec:	2305      	movs	r3, #5
 80005ee:	71fb      	strb	r3, [r7, #7]
			  }
			  if(AIRs_request == 0){
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <StateMachineSteps+0xd2>
				  run_cur_state = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
			  }
			  if(ETAS_SYNC_FLAG == 1){
 80005fa:	793b      	ldrb	r3, [r7, #4]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d101      	bne.n	8000604 <StateMachineSteps+0xdc>
				  run_cur_state = 1;
 8000600:	2301      	movs	r3, #1
 8000602:	71fb      	strb	r3, [r7, #7]
			  }
			  if(BMS_OK == 0){
 8000604:	797b      	ldrb	r3, [r7, #5]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d118      	bne.n	800063c <StateMachineSteps+0x114>
				  run_cur_state = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
			  }
			  break;
 800060e:	e015      	b.n	800063c <StateMachineSteps+0x114>

		  case 5:		//CLOSED_CHARGER
			  if(AIRs_request == 0){
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <StateMachineSteps+0xf2>
				  run_cur_state = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
			  }
			  if(ETAS_SYNC_FLAG == 1){
 800061a:	793b      	ldrb	r3, [r7, #4]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d101      	bne.n	8000624 <StateMachineSteps+0xfc>
				  run_cur_state = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	71fb      	strb	r3, [r7, #7]
			  }
			  if(BMS_OK == 0){
 8000624:	797b      	ldrb	r3, [r7, #5]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10a      	bne.n	8000640 <StateMachineSteps+0x118>
				  run_cur_state = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	71fb      	strb	r3, [r7, #7]
			  }
			  break;
 800062e:	e007      	b.n	8000640 <StateMachineSteps+0x118>
			  break;
 8000630:	bf00      	nop
 8000632:	e006      	b.n	8000642 <StateMachineSteps+0x11a>
			  break;
 8000634:	bf00      	nop
 8000636:	e004      	b.n	8000642 <StateMachineSteps+0x11a>
			  break;
 8000638:	bf00      	nop
 800063a:	e002      	b.n	8000642 <StateMachineSteps+0x11a>
			  break;
 800063c:	bf00      	nop
 800063e:	e000      	b.n	8000642 <StateMachineSteps+0x11a>
			  break;
 8000640:	bf00      	nop
		  }
	return run_cur_state;
 8000642:	79fb      	ldrb	r3, [r7, #7]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bc90      	pop	{r4, r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop

08000650 <StateMachineActuation>:
//airs_state = 3 -> CLOSED_AIRS
//airs_state = 6 -> PRECHARGE
//airs_state = 8 -> PRECHARGE_CHARGER
//airs_state = 9 -> CLOSED_CHARGER

uint8_t StateMachineActuation(uint8_t run_cur_state,uint8_t *airs_state, uint8_t CAN_BALANCING){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
	uint8_t BLC = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
	switch(run_cur_state){
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b05      	cmp	r3, #5
 8000668:	f200 80f4 	bhi.w	8000854 <StateMachineActuation+0x204>
 800066c:	a201      	add	r2, pc, #4	@ (adr r2, 8000674 <StateMachineActuation+0x24>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	0800068d 	.word	0x0800068d
 8000678:	080006d9 	.word	0x080006d9
 800067c:	08000725 	.word	0x08000725
 8000680:	08000771 	.word	0x08000771
 8000684:	080007bd 	.word	0x080007bd
 8000688:	08000809 	.word	0x08000809
		  case 0:			//Obrir rele BMS
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2108      	movs	r1, #8
 8000690:	4875      	ldr	r0, [pc, #468]	@ (8000868 <StateMachineActuation+0x218>)
 8000692:	f004 fef5 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	4874      	ldr	r0, [pc, #464]	@ (800086c <StateMachineActuation+0x21c>)
 800069c:	f004 fef0 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	@ 0x80
 80006a4:	4871      	ldr	r0, [pc, #452]	@ (800086c <StateMachineActuation+0x21c>)
 80006a6:	f004 feeb 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2140      	movs	r1, #64	@ 0x40
 80006ae:	486f      	ldr	r0, [pc, #444]	@ (800086c <StateMachineActuation+0x21c>)
 80006b0:	f004 fee6 	bl	8005480 <HAL_GPIO_WritePin>
			BLC = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 0;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 0;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 0;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	3302      	adds	r3, #2
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 0;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	3303      	adds	r3, #3
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
			break;
 80006d6:	e0bd      	b.n	8000854 <StateMachineActuation+0x204>
		  case 1:		//OPEN_AIRS: Obrir tots els relés
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2108      	movs	r1, #8
 80006dc:	4862      	ldr	r0, [pc, #392]	@ (8000868 <StateMachineActuation+0x218>)
 80006de:	f004 fecf 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	4861      	ldr	r0, [pc, #388]	@ (800086c <StateMachineActuation+0x21c>)
 80006e8:	f004 feca 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2180      	movs	r1, #128	@ 0x80
 80006f0:	485e      	ldr	r0, [pc, #376]	@ (800086c <StateMachineActuation+0x21c>)
 80006f2:	f004 fec5 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	@ 0x40
 80006fa:	485c      	ldr	r0, [pc, #368]	@ (800086c <StateMachineActuation+0x21c>)
 80006fc:	f004 fec0 	bl	8005480 <HAL_GPIO_WritePin>
			BLC = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 0;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 0;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 0;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	3302      	adds	r3, #2
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 0;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	3303      	adds	r3, #3
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
			  break;
 8000722:	e097      	b.n	8000854 <StateMachineActuation+0x204>
		  case 2:		//PRECHARGE: Tancar relé de precharge i AIRminus
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2108      	movs	r1, #8
 8000728:	484f      	ldr	r0, [pc, #316]	@ (8000868 <StateMachineActuation+0x218>)
 800072a:	f004 fea9 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	484e      	ldr	r0, [pc, #312]	@ (800086c <StateMachineActuation+0x21c>)
 8000734:	f004 fea4 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	484b      	ldr	r0, [pc, #300]	@ (800086c <StateMachineActuation+0x21c>)
 800073e:	f004 fe9f 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2140      	movs	r1, #64	@ 0x40
 8000746:	4849      	ldr	r0, [pc, #292]	@ (800086c <StateMachineActuation+0x21c>)
 8000748:	f004 fe9a 	bl	8005480 <HAL_GPIO_WritePin>
			BLC = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 6;
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2206      	movs	r2, #6
 8000754:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 0;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 1;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	3302      	adds	r3, #2
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 1;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3303      	adds	r3, #3
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
			  break;
 800076e:	e071      	b.n	8000854 <StateMachineActuation+0x204>
		  case 3:			//CLOSED_AIRS: Obrir relé de precharge i tancar AIRs
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	483c      	ldr	r0, [pc, #240]	@ (8000868 <StateMachineActuation+0x218>)
 8000776:	f004 fe83 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2120      	movs	r1, #32
 800077e:	483b      	ldr	r0, [pc, #236]	@ (800086c <StateMachineActuation+0x21c>)
 8000780:	f004 fe7e 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	@ 0x80
 8000788:	4838      	ldr	r0, [pc, #224]	@ (800086c <StateMachineActuation+0x21c>)
 800078a:	f004 fe79 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2140      	movs	r1, #64	@ 0x40
 8000792:	4836      	ldr	r0, [pc, #216]	@ (800086c <StateMachineActuation+0x21c>)
 8000794:	f004 fe74 	bl	8005480 <HAL_GPIO_WritePin>
			BLC = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 3;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	2203      	movs	r2, #3
 80007a0:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 1;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 1;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 0;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	3303      	adds	r3, #3
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
			  break;
 80007ba:	e04b      	b.n	8000854 <StateMachineActuation+0x204>
		  case 4:	//CHARGER_PRECHARGE: Tancar relé de precharge i AIRminus
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2108      	movs	r1, #8
 80007c0:	4829      	ldr	r0, [pc, #164]	@ (8000868 <StateMachineActuation+0x218>)
 80007c2:	f004 fe5d 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	4828      	ldr	r0, [pc, #160]	@ (800086c <StateMachineActuation+0x21c>)
 80007cc:	f004 fe58 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2180      	movs	r1, #128	@ 0x80
 80007d4:	4825      	ldr	r0, [pc, #148]	@ (800086c <StateMachineActuation+0x21c>)
 80007d6:	f004 fe53 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2140      	movs	r1, #64	@ 0x40
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <StateMachineActuation+0x21c>)
 80007e0:	f004 fe4e 	bl	8005480 <HAL_GPIO_WritePin>
			BLC = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 6;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2206      	movs	r2, #6
 80007ec:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 0;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 1;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3302      	adds	r3, #2
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 1;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3303      	adds	r3, #3
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
			  break;
 8000806:	e025      	b.n	8000854 <StateMachineActuation+0x204>
		  case 5:		//CLOSED_CHARGER: Obrir relé de precharge i tancar AIRs
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	4816      	ldr	r0, [pc, #88]	@ (8000868 <StateMachineActuation+0x218>)
 800080e:	f004 fe37 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2120      	movs	r1, #32
 8000816:	4815      	ldr	r0, [pc, #84]	@ (800086c <StateMachineActuation+0x21c>)
 8000818:	f004 fe32 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2180      	movs	r1, #128	@ 0x80
 8000820:	4812      	ldr	r0, [pc, #72]	@ (800086c <StateMachineActuation+0x21c>)
 8000822:	f004 fe2d 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	@ 0x40
 800082a:	4810      	ldr	r0, [pc, #64]	@ (800086c <StateMachineActuation+0x21c>)
 800082c:	f004 fe28 	bl	8005480 <HAL_GPIO_WritePin>
			BLC = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 3;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2203      	movs	r2, #3
 8000838:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 1;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 1;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	3302      	adds	r3, #2
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 0;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3303      	adds	r3, #3
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
			  break;
 8000852:	bf00      	nop
		  }
	if(CAN_BALANCING == 1){
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d101      	bne.n	800085e <StateMachineActuation+0x20e>
		BLC = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	73fb      	strb	r3, [r7, #15]
	}
	return BLC;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	40020000 	.word	0x40020000

08000870 <Balancing>:
 * Set the Discharge of the cells: 1 -> Turn ON Shorting Switch for Cell x; 0 -> Turn OFF Shorting Switch for Cell x (Default);
 * It is an array of 12 bits for each slave
 * Inputs: Minimum voltage for start balancing, less charged cell, cell voltages array, limit voltage to balance, maximum difference between the value and the minimum voltage, and the number of ICs
*/
void Balancing(uint16_t *VOLTAGES, uint16_t VCELL_MIN)		// Array of the read voltages
		{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
			//uint16_t VCELL_MIN = 27000;					// Variable of the less charged cell
			for(int j = 0; j < TOTAL_IC; j++)				// Loops for each voltage in the evaluated IC
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e09d      	b.n	80009be <Balancing+0x14e>
			{
				uint8_t BALANCING1 = 0;			// Variable 0 or 1 that sets if the evaluated cell should (1) or not (0) start balancing, has a 16 bits dimension
 8000882:	2300      	movs	r3, #0
 8000884:	74fb      	strb	r3, [r7, #19]
				uint8_t BALANCING2 = 0;			// Variable 0 or 1 that sets if the evaluated cell should (1) or not (0) start balancing, has a 16 bits dimension
 8000886:	2300      	movs	r3, #0
 8000888:	74bb      	strb	r3, [r7, #18]

				for(int i = 0; i < 12; i++)					// A for function that evaluates each cell of the IC
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e083      	b.n	8000998 <Balancing+0x128>
				{
				    if(i < 8){
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b07      	cmp	r3, #7
 8000894:	dc3b      	bgt.n	800090e <Balancing+0x9e>
				        if(VOLTAGES[i+j*12]>V_MIN && (VOLTAGES[i+j*12] > V_BALANCING || (VOLTAGES[i+j*12]-VCELL_MIN)>DIFF_MAX))	//If the evaluated voltage is over V_MIN && (the evaluated voltage is over V_BALANCING || the difference between the evaluated voltage and VCELL_MIN is bigger than DIFF_MAX
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	461a      	mov	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d96d      	bls.n	8000992 <Balancing+0x122>
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	461a      	mov	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	4413      	add	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4413      	add	r3, r2
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	f249 0288 	movw	r2, #37000	@ 0x9088
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d810      	bhi.n	80008f8 <Balancing+0x88>
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80008f6:	dd4c      	ble.n	8000992 <Balancing+0x122>
					    {
						BALANCING1 = (BALANCING1|(1<<i));	//Set a 1 in the position of the evaluated cell in the BALANCING variable
 80008f8:	2201      	movs	r2, #1
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	b25a      	sxtb	r2, r3
 8000902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000906:	4313      	orrs	r3, r2
 8000908:	b25b      	sxtb	r3, r3
 800090a:	74fb      	strb	r3, [r7, #19]
 800090c:	e041      	b.n	8000992 <Balancing+0x122>
					    }
				    }
				    else if(i>=8 && i<=12){
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b07      	cmp	r3, #7
 8000912:	dd3e      	ble.n	8000992 <Balancing+0x122>
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b0c      	cmp	r3, #12
 8000918:	dc3b      	bgt.n	8000992 <Balancing+0x122>
				        if(VOLTAGES[i+j*12]>V_MIN && (VOLTAGES[i+j*12] > V_BALANCING || (VOLTAGES[i+j*12]-VCELL_MIN)>DIFF_MAX))	//If the evaluated voltage is over V_MIN && (the evaluated voltage is over V_BALANCING || the difference between the evaluated voltage and VCELL_MIN is bigger than DIFF_MAX
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	461a      	mov	r2, r3
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8000936:	4293      	cmp	r3, r2
 8000938:	d92b      	bls.n	8000992 <Balancing+0x122>
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	461a      	mov	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4413      	add	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	f249 0288 	movw	r2, #37000	@ 0x9088
 8000956:	4293      	cmp	r3, r2
 8000958:	d810      	bhi.n	800097c <Balancing+0x10c>
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	461a      	mov	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4413      	add	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4413      	add	r3, r2
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	887b      	ldrh	r3, [r7, #2]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2bc8      	cmp	r3, #200	@ 0xc8
 800097a:	dd0a      	ble.n	8000992 <Balancing+0x122>
					    {
						BALANCING2 = (BALANCING2|(1<<(i-8)));//Set a 1 in the position of the evaluated cell in the BALANCING variable
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3b08      	subs	r3, #8
 8000980:	2201      	movs	r2, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	b25a      	sxtb	r2, r3
 8000988:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800098c:	4313      	orrs	r3, r2
 800098e:	b25b      	sxtb	r3, r3
 8000990:	74bb      	strb	r3, [r7, #18]
				for(int i = 0; i < 12; i++)					// A for function that evaluates each cell of the IC
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b0b      	cmp	r3, #11
 800099c:	f77f af78 	ble.w	8000890 <Balancing+0x20>
					    }
				    }
				}
				DCC[j] = (BALANCING2<<8) + (BALANCING1);	 //Set the DCC array in the evaluated IC position to the value of the BALANCING variable
 80009a0:	7cbb      	ldrb	r3, [r7, #18]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	7cfb      	ldrb	r3, [r7, #19]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	4413      	add	r3, r2
 80009ae:	b299      	uxth	r1, r3
 80009b0:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <Balancing+0x16c>)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j < TOTAL_IC; j++)				// Loops for each voltage in the evaluated IC
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <Balancing+0x170>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	4293      	cmp	r3, r2
 80009c8:	f6ff af5b 	blt.w	8000882 <Balancing+0x12>
			}
		}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	371c      	adds	r7, #28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000240 	.word	0x20000240
 80009e0:	20000000 	.word	0x20000000

080009e4 <MUX_SWITCH>:
//MUX CH = 4 -> GPIO 5 = 1; GPIO 4 = 0; GPIO 3 = 0; GPIO 2 = 0; GPIO 1 = 0;
//MUX CH = 5 -> GPIO 5 = 1; GPIO 4 = 0; GPIO 3 = 1; GPIO 2 = 0; GPIO 1 = 0;
//MUX CH = 6 -> GPIO 5 = 1; GPIO 4 = 1; GPIO 3 = 0; GPIO 2 = 0; GPIO 1 = 0;
//MUX CH = 7 -> GPIO 5 = 1; GPIO 4 = 1; GPIO 3 = 1; GPIO 2 = 0; GPIO 1 = 0;

uint16_t MUX_SWITCH(uint16_t GPIOx){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
	switch (GPIOx){
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	2b1c      	cmp	r3, #28
 80009f4:	d854      	bhi.n	8000aa0 <MUX_SWITCH+0xbc>
 80009f6:	a201      	add	r2, pc, #4	@ (adr r2, 80009fc <MUX_SWITCH+0x18>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a71 	.word	0x08000a71
 8000a00:	08000aa1 	.word	0x08000aa1
 8000a04:	08000aa1 	.word	0x08000aa1
 8000a08:	08000aa1 	.word	0x08000aa1
 8000a0c:	08000a77 	.word	0x08000a77
 8000a10:	08000aa1 	.word	0x08000aa1
 8000a14:	08000aa1 	.word	0x08000aa1
 8000a18:	08000aa1 	.word	0x08000aa1
 8000a1c:	08000a7d 	.word	0x08000a7d
 8000a20:	08000aa1 	.word	0x08000aa1
 8000a24:	08000aa1 	.word	0x08000aa1
 8000a28:	08000aa1 	.word	0x08000aa1
 8000a2c:	08000a83 	.word	0x08000a83
 8000a30:	08000aa1 	.word	0x08000aa1
 8000a34:	08000aa1 	.word	0x08000aa1
 8000a38:	08000aa1 	.word	0x08000aa1
 8000a3c:	08000a89 	.word	0x08000a89
 8000a40:	08000aa1 	.word	0x08000aa1
 8000a44:	08000aa1 	.word	0x08000aa1
 8000a48:	08000aa1 	.word	0x08000aa1
 8000a4c:	08000a8f 	.word	0x08000a8f
 8000a50:	08000aa1 	.word	0x08000aa1
 8000a54:	08000aa1 	.word	0x08000aa1
 8000a58:	08000aa1 	.word	0x08000aa1
 8000a5c:	08000a95 	.word	0x08000a95
 8000a60:	08000aa1 	.word	0x08000aa1
 8000a64:	08000aa1 	.word	0x08000aa1
 8000a68:	08000aa1 	.word	0x08000aa1
 8000a6c:	08000a9b 	.word	0x08000a9b
		  case 0b00000011:
			GPIOx = 0b00000111;
 8000a70:	2307      	movs	r3, #7
 8000a72:	80fb      	strh	r3, [r7, #6]
			break;
 8000a74:	e014      	b.n	8000aa0 <MUX_SWITCH+0xbc>
		  case 0b00000111:
			GPIOx = 0b00001011;
 8000a76:	230b      	movs	r3, #11
 8000a78:	80fb      	strh	r3, [r7, #6]
			break;
 8000a7a:	e011      	b.n	8000aa0 <MUX_SWITCH+0xbc>
		  case 0b00001011:
			GPIOx = 0b00001111;
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	80fb      	strh	r3, [r7, #6]
			break;
 8000a80:	e00e      	b.n	8000aa0 <MUX_SWITCH+0xbc>
		  case 0b00001111:
			GPIOx = 0b00010011;
 8000a82:	2313      	movs	r3, #19
 8000a84:	80fb      	strh	r3, [r7, #6]
			break;
 8000a86:	e00b      	b.n	8000aa0 <MUX_SWITCH+0xbc>
		  case 0b00010011:
			GPIOx = 0b00010111;
 8000a88:	2317      	movs	r3, #23
 8000a8a:	80fb      	strh	r3, [r7, #6]
			break;
 8000a8c:	e008      	b.n	8000aa0 <MUX_SWITCH+0xbc>
		  case 0b00010111:
			GPIOx = 0b00011011;
 8000a8e:	231b      	movs	r3, #27
 8000a90:	80fb      	strh	r3, [r7, #6]
			break;
 8000a92:	e005      	b.n	8000aa0 <MUX_SWITCH+0xbc>
		  case 0b00011011:
			GPIOx = 0b00011111;
 8000a94:	231f      	movs	r3, #31
 8000a96:	80fb      	strh	r3, [r7, #6]
			break;
 8000a98:	e002      	b.n	8000aa0 <MUX_SWITCH+0xbc>
		  case 0b00011111:
			GPIOx = 0b00000011;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	80fb      	strh	r3, [r7, #6]
			break;
 8000a9e:	bf00      	nop
	  }
	  return GPIOx;
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <outputCS>:

/*
 * Function: outputCS
 * Purpose: The outputCs is a function that sets the CS pin to high or low depending on the entering value input (1) or (0)
 */
void outputCS(uint8_t CS_INPUT){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	if(CS_INPUT == 1){
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d105      	bne.n	8000acc <outputCS+0x1c>
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_SET);			//The High state of the chip select pin is set
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2140      	movs	r1, #64	@ 0x40
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <outputCS+0x30>)
 8000ac6:	f004 fcdb 	bl	8005480 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_RESET);		//The Low state of the chip select pin is set
	}
}
 8000aca:	e004      	b.n	8000ad6 <outputCS+0x26>
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_RESET);		//The Low state of the chip select pin is set
 8000acc:	2200      	movs	r2, #0
 8000ace:	2140      	movs	r1, #64	@ 0x40
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <outputCS+0x30>)
 8000ad2:	f004 fcd5 	bl	8005480 <HAL_GPIO_WritePin>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <wakeup_idle>:
/*
 * Function: wakeup_idle
 * Purpose: The wakeup_idle function sends a byte thought SPI with no specific purpose, it just wakes up the ICs.
 * Inputs: The spi_channel which wants to be used
 */
void wakeup_idle(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<TOTAL_IC; i++)				// Loops for each IC
 8000aea:	2300      	movs	r3, #0
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	e00e      	b.n	8000b0e <wakeup_idle+0x2a>
		{
	outputCS(0);		// The Low state of the chip select pin is set
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff ffdd 	bl	8000ab0 <outputCS>
	delay_us(20);		// Waits WAKEUP_DELAY to send again
 8000af6:	2014      	movs	r0, #20
 8000af8:	f001 fafa 	bl	80020f0 <delay_us>
	outputCS(1);		// The High state of the chip select pin is set
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff ffd7 	bl	8000ab0 <outputCS>
	delay_us(20);		// Waits WAKEUP_DELAY to send again
 8000b02:	2014      	movs	r0, #20
 8000b04:	f001 faf4 	bl	80020f0 <delay_us>
	for(uint8_t i = 0; i<TOTAL_IC; i++)				// Loops for each IC
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <wakeup_idle+0x40>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3eb      	bcc.n	8000af0 <wakeup_idle+0xc>
		}
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000000 	.word	0x20000000

08000b28 <pec15_calc>:
 * Inputs: The length of the data calculated and the data which has to be evaluated to calculate the PEC
 * uint8_t DATA_LENGTH, 		// Number of bytes that will be used to calculate a PEC
   uint8_t *DATA 				// Array of data that will be used to calculate  a PEC

*/
uint16_t pec15_calc(uint8_t DATA_LENGTH, uint8_t *DATA){
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder;
  uint16_t addr;
  remainder = 16;								// Initialize the PEC
 8000b34:	2310      	movs	r3, #16
 8000b36:	82fb      	strh	r3, [r7, #22]
  for (uint8_t i = 0; i<DATA_LENGTH; i++) 		// Loops for each byte in data array
 8000b38:	2300      	movs	r3, #0
 8000b3a:	757b      	strb	r3, [r7, #21]
 8000b3c:	e01b      	b.n	8000b76 <pec15_calc+0x4e>
  {
    addr = ((remainder>>7)^DATA[i])&0xff;		// Calculate PEC table address
 8000b3e:	8afb      	ldrh	r3, [r7, #22]
 8000b40:	09db      	lsrs	r3, r3, #7
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	7d7a      	ldrb	r2, [r7, #21]
 8000b46:	6839      	ldr	r1, [r7, #0]
 8000b48:	440a      	add	r2, r1
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	4053      	eors	r3, r2
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	827b      	strh	r3, [r7, #18]
    remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
 8000b54:	8afb      	ldrh	r3, [r7, #22]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	8a7b      	ldrh	r3, [r7, #18]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	490c      	ldr	r1, [pc, #48]	@ (8000b90 <pec15_calc+0x68>)
 8000b60:	440b      	add	r3, r1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4053      	eors	r3, r2
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	82fb      	strh	r3, [r7, #22]
  for (uint8_t i = 0; i<DATA_LENGTH; i++) 		// Loops for each byte in data array
 8000b70:	7d7b      	ldrb	r3, [r7, #21]
 8000b72:	3301      	adds	r3, #1
 8000b74:	757b      	strb	r3, [r7, #21]
 8000b76:	7d7a      	ldrb	r2, [r7, #21]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3df      	bcc.n	8000b3e <pec15_calc+0x16>
  }
  return(remainder*2);							// The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000b7e:	8afb      	ldrh	r3, [r7, #22]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	b29b      	uxth	r3, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	20000004 	.word	0x20000004

08000b94 <ltc6811_wrcfg>:
// * Purpose: This command will write the configuration registers of the ltc6811-1s
// * connected in a daisy chain stack. The configuration is written in descending
// * order so the last device's configuration is written first.
// * Inputs: The number of ICs, the configuration from the function set_cfgr, the SPI channel used
*/
void ltc6811_wrcfg(SPI_HandleTypeDef spi_channel, uint8_t GPIOx, uint16_t *VOLTAGES, uint8_t BLC, uint16_t VCELL_MIN){
 8000b94:	b084      	sub	sp, #16
 8000b96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b9a:	b095      	sub	sp, #84	@ 0x54
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	f107 0678 	add.w	r6, r7, #120	@ 0x78
 8000ba2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000ba6:	466b      	mov	r3, sp
 8000ba8:	461e      	mov	r6, r3
  const uint8_t BYTES_IN_REG = 6;
 8000baa:	2306      	movs	r3, #6
 8000bac:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  const uint8_t CMD_LEN = 4+(8*TOTAL_IC);
 8000bb0:	4bc3      	ldr	r3, [pc, #780]	@ (8000ec0 <ltc6811_wrcfg+0x32c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	3304      	adds	r3, #4
 8000bba:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  uint8_t cmd[CMD_LEN];			// CMD array
 8000bbe:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000bc6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bca:	2200      	movs	r2, #0
 8000bcc:	461c      	mov	r4, r3
 8000bce:	4615      	mov	r5, r2
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	00eb      	lsls	r3, r5, #3
 8000bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bde:	00e2      	lsls	r2, r4, #3
 8000be0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000be4:	2200      	movs	r2, #0
 8000be6:	623b      	str	r3, [r7, #32]
 8000be8:	627a      	str	r2, [r7, #36]	@ 0x24
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000bf6:	4629      	mov	r1, r5
 8000bf8:	00cb      	lsls	r3, r1, #3
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000c00:	4621      	mov	r1, r4
 8000c02:	00ca      	lsls	r2, r1, #3
 8000c04:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c08:	3307      	adds	r3, #7
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c12:	466b      	mov	r3, sp
 8000c14:	3300      	adds	r3, #0
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t cfg_pec;				// PEC
  uint8_t cmd_index; 			// Command counter
  uint8_t config[TOTAL_IC][6];
 8000c18:	4ba9      	ldr	r3, [pc, #676]	@ (8000ec0 <ltc6811_wrcfg+0x32c>)
 8000c1a:	7819      	ldrb	r1, [r3, #0]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c22:	b2cb      	uxtb	r3, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	61fa      	str	r2, [r7, #28]
 8000c2a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000c2e:	4622      	mov	r2, r4
 8000c30:	462b      	mov	r3, r5
 8000c32:	1890      	adds	r0, r2, r2
 8000c34:	60b8      	str	r0, [r7, #8]
 8000c36:	415b      	adcs	r3, r3
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c3e:	4620      	mov	r0, r4
 8000c40:	eb12 0a00 	adds.w	sl, r2, r0
 8000c44:	4628      	mov	r0, r5
 8000c46:	eb43 0b00 	adc.w	fp, r3, r0
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000c56:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000c5a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000c5e:	b2cb      	uxtb	r3, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	617a      	str	r2, [r7, #20]
 8000c66:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000c6a:	4622      	mov	r2, r4
 8000c6c:	462b      	mov	r3, r5
 8000c6e:	1890      	adds	r0, r2, r2
 8000c70:	6038      	str	r0, [r7, #0]
 8000c72:	415b      	adcs	r3, r3
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	eb12 0800 	adds.w	r8, r2, r0
 8000c80:	4628      	mov	r0, r5
 8000c82:	eb43 0900 	adc.w	r9, r3, r0
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	f04f 0300 	mov.w	r3, #0
 8000c8e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000c92:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000c96:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000c9a:	460a      	mov	r2, r1
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	3307      	adds	r3, #7
 8000ca6:	08db      	lsrs	r3, r3, #3
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cae:	466b      	mov	r3, sp
 8000cb0:	3300      	adds	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	@ 0x30


  if(BLC == 0){
 8000cb4:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d115      	bne.n	8000ce8 <ltc6811_wrcfg+0x154>
	  for(int i = 0; i < TOTAL_IC*12; i++){
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000cc0:	e007      	b.n	8000cd2 <ltc6811_wrcfg+0x13e>
		  DCC[i] = 0;
 8000cc2:	4a80      	ldr	r2, [pc, #512]	@ (8000ec4 <ltc6811_wrcfg+0x330>)
 8000cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = 0; i < TOTAL_IC*12; i++){
 8000ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cce:	3301      	adds	r3, #1
 8000cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ec0 <ltc6811_wrcfg+0x32c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	dbec      	blt.n	8000cc2 <ltc6811_wrcfg+0x12e>
	  }
  }
  if(BLC == 1){
 8000ce8:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d106      	bne.n	8000cfe <ltc6811_wrcfg+0x16a>
	  Balancing(VOLTAGES, VCELL_MIN);
 8000cf0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000cfa:	f7ff fdb9 	bl	8000870 <Balancing>
  }

  for(int i= 0; i < TOTAL_IC; i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8000d02:	e056      	b.n	8000db2 <ltc6811_wrcfg+0x21e>
  		{
	  	  	config[i][0] = (uint8_t)((GPIOx<<3)&0xF8)|((REFON<<2)&0x04)|((DTEN<<1)&0x02)|(ADCOPT&0x01);
 8000d04:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	f023 0307 	bic.w	r3, r3, #7
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	b2d8      	uxtb	r0, r3
 8000d1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	440b      	add	r3, r1
 8000d28:	4602      	mov	r2, r0
 8000d2a:	701a      	strb	r2, [r3, #0]
  	    /*				0b01011000 & 0b11111000 | 0b00000100 & 0b0100 | 0b00000010 & 0b0010 | 0b00000001 & 0b00000001
  		    	  		   0b0101 1000		  |     0b0000 0100	    |	 0b0000 0010	      | 		  0b0000 0001
  		    		CFGR0 -> 0b0101 1111*/
  			config[i][1] = (uint8_t)(UNDERVOLTAGE_TH&(0x00FF));
 8000d2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	440b      	add	r3, r1
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	22d5      	movs	r2, #213	@ 0xd5
 8000d3e:	701a      	strb	r2, [r3, #0]
  			config[i][2] = (uint8_t)(((OVERVOLTAGE_TH&(0x000F))<<4) | ((UNDERVOLTAGE_TH&(0x0F00))>>8));
 8000d40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	440b      	add	r3, r1
 8000d4e:	3302      	adds	r3, #2
 8000d50:	2216      	movs	r2, #22
 8000d52:	701a      	strb	r2, [r3, #0]
  			config[i][3] = (uint8_t)((OVERVOLTAGE_TH&(0x0FF0))>>4);
 8000d54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	440b      	add	r3, r1
 8000d62:	3303      	adds	r3, #3
 8000d64:	22a4      	movs	r2, #164	@ 0xa4
 8000d66:	701a      	strb	r2, [r3, #0]
  			config[i][4] = (uint8_t)(DCC[i]&0x00FF); //DCC[TOTAL_IC-i-1]
 8000d68:	4a56      	ldr	r2, [pc, #344]	@ (8000ec4 <ltc6811_wrcfg+0x330>)
 8000d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	440b      	add	r3, r1
 8000d80:	3304      	adds	r3, #4
 8000d82:	4602      	mov	r2, r0
 8000d84:	701a      	strb	r2, [r3, #0]
  		    				/*0b00001111 11111111 & 0b00000000 11111111
  		    							0b00000000 11111111
  		     							CFGR4 -> 0b11111111*/
  			config[i][5] = (uint8_t)(((DCTO)<<4) | (((DCC[i]&0x0F00))>>8));
 8000d86:	4a4f      	ldr	r2, [pc, #316]	@ (8000ec4 <ltc6811_wrcfg+0x330>)
 8000d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8e:	121b      	asrs	r3, r3, #8
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	b2d8      	uxtb	r0, r3
 8000d98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	440b      	add	r3, r1
 8000da6:	3305      	adds	r3, #5
 8000da8:	4602      	mov	r2, r0
 8000daa:	701a      	strb	r2, [r3, #0]
  for(int i= 0; i < TOTAL_IC; i++)
 8000dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dae:	3301      	adds	r3, #1
 8000db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8000db2:	4b43      	ldr	r3, [pc, #268]	@ (8000ec0 <ltc6811_wrcfg+0x32c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	dba2      	blt.n	8000d04 <ltc6811_wrcfg+0x170>
  		       0b11000000 	 | (0b00001111 00000000)>>8
  		       0b11000000 	 | 0b00000000 00001111
  		     		CFGR5 =	0b11001111*/
  		}

  cmd[0] = 0x00;		// Command format 0
 8000dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x01;		// Command format 1
 8000dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	705a      	strb	r2, [r3, #1]
  cmd[2] = 0x3d;		// Calculated PEC of Command format 0
 8000dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dcc:	223d      	movs	r2, #61	@ 0x3d
 8000dce:	709a      	strb	r2, [r3, #2]
  cmd[3] = 0x6e;		// Calculated PEC of Command format 1
 8000dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dd2:	226e      	movs	r2, #110	@ 0x6e
 8000dd4:	70da      	strb	r2, [r3, #3]


  cmd_index = 4;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for (uint8_t current_ic = TOTAL_IC; current_ic > 0; current_ic--)    	// executes for each ltc6811 in daisy chain, this loops starts with
 8000ddc:	4b38      	ldr	r3, [pc, #224]	@ (8000ec0 <ltc6811_wrcfg+0x32c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000de4:	e04e      	b.n	8000e84 <ltc6811_wrcfg+0x2f0>
  {
    // the last IC on the stack. The first configuration written is
    // received by the last IC in the daisy chain

    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000dec:	e01a      	b.n	8000e24 <ltc6811_wrcfg+0x290>
    {
      // current_byte is the byte counter

      cmd[cmd_index] = config[current_ic-1][current_byte];           	 //adding the config data to the array to be sent
 8000dee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	f897 0042 	ldrb.w	r0, [r7, #66]	@ 0x42
 8000df8:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8000dfc:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4423      	add	r3, r4
 8000e08:	4403      	add	r3, r0
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e0e:	545a      	strb	r2, [r3, r1]
      cmd_index = cmd_index + 1;
 8000e10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e14:	3301      	adds	r3, #1
 8000e16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000e1a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000e24:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8000e28:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3de      	bcc.n	8000dee <ltc6811_wrcfg+0x25a>
    }

    cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);   // calculating the PEC for each ICs configuration register data
 8000e30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000e34:	1e5a      	subs	r2, r3, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e40:	441a      	add	r2, r3
 8000e42:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe6d 	bl	8000b28 <pec15_calc>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8000e52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e5c:	b2d1      	uxtb	r1, r2
 8000e5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e60:	54d1      	strb	r1, [r2, r3]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8000e62:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e66:	3301      	adds	r3, #1
 8000e68:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000e6a:	b2d1      	uxtb	r1, r2
 8000e6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e6e:	54d1      	strb	r1, [r2, r3]
    cmd_index = cmd_index + 2;
 8000e70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e74:	3302      	adds	r3, #2
 8000e76:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for (uint8_t current_ic = TOTAL_IC; current_ic > 0; current_ic--)    	// executes for each ltc6811 in daisy chain, this loops starts with
 8000e7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000e84:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1ac      	bne.n	8000de6 <ltc6811_wrcfg+0x252>
  }


  wakeup_idle ();               // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8000e8c:	f7ff fe2a 	bl	8000ae4 <wakeup_idle>

  outputCS(0);								// Set the CS to low to send data
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fe0d 	bl	8000ab0 <outputCS>
  HAL_SPI_Transmit(&spi_channel, (uint8_t*)cmd, CMD_LEN, HAL_MAX_DELAY); // Sends the CMD trough SPI
 8000e96:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ea2:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8000ea6:	f005 f86c 	bl	8005f82 <HAL_SPI_Transmit>
  outputCS(1);								// Set the CS to high
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fe00 	bl	8000ab0 <outputCS>
 8000eb0:	46b5      	mov	sp, r6
}
 8000eb2:	bf00      	nop
 8000eb4:	3754      	adds	r7, #84	@ 0x54
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4770      	bx	lr
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000240 	.word	0x20000240

08000ec8 <ltc6811_adcv>:
|CMD[0:1] |  15   |  14   |  13   |  12   |  11   |  10   |   9   |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
|ADCV:      |   0   |   0   |   0   |   0   |   0   |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
* Inputs: The Conversion Mode (MD), discharge permitted (DCP), the cell selection for ADC conversion (CH) and the SPI channel used
*/
void ltc6811_adcv(SPI_HandleTypeDef spi_channel, uint8_t CH){
 8000ec8:	b084      	sub	sp, #16
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	f107 0c10 	add.w	ip, r7, #16
 8000ed4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  uint8_t cmd[4];
	  uint16_t cmd_pec;
	  uint8_t md_bits;

		  md_bits = (MD & 0x02) >> 1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	71fb      	strb	r3, [r7, #7]
		  cmd[0] = md_bits + 0x02;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	3302      	adds	r3, #2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	703b      	strb	r3, [r7, #0]
		  md_bits = (MD & 0x01) << 7;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71fb      	strb	r3, [r7, #7]
		  cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000eee:	4413      	add	r3, r2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3360      	adds	r3, #96	@ 0x60
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	707b      	strb	r3, [r7, #1]
		  cmd_pec = pec15_calc(2, cmd);
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff fe13 	bl	8000b28 <pec15_calc>
 8000f02:	4603      	mov	r3, r0
 8000f04:	80bb      	strh	r3, [r7, #4]
		  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	70bb      	strb	r3, [r7, #2]
		  cmd[3] = (uint8_t)(cmd_pec);
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	70fb      	strb	r3, [r7, #3]

		  wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000f16:	f7ff fde5 	bl	8000ae4 <wakeup_idle>

		  outputCS(0);															//The Low state of the chip select pin is set
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff fdc8 	bl	8000ab0 <outputCS>
		  HAL_SPI_Transmit(&spi_channel, (uint8_t *)cmd, 4, HAL_MAX_DELAY);
 8000f20:	4639      	mov	r1, r7
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2204      	movs	r2, #4
 8000f28:	f107 0010 	add.w	r0, r7, #16
 8000f2c:	f005 f829 	bl	8005f82 <HAL_SPI_Transmit>
		  outputCS(0);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fdbd 	bl	8000ab0 <outputCS>
															//The High state of the chip select pin is set
	}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f40:	b004      	add	sp, #16
 8000f42:	4770      	bx	lr

08000f44 <ltc6811_rdcv_reg>:
	 * uint8_t *data //An array of the unparsed cell codes


 * Inputs: The register read, the number of ICs, the voltage of the cells array and the SPI channel used
*/
void ltc6811_rdcv_reg(SPI_HandleTypeDef spi_channel,uint8_t reg, uint8_t *data){
 8000f44:	b084      	sub	sp, #16
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af02      	add	r7, sp, #8
 8000f4c:	f107 0c10 	add.w	ip, r7, #16
 8000f50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 8000f54:	2308      	movs	r3, #8
 8000f56:	71fb      	strb	r3, [r7, #7]
		  uint8_t REG_LEN_TOTAL_IC = (4+REG_LEN*(TOTAL_IC));
 8000f58:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <ltc6811_rdcv_reg+0xe0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	fb12 f303 	smulbb	r3, r2, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	3304      	adds	r3, #4
 8000f66:	71bb      	strb	r3, [r7, #6]
		  uint8_t cmd[4];
		  uint16_t cmd_pec;

		  if (reg == 1)     //1: RDCVA
 8000f68:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d104      	bne.n	8000f7a <ltc6811_rdcv_reg+0x36>
		  {
			cmd[1] = 0x04;
 8000f70:	2304      	movs	r3, #4
 8000f72:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8000f74:	2300      	movs	r3, #0
 8000f76:	703b      	strb	r3, [r7, #0]
 8000f78:	e02b      	b.n	8000fd2 <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 2) //2: RDCVB
 8000f7a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d104      	bne.n	8000f8c <ltc6811_rdcv_reg+0x48>
		  {
			cmd[1] = 0x06;
 8000f82:	2306      	movs	r3, #6
 8000f84:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	703b      	strb	r3, [r7, #0]
 8000f8a:	e022      	b.n	8000fd2 <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 3) //3: RDCVC
 8000f8c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d104      	bne.n	8000f9e <ltc6811_rdcv_reg+0x5a>
		  {
			cmd[1] = 0x08;
 8000f94:	2308      	movs	r3, #8
 8000f96:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	703b      	strb	r3, [r7, #0]
 8000f9c:	e019      	b.n	8000fd2 <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 4) //4: RDCVD
 8000f9e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d104      	bne.n	8000fb0 <ltc6811_rdcv_reg+0x6c>
		  {
			cmd[1] = 0x0A;
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	703b      	strb	r3, [r7, #0]
 8000fae:	e010      	b.n	8000fd2 <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 5) //4: RDCVE
 8000fb0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d104      	bne.n	8000fc2 <ltc6811_rdcv_reg+0x7e>
		  {
			cmd[1] = 0x09;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	703b      	strb	r3, [r7, #0]
 8000fc0:	e007      	b.n	8000fd2 <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 6) //4: RDCVF
 8000fc2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d103      	bne.n	8000fd2 <ltc6811_rdcv_reg+0x8e>
		  {
			cmd[1] = 0x0B;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	703b      	strb	r3, [r7, #0]
		  }


		  cmd_pec = pec15_calc(2, cmd);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff fda6 	bl	8000b28 <pec15_calc>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	80bb      	strh	r3, [r7, #4]
		  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	70bb      	strb	r3, [r7, #2]
		  cmd[3] = (uint8_t)(cmd_pec);
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	70fb      	strb	r3, [r7, #3]

		  wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000ff0:	f7ff fd78 	bl	8000ae4 <wakeup_idle>

		  outputCS(0);								// Set the CS to low to send data
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fd5b 	bl	8000ab0 <outputCS>
		  HAL_SPI_TransmitReceive(&spi_channel, (uint8_t *)cmd, (uint8_t *)data, REG_LEN_TOTAL_IC, HAL_MAX_DELAY);
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4639      	mov	r1, r7
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	9200      	str	r2, [sp, #0]
 8001006:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001008:	f107 0010 	add.w	r0, r7, #16
 800100c:	f005 f927 	bl	800625e <HAL_SPI_TransmitReceive>
		  outputCS(1);					//The Low state of the chip select pin is set
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fd4d 	bl	8000ab0 <outputCS>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001020:	b004      	add	sp, #16
 8001022:	4770      	bx	lr
 8001024:	20000000 	.word	0x20000000

08001028 <ltc6811_rav>:
	0: No PEC error detected

	-1: PEC error detected, retry read
* Inputs: The voltage of the cells array and the SPI channel used
*/
void ltc6811_rav(SPI_HandleTypeDef spi_channel, uint8_t *PEC_SLAVES, uint16_t *voltatjes, uint8_t GPIOx, uint8_t CH, uint8_t BLC, uint16_t VCELL_MIN){
 8001028:	b084      	sub	sp, #16
 800102a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800102e:	b0a1      	sub	sp, #132	@ 0x84
 8001030:	af1a      	add	r7, sp, #104	@ 0x68
 8001032:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 8001036:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800103a:	466b      	mov	r3, sp
 800103c:	461e      	mov	r6, r3
	uint8_t recieve[4+TOTAL_IC*8];
 800103e:	4b96      	ldr	r3, [pc, #600]	@ (8001298 <ltc6811_rav+0x270>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	1d19      	adds	r1, r3, #4
 8001046:	1e4b      	subs	r3, r1, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	460a      	mov	r2, r1
 800104c:	2300      	movs	r3, #0
 800104e:	4690      	mov	r8, r2
 8001050:	4699      	mov	r9, r3
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800105e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001066:	460a      	mov	r2, r1
 8001068:	2300      	movs	r3, #0
 800106a:	4614      	mov	r4, r2
 800106c:	461d      	mov	r5, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	00eb      	lsls	r3, r5, #3
 8001078:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800107c:	00e2      	lsls	r2, r4, #3
 800107e:	460b      	mov	r3, r1
 8001080:	3307      	adds	r3, #7
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	ebad 0d03 	sub.w	sp, sp, r3
 800108a:	ab1a      	add	r3, sp, #104	@ 0x68
 800108c:	3300      	adds	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
	uint8_t pec_array[6];
	uint8_t data_pec;
	uint8_t received_pec;

	 ltc6811_wrcfg(spi_channel, GPIOx, voltatjes, BLC, VCELL_MIN);
 8001090:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8001094:	9318      	str	r3, [sp, #96]	@ 0x60
 8001096:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 800109a:	9317      	str	r3, [sp, #92]	@ 0x5c
 800109c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80010a2:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80010a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80010a8:	4668      	mov	r0, sp
 80010aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010ae:	2254      	movs	r2, #84	@ 0x54
 80010b0:	4619      	mov	r1, r3
 80010b2:	f006 f885 	bl	80071c0 <memcpy>
 80010b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010bc:	f7ff fd6a 	bl	8000b94 <ltc6811_wrcfg>
	 ltc6811_adcv(spi_channel, CH);
 80010c0:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 80010c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80010c6:	4668      	mov	r0, sp
 80010c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010cc:	2254      	movs	r2, #84	@ 0x54
 80010ce:	4619      	mov	r1, r3
 80010d0:	f006 f876 	bl	80071c0 <memcpy>
 80010d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010da:	f7ff fef5 	bl	8000ec8 <ltc6811_adcv>
	 HAL_Delay(13);
 80010de:	200d      	movs	r0, #13
 80010e0:	f002 ffdc 	bl	800409c <HAL_Delay>

	 for(int reg = 0; reg<4; reg++){
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e0ca      	b.n	8001280 <ltc6811_rav+0x258>
		  ltc6811_rdcv_reg(spi_channel, reg+1, recieve);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	9216      	str	r2, [sp, #88]	@ 0x58
 80010f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80010f8:	4668      	mov	r0, sp
 80010fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010fe:	2254      	movs	r2, #84	@ 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	f006 f85d 	bl	80071c0 <memcpy>
 8001106:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	f7ff ff1a 	bl	8000f44 <ltc6811_rdcv_reg>
		  uint8_t sum = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	74fb      	strb	r3, [r7, #19]
		  uint8_t sum2 = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	74bb      	strb	r3, [r7, #18]
		  uint8_t ic = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	747b      	strb	r3, [r7, #17]
		  while(sum<6*TOTAL_IC){
 800111c:	e0a2      	b.n	8001264 <ltc6811_rav+0x23c>

			  received_pec = (recieve[sum2+6] << 8) + recieve[sum2+7]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800111e:	7cbb      	ldrb	r3, [r7, #18]
 8001120:	3307      	adds	r3, #7
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	71fb      	strb	r3, [r7, #7]

			  pec_array[0] = recieve[sum2];
 8001128:	7cbb      	ldrb	r3, [r7, #18]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	703b      	strb	r3, [r7, #0]
			  pec_array[1] = recieve[sum2+1];
 8001130:	7cbb      	ldrb	r3, [r7, #18]
 8001132:	3301      	adds	r3, #1
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	5cd3      	ldrb	r3, [r2, r3]
 8001138:	707b      	strb	r3, [r7, #1]
			  pec_array[2] = recieve[sum2+2];
 800113a:	7cbb      	ldrb	r3, [r7, #18]
 800113c:	3302      	adds	r3, #2
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	5cd3      	ldrb	r3, [r2, r3]
 8001142:	70bb      	strb	r3, [r7, #2]
			  pec_array[3] = recieve[sum2+3];
 8001144:	7cbb      	ldrb	r3, [r7, #18]
 8001146:	3303      	adds	r3, #3
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	70fb      	strb	r3, [r7, #3]
			  pec_array[4] = recieve[sum2+4];
 800114e:	7cbb      	ldrb	r3, [r7, #18]
 8001150:	3304      	adds	r3, #4
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	5cd3      	ldrb	r3, [r2, r3]
 8001156:	713b      	strb	r3, [r7, #4]
			  pec_array[5] = recieve[sum2+5];
 8001158:	7cbb      	ldrb	r3, [r7, #18]
 800115a:	3305      	adds	r3, #5
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	717b      	strb	r3, [r7, #5]

			  data_pec = pec15_calc(6, pec_array);
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	2006      	movs	r0, #6
 8001168:	f7ff fcde 	bl	8000b28 <pec15_calc>
 800116c:	4603      	mov	r3, r0
 800116e:	71bb      	strb	r3, [r7, #6]
	  	        if (received_pec != data_pec)
 8001170:	79fa      	ldrb	r2, [r7, #7]
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	429a      	cmp	r2, r3
 8001176:	d00a      	beq.n	800118e <ltc6811_rav+0x166>
	  	        {
	  	        	PEC_SLAVES[ic * 4 + reg] = 1;
 8001178:	7c7b      	ldrb	r3, [r7, #17]
 800117a:	009a      	lsls	r2, r3, #2
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4413      	add	r3, r2
 8001180:	461a      	mov	r2, r3
 8001182:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001186:	4413      	add	r3, r2
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e061      	b.n	8001252 <ltc6811_rav+0x22a>
	  	        }
	  	        else{
	  	        	voltatjes[12*ic+(reg*3)+2] = (recieve[sum2+5]<<8)+recieve[sum2+4];
 800118e:	7cbb      	ldrb	r3, [r7, #18]
 8001190:	3305      	adds	r3, #5
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b299      	uxth	r1, r3
 800119a:	7cbb      	ldrb	r3, [r7, #18]
 800119c:	3304      	adds	r3, #4
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	4618      	mov	r0, r3
 80011a4:	7c7a      	ldrb	r2, [r7, #17]
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	461c      	mov	r4, r3
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	4423      	add	r3, r4
 80011ba:	3302      	adds	r3, #2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80011c2:	4413      	add	r3, r2
 80011c4:	180a      	adds	r2, r1, r0
 80011c6:	b292      	uxth	r2, r2
 80011c8:	801a      	strh	r2, [r3, #0]
					voltatjes[12*ic+(reg*3)+1] = (recieve[sum2+3]<<8)+recieve[sum2+2];
 80011ca:	7cbb      	ldrb	r3, [r7, #18]
 80011cc:	3303      	adds	r3, #3
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b299      	uxth	r1, r3
 80011d6:	7cbb      	ldrb	r3, [r7, #18]
 80011d8:	3302      	adds	r3, #2
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	4618      	mov	r0, r3
 80011e0:	7c7a      	ldrb	r2, [r7, #17]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461c      	mov	r4, r3
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	4423      	add	r3, r4
 80011f6:	3301      	adds	r3, #1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80011fe:	4413      	add	r3, r2
 8001200:	180a      	adds	r2, r1, r0
 8001202:	b292      	uxth	r2, r2
 8001204:	801a      	strh	r2, [r3, #0]
					voltatjes[12*ic+(reg*3)] = (recieve[sum2+1]<<8)+recieve[sum2];
 8001206:	7cbb      	ldrb	r3, [r7, #18]
 8001208:	3301      	adds	r3, #1
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b299      	uxth	r1, r3
 8001212:	7cbb      	ldrb	r3, [r7, #18]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	5cd3      	ldrb	r3, [r2, r3]
 8001218:	4618      	mov	r0, r3
 800121a:	7c7a      	ldrb	r2, [r7, #17]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	461c      	mov	r4, r3
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	4423      	add	r3, r4
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001236:	4413      	add	r3, r2
 8001238:	180a      	adds	r2, r1, r0
 800123a:	b292      	uxth	r2, r2
 800123c:	801a      	strh	r2, [r3, #0]
					PEC_SLAVES[ic * 4 + reg] = 0;
 800123e:	7c7b      	ldrb	r3, [r7, #17]
 8001240:	009a      	lsls	r2, r3, #2
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	4413      	add	r3, r2
 8001246:	461a      	mov	r2, r3
 8001248:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800124c:	4413      	add	r3, r2
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
	  	        }
	  	      sum = sum+6;
 8001252:	7cfb      	ldrb	r3, [r7, #19]
 8001254:	3306      	adds	r3, #6
 8001256:	74fb      	strb	r3, [r7, #19]
	  	      sum2= sum2+8;
 8001258:	7cbb      	ldrb	r3, [r7, #18]
 800125a:	3308      	adds	r3, #8
 800125c:	74bb      	strb	r3, [r7, #18]
	  	      ic++;
 800125e:	7c7b      	ldrb	r3, [r7, #17]
 8001260:	3301      	adds	r3, #1
 8001262:	747b      	strb	r3, [r7, #17]
		  while(sum<6*TOTAL_IC){
 8001264:	7cfa      	ldrb	r2, [r7, #19]
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <ltc6811_rav+0x270>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	460b      	mov	r3, r1
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	440b      	add	r3, r1
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	429a      	cmp	r2, r3
 8001276:	f6ff af52 	blt.w	800111e <ltc6811_rav+0xf6>
	 for(int reg = 0; reg<4; reg++){
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b03      	cmp	r3, #3
 8001284:	f77f af31 	ble.w	80010ea <ltc6811_rav+0xc2>
 8001288:	46b5      	mov	sp, r6
		  }
	 }
}
 800128a:	bf00      	nop
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001294:	b004      	add	sp, #16
 8001296:	4770      	bx	lr
 8001298:	20000000 	.word	0x20000000

0800129c <ltc6811_adax>:
	|CMD[0:1] |  15   |  14   |  13   |  12   |  11   |  10   |   9   |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
	|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
	|ADAX:      |   0   |   0   |   0   |   0   |   0   |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  0    |   0   | CHG[2]| CHG[1]| CHG[0]|
* Inputs: The Conversion Mode (MD), GPIO Selection for ADC and the SPI channel which has to be used
*/
void ltc6811_adax(SPI_HandleTypeDef spi_channel){
 800129c:	b084      	sub	sp, #16
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	f107 0c10 	add.w	ip, r7, #16
 80012a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		uint8_t cmd[4];
		uint16_t cmd_pec;
		uint8_t md_bits;

		md_bits = (MD & 0x02) >> 1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71fb      	strb	r3, [r7, #7]
		cmd[0] = md_bits + 0x04;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	3304      	adds	r3, #4
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	703b      	strb	r3, [r7, #0]
		md_bits = (MD & 0x01) << 7;
 80012b8:	2300      	movs	r3, #0
 80012ba:	71fb      	strb	r3, [r7, #7]
		cmd[1] = md_bits + 0x60 + CHG ;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	3361      	adds	r3, #97	@ 0x61
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	707b      	strb	r3, [r7, #1]

		cmd_pec = pec15_calc(2, cmd);
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7ff fc2d 	bl	8000b28 <pec15_calc>
 80012ce:	4603      	mov	r3, r0
 80012d0:	80bb      	strh	r3, [r7, #4]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	70bb      	strb	r3, [r7, #2]
		cmd[3] = (uint8_t)(cmd_pec);
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	70fb      	strb	r3, [r7, #3]

		wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80012e2:	f7ff fbff 	bl	8000ae4 <wakeup_idle>

		outputCS(0);					//The Low state of the chip select pin is set
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fbe2 	bl	8000ab0 <outputCS>
		HAL_SPI_Transmit(&spi_channel, cmd, 4, HAL_MAX_DELAY);
 80012ec:	4639      	mov	r1, r7
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	2204      	movs	r2, #4
 80012f4:	f107 0010 	add.w	r0, r7, #16
 80012f8:	f004 fe43 	bl	8005f82 <HAL_SPI_Transmit>
		outputCS(1);					//The Low state of the chip select pin is set
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff fbd7 	bl	8000ab0 <outputCS>
	  }
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800130c:	b004      	add	sp, #16
 800130e:	4770      	bx	lr

08001310 <ltc6811_rdaux_reg>:
|RDAUXA:      |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   1   |   1   |   0   |   0   |
|RDAUXB:      |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   1   |   1   |   1   |   0   |
* Inputs: The register read, the number of ICs, the voltage of the cells array and the SPI channel used
*/
void ltc6811_rdaux_reg(SPI_HandleTypeDef spi_channel, uint8_t reg, uint8_t *data //Array of the unparsed auxiliary codes
					   ){
 8001310:	b084      	sub	sp, #16
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af02      	add	r7, sp, #8
 8001318:	f107 0c10 	add.w	ip, r7, #16
 800131c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  // SPI_HandleTypeDef hspi1;
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001320:	2308      	movs	r3, #8
 8001322:	71fb      	strb	r3, [r7, #7]
  uint8_t REG_LEN_TOTAL_IC = (4+(REG_LEN*TOTAL_IC));
 8001324:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <ltc6811_rdaux_reg+0xc8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	fb12 f303 	smulbb	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3304      	adds	r3, #4
 8001332:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint16_t cmd_pec;


  if (reg == 1)     //Read back auxiliary group A
 8001334:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001338:	2b01      	cmp	r3, #1
 800133a:	d104      	bne.n	8001346 <ltc6811_rdaux_reg+0x36>
  {
    cmd[1] = 0x0C;
 800133c:	230c      	movs	r3, #12
 800133e:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 8001340:	2300      	movs	r3, #0
 8001342:	703b      	strb	r3, [r7, #0]
 8001344:	e01e      	b.n	8001384 <ltc6811_rdaux_reg+0x74>
  }
  else if (reg == 2)  //Read back auxiliary group B
 8001346:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800134a:	2b02      	cmp	r3, #2
 800134c:	d104      	bne.n	8001358 <ltc6811_rdaux_reg+0x48>
  {
    cmd[1] = 0x0e;
 800134e:	230e      	movs	r3, #14
 8001350:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 8001352:	2300      	movs	r3, #0
 8001354:	703b      	strb	r3, [r7, #0]
 8001356:	e015      	b.n	8001384 <ltc6811_rdaux_reg+0x74>
  }
  else if (reg == 3)  //Read back auxiliary group B
 8001358:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800135c:	2b03      	cmp	r3, #3
 800135e:	d104      	bne.n	800136a <ltc6811_rdaux_reg+0x5a>
  {
    cmd[1] = 0x0D;
 8001360:	230d      	movs	r3, #13
 8001362:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 8001364:	2300      	movs	r3, #0
 8001366:	703b      	strb	r3, [r7, #0]
 8001368:	e00c      	b.n	8001384 <ltc6811_rdaux_reg+0x74>
  }
  else if (reg == 4)  //Read back auxiliary group B
 800136a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800136e:	2b04      	cmp	r3, #4
 8001370:	d104      	bne.n	800137c <ltc6811_rdaux_reg+0x6c>
  {
    cmd[1] = 0x0F;
 8001372:	230f      	movs	r3, #15
 8001374:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	703b      	strb	r3, [r7, #0]
 800137a:	e003      	b.n	8001384 <ltc6811_rdaux_reg+0x74>
  }
  else          //Read back auxiliary group A
  {
    cmd[1] = 0x0C;
 800137c:	230c      	movs	r3, #12
 800137e:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 8001380:	2300      	movs	r3, #0
 8001382:	703b      	strb	r3, [r7, #0]
  }

  cmd_pec = pec15_calc(2, cmd);
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff fbcd 	bl	8000b28 <pec15_calc>
 800138e:	4603      	mov	r3, r0
 8001390:	80bb      	strh	r3, [r7, #4]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec);
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	70fb      	strb	r3, [r7, #3]

	  wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80013a2:	f7ff fb9f 	bl	8000ae4 <wakeup_idle>

	  outputCS(0);								// Set the CS to low to send data
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fb82 	bl	8000ab0 <outputCS>
	  HAL_SPI_TransmitReceive(&spi_channel, (uint8_t *)cmd, (uint8_t *)data, REG_LEN_TOTAL_IC,HAL_MAX_DELAY); // Sends the CMD trough SPI
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4639      	mov	r1, r7
 80013b2:	f04f 32ff 	mov.w	r2, #4294967295
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80013ba:	f107 0010 	add.w	r0, r7, #16
 80013be:	f004 ff4e 	bl	800625e <HAL_SPI_TransmitReceive>
	  outputCS(1);								// Set the  CS to high
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff fb74 	bl	8000ab0 <outputCS>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013d2:	b004      	add	sp, #16
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000

080013dc <ltc6811_rat>:
//@return  int8_t, PEC Status
//  0: No PEC error detected
// -1: PEC error detected, retry read
// * Inputs: uint16_t aux_codes[][AUX_CHANNELS]//A two dimensional array of the gpio voltage codes.
*/
void ltc6811_rat(SPI_HandleTypeDef spi_channel, uint8_t *PEC_SLAVES, uint16_t *voltatjes, uint16_t *temperatures, uint8_t BLC, uint16_t VCELL_MIN) {
 80013dc:	b084      	sub	sp, #16
 80013de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013e2:	b0a7      	sub	sp, #156	@ 0x9c
 80013e4:	af1a      	add	r7, sp, #104	@ 0x68
 80013e6:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 80013ea:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80013ee:	466b      	mov	r3, sp
 80013f0:	461e      	mov	r6, r3
    uint8_t recieve[4 + TOTAL_IC * 8];
 80013f2:	4b7d      	ldr	r3, [pc, #500]	@ (80015e8 <ltc6811_rat+0x20c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1d19      	adds	r1, r3, #4
 80013fa:	1e4b      	subs	r3, r1, #1
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	460a      	mov	r2, r1
 8001400:	2300      	movs	r3, #0
 8001402:	4690      	mov	r8, r2
 8001404:	4699      	mov	r9, r3
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800141a:	460a      	mov	r2, r1
 800141c:	2300      	movs	r3, #0
 800141e:	4614      	mov	r4, r2
 8001420:	461d      	mov	r5, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	00eb      	lsls	r3, r5, #3
 800142c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001430:	00e2      	lsls	r2, r4, #3
 8001432:	460b      	mov	r3, r1
 8001434:	3307      	adds	r3, #7
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	ebad 0d03 	sub.w	sp, sp, r3
 800143e:	ab1a      	add	r3, sp, #104	@ 0x68
 8001440:	3300      	adds	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
    uint8_t pec_array[6];
    uint16_t data_pec;
    uint16_t received_pec;
    uint8_t GPIOx = 0b00000011;
 8001444:	2303      	movs	r3, #3
 8001446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    for (int gpio = 0; gpio < 8; gpio++) {
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800144e:	e0be      	b.n	80015ce <ltc6811_rat+0x1f2>
        for (int i = 0; i < 10; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
 8001454:	e01a      	b.n	800148c <ltc6811_rat+0xb0>
            ltc6811_wrcfg(spi_channel, GPIOx, voltatjes, BLC, VCELL_MIN);
 8001456:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 800145a:	9318      	str	r3, [sp, #96]	@ 0x60
 800145c:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8001460:	9317      	str	r3, [sp, #92]	@ 0x5c
 8001462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001466:	9316      	str	r3, [sp, #88]	@ 0x58
 8001468:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800146c:	9315      	str	r3, [sp, #84]	@ 0x54
 800146e:	4668      	mov	r0, sp
 8001470:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001474:	2254      	movs	r2, #84	@ 0x54
 8001476:	4619      	mov	r1, r3
 8001478:	f005 fea2 	bl	80071c0 <memcpy>
 800147c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001482:	f7ff fb87 	bl	8000b94 <ltc6811_wrcfg>
        for (int i = 0; i < 10; i++) {
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	3301      	adds	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	2b09      	cmp	r3, #9
 8001490:	dde1      	ble.n	8001456 <ltc6811_rat+0x7a>
        }

        delay_us(700);
 8001492:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001496:	f000 fe2b 	bl	80020f0 <delay_us>

        for (int i = 0; i < 4; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	e00e      	b.n	80014be <ltc6811_rat+0xe2>
            ltc6811_adax(spi_channel);
 80014a0:	4668      	mov	r0, sp
 80014a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014a6:	2254      	movs	r2, #84	@ 0x54
 80014a8:	4619      	mov	r1, r3
 80014aa:	f005 fe89 	bl	80071c0 <memcpy>
 80014ae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b4:	f7ff fef2 	bl	800129c <ltc6811_adax>
        for (int i = 0; i < 4; i++) {
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	3301      	adds	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	dded      	ble.n	80014a0 <ltc6811_rat+0xc4>
        }

        delay_us(2400);
 80014c4:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 80014c8:	f000 fe12 	bl	80020f0 <delay_us>

        uint8_t cont = 4;
 80014cc:	2304      	movs	r3, #4
 80014ce:	77fb      	strb	r3, [r7, #31]
        ltc6811_rdaux_reg(spi_channel, 1, recieve);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	9316      	str	r3, [sp, #88]	@ 0x58
 80014d4:	2301      	movs	r3, #1
 80014d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80014d8:	4668      	mov	r0, sp
 80014da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014de:	2254      	movs	r2, #84	@ 0x54
 80014e0:	4619      	mov	r1, r3
 80014e2:	f005 fe6d 	bl	80071c0 <memcpy>
 80014e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ec:	f7ff ff10 	bl	8001310 <ltc6811_rdaux_reg>

        for (int ic = 0; ic < TOTAL_IC; ic++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	e059      	b.n	80015aa <ltc6811_rat+0x1ce>
            received_pec = (recieve[cont + 6] << 8) + recieve[cont + 7];
 80014f6:	7ffb      	ldrb	r3, [r7, #31]
 80014f8:	3306      	adds	r3, #6
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	7ffa      	ldrb	r2, [r7, #31]
 8001504:	3207      	adds	r2, #7
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	5c8a      	ldrb	r2, [r1, r2]
 800150a:	4413      	add	r3, r2
 800150c:	817b      	strh	r3, [r7, #10]

            for (int i = 0; i < 6; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e00c      	b.n	800152e <ltc6811_rat+0x152>
                pec_array[i] = recieve[cont + i];
 8001514:	7ffa      	ldrb	r2, [r7, #31]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	4413      	add	r3, r2
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	5cd1      	ldrb	r1, [r2, r3]
 800151e:	463a      	mov	r2, r7
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4413      	add	r3, r2
 8001524:	460a      	mov	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; i++) {
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b05      	cmp	r3, #5
 8001532:	ddef      	ble.n	8001514 <ltc6811_rat+0x138>
            }

            data_pec = pec15_calc(6, pec_array);
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	2006      	movs	r0, #6
 800153a:	f7ff faf5 	bl	8000b28 <pec15_calc>
 800153e:	4603      	mov	r3, r0
 8001540:	813b      	strh	r3, [r7, #8]

            if (received_pec != data_pec) {
 8001542:	897a      	ldrh	r2, [r7, #10]
 8001544:	893b      	ldrh	r3, [r7, #8]
 8001546:	429a      	cmp	r2, r3
 8001548:	d00a      	beq.n	8001560 <ltc6811_rat+0x184>
                PEC_SLAVES[ic * 8 + gpio] = 1;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	00da      	lsls	r2, r3, #3
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	4413      	add	r3, r2
 8001552:	461a      	mov	r2, r3
 8001554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001558:	4413      	add	r3, r2
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e01e      	b.n	800159e <ltc6811_rat+0x1c2>
            } else {
                temperatures[gpio + ic * 8] = (recieve[cont + 1] << 8) + recieve[cont];
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	3301      	adds	r3, #1
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b29a      	uxth	r2, r3
 800156c:	7ffb      	ldrb	r3, [r7, #31]
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	4618      	mov	r0, r3
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	00d9      	lsls	r1, r3, #3
 8001578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157a:	440b      	add	r3, r1
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001582:	440b      	add	r3, r1
 8001584:	4402      	add	r2, r0
 8001586:	b292      	uxth	r2, r2
 8001588:	801a      	strh	r2, [r3, #0]
                PEC_SLAVES[ic * 8 + gpio] = 0;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	00da      	lsls	r2, r3, #3
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001590:	4413      	add	r3, r2
 8001592:	461a      	mov	r2, r3
 8001594:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001598:	4413      	add	r3, r2
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
            }

            cont += 8;
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	3308      	adds	r3, #8
 80015a2:	77fb      	strb	r3, [r7, #31]
        for (int ic = 0; ic < TOTAL_IC; ic++) {
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	3301      	adds	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <ltc6811_rat+0x20c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	db9f      	blt.n	80014f6 <ltc6811_rat+0x11a>
        }
        GPIOx = MUX_SWITCH(GPIOx);
 80015b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fa11 	bl	80009e4 <MUX_SWITCH>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (int gpio = 0; gpio < 8; gpio++) {
 80015c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ca:	3301      	adds	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d0:	2b07      	cmp	r3, #7
 80015d2:	f77f af3d 	ble.w	8001450 <ltc6811_rat+0x74>
 80015d6:	46b5      	mov	sp, r6
    }
}
 80015d8:	bf00      	nop
 80015da:	3734      	adds	r7, #52	@ 0x34
 80015dc:	46bd      	mov	sp, r7
 80015de:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015e2:	b004      	add	sp, #16
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000000 	.word	0x20000000

080015ec <CAN1_FILTER_INIT>:
 * 	Function: filtercanconfig
 * 	Purpose: Define the configurations needed to recieve data.
 * 	Inputs: Tha canfil that has to be configured
 */

void CAN1_FILTER_INIT(CAN_FilterTypeDef *canfil){
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	   canfil->FilterBank = 0;								// This refers to which filter is being configured. On this case is the filter number 0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
	   canfil->FilterMode = CAN_FILTERMODE_IDMASK;			// FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
	   canfil->FilterFIFOAssignment = CAN_FILTER_FIFO0;		// Defines at which FIFO is this filter being configured to.
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
	   canfil->FilterIdHigh = 0x0000;						// MSB: Most Significant Bit. When it's in 0, accepts all the messages
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
	   canfil->FilterIdLow = 0x0000;						// LSB: Least Significant Bit. When it's in 0, accepts all the messages
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
	   canfil->FilterMaskIdHigh = 0x0000;					// Most Significant Bit of the mask. When it's in 0, accepts all the messages
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
	   canfil->FilterMaskIdLow = 0x0000;					// Least Significant Bit of the mask. When it's in 0, accepts all the messages
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
	   canfil->FilterScale = CAN_FILTERSCALE_32BIT;			// Defines the Filter Scale. (use the 32 bits)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	61da      	str	r2, [r3, #28]
	   canfil->FilterActivation = ENABLE;					// This activates the filter as it is enable
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	621a      	str	r2, [r3, #32]
	   canfil->SlaveStartFilterBank = 14;					// Indicates the first filter slave number. In this case it is the principal filter.
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	220e      	movs	r2, #14
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <CAN2_FILTER_INIT>:

void CAN2_FILTER_INIT(CAN_FilterTypeDef *canfil){
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	   canfil->FilterBank = 14;								// This refers to which filter is being configured. On this case is the filter number 0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	220e      	movs	r2, #14
 8001648:	615a      	str	r2, [r3, #20]
	   canfil->FilterMode = CAN_FILTERMODE_IDMASK;			// FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
	   canfil->FilterFIFOAssignment = CAN_FILTER_FIFO1;		// Defines at which FIFO is this filter being configured to.
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	611a      	str	r2, [r3, #16]
	   canfil->FilterIdHigh = 0x0000;						// MSB: Most Significant Bit. When it's in 0, accepts all the messages
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
	   canfil->FilterIdLow = 0x0000;						// LSB: Least Significant Bit. When it's in 0, accepts all the messages
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
	   canfil->FilterMaskIdHigh = 0x0000;					// Most Significant Bit of the mask. When it's in 0, accepts all the messages
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
	   canfil->FilterMaskIdLow = 0x0000;					// Least Significant Bit of the mask. When it's in 0, accepts all the messages
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
	   canfil->FilterScale = CAN_FILTERSCALE_32BIT;			// Defines the Filter Scale. (use the 32 bits)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	61da      	str	r2, [r3, #28]
	   canfil->FilterActivation = ENABLE;					// This activates the filter as it is enable
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	621a      	str	r2, [r3, #32]
	   canfil->SlaveStartFilterBank = 14;					// Indicates the first filter slave number. In this case it is the principal filter.
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	220e      	movs	r2, #14
 800167e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <CAN1_CONFIG_INIT>:

void CAN1_CONFIG_INIT(CAN_FilterTypeDef canfil, CAN_HandleTypeDef hcan){
 800168c:	b084      	sub	sp, #16
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
 8001692:	f107 0c08 	add.w	ip, r7, #8
 8001696:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if(HAL_CAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
 800169a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800169e:	f107 0108 	add.w	r1, r7, #8
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fe1a 	bl	80042dc <HAL_CAN_ConfigFilter>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <CAN1_CONFIG_INIT+0x26>
 80016ae:	f002 fa21 	bl	8003af4 <Error_Handler>
    if(HAL_CAN_Start(&hcan) != HAL_OK)Error_Handler();
 80016b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fefc 	bl	80044b4 <HAL_CAN_Start>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <CAN1_CONFIG_INIT+0x3a>
 80016c2:	f002 fa17 	bl	8003af4 <Error_Handler>
    if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)Error_Handler();
 80016c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016ca:	2102      	movs	r1, #2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f917 	bl	8004900 <HAL_CAN_ActivateNotification>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <CAN1_CONFIG_INIT+0x50>
 80016d8:	f002 fa0c 	bl	8003af4 <Error_Handler>
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016e4:	b004      	add	sp, #16
 80016e6:	4770      	bx	lr

080016e8 <CAN2_CONFIG_INIT>:

void CAN2_CONFIG_INIT(CAN_FilterTypeDef canfil, CAN_HandleTypeDef hcan){
 80016e8:	b084      	sub	sp, #16
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	f107 0c08 	add.w	ip, r7, #8
 80016f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if(HAL_CAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
 80016f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016fa:	f107 0108 	add.w	r1, r7, #8
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fdec 	bl	80042dc <HAL_CAN_ConfigFilter>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <CAN2_CONFIG_INIT+0x26>
 800170a:	f002 f9f3 	bl	8003af4 <Error_Handler>
    if(HAL_CAN_Start(&hcan) != HAL_OK)Error_Handler();
 800170e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fece 	bl	80044b4 <HAL_CAN_Start>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <CAN2_CONFIG_INIT+0x3a>
 800171e:	f002 f9e9 	bl	8003af4 <Error_Handler>
    if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)Error_Handler();
 8001722:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001726:	2110      	movs	r1, #16
 8001728:	4618      	mov	r0, r3
 800172a:	f003 f8e9 	bl	8004900 <HAL_CAN_ActivateNotification>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <CAN2_CONFIG_INIT+0x50>
 8001734:	f002 f9de 	bl	8003af4 <Error_Handler>
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001740:	b004      	add	sp, #16
 8001742:	4770      	bx	lr

08001744 <message_cantx_TEMPERATURES_IT>:

void message_cantx_TEMPERATURES_IT(uint16_t COBID, uint8_t IC, CAN_HandleTypeDef hcan2, uint16_t *temperatures, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8001744:	b082      	sub	sp, #8
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	f107 0c10 	add.w	ip, r7, #16
 8001750:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001754:	4603      	mov	r3, r0
 8001756:	80fb      	strh	r3, [r7, #6]
 8001758:	460b      	mov	r3, r1
 800175a:	717b      	strb	r3, [r7, #5]
	TxHeader.DLC = 8;										//Number of bites to be transmitted max- 8. DLC: Data Length Code
 800175c:	2308      	movs	r3, #8
 800175e:	653b      	str	r3, [r7, #80]	@ 0x50
	TxHeader.IDE = 0;										//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001760:	2300      	movs	r3, #0
 8001762:	64bb      	str	r3, [r7, #72]	@ 0x48
	TxHeader.RTR = 0;										//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001764:	2300      	movs	r3, #0
 8001766:	64fb      	str	r3, [r7, #76]	@ 0x4c
	TxHeader.StdId = COBID;									//Standard identifier ID
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
	TxHeader.TransmitGlobalTime = DISABLE;					//A temporal mark in the CAN message is not added
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	TxData[0] = temperatures[0+IC*8] >> 8;
 8001772:	797b      	ldrb	r3, [r7, #5]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001778:	4413      	add	r3, r2
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b29b      	uxth	r3, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001784:	701a      	strb	r2, [r3, #0]
	TxData[1] = temperatures[0+IC*8];
 8001786:	797b      	ldrb	r3, [r7, #5]
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800178c:	4413      	add	r3, r2
 800178e:	881a      	ldrh	r2, [r3, #0]
 8001790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001792:	3301      	adds	r3, #1
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	701a      	strb	r2, [r3, #0]
	TxData[2] = temperatures[1+IC*8] >> 8;
 8001798:	797b      	ldrb	r3, [r7, #5]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	3301      	adds	r3, #1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017a2:	4413      	add	r3, r2
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017ac:	3302      	adds	r3, #2
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
	TxData[3] = temperatures[1+IC*8];
 80017b2:	797b      	ldrb	r3, [r7, #5]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017bc:	4413      	add	r3, r2
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017c2:	3303      	adds	r3, #3
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
	TxData[4] = temperatures[2+IC*8] >> 8;
 80017c8:	797b      	ldrb	r3, [r7, #5]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	3302      	adds	r3, #2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017d2:	4413      	add	r3, r2
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	b29a      	uxth	r2, r3
 80017da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017dc:	3304      	adds	r3, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
	TxData[5] = temperatures[2+IC*8];
 80017e2:	797b      	ldrb	r3, [r7, #5]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	3302      	adds	r3, #2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017ec:	4413      	add	r3, r2
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017f2:	3305      	adds	r3, #5
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
	TxData[6] = temperatures[3+IC*8] >> 8;
 80017f8:	797b      	ldrb	r3, [r7, #5]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	3303      	adds	r3, #3
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001802:	4413      	add	r3, r2
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	b29a      	uxth	r2, r3
 800180a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800180c:	3306      	adds	r3, #6
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
	TxData[7] = temperatures[3+IC*8];
 8001812:	797b      	ldrb	r3, [r7, #5]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	3303      	adds	r3, #3
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800181c:	4413      	add	r3, r2
 800181e:	881a      	ldrh	r2, [r3, #0]
 8001820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001822:	3307      	adds	r3, #7
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001828:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800182c:	4b40      	ldr	r3, [pc, #256]	@ (8001930 <message_cantx_TEMPERATURES_IT+0x1ec>)
 800182e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001830:	f107 0010 	add.w	r0, r7, #16
 8001834:	f002 fe82 	bl	800453c <HAL_CAN_AddTxMessage>
	COBID = COBID + 1;
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	3301      	adds	r3, #1
 800183c:	80fb      	strh	r3, [r7, #6]
	TxHeader.DLC = 8;										//Number of bites to be transmitted max- 8. DLC: Data Length Code
 800183e:	2308      	movs	r3, #8
 8001840:	653b      	str	r3, [r7, #80]	@ 0x50
	TxHeader.IDE = 0;										//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001842:	2300      	movs	r3, #0
 8001844:	64bb      	str	r3, [r7, #72]	@ 0x48
	TxHeader.RTR = 0;										//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001846:	2300      	movs	r3, #0
 8001848:	64fb      	str	r3, [r7, #76]	@ 0x4c
	TxHeader.StdId = COBID;									//Standard identifier ID
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	643b      	str	r3, [r7, #64]	@ 0x40
	TxHeader.TransmitGlobalTime = DISABLE;					//A temporal mark in the CAN message is not added
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	TxData[0] = temperatures[4+IC*8] >> 8;
 8001854:	797b      	ldrb	r3, [r7, #5]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	3304      	adds	r3, #4
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800185e:	4413      	add	r3, r2
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	b2da      	uxtb	r2, r3
 8001868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800186a:	701a      	strb	r2, [r3, #0]
	TxData[1] = temperatures[4+IC*8];
 800186c:	797b      	ldrb	r3, [r7, #5]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	3304      	adds	r3, #4
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001876:	4413      	add	r3, r2
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800187c:	3301      	adds	r3, #1
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
	TxData[2] = temperatures[5+IC*8] >> 8;
 8001882:	797b      	ldrb	r3, [r7, #5]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	3305      	adds	r3, #5
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800188c:	4413      	add	r3, r2
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001896:	3302      	adds	r3, #2
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
	TxData[3] = temperatures[5+IC*8];
 800189c:	797b      	ldrb	r3, [r7, #5]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	3305      	adds	r3, #5
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018a6:	4413      	add	r3, r2
 80018a8:	881a      	ldrh	r2, [r3, #0]
 80018aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ac:	3303      	adds	r3, #3
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]
	TxData[4] = temperatures[6+IC*8] >> 8;
 80018b2:	797b      	ldrb	r3, [r7, #5]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	3306      	adds	r3, #6
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018bc:	4413      	add	r3, r2
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c6:	3304      	adds	r3, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]
	TxData[5] = temperatures[6+IC*8];
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	3306      	adds	r3, #6
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018d6:	4413      	add	r3, r2
 80018d8:	881a      	ldrh	r2, [r3, #0]
 80018da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018dc:	3305      	adds	r3, #5
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
	TxData[6] = temperatures[7+IC*8] >> 8;
 80018e2:	797b      	ldrb	r3, [r7, #5]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	3307      	adds	r3, #7
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018ec:	4413      	add	r3, r2
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018f6:	3306      	adds	r3, #6
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	701a      	strb	r2, [r3, #0]
	TxData[7] = temperatures[7+IC*8];
 80018fc:	797b      	ldrb	r3, [r7, #5]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	3307      	adds	r3, #7
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001906:	4413      	add	r3, r2
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800190c:	3307      	adds	r3, #7
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001912:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <message_cantx_TEMPERATURES_IT+0x1ec>)
 8001918:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800191a:	f107 0010 	add.w	r0, r7, #16
 800191e:	f002 fe0d 	bl	800453c <HAL_CAN_AddTxMessage>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800192c:	b002      	add	sp, #8
 800192e:	4770      	bx	lr
 8001930:	200003a8 	.word	0x200003a8

08001934 <message_cantx_VOLTATJES_IT>:

void message_cantx_VOLTATJES_IT(uint16_t COBID, uint8_t IC, CAN_HandleTypeDef hcan2, uint16_t *voltatjes, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8001934:	b082      	sub	sp, #8
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	f107 0c10 	add.w	ip, r7, #16
 8001940:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001944:	4603      	mov	r3, r0
 8001946:	80fb      	strh	r3, [r7, #6]
 8001948:	460b      	mov	r3, r1
 800194a:	717b      	strb	r3, [r7, #5]
	TxHeader.DLC = 8;										//Number of bites to be transmitted max- 8. DLC: Data Length Code
 800194c:	2308      	movs	r3, #8
 800194e:	653b      	str	r3, [r7, #80]	@ 0x50
	TxHeader.IDE = 0;										//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001950:	2300      	movs	r3, #0
 8001952:	64bb      	str	r3, [r7, #72]	@ 0x48
	TxHeader.RTR = 0;										//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001954:	2300      	movs	r3, #0
 8001956:	64fb      	str	r3, [r7, #76]	@ 0x4c
	TxHeader.StdId = COBID;									//Standard identifier ID
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
	TxHeader.TransmitGlobalTime = DISABLE;					//A temporal mark in the CAN message is not added
 800195c:	2300      	movs	r3, #0
 800195e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	TxData[0] = voltatjes[0+IC*12] >> 8;
 8001962:	797a      	ldrb	r2, [r7, #5]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	461a      	mov	r2, r3
 800196e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001970:	4413      	add	r3, r2
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b29b      	uxth	r3, r3
 8001978:	b2da      	uxtb	r2, r3
 800197a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800197c:	701a      	strb	r2, [r3, #0]
	TxData[1] = voltatjes[0+IC*12];
 800197e:	797a      	ldrb	r2, [r7, #5]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	461a      	mov	r2, r3
 800198a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800198c:	4413      	add	r3, r2
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001992:	3301      	adds	r3, #1
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
	TxData[2] = voltatjes[1+IC*12] >> 8;
 8001998:	797a      	ldrb	r2, [r7, #5]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	3301      	adds	r3, #1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019a8:	4413      	add	r3, r2
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b2:	3302      	adds	r3, #2
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
	TxData[3] = voltatjes[1+IC*12];
 80019b8:	797a      	ldrb	r2, [r7, #5]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019c8:	4413      	add	r3, r2
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ce:	3303      	adds	r3, #3
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
	TxData[4] = voltatjes[2+IC*12] >> 8;
 80019d4:	797a      	ldrb	r2, [r7, #5]
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019e4:	4413      	add	r3, r2
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ee:	3304      	adds	r3, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]
	TxData[5] = voltatjes[2+IC*12];
 80019f4:	797a      	ldrb	r2, [r7, #5]
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a04:	4413      	add	r3, r2
 8001a06:	881a      	ldrh	r2, [r3, #0]
 8001a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a0a:	3305      	adds	r3, #5
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]
	TxData[6] = voltatjes[3+IC*12] >> 8;
 8001a10:	797a      	ldrb	r2, [r7, #5]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	3303      	adds	r3, #3
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a20:	4413      	add	r3, r2
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a2a:	3306      	adds	r3, #6
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]
	TxData[7] = voltatjes[3+IC*12];
 8001a30:	797a      	ldrb	r2, [r7, #5]
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	3303      	adds	r3, #3
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a40:	4413      	add	r3, r2
 8001a42:	881a      	ldrh	r2, [r3, #0]
 8001a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a46:	3307      	adds	r3, #7
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001a4c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001a50:	4b81      	ldr	r3, [pc, #516]	@ (8001c58 <message_cantx_VOLTATJES_IT+0x324>)
 8001a52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a54:	f107 0010 	add.w	r0, r7, #16
 8001a58:	f002 fd70 	bl	800453c <HAL_CAN_AddTxMessage>
	COBID = COBID + 1;
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	80fb      	strh	r3, [r7, #6]
	if((IC == 0) || (IC == 2) || (IC == 3) || (IC == 5) || (IC == 6) || (IC == 8) || (IC == 9) || (IC == 11) || (IC == 12) || (IC == 14)){
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01b      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a68:	797b      	ldrb	r3, [r7, #5]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d018      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a6e:	797b      	ldrb	r3, [r7, #5]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d015      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a74:	797b      	ldrb	r3, [r7, #5]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d012      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a7a:	797b      	ldrb	r3, [r7, #5]
 8001a7c:	2b06      	cmp	r3, #6
 8001a7e:	d00f      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a80:	797b      	ldrb	r3, [r7, #5]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d00c      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a86:	797b      	ldrb	r3, [r7, #5]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	d009      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a8c:	797b      	ldrb	r3, [r7, #5]
 8001a8e:	2b0b      	cmp	r3, #11
 8001a90:	d006      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a92:	797b      	ldrb	r3, [r7, #5]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d003      	beq.n	8001aa0 <message_cantx_VOLTATJES_IT+0x16c>
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	2b0e      	cmp	r3, #14
 8001a9c:	f040 80de 	bne.w	8001c5c <message_cantx_VOLTATJES_IT+0x328>
	TxHeader.DLC = 8;										//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	653b      	str	r3, [r7, #80]	@ 0x50
	TxHeader.IDE = 0;										//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
	TxHeader.RTR = 0;										//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	TxHeader.StdId = COBID;									//Standard identifier ID
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	643b      	str	r3, [r7, #64]	@ 0x40
	TxHeader.TransmitGlobalTime = DISABLE;					//A temporal mark in the CAN message is not added
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	TxData[0] = voltatjes[4+IC*12] >> 8;
 8001ab6:	797a      	ldrb	r2, [r7, #5]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ac6:	4413      	add	r3, r2
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ad2:	701a      	strb	r2, [r3, #0]
	TxData[1] = voltatjes[4+IC*12];
 8001ad4:	797a      	ldrb	r2, [r7, #5]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ae4:	4413      	add	r3, r2
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aea:	3301      	adds	r3, #1
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]
	TxData[2] = voltatjes[6+IC*12] >> 8;
 8001af0:	797a      	ldrb	r2, [r7, #5]
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	3306      	adds	r3, #6
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b00:	4413      	add	r3, r2
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
	TxData[3] = voltatjes[6+IC*12];
 8001b10:	797a      	ldrb	r2, [r7, #5]
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b20:	4413      	add	r3, r2
 8001b22:	881a      	ldrh	r2, [r3, #0]
 8001b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b26:	3303      	adds	r3, #3
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
	TxData[4] = voltatjes[7+IC*12] >> 8;
 8001b2c:	797a      	ldrb	r2, [r7, #5]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	3307      	adds	r3, #7
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b3c:	4413      	add	r3, r2
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b46:	3304      	adds	r3, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
	TxData[5] = voltatjes[7+IC*12];
 8001b4c:	797a      	ldrb	r2, [r7, #5]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	3307      	adds	r3, #7
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b5c:	4413      	add	r3, r2
 8001b5e:	881a      	ldrh	r2, [r3, #0]
 8001b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b62:	3305      	adds	r3, #5
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
	TxData[6] = voltatjes[8+IC*12] >> 8;
 8001b68:	797a      	ldrb	r2, [r7, #5]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3308      	adds	r3, #8
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b78:	4413      	add	r3, r2
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b82:	3306      	adds	r3, #6
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	701a      	strb	r2, [r3, #0]
	TxData[7] = voltatjes[8+IC*12];
 8001b88:	797a      	ldrb	r2, [r7, #5]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	3308      	adds	r3, #8
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b98:	4413      	add	r3, r2
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b9e:	3307      	adds	r3, #7
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001ba4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <message_cantx_VOLTATJES_IT+0x324>)
 8001baa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bac:	f107 0010 	add.w	r0, r7, #16
 8001bb0:	f002 fcc4 	bl	800453c <HAL_CAN_AddTxMessage>
	COBID = COBID + 1;
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	80fb      	strh	r3, [r7, #6]
	TxHeader.DLC = 4;									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8001bba:	2304      	movs	r3, #4
 8001bbc:	653b      	str	r3, [r7, #80]	@ 0x50
	TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
	TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	TxHeader.StdId = COBID;								//Standard identifier ID
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	643b      	str	r3, [r7, #64]	@ 0x40
	TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	TxData[0] = voltatjes[9+IC*12] >> 8;
 8001bd0:	797a      	ldrb	r2, [r7, #5]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	3309      	adds	r3, #9
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001be0:	4413      	add	r3, r2
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bec:	701a      	strb	r2, [r3, #0]
	TxData[1] = voltatjes[9+IC*12];
 8001bee:	797a      	ldrb	r2, [r7, #5]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	3309      	adds	r3, #9
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bfe:	4413      	add	r3, r2
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
	TxData[2] = voltatjes[10+IC*12] >> 8;
 8001c0a:	797a      	ldrb	r2, [r7, #5]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	330a      	adds	r3, #10
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c1a:	4413      	add	r3, r2
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c24:	3302      	adds	r3, #2
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
	TxData[3] = voltatjes[10+IC*12];
 8001c2a:	797a      	ldrb	r2, [r7, #5]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	330a      	adds	r3, #10
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c3a:	4413      	add	r3, r2
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c40:	3303      	adds	r3, #3
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001c46:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001c4a:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <message_cantx_VOLTATJES_IT+0x324>)
 8001c4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c4e:	f107 0010 	add.w	r0, r7, #16
 8001c52:	f002 fc73 	bl	800453c <HAL_CAN_AddTxMessage>
 8001c56:	e08c      	b.n	8001d72 <message_cantx_VOLTATJES_IT+0x43e>
 8001c58:	200003a8 	.word	0x200003a8
	}else{
	TxHeader.DLC = 8;									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	653b      	str	r3, [r7, #80]	@ 0x50
	TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001c60:	2300      	movs	r3, #0
 8001c62:	64bb      	str	r3, [r7, #72]	@ 0x48
	TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001c64:	2300      	movs	r3, #0
 8001c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
	TxHeader.StdId = COBID;								//Standard identifier ID
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	643b      	str	r3, [r7, #64]	@ 0x40
	TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	TxData[0] = voltatjes[6+IC*12] >> 8;
 8001c72:	797a      	ldrb	r2, [r7, #5]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3306      	adds	r3, #6
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c82:	4413      	add	r3, r2
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c8e:	701a      	strb	r2, [r3, #0]
	TxData[1] = voltatjes[6+IC*12];
 8001c90:	797a      	ldrb	r2, [r7, #5]
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3306      	adds	r3, #6
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ca0:	4413      	add	r3, r2
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
	TxData[2] = voltatjes[7+IC*12] >> 8;
 8001cac:	797a      	ldrb	r2, [r7, #5]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3307      	adds	r3, #7
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cbc:	4413      	add	r3, r2
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
	TxData[3] = voltatjes[7+IC*12];
 8001ccc:	797a      	ldrb	r2, [r7, #5]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cdc:	4413      	add	r3, r2
 8001cde:	881a      	ldrh	r2, [r3, #0]
 8001ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]
	TxData[4] = voltatjes[8+IC*12] >> 8;
 8001ce8:	797a      	ldrb	r2, [r7, #5]
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cf8:	4413      	add	r3, r2
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d02:	3304      	adds	r3, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
	TxData[5] = voltatjes[8+IC*12];
 8001d08:	797a      	ldrb	r2, [r7, #5]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	3308      	adds	r3, #8
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d18:	4413      	add	r3, r2
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d1e:	3305      	adds	r3, #5
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]
	TxData[6] = voltatjes[9+IC*12] >> 8;
 8001d24:	797a      	ldrb	r2, [r7, #5]
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	3309      	adds	r3, #9
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d34:	4413      	add	r3, r2
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3e:	3306      	adds	r3, #6
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
	TxData[7] = voltatjes[9+IC*12];
 8001d44:	797a      	ldrb	r2, [r7, #5]
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	3309      	adds	r3, #9
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d54:	4413      	add	r3, r2
 8001d56:	881a      	ldrh	r2, [r3, #0]
 8001d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d5a:	3307      	adds	r3, #7
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001d60:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <message_cantx_VOLTATJES_IT+0x44c>)
 8001d66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d68:	f107 0010 	add.w	r0, r7, #16
 8001d6c:	f002 fbe6 	bl	800453c <HAL_CAN_AddTxMessage>
	}
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d7c:	b002      	add	sp, #8
 8001d7e:	4770      	bx	lr
 8001d80:	200003a8 	.word	0x200003a8

08001d84 <message_cantx_SF>:

	void message_cantx_SF(CAN_HandleTypeDef hcan, uint8_t UT_FLAG, uint8_t OT_FLAG, uint8_t OV_FLAG, uint8_t UV_FLAG, uint8_t OC_FLAG, uint8_t PRECHARGE_RELAY, uint8_t AIRPLUS, uint8_t AIRMINUS, uint8_t ACCU_INTERLOCK,uint8_t BMS_OK, uint8_t SLAVE_DISC, uint8_t CURRENT_DISC, uint8_t SHOULD_CHARGE, uint8_t IS_CHARGING, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8001d84:	b084      	sub	sp, #16
 8001d86:	b590      	push	{r4, r7, lr}
 8001d88:	b087      	sub	sp, #28
 8001d8a:	af04      	add	r7, sp, #16
 8001d8c:	f107 0418 	add.w	r4, r7, #24
 8001d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint8_t missatge1 = combined_bits(UT_FLAG, OT_FLAG, OV_FLAG, UV_FLAG, OC_FLAG, PRECHARGE_RELAY, AIRPLUS, AIRMINUS);
 8001d94:	f897 404c 	ldrb.w	r4, [r7, #76]	@ 0x4c
 8001d98:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8001d9c:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8001da0:	f897 0040 	ldrb.w	r0, [r7, #64]	@ 0x40
 8001da4:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001da8:	9303      	str	r3, [sp, #12]
 8001daa:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	4623      	mov	r3, r4
 8001dbe:	f000 f95b 	bl	8002078 <combined_bits>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
		uint8_t missatge2 = combined_bits(ACCU_INTERLOCK, BMS_OK, SLAVE_DISC, CURRENT_DISC, SHOULD_CHARGE, IS_CHARGING, 0, 0);
 8001dc6:	f897 406c 	ldrb.w	r4, [r7, #108]	@ 0x6c
 8001dca:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 8001dce:	f897 1064 	ldrb.w	r1, [r7, #100]	@ 0x64
 8001dd2:	f897 0060 	ldrb.w	r0, [r7, #96]	@ 0x60
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9303      	str	r3, [sp, #12]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	4623      	mov	r3, r4
 8001dec:	f000 f944 	bl	8002078 <combined_bits>
 8001df0:	4603      	mov	r3, r0
 8001df2:	71bb      	strb	r3, [r7, #6]
		TxHeader.DLC = 2;									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8001df4:	2302      	movs	r3, #2
 8001df6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		TxHeader.StdId = SF;								//Standard identifier ID
 8001e06:	23e1      	movs	r3, #225	@ 0xe1
 8001e08:	67fb      	str	r3, [r7, #124]	@ 0x7c
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

		TxData[0] = missatge1;
 8001e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	701a      	strb	r2, [r3, #0]
		TxData[1] = missatge2;
 8001e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e18:	3301      	adds	r3, #1
 8001e1a:	79ba      	ldrb	r2, [r7, #6]
 8001e1c:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001e1e:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <message_cantx_SF+0xb8>)
 8001e24:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001e26:	f107 0018 	add.w	r0, r7, #24
 8001e2a:	f002 fb87 	bl	800453c <HAL_CAN_AddTxMessage>
	}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e38:	b004      	add	sp, #16
 8001e3a:	4770      	bx	lr
 8001e3c:	200003a8 	.word	0x200003a8

08001e40 <message_cantx_AIR_State>:

	void message_cantx_AIR_State(CAN_HandleTypeDef hcan1, uint8_t *AIRs_State, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8001e40:	b084      	sub	sp, #16
 8001e42:	b580      	push	{r7, lr}
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	f107 0c08 	add.w	ip, r7, #8
 8001e4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.DLC = 1; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8001e4e:	2301      	movs	r3, #1
 8001e50:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001e52:	2300      	movs	r3, #0
 8001e54:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001e56:	2300      	movs	r3, #0
 8001e58:	647b      	str	r3, [r7, #68]	@ 0x44
		TxHeader.StdId = 0x91;								//Standard identifier ID
 8001e5a:	2391      	movs	r3, #145	@ 0x91
 8001e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		TxData[0] = AIRs_State[0];
 8001e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e6a:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK);//Sent data. The TxData is the buffer where the data is saved
 8001e6c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <message_cantx_AIR_State+0x48>)
 8001e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e74:	f107 0008 	add.w	r0, r7, #8
 8001e78:	f002 fb60 	bl	800453c <HAL_CAN_AddTxMessage>
		}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e84:	b004      	add	sp, #16
 8001e86:	4770      	bx	lr
 8001e88:	200003a8 	.word	0x200003a8

08001e8c <message_cantx_Temperature_State>:
	/*
	 * 	Function: message_cantx_Temperature_State
	 * 	Purpose: Take the inputs and variables needed and send it via CAN.
	 * 	Inputs: Lowest, Highest and Average Temperatures
	 */
	void message_cantx_Temperature_State(CAN_HandleTypeDef hcan1, uint16_t Lowest_CellTemperature, uint16_t Highest_CellTemperature, uint16_t Average_CellTemperature, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	f107 0c08 	add.w	ip, r7, #8
 8001e96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.DLC = 6; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	653b      	str	r3, [r7, #80]	@ 0x50
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		TxHeader.StdId = 0x93;								//Standard identifier ID
 8001ea6:	2393      	movs	r3, #147	@ 0x93
 8001ea8:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		TxData[0] = Lowest_CellTemperature >> 8;
 8001eb0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eba:	701a      	strb	r2, [r3, #0]
		TxData[1] = Lowest_CellTemperature;
 8001ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]
		TxData[2] = Highest_CellTemperature >> 8;
 8001ec6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ece:	3302      	adds	r3, #2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]
		TxData[3] = Highest_CellTemperature;
 8001ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]
		TxData[4] = Average_CellTemperature >> 8;
 8001ede:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
		TxData[5] = Average_CellTemperature;
 8001eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eee:	3305      	adds	r3, #5
 8001ef0:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001ef6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <message_cantx_Temperature_State+0x88>)
 8001efc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001efe:	f107 0008 	add.w	r0, r7, #8
 8001f02:	f002 fb1b 	bl	800453c <HAL_CAN_AddTxMessage>
		}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f0e:	b004      	add	sp, #16
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200003a8 	.word	0x200003a8

08001f18 <message_cantx_Voltage_State>:
	 * 	Function: message_cantx_Voltage_State
	 * 	Purpose: Take the inputs and variables needed and send it via CAN.
	 * 	Inputs: Lowest, Lowest and Average Cell Voltage
	 */

	void message_cantx_Voltage_State(CAN_HandleTypeDef hcan1,uint16_t Lowest_CellVoltage, uint16_t Highest_CellVoltage, uint32_t Sum_Of_All_Voltages,uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8001f18:	b084      	sub	sp, #16
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	f107 0c08 	add.w	ip, r7, #8
 8001f22:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.DLC = 7; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8001f26:	2307      	movs	r3, #7
 8001f28:	653b      	str	r3, [r7, #80]	@ 0x50
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001f2e:	2300      	movs	r3, #0
 8001f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
		TxHeader.StdId = 0x92;								//Standard identifier ID
 8001f32:	2392      	movs	r3, #146	@ 0x92
 8001f34:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		TxData[0] = Lowest_CellVoltage >> 8;				//Sent data. The TxData is the buffer where the data is saved
 8001f3c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f46:	701a      	strb	r2, [r3, #0]
		TxData[1] = Lowest_CellVoltage;
 8001f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]
		TxData[2] = Highest_CellVoltage >> 8;
 8001f52:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]
		TxData[3] = Highest_CellVoltage;
 8001f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f62:	3303      	adds	r3, #3
 8001f64:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]
		TxData[4] = Sum_Of_All_Voltages >> 16;
 8001f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f6c:	0c1a      	lsrs	r2, r3, #16
 8001f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f70:	3304      	adds	r3, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]
		TxData[5] = Sum_Of_All_Voltages>> 8;
 8001f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f78:	0a1a      	lsrs	r2, r3, #8
 8001f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f7c:	3305      	adds	r3, #5
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
		TxData[6] = Sum_Of_All_Voltages;
 8001f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f84:	3306      	adds	r3, #6
 8001f86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK);
 8001f8c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <message_cantx_Voltage_State+0x90>)
 8001f92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f94:	f107 0008 	add.w	r0, r7, #8
 8001f98:	f002 fad0 	bl	800453c <HAL_CAN_AddTxMessage>
						//Sent data. The TxData is the buffer where the data is saved
		}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fa4:	b004      	add	sp, #16
 8001fa6:	4770      	bx	lr
 8001fa8:	200003a8 	.word	0x200003a8

08001fac <message_cantx_Keep_Alive>:
	 * 	Function: message_cantx_Keep_Alive
	 * 	Purpose: Take the inputs and variables needed and send it via CAN.
	 * 	Inputs: Keep Alive
	 */

	void message_cantx_Keep_Alive(CAN_HandleTypeDef hcan1, uint8_t Keep_Alive, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8001fac:	b084      	sub	sp, #16
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	f107 0c08 	add.w	ip, r7, #8
 8001fb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.DLC = 1; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8001fba:	2301      	movs	r3, #1
 8001fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	643b      	str	r3, [r7, #64]	@ 0x40
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	647b      	str	r3, [r7, #68]	@ 0x44
		TxHeader.StdId = 0xCA;								//Standard identifier ID
 8001fc6:	23ca      	movs	r3, #202	@ 0xca
 8001fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		TxData[0] = Keep_Alive;
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001fd6:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK); //Sent data. The TxData is the buffer where the data is saved
 8001fd8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <message_cantx_Keep_Alive+0x48>)
 8001fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fe0:	f107 0008 	add.w	r0, r7, #8
 8001fe4:	f002 faaa 	bl	800453c <HAL_CAN_AddTxMessage>
		}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ff0:	b004      	add	sp, #16
 8001ff2:	4770      	bx	lr
 8001ff4:	200003a8 	.word	0x200003a8

08001ff8 <message_cantx_Shutdown>:
	 * 	Function: message_cantx_Shutdown
	 * 	Purpose: Take the inputs and variables needed and send it via CAN.
	 * 	Inputs: Package Interlock, BMS (BMS_OK) and IMD -> Bits
	 */

	void message_cantx_Shutdown(CAN_HandleTypeDef hcan1, unsigned char Shutdown_PackageIntck, unsigned char Shutdown_BMS, unsigned char Shutdown_IMD, unsigned char AMS_LED, unsigned char IMD_LED, uint8_t *TxData, CAN_TxHeaderTypeDef TxHeader){
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	f107 0c08 	add.w	ip, r7, #8
 8002002:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.DLC = 1; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 8002006:	2301      	movs	r3, #1
 8002008:	65bb      	str	r3, [r7, #88]	@ 0x58
		TxHeader.IDE = 0;									//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 800200a:	2300      	movs	r3, #0
 800200c:	653b      	str	r3, [r7, #80]	@ 0x50
		TxHeader.RTR = 0;									//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 800200e:	2300      	movs	r3, #0
 8002010:	657b      	str	r3, [r7, #84]	@ 0x54
		TxHeader.StdId = 0x82;								//Standard identifier ID
 8002012:	2382      	movs	r3, #130	@ 0x82
 8002014:	64bb      	str	r3, [r7, #72]	@ 0x48
		TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 8002016:	2300      	movs	r3, #0
 8002018:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
		TxData[0] = (IMD_LED << 4 )|(AMS_LED << 3)|(Shutdown_IMD << 2) | (Shutdown_BMS << 1) | Shutdown_PackageIntck; 	//Sent data. The TxData is the buffer where the data is saved
 800201c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	b25a      	sxtb	r2, r3
 8002024:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	b25b      	sxtb	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b25a      	sxtb	r2, r3
 8002030:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	b25b      	sxtb	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b25a      	sxtb	r2, r3
 800203c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	b25b      	sxtb	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b25a      	sxtb	r2, r3
 8002048:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 800204c:	4313      	orrs	r3, r2
 800204e:	b25b      	sxtb	r3, r3
 8002050:	b2da      	uxtb	r2, r3
 8002052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002054:	701a      	strb	r2, [r3, #0]
					// Lectura de pinaje | Shutdown_BMS = BMS_OK | Lectura de pinaje
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK); //Sent data. The TxData is the buffer where the data is saved
 8002056:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <message_cantx_Shutdown+0x7c>)
 800205c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800205e:	f107 0008 	add.w	r0, r7, #8
 8002062:	f002 fa6b 	bl	800453c <HAL_CAN_AddTxMessage>
	}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800206e:	b004      	add	sp, #16
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200003a8 	.word	0x200003a8

08002078 <combined_bits>:

	uint8_t combined_bits(unsigned char bit1, unsigned char bit2, unsigned char bit3, unsigned char bit4,
						   unsigned char bit5, unsigned char bit6, unsigned char bit7, unsigned char bit8){
 8002078:	b490      	push	{r4, r7}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	4604      	mov	r4, r0
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4623      	mov	r3, r4
 8002088:	71fb      	strb	r3, [r7, #7]
 800208a:	4603      	mov	r3, r0
 800208c:	71bb      	strb	r3, [r7, #6]
 800208e:	460b      	mov	r3, r1
 8002090:	717b      	strb	r3, [r7, #5]
 8002092:	4613      	mov	r3, r2
 8002094:	713b      	strb	r3, [r7, #4]

		uint8_t byte = (uint8_t)(bit8 << 7) | (uint8_t)(bit7 << 6) | (uint8_t)(bit6 << 5) | (uint8_t)(bit5 << 4) |
 8002096:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800209a:	01db      	lsls	r3, r3, #7
 800209c:	b2da      	uxtb	r2, r3
 800209e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020a2:	019b      	lsls	r3, r3, #6
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	7f3b      	ldrb	r3, [r7, #28]
 80020ac:	015b      	lsls	r3, r3, #5
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	7e3b      	ldrb	r3, [r7, #24]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b2da      	uxtb	r2, r3
		                (uint8_t)(bit4 << 3) | (uint8_t)(bit3 << 2) | (uint8_t)(bit2 << 1) | (uint8_t)bit1;
 80020be:	793b      	ldrb	r3, [r7, #4]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	b2db      	uxtb	r3, r3
		uint8_t byte = (uint8_t)(bit8 << 7) | (uint8_t)(bit7 << 6) | (uint8_t)(bit6 << 5) | (uint8_t)(bit5 << 4) |
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b2da      	uxtb	r2, r3
		                (uint8_t)(bit4 << 3) | (uint8_t)(bit3 << 2) | (uint8_t)(bit2 << 1) | (uint8_t)bit1;
 80020c8:	797b      	ldrb	r3, [r7, #5]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	b2db      	uxtb	r3, r3
		uint8_t byte = (uint8_t)(bit8 << 7) | (uint8_t)(bit7 << 6) | (uint8_t)(bit6 << 5) | (uint8_t)(bit5 << 4) |
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
		                (uint8_t)(bit4 << 3) | (uint8_t)(bit3 << 2) | (uint8_t)(bit2 << 1) | (uint8_t)bit1;
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
		uint8_t byte = (uint8_t)(bit8 << 7) | (uint8_t)(bit7 << 6) | (uint8_t)(bit6 << 5) | (uint8_t)(bit5 << 4) |
 80020d8:	4313      	orrs	r3, r2
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	4313      	orrs	r3, r2
 80020e0:	73fb      	strb	r3, [r7, #15]

		// Bit 1 is the Least Significant Bit and it goes up until Bit 8 which has the Most Significant Bit
		// Byte -> [Bit 8  Bit 7  Bit 6  Bit 5  Bit 4  Bit 3  Bit 2  Bit 1]

		return byte;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
	}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc90      	pop	{r4, r7}
 80020ec:	4770      	bx	lr
	...

080020f0 <delay_us>:
/* Function: delay_us
 * Purpose: Generate a delay in microseconds
 * Inputs: The amount of microseconds of the loop, the timer which has to be used
 */
void delay_us (long int us)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	long int delay = us * (HAL_RCC_GetHCLKFreq() / 840000);
 80020f8:	f003 fe8c 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002130 <delay_us+0x40>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	0bdb      	lsrs	r3, r3, #15
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	60bb      	str	r3, [r7, #8]

	for(long int i = 0; i < delay; i += 18){
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e003      	b.n	800211c <delay_us+0x2c>
		__ASM("NOP");
 8002114:	bf00      	nop
	for(long int i = 0; i < delay; i += 18){
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3312      	adds	r3, #18
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf7      	blt.n	8002114 <delay_us+0x24>
	}
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	09fc8735 	.word	0x09fc8735

08002134 <Min_Volt>:

uint16_t Min_Volt(uint16_t *voltatjes){
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	uint16_t minimum_volt = 40000;
 800213c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002140:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < TOTAL_IC; i++){
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e066      	b.n	8002216 <Min_Volt+0xe2>
		for(int j = 0; j < 12; j++){
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e05d      	b.n	800220a <Min_Volt+0xd6>
			if((((j!=5) && (j!=11)) && ((i==0) ||(i==2) ||(i==3) ||(i==5) ||(i==6) ||(i==8) ||(i==9) ||(i==11) ||(i==12) ||(i==14))) || (((j!=4) && (j!=5) && (j!=10) && (j!=11)) && ((i==1) ||(i==4) ||(i==7) ||(i==10) ||(i==13)))){
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b05      	cmp	r3, #5
 8002152:	d020      	beq.n	8002196 <Min_Volt+0x62>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b0b      	cmp	r3, #11
 8002158:	d01d      	beq.n	8002196 <Min_Volt+0x62>
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d035      	beq.n	80021cc <Min_Volt+0x98>
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d032      	beq.n	80021cc <Min_Volt+0x98>
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d02f      	beq.n	80021cc <Min_Volt+0x98>
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d02c      	beq.n	80021cc <Min_Volt+0x98>
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b06      	cmp	r3, #6
 8002176:	d029      	beq.n	80021cc <Min_Volt+0x98>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b08      	cmp	r3, #8
 800217c:	d026      	beq.n	80021cc <Min_Volt+0x98>
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b09      	cmp	r3, #9
 8002182:	d023      	beq.n	80021cc <Min_Volt+0x98>
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b0b      	cmp	r3, #11
 8002188:	d020      	beq.n	80021cc <Min_Volt+0x98>
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d01d      	beq.n	80021cc <Min_Volt+0x98>
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b0e      	cmp	r3, #14
 8002194:	d01a      	beq.n	80021cc <Min_Volt+0x98>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d033      	beq.n	8002204 <Min_Volt+0xd0>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b05      	cmp	r3, #5
 80021a0:	d030      	beq.n	8002204 <Min_Volt+0xd0>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b0a      	cmp	r3, #10
 80021a6:	d02d      	beq.n	8002204 <Min_Volt+0xd0>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b0b      	cmp	r3, #11
 80021ac:	d02a      	beq.n	8002204 <Min_Volt+0xd0>
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d00b      	beq.n	80021cc <Min_Volt+0x98>
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d008      	beq.n	80021cc <Min_Volt+0x98>
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b07      	cmp	r3, #7
 80021be:	d005      	beq.n	80021cc <Min_Volt+0x98>
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b0a      	cmp	r3, #10
 80021c4:	d002      	beq.n	80021cc <Min_Volt+0x98>
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b0d      	cmp	r3, #13
 80021ca:	d11b      	bne.n	8002204 <Min_Volt+0xd0>
				if((voltatjes[12*i+j] <= minimum_volt)){
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	8afa      	ldrh	r2, [r7, #22]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d30c      	bcc.n	8002204 <Min_Volt+0xd0>
					minimum_volt = voltatjes[12*i+j];
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	461a      	mov	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	82fb      	strh	r3, [r7, #22]
		for(int j = 0; j < 12; j++){
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3301      	adds	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b0b      	cmp	r3, #11
 800220e:	dd9e      	ble.n	800214e <Min_Volt+0x1a>
	for(int i = 0; i < TOTAL_IC; i++){
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	3301      	adds	r3, #1
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <Min_Volt+0xfc>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4293      	cmp	r3, r2
 8002220:	db92      	blt.n	8002148 <Min_Volt+0x14>
				}
			}
		}
	  }
	return minimum_volt;
 8002222:	8afb      	ldrh	r3, [r7, #22]
}
 8002224:	4618      	mov	r0, r3
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	20000000 	.word	0x20000000

08002234 <Max_Volt>:


uint16_t Max_Volt(uint16_t *voltatjes){
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	uint16_t maximum_volt = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < TOTAL_IC; i++){
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e066      	b.n	8002314 <Max_Volt+0xe0>
		for(int j = 0; j < 12; j++){
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e05d      	b.n	8002308 <Max_Volt+0xd4>
			if((((j!=5) && (j!=11)) && ((i==0) ||(i==2) ||(i==3) ||(i==5) ||(i==6) ||(i==8) ||(i==9) ||(i==11) ||(i==12) ||(i==14))) || (((j!=4) && (j!=5) && (j!=10) && (j!=11)) && ((i==1) ||(i==4) ||(i==7) ||(i==10) ||(i==13)))){
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d020      	beq.n	8002294 <Max_Volt+0x60>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b0b      	cmp	r3, #11
 8002256:	d01d      	beq.n	8002294 <Max_Volt+0x60>
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d035      	beq.n	80022ca <Max_Volt+0x96>
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d032      	beq.n	80022ca <Max_Volt+0x96>
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d02f      	beq.n	80022ca <Max_Volt+0x96>
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d02c      	beq.n	80022ca <Max_Volt+0x96>
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d029      	beq.n	80022ca <Max_Volt+0x96>
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d026      	beq.n	80022ca <Max_Volt+0x96>
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b09      	cmp	r3, #9
 8002280:	d023      	beq.n	80022ca <Max_Volt+0x96>
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b0b      	cmp	r3, #11
 8002286:	d020      	beq.n	80022ca <Max_Volt+0x96>
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d01d      	beq.n	80022ca <Max_Volt+0x96>
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b0e      	cmp	r3, #14
 8002292:	d01a      	beq.n	80022ca <Max_Volt+0x96>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b04      	cmp	r3, #4
 8002298:	d033      	beq.n	8002302 <Max_Volt+0xce>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d030      	beq.n	8002302 <Max_Volt+0xce>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b0a      	cmp	r3, #10
 80022a4:	d02d      	beq.n	8002302 <Max_Volt+0xce>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b0b      	cmp	r3, #11
 80022aa:	d02a      	beq.n	8002302 <Max_Volt+0xce>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d00b      	beq.n	80022ca <Max_Volt+0x96>
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d008      	beq.n	80022ca <Max_Volt+0x96>
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d005      	beq.n	80022ca <Max_Volt+0x96>
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b0a      	cmp	r3, #10
 80022c2:	d002      	beq.n	80022ca <Max_Volt+0x96>
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b0d      	cmp	r3, #13
 80022c8:	d11b      	bne.n	8002302 <Max_Volt+0xce>
				if((voltatjes[12*i+j] >= maximum_volt)){
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	8afa      	ldrh	r2, [r7, #22]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d80c      	bhi.n	8002302 <Max_Volt+0xce>
					maximum_volt = voltatjes[12*i+j];
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	82fb      	strh	r3, [r7, #22]
		for(int j = 0; j < 12; j++){
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3301      	adds	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b0b      	cmp	r3, #11
 800230c:	dd9e      	ble.n	800224c <Max_Volt+0x18>
	for(int i = 0; i < TOTAL_IC; i++){
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3301      	adds	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <Max_Volt+0xfc>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4293      	cmp	r3, r2
 800231e:	db92      	blt.n	8002246 <Max_Volt+0x12>
				}
			}
		}
	  }
	return maximum_volt;
 8002320:	8afb      	ldrh	r3, [r7, #22]
}
 8002322:	4618      	mov	r0, r3
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000000 	.word	0x20000000

08002334 <Mean_Volt>:

float Mean_Volt(uint16_t *voltatjes){
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	float mean_volt = 0;
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
	uint8_t volt_length = 12*TOTAL_IC;
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <Mean_Volt+0x78>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	0052      	lsls	r2, r2, #1
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<volt_length; i++){
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	e011      	b.n	800237a <Mean_Volt+0x46>
		mean_volt = mean_volt + voltatjes[i];
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002368:	ed97 7a05 	vldr	s14, [r7, #20]
 800236c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002370:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i<volt_length; i++){
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	3301      	adds	r3, #1
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	429a      	cmp	r2, r3
 8002380:	dbe9      	blt.n	8002356 <Mean_Volt+0x22>
		}
	mean_volt = mean_volt/volt_length;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002394:	edc7 7a05 	vstr	s15, [r7, #20]
	return mean_volt;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	ee07 3a90 	vmov	s15, r3
	}
 800239e:	eeb0 0a67 	vmov.f32	s0, s15
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	20000000 	.word	0x20000000

080023b0 <Sum_Volt>:

uint32_t Sum_Volt(uint16_t *voltatjes){
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	uint32_t sum_volt = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
		uint8_t volt_length = 12*TOTAL_IC;
 80023bc:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <Sum_Volt+0x50>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	0052      	lsls	r2, r2, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	73fb      	strb	r3, [r7, #15]
		for(int i = 0; i<volt_length; i++){
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e00b      	b.n	80023e8 <Sum_Volt+0x38>
			sum_volt = sum_volt + voltatjes[i];
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4413      	add	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
		for(int i = 0; i<volt_length; i++){
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	3301      	adds	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	dbef      	blt.n	80023d0 <Sum_Volt+0x20>
		}
		return sum_volt;
 80023f0:	697b      	ldr	r3, [r7, #20]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000

08002404 <Min_Temp>:

uint16_t Min_Temp(uint16_t *temperatures){
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	uint16_t minimum_temp = temperatures[0];
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	82fb      	strh	r3, [r7, #22]
	uint8_t temp_length = 8*TOTAL_IC;
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <Min_Temp+0x54>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<temp_length; i++){
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e010      	b.n	8002442 <Min_Temp+0x3e>
		if(temperatures[i] <= minimum_temp){
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	8afa      	ldrh	r2, [r7, #22]
 800242c:	429a      	cmp	r2, r3
 800242e:	d305      	bcc.n	800243c <Min_Temp+0x38>
			minimum_temp = temperatures[i];
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<temp_length; i++){
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	3301      	adds	r3, #1
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbea      	blt.n	8002420 <Min_Temp+0x1c>
		}
	}
	return minimum_temp;
 800244a:	8afb      	ldrh	r3, [r7, #22]
}
 800244c:	4618      	mov	r0, r3
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	20000000 	.word	0x20000000

0800245c <Max_Temp>:

uint16_t Max_Temp(uint16_t *temperatures){
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	uint16_t maximum_temp = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	82fb      	strh	r3, [r7, #22]
	uint8_t temp_length = 8*TOTAL_IC;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <Max_Temp+0x54>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<temp_length; i++){
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	e010      	b.n	8002498 <Max_Temp+0x3c>
		if(temperatures[i] >= maximum_temp){
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	8afa      	ldrh	r2, [r7, #22]
 8002482:	429a      	cmp	r2, r3
 8002484:	d805      	bhi.n	8002492 <Max_Temp+0x36>
			maximum_temp = temperatures[i];
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<temp_length; i++){
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	3301      	adds	r3, #1
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbea      	blt.n	8002476 <Max_Temp+0x1a>
		}
	}
	return maximum_temp;
 80024a0:	8afb      	ldrh	r3, [r7, #22]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000

080024b4 <Mean_Temp>:

float Mean_Temp(uint16_t *temperatures){
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	uint16_t mean_temp = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	82fb      	strh	r3, [r7, #22]
	uint8_t temp_length = 8*TOTAL_IC;
 80024c0:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <Mean_Temp+0x5c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<temp_length; i++){
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e00a      	b.n	80024e4 <Mean_Temp+0x30>
		mean_temp = mean_temp + temperatures[i];
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	8afb      	ldrh	r3, [r7, #22]
 80024da:	4413      	add	r3, r2
 80024dc:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<temp_length; i++){
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3301      	adds	r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dbf0      	blt.n	80024ce <Mean_Temp+0x1a>
		}
	mean_temp = mean_temp/temp_length;
 80024ec:	8afa      	ldrh	r2, [r7, #22]
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80024f4:	82fb      	strh	r3, [r7, #22]
	return mean_temp;
 80024f6:	8afb      	ldrh	r3, [r7, #22]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
	}
 8002500:	eeb0 0a67 	vmov.f32	s0, s15
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000

08002514 <Conv_Temp>:



void Conv_Temp(uint16_t *temperatures, uint16_t *temperatures_conv){
 8002514:	b580      	push	{r7, lr}
 8002516:	f6ad 6d28 	subw	sp, sp, #3624	@ 0xe28
 800251a:	af00      	add	r7, sp, #0
 800251c:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 8002520:	f6a3 6324 	subw	r3, r3, #3620	@ 0xe24
 8002524:	6018      	str	r0, [r3, #0]
 8002526:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 800252a:	f6a3 6328 	subw	r3, r3, #3624	@ 0xe28
 800252e:	6019      	str	r1, [r3, #0]
	const uint16_t Temp_table[901]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900};
 8002530:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 8002534:	f2a3 7314 	subw	r3, r3, #1812	@ 0x714
 8002538:	4a3b      	ldr	r2, [pc, #236]	@ (8002628 <Conv_Temp+0x114>)
 800253a:	4618      	mov	r0, r3
 800253c:	4611      	mov	r1, r2
 800253e:	f240 730a 	movw	r3, #1802	@ 0x70a
 8002542:	461a      	mov	r2, r3
 8002544:	f004 fe3c 	bl	80071c0 <memcpy>
	const uint16_t Lec[901]={22950, 22923, 22895, 22868, 22840, 22812, 22784, 22757, 22729, 22701, 22673, 22645, 22617, 22589, 22560, 22532, 22504, 22475, 22447, 22419, 22390, 22361, 22333, 22304, 22275, 22247, 22218, 22189, 22160, 22131, 22102, 22073, 22044, 22014, 21985, 21956, 21927, 21897, 21868, 21838, 21809, 21779, 21750, 21720, 21690, 21660, 21630, 21601, 21571, 21541, 21511, 21481, 21451, 21420, 21390, 21360, 21330, 21299, 21269, 21239, 21208, 21178, 21147, 21116, 21086, 21055, 21024, 20994, 20963, 20932, 20901, 20870, 20839, 20808, 20777, 20746, 20715, 20684, 20653, 20621, 20590, 20559, 20527, 20496, 20465, 20433, 20402, 20370, 20339, 20307, 20275, 20244, 20212, 20180, 20149, 20117, 20085, 20053, 20021, 19989, 19957, 19925, 19893, 19861, 19829, 19797, 19765, 19733, 19700, 19668, 19636, 19604, 19571, 19539, 19507, 19474, 19442, 19409, 19377, 19344, 19312, 19279, 19247, 19214, 19181, 19149, 19116, 19083, 19051, 19018, 18985, 18952, 18920, 18887, 18854, 18821, 18788, 18755, 18722, 18690, 18657, 18624, 18591, 18558, 18525, 18492, 18459, 18425, 18392, 18359, 18326, 18293, 18260, 18227, 18194, 18160, 18127, 18094, 18061, 18028, 17994, 17961, 17928, 17894, 17861, 17828, 17795, 17761, 17728, 17695, 17661, 17628, 17595, 17561, 17528, 17495, 17461, 17428, 17394, 17361, 17328, 17294, 17261, 17227, 17194, 17161, 17127, 17094, 17060, 17027, 16994, 16960, 16927, 16893, 16860, 16826, 16793, 16760, 16726, 16693, 16659, 16626, 16593, 16559, 16526, 16492, 16459, 16426, 16392, 16359, 16326, 16292, 16259, 16226, 16192, 16159, 16126, 16092, 16059, 16026, 15992, 15959, 15926, 15893, 15859, 15826, 15793, 15760, 15727, 15693, 15660, 15627, 15594, 15561, 15528, 15495, 15461, 15428, 15395, 15362, 15329, 15296, 15263, 15230, 15197, 15164, 15132, 15099, 15066, 15033, 15000, 14967, 14934, 14902, 14869, 14836, 14803, 14771, 14738, 14705, 14673, 14640, 14607, 14575, 14542, 14510, 14477, 14445, 14412, 14380, 14347, 14315, 14283, 14250, 14218, 14186, 14153, 14121, 14089, 14057, 14025, 13993, 13961, 13928, 13896, 13864, 13832, 13800, 13769, 13737, 13705, 13673, 13641, 13609, 13578, 13546, 13514, 13483, 13451, 13419, 13388, 13356, 13325, 13293, 13262, 13231, 13199, 13168, 13137, 13105, 13074, 13043, 13012, 12981, 12950, 12919, 12888, 12857, 12826, 12795, 12764, 12733, 12702, 12672, 12641, 12610, 12580, 12549, 12518, 12488, 12457, 12427, 12397, 12366, 12336, 12306, 12275, 12245, 12215, 12185, 12155, 12125, 12095, 12065, 12035, 12005, 11975, 11945, 11916, 11886, 11856, 11827, 11797, 11768, 11738, 11709, 11679, 11650, 11621, 11591, 11562, 11533, 11504, 11475, 11446, 11417, 11388, 11359, 11330, 11301, 11272, 11243, 11215, 11186, 11158, 11129, 11100, 11072, 11044, 11015, 10987, 10959, 10930, 10902, 10874, 10846, 10818, 10790, 10762, 10734, 10706, 10678, 10651, 10623, 10595, 10568, 10540, 10513, 10485, 10458, 10430, 10403, 10376, 10349, 10321, 10294, 10267, 10240, 10213, 10186, 10159, 10133, 10106, 10079, 10052, 10026, 9999, 9973, 9946, 9920, 9893, 9867, 9841, 9815, 9788, 9762, 9736, 9710, 9684, 9658, 9632, 9607, 9581, 9555, 9529, 9504, 9478, 9453, 9427, 9402, 9376, 9351, 9326, 9301, 9276, 9250, 9225, 9200, 9175, 9151, 9126, 9101, 9076, 9051, 9027, 9002, 8978, 8953, 8929, 8904, 8880, 8856, 8832, 8807, 8783, 8759, 8735, 8711, 8687, 8663, 8640, 8616, 8592, 8569, 8545, 8521, 8498, 8474, 8451, 8428, 8404, 8381, 8358, 8335, 8312, 8289, 8266, 8243, 8220, 8197, 8174, 8152, 8129, 8107, 8084, 8061, 8039, 8017, 7994, 7972, 7950, 7928, 7905, 7883, 7861, 7839, 7817, 7795, 7774, 7752, 7730, 7708, 7687, 7665, 7644, 7622, 7601, 7579, 7558, 7537, 7516, 7495, 7473, 7452, 7431, 7410, 7389, 7369, 7348, 7327, 7306, 7286, 7265, 7245, 7224, 7204, 7183, 7163, 7143, 7122, 7102, 7082, 7062, 7042, 7022, 7002, 6982, 6962, 6942, 6923, 6903, 6883, 6864, 6844, 6825, 6805, 6786, 6767, 6747, 6728, 6709, 6690, 6671, 6651, 6632, 6614, 6595, 6576, 6557, 6538, 6520, 6501, 6482, 6464, 6445, 6427, 6408, 6390, 6372, 6353, 6335, 6317, 6299, 6281, 6263, 6245, 6227, 6209, 6191, 6173, 6156, 6138, 6120, 6103, 6085, 6068, 6050, 6033, 6015, 5998, 5981, 5963, 5946, 5929, 5912, 5895, 5878, 5861, 5844, 5827, 5810, 5794, 5777, 5760, 5744, 5727, 5711, 5694, 5678, 5661, 5645, 5629, 5612, 5596, 5580, 5564, 5548, 5532, 5516, 5500, 5484, 5468, 5452, 5436, 5421, 5405, 5389, 5374, 5358, 5343, 5327, 5312, 5296, 5281, 5266, 5250, 5235, 5220, 5205, 5190, 5175, 5160, 5145, 5130, 5115, 5100, 5085, 5071, 5056, 5041, 5027, 5012, 4997, 4983, 4968, 4954, 4940, 4925, 4911, 4897, 4883, 4868, 4854, 4840, 4826, 4812, 4798, 4784, 4770, 4756, 4743, 4729, 4715, 4701, 4688, 4674, 4661, 4647, 4634, 4620, 4607, 4593, 4580, 4567, 4553, 4540, 4527, 4514, 4501, 4488, 4475, 4462, 4449, 4436, 4423, 4410, 4397, 4385, 4372, 4359, 4346, 4334, 4321, 4309, 4296, 4284, 4271, 4259, 4247, 4234, 4222, 4210, 4197, 4185, 4173, 4161, 4149, 4137, 4125, 4113, 4101, 4089, 4077, 4065, 4054, 4042, 4030, 4018, 4007, 3995, 3984, 3972, 3961, 3949, 3938, 3926, 3915, 3903, 3892, 3881, 3870, 3858, 3847, 3836, 3825, 3814, 3803, 3792, 3781, 3770, 3759, 3748, 3737, 3727, 3716, 3705, 3694, 3684, 3673, 3662, 3652, 3641, 3631, 3620, 3610, 3599, 3589, 3578, 3568, 3558, 3548, 3537, 3527, 3517, 3507, 3497, 3487, 3477, 3466, 3456, 3447, 3437, 3427, 3417, 3407, 3397, 3387, 3378, 3368, 3358, 3348, 3339, 3329, 3320, 3310, 3301, 3291, 3282, 3272, 3263, 3253, 3244, 3235, 3225, 3216, 3207, 3198, 3188, 3179, 3170, 3161, 3152, 3143, 3134, 3125, 3116, 3107, 3098, 3089, 3080, 3072, 3063, 3054, 3045, 3036, 3028, 3019, 3010, 3002, 2993, 2985, 2976, 2968, 2959, 2951, 2942, 2934, 2925, 2917, 2909, 2900, 2892, 2884, 2876, 2868, 2859, 2851, 2843, 2835, 2827, 2819, 2811, 2803, 2795, 2787, 2779, 2771, 2763, 2755, 2747, 2740, 2732, 2724, 2716, 2709, 2701, 2693, 2686, 2678, 2670, 2663, 2655, 2648, 2640, 2633, 2625, 2618, 2610, 2603, 2596, 2588, 2581, 2574, 2566, 2559, 2552, 2545, 2537, 2530, 2523, 2516};
 8002548:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 800254c:	f5a3 6362 	sub.w	r3, r3, #3616	@ 0xe20
 8002550:	4a36      	ldr	r2, [pc, #216]	@ (800262c <Conv_Temp+0x118>)
 8002552:	4618      	mov	r0, r3
 8002554:	4611      	mov	r1, r2
 8002556:	f240 730a 	movw	r3, #1802	@ 0x70a
 800255a:	461a      	mov	r2, r3
 800255c:	f004 fe30 	bl	80071c0 <memcpy>

	   for(int a=0;a<8*TOTAL_IC;a++){
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3e24 	str.w	r3, [r7, #3620]	@ 0xe24
 8002566:	e052      	b.n	800260e <Conv_Temp+0xfa>
	   	      	int i = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3e20 	str.w	r3, [r7, #3616]	@ 0xe20
	   			while (i < 900 && temperatures[a] < Lec[i + 1]) {
 800256e:	e004      	b.n	800257a <Conv_Temp+0x66>
	   				i++;
 8002570:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	@ 0xe20
 8002574:	3301      	adds	r3, #1
 8002576:	f8c7 3e20 	str.w	r3, [r7, #3616]	@ 0xe20
	   			while (i < 900 && temperatures[a] < Lec[i + 1]) {
 800257a:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	@ 0xe20
 800257e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8002582:	da14      	bge.n	80025ae <Conv_Temp+0x9a>
 8002584:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 800258e:	f6a2 6224 	subw	r2, r2, #3620	@ 0xe24
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	4413      	add	r3, r2
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	@ 0xe20
 800259c:	1c59      	adds	r1, r3, #1
 800259e:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 80025a2:	f5a3 6362 	sub.w	r3, r3, #3616	@ 0xe20
 80025a6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3e0      	bcc.n	8002570 <Conv_Temp+0x5c>
	   			}
	   			temperatures_conv[a]=Temp_table[i];
 80025ae:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 80025b8:	f6a2 6228 	subw	r2, r2, #3624	@ 0xe28
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 80025c4:	f2a2 7214 	subw	r2, r2, #1812	@ 0x714
 80025c8:	f8d7 1e20 	ldr.w	r1, [r7, #3616]	@ 0xe20
 80025cc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80025d0:	801a      	strh	r2, [r3, #0]
	   			if(temperatures_conv[a] == 866){
 80025d2:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 80025dc:	f6a2 6228 	subw	r2, r2, #3624	@ 0xe28
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	f240 3262 	movw	r2, #866	@ 0x362
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10a      	bne.n	8002604 <Conv_Temp+0xf0>
	   				temperatures_conv[a] = 0;
 80025ee:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 80025f8:	f6a2 6228 	subw	r2, r2, #3624	@ 0xe28
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	2200      	movs	r2, #0
 8002602:	801a      	strh	r2, [r3, #0]
	   for(int a=0;a<8*TOTAL_IC;a++){
 8002604:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 8002608:	3301      	adds	r3, #1
 800260a:	f8c7 3e24 	str.w	r3, [r7, #3620]	@ 0xe24
 800260e:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <Conv_Temp+0x11c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	f8d7 2e24 	ldr.w	r2, [r7, #3620]	@ 0xe24
 8002618:	429a      	cmp	r2, r3
 800261a:	dba5      	blt.n	8002568 <Conv_Temp+0x54>
	   			}
	   	}
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	f607 6728 	addw	r7, r7, #3624	@ 0xe28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	080071f4 	.word	0x080071f4
 800262c:	08007900 	.word	0x08007900
 8002630:	20000000 	.word	0x20000000

08002634 <Curr_EVAL>:
int32_t Curr_EVAL(uint8_t *current_arr) {
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    int32_t current;
    current = (current_arr[3] + (current_arr[2] << 8)+ (current_arr[1] << 16)+ ((current_arr[0]^0X80)<< 24));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3303      	adds	r3, #3
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3302      	adds	r3, #2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3301      	adds	r3, #1
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	441a      	add	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7819      	ldrb	r1, [r3, #0]
 800265c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8002660:	404b      	eors	r3, r1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
    return current;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <OV_EVAL>:
#include "stdlib.h"
#include "LTC6811-1_eTechRacing.h"
#include "eTechRacing.h"


	uint8_t OV_EVAL(uint16_t *VOLTATGES, uint32_t *FLAG_ARRAY){
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
		uint8_t OV_FLAG = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < TOTAL_IC; i++){
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e043      	b.n	8002714 <OV_EVAL+0x9c>
			for(int j = 0; j < 12; j++){
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e03a      	b.n	8002708 <OV_EVAL+0x90>
				 if((VOLTATGES[12*i+j] >= VCELLMAX)){
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d916      	bls.n	80026e0 <OV_EVAL+0x68>
					  if ((HAL_GetTick() - FLAG_ARRAY[12*i+j]) >= ERROR_VOLT_TIME){
 80026b2:	f001 fce7 	bl	8004084 <HAL_GetTick>
 80026b6:	4601      	mov	r1, r0
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	1acb      	subs	r3, r1, r3
 80026d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026d6:	d314      	bcc.n	8002702 <OV_EVAL+0x8a>
						  OV_FLAG = 1;
 80026d8:	2301      	movs	r3, #1
 80026da:	75fb      	strb	r3, [r7, #23]
						  return OV_FLAG;
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	e020      	b.n	8002722 <OV_EVAL+0xaa>
					  }
				  }
				  else{
					  FLAG_ARRAY[12*i+j] = HAL_GetTick();
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	18d4      	adds	r4, r2, r3
 80026f6:	f001 fcc5 	bl	8004084 <HAL_GetTick>
 80026fa:	4603      	mov	r3, r0
 80026fc:	6023      	str	r3, [r4, #0]
					  OV_FLAG = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
			for(int j = 0; j < 12; j++){
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b0b      	cmp	r3, #11
 800270c:	ddc1      	ble.n	8002692 <OV_EVAL+0x1a>
		for(int i = 0; i < TOTAL_IC; i++){
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3301      	adds	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <OV_EVAL+0xb4>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4293      	cmp	r3, r2
 800271e:	dbb5      	blt.n	800268c <OV_EVAL+0x14>
				  }
			}
		  }
		return OV_FLAG;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
	}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <UV_EVAL>:

	 uint8_t UV_EVAL(uint16_t *VOLTATGES, uint32_t *FLAG_ARRAY){
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
		uint8_t UV_FLAG = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < TOTAL_IC; i++){
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	e095      	b.n	8002870 <UV_EVAL+0x140>
			for(int j = 0; j < 12; j++){
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e08b      	b.n	8002862 <UV_EVAL+0x132>
				if((((j!=5) && (j!=11)) && ((i==0) ||(i==2) ||(i==3) ||(i==5) ||(i==6) ||(i==8) ||(i==9) ||(i==11) ||(i==12) ||(i==14))) || (((j!=4) && (j!=5) && (j!=10) && (j!=11)) && ((i==1) ||(i==4) ||(i==7) ||(i==10) ||(i==13)))){
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d020      	beq.n	8002792 <UV_EVAL+0x62>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b0b      	cmp	r3, #11
 8002754:	d01d      	beq.n	8002792 <UV_EVAL+0x62>
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d035      	beq.n	80027c8 <UV_EVAL+0x98>
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d032      	beq.n	80027c8 <UV_EVAL+0x98>
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d02f      	beq.n	80027c8 <UV_EVAL+0x98>
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b05      	cmp	r3, #5
 800276c:	d02c      	beq.n	80027c8 <UV_EVAL+0x98>
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d029      	beq.n	80027c8 <UV_EVAL+0x98>
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d026      	beq.n	80027c8 <UV_EVAL+0x98>
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b09      	cmp	r3, #9
 800277e:	d023      	beq.n	80027c8 <UV_EVAL+0x98>
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b0b      	cmp	r3, #11
 8002784:	d020      	beq.n	80027c8 <UV_EVAL+0x98>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d01d      	beq.n	80027c8 <UV_EVAL+0x98>
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b0e      	cmp	r3, #14
 8002790:	d01a      	beq.n	80027c8 <UV_EVAL+0x98>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d050      	beq.n	800283a <UV_EVAL+0x10a>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d04d      	beq.n	800283a <UV_EVAL+0x10a>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b0a      	cmp	r3, #10
 80027a2:	d04a      	beq.n	800283a <UV_EVAL+0x10a>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b0b      	cmp	r3, #11
 80027a8:	d047      	beq.n	800283a <UV_EVAL+0x10a>
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d00b      	beq.n	80027c8 <UV_EVAL+0x98>
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d008      	beq.n	80027c8 <UV_EVAL+0x98>
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2b07      	cmp	r3, #7
 80027ba:	d005      	beq.n	80027c8 <UV_EVAL+0x98>
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b0a      	cmp	r3, #10
 80027c0:	d002      	beq.n	80027c8 <UV_EVAL+0x98>
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b0d      	cmp	r3, #13
 80027c6:	d138      	bne.n	800283a <UV_EVAL+0x10a>
				 if(VOLTATGES[12*i+j] >= VCELLMIN){
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	f646 525f 	movw	r2, #27999	@ 0x6d5f
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d911      	bls.n	800280c <UV_EVAL+0xdc>
					 FLAG_ARRAY[12*i+j] = HAL_GetTick();
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	18d4      	adds	r4, r2, r3
 80027fe:	f001 fc41 	bl	8004084 <HAL_GetTick>
 8002802:	4603      	mov	r3, r0
 8002804:	6023      	str	r3, [r4, #0]
				 		UV_FLAG = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
				 if(VOLTATGES[12*i+j] >= VCELLMIN){
 800280a:	e026      	b.n	800285a <UV_EVAL+0x12a>

					 }
				 else{
					 if ((HAL_GetTick() - FLAG_ARRAY[12*i+j]) >= ERROR_VOLT_TIME){
 800280c:	f001 fc3a 	bl	8004084 <HAL_GetTick>
 8002810:	4601      	mov	r1, r0
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	461a      	mov	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	4413      	add	r3, r2
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	1acb      	subs	r3, r1, r3
 800282c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002830:	d313      	bcc.n	800285a <UV_EVAL+0x12a>
				 		UV_FLAG = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
				 		return UV_FLAG;
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	e022      	b.n	8002880 <UV_EVAL+0x150>
					 }
				 }
				}

				else{
					FLAG_ARRAY[12*i+j] = HAL_GetTick();
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	461a      	mov	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	18d4      	adds	r4, r2, r3
 8002850:	f001 fc18 	bl	8004084 <HAL_GetTick>
 8002854:	4603      	mov	r3, r0
 8002856:	6023      	str	r3, [r4, #0]
 8002858:	e000      	b.n	800285c <UV_EVAL+0x12c>
				 if(VOLTATGES[12*i+j] >= VCELLMIN){
 800285a:	bf00      	nop
			for(int j = 0; j < 12; j++){
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3301      	adds	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b0b      	cmp	r3, #11
 8002866:	f77f af70 	ble.w	800274a <UV_EVAL+0x1a>
		for(int i = 0; i < TOTAL_IC; i++){
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	3301      	adds	r3, #1
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <UV_EVAL+0x158>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4293      	cmp	r3, r2
 800287a:	f6ff af63 	blt.w	8002744 <UV_EVAL+0x14>
				}
			}
		  }
		return UV_FLAG;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
	}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	20000000 	.word	0x20000000

0800288c <OT_EVAL>:



	uint8_t OT_EVAL(uint16_t *TEMPERATURES, uint32_t *FLAG_ARRAY){
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
			for(int i = 0; i <= 16; i ++){
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e021      	b.n	80028e0 <OT_EVAL+0x54>

					if (TEMPERATURES[i] <= 600){
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80028aa:	d808      	bhi.n	80028be <OT_EVAL+0x32>
						FLAG_ARRAY[i] = HAL_GetTick();
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	18d4      	adds	r4, r2, r3
 80028b4:	f001 fbe6 	bl	8004084 <HAL_GetTick>
 80028b8:	4603      	mov	r3, r0
 80028ba:	6023      	str	r3, [r4, #0]
 80028bc:	e00d      	b.n	80028da <OT_EVAL+0x4e>
					}
					else {
						if ((HAL_GetTick() - FLAG_ARRAY[i]) >= 1000){
 80028be:	f001 fbe1 	bl	8004084 <HAL_GetTick>
 80028c2:	4601      	mov	r1, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	1acb      	subs	r3, r1, r3
 80028d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028d4:	d301      	bcc.n	80028da <OT_EVAL+0x4e>
							return 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e006      	b.n	80028e8 <OT_EVAL+0x5c>
			for(int i = 0; i <= 16; i ++){
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3301      	adds	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	ddda      	ble.n	800289c <OT_EVAL+0x10>
						}
					}
			}
			return 0;
 80028e6:	2300      	movs	r3, #0
		}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd90      	pop	{r4, r7, pc}

080028f0 <ETAS_SYNC_EVAL>:

	uint8_t ETAS_SYNC_EVAL(uint32_t *etas_flag_arr){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

		if((HAL_GetTick() - etas_flag_arr[0]) >= ETAS_SYNC_MAX_TIME){
 80028f8:	f001 fbc4 	bl	8004084 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2bc7      	cmp	r3, #199	@ 0xc7
 8002906:	d901      	bls.n	800290c <ETAS_SYNC_EVAL+0x1c>
			return 1;
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <ETAS_SYNC_EVAL+0x1e>
		}
		return 0;
 800290c:	2300      	movs	r3, #0
	}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <CURR_SYNC_EVAL>:

	uint8_t CURR_SYNC_EVAL(uint32_t *curr_flag_arr){
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]

		if((HAL_GetTick() - curr_flag_arr[0]) >= CURR_SYNC_MAX_TIME){
 800291e:	f001 fbb1 	bl	8004084 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800292e:	d301      	bcc.n	8002934 <CURR_SYNC_EVAL+0x1e>
			return 1;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <CURR_SYNC_EVAL+0x20>
		}
		return 0;
 8002934:	2300      	movs	r3, #0
	}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <BALANCING_SYNC_EVAL>:

	uint8_t BALANCING_SYNC_EVAL(uint32_t *balancing_flag_arr){
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

		if((HAL_GetTick() - balancing_flag_arr[0]) >= CAN_BALANCING_SYNC_TIME){
 8002946:	f001 fb9d 	bl	8004084 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002956:	d301      	bcc.n	800295c <BALANCING_SYNC_EVAL+0x1e>
			return 0;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <BALANCING_SYNC_EVAL+0x20>
		}
		return 1;
 800295c:	2301      	movs	r3, #1
	}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <detection_BMSerror_OverCurrent>:

	//Condició1: Si pasa de 136A durant 500ms -> Salta error
	//Condició2: Si en algun punt passa de 200A
	uint8_t detection_BMSerror_OverCurrent(int32_t Current, uint32_t *FLAG_ARRAY){				// Time of the Error Temperature
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
		if (Current >= MAXCURRENT){
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a0e      	ldr	r2, [pc, #56]	@ (80029b0 <detection_BMSerror_OverCurrent+0x48>)
 8002976:	4293      	cmp	r3, r2
 8002978:	dd01      	ble.n	800297e <detection_BMSerror_OverCurrent+0x16>
			return 1;
 800297a:	2301      	movs	r3, #1
 800297c:	e014      	b.n	80029a8 <detection_BMSerror_OverCurrent+0x40>
		}
		if((Current >= HIGHCURRENT)){
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0c      	ldr	r2, [pc, #48]	@ (80029b4 <detection_BMSerror_OverCurrent+0x4c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	dd0a      	ble.n	800299c <detection_BMSerror_OverCurrent+0x34>
			if (HAL_GetTick() - FLAG_ARRAY[0] > ERROR_CURRENT_TIME){
 8002986:	f001 fb7d 	bl	8004084 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002996:	d906      	bls.n	80029a6 <detection_BMSerror_OverCurrent+0x3e>
						return 1;
 8002998:	2301      	movs	r3, #1
 800299a:	e005      	b.n	80029a8 <detection_BMSerror_OverCurrent+0x40>
			}
		}
		 else {
			FLAG_ARRAY[0] = HAL_GetTick();
 800299c:	f001 fb72 	bl	8004084 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	601a      	str	r2, [r3, #0]
		}
		return 0;
 80029a6:	2300      	movs	r3, #0
	}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	00030d3f 	.word	0x00030d3f
 80029b4:	00020f57 	.word	0x00020f57

080029b8 <slave_disc>:

	uint8_t slave_disc(uint8_t *PEC_SLAVES_Volt,uint8_t *PEC_SLAVES_Temp, uint32_t *FLAG_ARRAY_Volt,uint32_t *FLAG_ARRAY_Temp){
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
		uint8_t flag = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	77fb      	strb	r3, [r7, #31]
		for(int i = 0; i < 8*TOTAL_IC; i++){
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e01f      	b.n	8002a10 <slave_disc+0x58>
			if(PEC_SLAVES_Temp[i] == 1){
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	4413      	add	r3, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10e      	bne.n	80029fa <slave_disc+0x42>
				  if((HAL_GetTick() - FLAG_ARRAY_Temp[i]) >= SLAVE_DISC_TIME){
 80029dc:	f001 fb52 	bl	8004084 <HAL_GetTick>
 80029e0:	4601      	mov	r1, r0
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1acb      	subs	r3, r1, r3
 80029ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80029f2:	d30a      	bcc.n	8002a0a <slave_disc+0x52>
					  flag=1;
 80029f4:	2301      	movs	r3, #1
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e007      	b.n	8002a0a <slave_disc+0x52>
				  }
			}
				  else
					  FLAG_ARRAY_Temp[i] = HAL_GetTick();
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	18d4      	adds	r4, r2, r3
 8002a02:	f001 fb3f 	bl	8004084 <HAL_GetTick>
 8002a06:	4603      	mov	r3, r0
 8002a08:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < 8*TOTAL_IC; i++){
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <slave_disc+0xc0>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dbd9      	blt.n	80029d0 <slave_disc+0x18>


		  }
		for(int i = 0; i < 4*TOTAL_IC; i++){
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	e01f      	b.n	8002a62 <slave_disc+0xaa>
					if(PEC_SLAVES_Volt[i] == 1){
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10e      	bne.n	8002a4c <slave_disc+0x94>
						  if((HAL_GetTick() - FLAG_ARRAY_Volt[i]) >= SLAVE_DISC_TIME){
 8002a2e:	f001 fb29 	bl	8004084 <HAL_GetTick>
 8002a32:	4601      	mov	r1, r0
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1acb      	subs	r3, r1, r3
 8002a40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a44:	d30a      	bcc.n	8002a5c <slave_disc+0xa4>
							  flag = 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e007      	b.n	8002a5c <slave_disc+0xa4>
						  }
					}
					else
						FLAG_ARRAY_Volt[i] = HAL_GetTick();
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	18d4      	adds	r4, r2, r3
 8002a54:	f001 fb16 	bl	8004084 <HAL_GetTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < 4*TOTAL_IC; i++){
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <slave_disc+0xc0>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	dbd9      	blt.n	8002a22 <slave_disc+0x6a>
				  }
		return flag;
 8002a6e:	7ffb      	ldrb	r3, [r7, #31]
	}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3724      	adds	r7, #36	@ 0x24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd90      	pop	{r4, r7, pc}
 8002a78:	20000000 	.word	0x20000000

08002a7c <current_error_eval>:

	uint8_t current_error_eval(uint8_t *current_error, uint32_t *FLAG_ARRAY){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
			if(current_error[0] == 1){
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d10a      	bne.n	8002aa4 <current_error_eval+0x28>
				  if((HAL_GetTick() - FLAG_ARRAY[0]) >= SLAVE_DISC_TIME){
 8002a8e:	f001 faf9 	bl	8004084 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a9e:	d308      	bcc.n	8002ab2 <current_error_eval+0x36>
					  return 1;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e007      	b.n	8002ab4 <current_error_eval+0x38>
				  }
			}
				  else
				  {
					  FLAG_ARRAY[0] = HAL_GetTick();
 8002aa4:	f001 faee 	bl	8004084 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	601a      	str	r2, [r3, #0]
					  return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e000      	b.n	8002ab4 <current_error_eval+0x38>
				  }
			return 0;
 8002ab2:	2300      	movs	r3, #0
	}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	b09d      	sub	sp, #116	@ 0x74
 8002ac0:	af1c      	add	r7, sp, #112	@ 0x70
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002ac2:	f000 ffeb 	bl	8003a9c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ac6:	f001 fa8c 	bl	8003fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aca:	f000 fa91 	bl	8002ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ace:	f000 fbf1 	bl	80032b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ad2:	f000 fb69 	bl	80031a8 <MX_SPI1_Init>
  MX_CAN1_Init();
 8002ad6:	f000 fafb 	bl	80030d0 <MX_CAN1_Init>
  MX_TIM14_Init();
 8002ada:	f000 fbc7 	bl	800326c <MX_TIM14_Init>
  MX_CAN2_Init();
 8002ade:	f000 fb2d 	bl	800313c <MX_CAN2_Init>
  MX_TIM13_Init();
 8002ae2:	f000 fb9f 	bl	8003224 <MX_TIM13_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //INICIALITZACIÓ DE CAN-------------------------------------------------------------------------

  CAN1_FILTER_INIT(&canfil);											//CAN 1 Filter
 8002ae6:	4848      	ldr	r0, [pc, #288]	@ (8002c08 <main+0x14c>)
 8002ae8:	f7fe fd80 	bl	80015ec <CAN1_FILTER_INIT>
  CAN2_FILTER_INIT(&canfil2);											//CAN 2 Filter
 8002aec:	4847      	ldr	r0, [pc, #284]	@ (8002c0c <main+0x150>)
 8002aee:	f7fe fda5 	bl	800163c <CAN2_FILTER_INIT>

  CAN1_CONFIG_INIT(canfil, hcan1);										//CAN 1 Configuration - Initialization
 8002af2:	4e45      	ldr	r6, [pc, #276]	@ (8002c08 <main+0x14c>)
 8002af4:	4b46      	ldr	r3, [pc, #280]	@ (8002c10 <main+0x154>)
 8002af6:	ac06      	add	r4, sp, #24
 8002af8:	461d      	mov	r5, r3
 8002afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b06:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b0a:	466d      	mov	r5, sp
 8002b0c:	f106 0410 	add.w	r4, r6, #16
 8002b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b20:	f7fe fdb4 	bl	800168c <CAN1_CONFIG_INIT>
  CAN2_CONFIG_INIT(canfil2, hcan2);										//CAN 2 Configuration - Initialization
 8002b24:	4e39      	ldr	r6, [pc, #228]	@ (8002c0c <main+0x150>)
 8002b26:	4b3b      	ldr	r3, [pc, #236]	@ (8002c14 <main+0x158>)
 8002b28:	ac06      	add	r4, sp, #24
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b38:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b3c:	466d      	mov	r5, sp
 8002b3e:	f106 0410 	add.w	r4, r6, #16
 8002b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b4e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b52:	f7fe fdc9 	bl	80016e8 <CAN2_CONFIG_INIT>

  if(HAL_TIM_Base_Start_IT(&htim14) != HAL_OK) Error_Handler();			//TIMER 14 Initialization
 8002b56:	4830      	ldr	r0, [pc, #192]	@ (8002c18 <main+0x15c>)
 8002b58:	f004 f888 	bl	8006c6c <HAL_TIM_Base_Start_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <main+0xaa>
 8002b62:	f000 ffc7 	bl	8003af4 <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&htim13) != HAL_OK) Error_Handler();			//TIMER 13 Initialization
 8002b66:	482d      	ldr	r0, [pc, #180]	@ (8002c1c <main+0x160>)
 8002b68:	f004 f880 	bl	8006c6c <HAL_TIM_Base_Start_IT>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <main+0xba>
 8002b72:	f000 ffbf 	bl	8003af4 <Error_Handler>

  HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);		//Close BMS relay
 8002b76:	2200      	movs	r2, #0
 8002b78:	2108      	movs	r1, #8
 8002b7a:	4829      	ldr	r0, [pc, #164]	@ (8002c20 <main+0x164>)
 8002b7c:	f002 fc80 	bl	8005480 <HAL_GPIO_WritePin>

  outputCS(1);															//Set CS high
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7fd ff95 	bl	8000ab0 <outputCS>
  while (1)
  {
//Voltage & Temperature lectures--------------------------------------------------------------------
	  ltc6811_rav(hspi1, PEC_SLAVES_Volt, voltatjes, GPIOx, CH, BLC, min_volt);	//Voltage lectures
 8002b86:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <main+0x168>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4a27      	ldr	r2, [pc, #156]	@ (8002c28 <main+0x16c>)
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	4927      	ldr	r1, [pc, #156]	@ (8002c2c <main+0x170>)
 8002b90:	7809      	ldrb	r1, [r1, #0]
 8002b92:	4827      	ldr	r0, [pc, #156]	@ (8002c30 <main+0x174>)
 8002b94:	8800      	ldrh	r0, [r0, #0]
 8002b96:	4c27      	ldr	r4, [pc, #156]	@ (8002c34 <main+0x178>)
 8002b98:	901a      	str	r0, [sp, #104]	@ 0x68
 8002b9a:	9119      	str	r1, [sp, #100]	@ 0x64
 8002b9c:	9218      	str	r2, [sp, #96]	@ 0x60
 8002b9e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002ba0:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <main+0x17c>)
 8002ba2:	9316      	str	r3, [sp, #88]	@ 0x58
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <main+0x180>)
 8002ba6:	9315      	str	r3, [sp, #84]	@ 0x54
 8002ba8:	4668      	mov	r0, sp
 8002baa:	f104 0310 	add.w	r3, r4, #16
 8002bae:	2254      	movs	r2, #84	@ 0x54
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f004 fb05 	bl	80071c0 <memcpy>
 8002bb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bba:	f7fe fa35 	bl	8001028 <ltc6811_rav>

//Voltage & Temperature lectures--------------------------------------------------------------------
	   ltc6811_rat(hspi1, PEC_SLAVES_Temp, voltatjes, temperatures, BLC, min_volt); //Temperature lectures
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <main+0x170>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <main+0x174>)
 8002bc4:	8812      	ldrh	r2, [r2, #0]
 8002bc6:	4c1b      	ldr	r4, [pc, #108]	@ (8002c34 <main+0x178>)
 8002bc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8002bca:	9318      	str	r3, [sp, #96]	@ 0x60
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <main+0x184>)
 8002bce:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <main+0x17c>)
 8002bd2:	9316      	str	r3, [sp, #88]	@ 0x58
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c44 <main+0x188>)
 8002bd6:	9315      	str	r3, [sp, #84]	@ 0x54
 8002bd8:	4668      	mov	r0, sp
 8002bda:	f104 0310 	add.w	r3, r4, #16
 8002bde:	2254      	movs	r2, #84	@ 0x54
 8002be0:	4619      	mov	r1, r3
 8002be2:	f004 faed 	bl	80071c0 <memcpy>
 8002be6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bea:	f7fe fbf7 	bl	80013dc <ltc6811_rat>
	   Conv_Temp(temperatures, temperatures_conv);									//Temperature lectures conversion
 8002bee:	4916      	ldr	r1, [pc, #88]	@ (8002c48 <main+0x18c>)
 8002bf0:	4813      	ldr	r0, [pc, #76]	@ (8002c40 <main+0x184>)
 8002bf2:	f7ff fc8f 	bl	8002514 <Conv_Temp>
	   switch(BMS_SELECTION){
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <main+0x190>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d028      	beq.n	8002c50 <main+0x194>
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	f000 80f8 	beq.w	8002df4 <main+0x338>
 8002c04:	e1cb      	b.n	8002f9e <main+0x4e2>
 8002c06:	bf00      	nop
 8002c08:	200013b4 	.word	0x200013b4
 8002c0c:	200013dc 	.word	0x200013dc
 8002c10:	200003ac 	.word	0x200003ac
 8002c14:	200003d4 	.word	0x200003d4
 8002c18:	200004ac 	.word	0x200004ac
 8002c1c:	20000460 	.word	0x20000460
 8002c20:	40021000 	.word	0x40021000
 8002c24:	20000212 	.word	0x20000212
 8002c28:	2000137d 	.word	0x2000137d
 8002c2c:	2000137e 	.word	0x2000137e
 8002c30:	200008f8 	.word	0x200008f8
 8002c34:	200003fc 	.word	0x200003fc
 8002c38:	200005ac 	.word	0x200005ac
 8002c3c:	20000570 	.word	0x20000570
 8002c40:	20000714 	.word	0x20000714
 8002c44:	200004f8 	.word	0x200004f8
 8002c48:	20000804 	.word	0x20000804
 8002c4c:	20001445 	.word	0x20001445
	   case 0:
		   //Calculation of min, max, avg volt, avg temp & current-----------------------------------------------------------
		   	   min_volt = Min_Volt(voltatjes);									//Minimum voltage calculation
 8002c50:	48a8      	ldr	r0, [pc, #672]	@ (8002ef4 <main+0x438>)
 8002c52:	f7ff fa6f 	bl	8002134 <Min_Volt>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8002ef8 <main+0x43c>)
 8002c5c:	801a      	strh	r2, [r3, #0]
		   	   max_volt = Max_Volt(voltatjes);									//Maximum voltage calculation
 8002c5e:	48a5      	ldr	r0, [pc, #660]	@ (8002ef4 <main+0x438>)
 8002c60:	f7ff fae8 	bl	8002234 <Max_Volt>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461a      	mov	r2, r3
 8002c68:	4ba4      	ldr	r3, [pc, #656]	@ (8002efc <main+0x440>)
 8002c6a:	801a      	strh	r2, [r3, #0]
		   	   sum_volt = Sum_Volt(voltatjes);									//Sum of all voltages
 8002c6c:	48a1      	ldr	r0, [pc, #644]	@ (8002ef4 <main+0x438>)
 8002c6e:	f7ff fb9f 	bl	80023b0 <Sum_Volt>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4aa2      	ldr	r2, [pc, #648]	@ (8002f00 <main+0x444>)
 8002c76:	6013      	str	r3, [r2, #0]
		   	   mean_volt = Mean_Volt(voltatjes);								//Mean voltage calculation
 8002c78:	489e      	ldr	r0, [pc, #632]	@ (8002ef4 <main+0x438>)
 8002c7a:	f7ff fb5b 	bl	8002334 <Mean_Volt>
 8002c7e:	eef0 7a40 	vmov.f32	s15, s0
 8002c82:	4ba0      	ldr	r3, [pc, #640]	@ (8002f04 <main+0x448>)
 8002c84:	edc3 7a00 	vstr	s15, [r3]
		   	   min_temp = Min_Temp(temperatures_conv);							//Minimum temperature calculation
 8002c88:	489f      	ldr	r0, [pc, #636]	@ (8002f08 <main+0x44c>)
 8002c8a:	f7ff fbbb 	bl	8002404 <Min_Temp>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b9e      	ldr	r3, [pc, #632]	@ (8002f0c <main+0x450>)
 8002c94:	801a      	strh	r2, [r3, #0]
		   	   max_temp = Max_Temp(temperatures_conv);							//Maximum temperature calculation
 8002c96:	489c      	ldr	r0, [pc, #624]	@ (8002f08 <main+0x44c>)
 8002c98:	f7ff fbe0 	bl	800245c <Max_Temp>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8002f10 <main+0x454>)
 8002ca2:	801a      	strh	r2, [r3, #0]
		   	   mean_temp = Mean_Temp(temperatures_conv);						//Mean temperature calculation
 8002ca4:	4898      	ldr	r0, [pc, #608]	@ (8002f08 <main+0x44c>)
 8002ca6:	f7ff fc05 	bl	80024b4 <Mean_Temp>
 8002caa:	eef0 7a40 	vmov.f32	s15, s0
 8002cae:	4b99      	ldr	r3, [pc, #612]	@ (8002f14 <main+0x458>)
 8002cb0:	edc3 7a00 	vstr	s15, [r3]

		   //Errors evaluation---------------------------------------------------------------------------------------
		   	   OV_FLAG = OV_EVAL(voltatjes, ov_flag_arr);						//Over voltage error evaluation
 8002cb4:	4998      	ldr	r1, [pc, #608]	@ (8002f18 <main+0x45c>)
 8002cb6:	488f      	ldr	r0, [pc, #572]	@ (8002ef4 <main+0x438>)
 8002cb8:	f7ff fcde 	bl	8002678 <OV_EVAL>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b96      	ldr	r3, [pc, #600]	@ (8002f1c <main+0x460>)
 8002cc2:	701a      	strb	r2, [r3, #0]
		   	   UV_FLAG = UV_EVAL(voltatjes, uv_flag_arr);						//Under voltage error evaluation
 8002cc4:	4996      	ldr	r1, [pc, #600]	@ (8002f20 <main+0x464>)
 8002cc6:	488b      	ldr	r0, [pc, #556]	@ (8002ef4 <main+0x438>)
 8002cc8:	f7ff fd32 	bl	8002730 <UV_EVAL>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b94      	ldr	r3, [pc, #592]	@ (8002f24 <main+0x468>)
 8002cd2:	701a      	strb	r2, [r3, #0]
		   	   OT_FLAG = OT_EVAL(temperatures_conv, ot_flag_arr);				//Over temperature error evaluation
 8002cd4:	4994      	ldr	r1, [pc, #592]	@ (8002f28 <main+0x46c>)
 8002cd6:	488c      	ldr	r0, [pc, #560]	@ (8002f08 <main+0x44c>)
 8002cd8:	f7ff fdd8 	bl	800288c <OT_EVAL>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b92      	ldr	r3, [pc, #584]	@ (8002f2c <main+0x470>)
 8002ce2:	701a      	strb	r2, [r3, #0]
		   	   OC_FLAG = detection_BMSerror_OverCurrent(Current, oc_flag_arr);	//Over current error evaluation
 8002ce4:	4b92      	ldr	r3, [pc, #584]	@ (8002f30 <main+0x474>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4992      	ldr	r1, [pc, #584]	@ (8002f34 <main+0x478>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fe3c 	bl	8002968 <detection_BMSerror_OverCurrent>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b90      	ldr	r3, [pc, #576]	@ (8002f38 <main+0x47c>)
 8002cf6:	701a      	strb	r2, [r3, #0]
		   	   ETAS_SYNC_FLAG = ETAS_SYNC_EVAL(etas_flag);						//Evaluate if the ETAS is alive
 8002cf8:	4890      	ldr	r0, [pc, #576]	@ (8002f3c <main+0x480>)
 8002cfa:	f7ff fdf9 	bl	80028f0 <ETAS_SYNC_EVAL>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b8f      	ldr	r3, [pc, #572]	@ (8002f40 <main+0x484>)
 8002d04:	701a      	strb	r2, [r3, #0]
		   	   CURR_SYNC_FLAG = CURR_SYNC_EVAL(current_sync_flag);				//Evaluate if the current sensor is alive
 8002d06:	488f      	ldr	r0, [pc, #572]	@ (8002f44 <main+0x488>)
 8002d08:	f7ff fe05 	bl	8002916 <CURR_SYNC_EVAL>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b8d      	ldr	r3, [pc, #564]	@ (8002f48 <main+0x48c>)
 8002d12:	701a      	strb	r2, [r3, #0]
		   	   CAN_BALANCING_FLAG = BALANCING_SYNC_EVAL(can_balancing_flag);	//Evaluate the forced balancing sent by CANoe
 8002d14:	488d      	ldr	r0, [pc, #564]	@ (8002f4c <main+0x490>)
 8002d16:	f7ff fe12 	bl	800293e <BALANCING_SYNC_EVAL>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b8c      	ldr	r3, [pc, #560]	@ (8002f50 <main+0x494>)
 8002d20:	701a      	strb	r2, [r3, #0]
		   	   SD_FLAG = slave_disc(PEC_SLAVES_Volt, PEC_SLAVES_Temp, sd_flag_arr_volt, sd_flag_arr_temp); //Evaluate the slave disconnection
 8002d22:	4b8c      	ldr	r3, [pc, #560]	@ (8002f54 <main+0x498>)
 8002d24:	4a8c      	ldr	r2, [pc, #560]	@ (8002f58 <main+0x49c>)
 8002d26:	498d      	ldr	r1, [pc, #564]	@ (8002f5c <main+0x4a0>)
 8002d28:	488d      	ldr	r0, [pc, #564]	@ (8002f60 <main+0x4a4>)
 8002d2a:	f7ff fe45 	bl	80029b8 <slave_disc>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b8c      	ldr	r3, [pc, #560]	@ (8002f64 <main+0x4a8>)
 8002d34:	701a      	strb	r2, [r3, #0]
		   	   CE_FLAG = current_error_eval(current_error, current_flag);		//Evaluate if there is a current error for more than 500ms
 8002d36:	498c      	ldr	r1, [pc, #560]	@ (8002f68 <main+0x4ac>)
 8002d38:	488c      	ldr	r0, [pc, #560]	@ (8002f6c <main+0x4b0>)
 8002d3a:	f7ff fe9f 	bl	8002a7c <current_error_eval>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b8b      	ldr	r3, [pc, #556]	@ (8002f70 <main+0x4b4>)
 8002d44:	701a      	strb	r2, [r3, #0]
		   	   if(HAL_GetTick()>4500){
 8002d46:	f001 f99d 	bl	8004084 <HAL_GetTick>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f241 1294 	movw	r2, #4500	@ 0x1194
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d91e      	bls.n	8002d92 <main+0x2d6>
		   	   if(((OV_FLAG == 1) || (UV_FLAG == 1) || (OT_FLAG == 1) || (OC_FLAG == 1) ||(SD_FLAG == 1)||(CE_FLAG == 1)||(CURR_SYNC_FLAG == 1)) ) BMS_OK = 0;	}//If there is any error, BMS_OK = 0
 8002d54:	4b71      	ldr	r3, [pc, #452]	@ (8002f1c <main+0x460>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d017      	beq.n	8002d8c <main+0x2d0>
 8002d5c:	4b71      	ldr	r3, [pc, #452]	@ (8002f24 <main+0x468>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d013      	beq.n	8002d8c <main+0x2d0>
 8002d64:	4b71      	ldr	r3, [pc, #452]	@ (8002f2c <main+0x470>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d00f      	beq.n	8002d8c <main+0x2d0>
 8002d6c:	4b72      	ldr	r3, [pc, #456]	@ (8002f38 <main+0x47c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d00b      	beq.n	8002d8c <main+0x2d0>
 8002d74:	4b7b      	ldr	r3, [pc, #492]	@ (8002f64 <main+0x4a8>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d007      	beq.n	8002d8c <main+0x2d0>
 8002d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f70 <main+0x4b4>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d003      	beq.n	8002d8c <main+0x2d0>
 8002d84:	4b70      	ldr	r3, [pc, #448]	@ (8002f48 <main+0x48c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <main+0x2d6>
 8002d8c:	4b79      	ldr	r3, [pc, #484]	@ (8002f74 <main+0x4b8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
			   BMS_MONITORING = HAL_GPIO_ReadPin(BMS_MONITORING_PORT, BMS_MONITORING_PIN)^1 ;	//Evaluate the BMS_Monitoring pin
 8002d92:	2104      	movs	r1, #4
 8002d94:	4878      	ldr	r0, [pc, #480]	@ (8002f78 <main+0x4bc>)
 8002d96:	f002 fb5b 	bl	8005450 <HAL_GPIO_ReadPin>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <main+0x4c0>)
 8002da4:	701a      	strb	r2, [r3, #0]
			   IMD_MONITORING = HAL_GPIO_ReadPin(IMD_MONITORING_PORT, IMD_MONITORING_PIN)^1;	//Evaluate the IMD_Monitoring pin
 8002da6:	2140      	movs	r1, #64	@ 0x40
 8002da8:	4873      	ldr	r0, [pc, #460]	@ (8002f78 <main+0x4bc>)
 8002daa:	f002 fb51 	bl	8005450 <HAL_GPIO_ReadPin>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f083 0301 	eor.w	r3, r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b72      	ldr	r3, [pc, #456]	@ (8002f80 <main+0x4c4>)
 8002db8:	701a      	strb	r2, [r3, #0]
			   SDC_MONITORING = HAL_GPIO_ReadPin(SDC_MONITORING_PORT, SDC_MONITORING_PIN)^1;	//Evaluate the SDC_Monitoring pin
 8002dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dbe:	4871      	ldr	r0, [pc, #452]	@ (8002f84 <main+0x4c8>)
 8002dc0:	f002 fb46 	bl	8005450 <HAL_GPIO_ReadPin>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f083 0301 	eor.w	r3, r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b6e      	ldr	r3, [pc, #440]	@ (8002f88 <main+0x4cc>)
 8002dce:	701a      	strb	r2, [r3, #0]
			   AMS_LED = BMS_OK;
 8002dd0:	4b68      	ldr	r3, [pc, #416]	@ (8002f74 <main+0x4b8>)
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	4b6d      	ldr	r3, [pc, #436]	@ (8002f8c <main+0x4d0>)
 8002dd6:	701a      	strb	r2, [r3, #0]
			   if(BMS_MONITORING==1 && IMD_MONITORING == 0){
 8002dd8:	4b68      	ldr	r3, [pc, #416]	@ (8002f7c <main+0x4c0>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	f040 8087 	bne.w	8002ef0 <main+0x434>
 8002de2:	4b67      	ldr	r3, [pc, #412]	@ (8002f80 <main+0x4c4>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8082 	bne.w	8002ef0 <main+0x434>
				   IMD_LED = 0;
 8002dec:	4b68      	ldr	r3, [pc, #416]	@ (8002f90 <main+0x4d4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
			   }
			   break;
 8002df2:	e07d      	b.n	8002ef0 <main+0x434>
	   case 1:
		   //Calculation of min, max, avg volt, avg temp & current-----------------------------------------------------------
		   	   min_volt = 36000;
 8002df4:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <main+0x43c>)
 8002df6:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8002dfa:	801a      	strh	r2, [r3, #0]
		   	   max_volt = 39500;
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <main+0x440>)
 8002dfe:	f649 224c 	movw	r2, #39500	@ 0x9a4c
 8002e02:	801a      	strh	r2, [r3, #0]
		   	   sum_volt = 5880000;
 8002e04:	4b3e      	ldr	r3, [pc, #248]	@ (8002f00 <main+0x444>)
 8002e06:	4a63      	ldr	r2, [pc, #396]	@ (8002f94 <main+0x4d8>)
 8002e08:	601a      	str	r2, [r3, #0]
		   	   mean_volt = 37500;
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f04 <main+0x448>)
 8002e0c:	4a62      	ldr	r2, [pc, #392]	@ (8002f98 <main+0x4dc>)
 8002e0e:	601a      	str	r2, [r3, #0]
		   	   min_temp = 252;
 8002e10:	4b3e      	ldr	r3, [pc, #248]	@ (8002f0c <main+0x450>)
 8002e12:	22fc      	movs	r2, #252	@ 0xfc
 8002e14:	801a      	strh	r2, [r3, #0]
		   	   max_temp = 263;
 8002e16:	4b3e      	ldr	r3, [pc, #248]	@ (8002f10 <main+0x454>)
 8002e18:	f240 1207 	movw	r2, #263	@ 0x107
 8002e1c:	801a      	strh	r2, [r3, #0]
		   	   mean_temp = 256;
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <main+0x458>)
 8002e20:	f04f 4287 	mov.w	r2, #1132462080	@ 0x43800000
 8002e24:	601a      	str	r2, [r3, #0]

		   //Errors evaluation---------------------------------------------------------------------------------------
		   	   OV_FLAG = 0;
 8002e26:	4b3d      	ldr	r3, [pc, #244]	@ (8002f1c <main+0x460>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
		   	   UV_FLAG = 0;
 8002e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f24 <main+0x468>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
		   	   OT_FLAG = 0;
 8002e32:	4b3e      	ldr	r3, [pc, #248]	@ (8002f2c <main+0x470>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
		   	   OC_FLAG = 0;
 8002e38:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <main+0x47c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
		   	   ETAS_SYNC_FLAG = ETAS_SYNC_EVAL(etas_flag);						//Evaluate if the ETAS is alive
 8002e3e:	483f      	ldr	r0, [pc, #252]	@ (8002f3c <main+0x480>)
 8002e40:	f7ff fd56 	bl	80028f0 <ETAS_SYNC_EVAL>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b3d      	ldr	r3, [pc, #244]	@ (8002f40 <main+0x484>)
 8002e4a:	701a      	strb	r2, [r3, #0]
		   	   CURR_SYNC_FLAG = CURR_SYNC_EVAL(current_sync_flag);				//Evaluate if the current sensor is alive
 8002e4c:	483d      	ldr	r0, [pc, #244]	@ (8002f44 <main+0x488>)
 8002e4e:	f7ff fd62 	bl	8002916 <CURR_SYNC_EVAL>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b3c      	ldr	r3, [pc, #240]	@ (8002f48 <main+0x48c>)
 8002e58:	701a      	strb	r2, [r3, #0]
		   	   CAN_BALANCING_FLAG = BALANCING_SYNC_EVAL(can_balancing_flag);	//Evaluate the forced balancing sent by CANoe
 8002e5a:	483c      	ldr	r0, [pc, #240]	@ (8002f4c <main+0x490>)
 8002e5c:	f7ff fd6f 	bl	800293e <BALANCING_SYNC_EVAL>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <main+0x494>)
 8002e66:	701a      	strb	r2, [r3, #0]
		   	   SD_FLAG = slave_disc(PEC_SLAVES_Volt, PEC_SLAVES_Temp, sd_flag_arr_volt, sd_flag_arr_temp); //Evaluate the slave disconnection
 8002e68:	4b3a      	ldr	r3, [pc, #232]	@ (8002f54 <main+0x498>)
 8002e6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f58 <main+0x49c>)
 8002e6c:	493b      	ldr	r1, [pc, #236]	@ (8002f5c <main+0x4a0>)
 8002e6e:	483c      	ldr	r0, [pc, #240]	@ (8002f60 <main+0x4a4>)
 8002e70:	f7ff fda2 	bl	80029b8 <slave_disc>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b3a      	ldr	r3, [pc, #232]	@ (8002f64 <main+0x4a8>)
 8002e7a:	701a      	strb	r2, [r3, #0]
		   	   CE_FLAG = current_error_eval(current_error, current_flag);		//Evaluate if there is a current error for more than 500ms
 8002e7c:	493a      	ldr	r1, [pc, #232]	@ (8002f68 <main+0x4ac>)
 8002e7e:	483b      	ldr	r0, [pc, #236]	@ (8002f6c <main+0x4b0>)
 8002e80:	f7ff fdfc 	bl	8002a7c <current_error_eval>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b39      	ldr	r3, [pc, #228]	@ (8002f70 <main+0x4b4>)
 8002e8a:	701a      	strb	r2, [r3, #0]
		   	 BMS_MONITORING = HAL_GPIO_ReadPin(BMS_MONITORING_PORT, BMS_MONITORING_PIN)^1 ;	//Evaluate the BMS_Monitoring pin
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	483a      	ldr	r0, [pc, #232]	@ (8002f78 <main+0x4bc>)
 8002e90:	f002 fade 	bl	8005450 <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f083 0301 	eor.w	r3, r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b37      	ldr	r3, [pc, #220]	@ (8002f7c <main+0x4c0>)
 8002e9e:	701a      	strb	r2, [r3, #0]
		   				   IMD_MONITORING = HAL_GPIO_ReadPin(IMD_MONITORING_PORT, IMD_MONITORING_PIN)^1;	//Evaluate the IMD_Monitoring pin
 8002ea0:	2140      	movs	r1, #64	@ 0x40
 8002ea2:	4835      	ldr	r0, [pc, #212]	@ (8002f78 <main+0x4bc>)
 8002ea4:	f002 fad4 	bl	8005450 <HAL_GPIO_ReadPin>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b33      	ldr	r3, [pc, #204]	@ (8002f80 <main+0x4c4>)
 8002eb2:	701a      	strb	r2, [r3, #0]
		   				   SDC_MONITORING = HAL_GPIO_ReadPin(SDC_MONITORING_PORT, SDC_MONITORING_PIN)^1;	//Evaluate the SDC_Monitoring pin
 8002eb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eb8:	4832      	ldr	r0, [pc, #200]	@ (8002f84 <main+0x4c8>)
 8002eba:	f002 fac9 	bl	8005450 <HAL_GPIO_ReadPin>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b30      	ldr	r3, [pc, #192]	@ (8002f88 <main+0x4cc>)
 8002ec8:	701a      	strb	r2, [r3, #0]
			   BMS_OK = 1;
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <main+0x4b8>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
			   AMS_LED = BMS_OK;
 8002ed0:	4b28      	ldr	r3, [pc, #160]	@ (8002f74 <main+0x4b8>)
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <main+0x4d0>)
 8002ed6:	701a      	strb	r2, [r3, #0]
			   if(BMS_MONITORING==1 && IMD_MONITORING == 0){
 8002ed8:	4b28      	ldr	r3, [pc, #160]	@ (8002f7c <main+0x4c0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d15d      	bne.n	8002f9c <main+0x4e0>
 8002ee0:	4b27      	ldr	r3, [pc, #156]	@ (8002f80 <main+0x4c4>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d159      	bne.n	8002f9c <main+0x4e0>
				   IMD_LED = 0;
 8002ee8:	4b29      	ldr	r3, [pc, #164]	@ (8002f90 <main+0x4d4>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
			   }
		   break;
 8002eee:	e055      	b.n	8002f9c <main+0x4e0>
			   break;
 8002ef0:	bf00      	nop
 8002ef2:	e054      	b.n	8002f9e <main+0x4e2>
 8002ef4:	200005ac 	.word	0x200005ac
 8002ef8:	200008f8 	.word	0x200008f8
 8002efc:	200008fa 	.word	0x200008fa
 8002f00:	200008fc 	.word	0x200008fc
 8002f04:	20000908 	.word	0x20000908
 8002f08:	20000804 	.word	0x20000804
 8002f0c:	20000900 	.word	0x20000900
 8002f10:	20000902 	.word	0x20000902
 8002f14:	20000904 	.word	0x20000904
 8002f18:	2000090c 	.word	0x2000090c
 8002f1c:	2000020b 	.word	0x2000020b
 8002f20:	20000bdc 	.word	0x20000bdc
 8002f24:	2000020c 	.word	0x2000020c
 8002f28:	20000eac 	.word	0x20000eac
 8002f2c:	2000020d 	.word	0x2000020d
 8002f30:	200008f4 	.word	0x200008f4
 8002f34:	2000135c 	.word	0x2000135c
 8002f38:	2000020e 	.word	0x2000020e
 8002f3c:	20001360 	.word	0x20001360
 8002f40:	20001375 	.word	0x20001375
 8002f44:	20001368 	.word	0x20001368
 8002f48:	20000211 	.word	0x20000211
 8002f4c:	2000136c 	.word	0x2000136c
 8002f50:	20001376 	.word	0x20001376
 8002f54:	2000117c 	.word	0x2000117c
 8002f58:	2000108c 	.word	0x2000108c
 8002f5c:	200004f8 	.word	0x200004f8
 8002f60:	20000570 	.word	0x20000570
 8002f64:	2000020f 	.word	0x2000020f
 8002f68:	20001364 	.word	0x20001364
 8002f6c:	20000208 	.word	0x20000208
 8002f70:	20000210 	.word	0x20000210
 8002f74:	20000204 	.word	0x20000204
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	20001371 	.word	0x20001371
 8002f80:	20001372 	.word	0x20001372
 8002f84:	40020800 	.word	0x40020800
 8002f88:	20001373 	.word	0x20001373
 8002f8c:	20000209 	.word	0x20000209
 8002f90:	2000020a 	.word	0x2000020a
 8002f94:	0059b8c0 	.word	0x0059b8c0
 8002f98:	47127c00 	.word	0x47127c00
		   break;
 8002f9c:	bf00      	nop
	   }
//State Machine Evaluation------------------------------------------------------------------------------
	   CURR_STATE = StateMachineSteps(CURR_STATE, AIRs_request, BMS_OK, ETAS_SYNC_FLAG);	//Evaluate which is the current state of the charging process
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <main+0x518>)
 8002fa0:	7818      	ldrb	r0, [r3, #0]
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <main+0x51c>)
 8002fa4:	7819      	ldrb	r1, [r3, #0]
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <main+0x520>)
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <main+0x524>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	f7fd fabb 	bl	8000528 <StateMachineSteps>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <main+0x518>)
 8002fb8:	701a      	strb	r2, [r3, #0]
	   BLC = StateMachineActuation(CURR_STATE, Airs_State, CAN_BALANCING_FLAG);				//Actuates according to the current state of the charging process controlling the airs and balancing
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <main+0x518>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	4a09      	ldr	r2, [pc, #36]	@ (8002fe4 <main+0x528>)
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	4909      	ldr	r1, [pc, #36]	@ (8002fe8 <main+0x52c>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fb43 	bl	8000650 <StateMachineActuation>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <main+0x530>)
 8002fd0:	701a      	strb	r2, [r3, #0]
	  ltc6811_rav(hspi1, PEC_SLAVES_Volt, voltatjes, GPIOx, CH, BLC, min_volt);	//Voltage lectures
 8002fd2:	e5d8      	b.n	8002b86 <main+0xca>
 8002fd4:	20000213 	.word	0x20000213
 8002fd8:	2000137f 	.word	0x2000137f
 8002fdc:	20000204 	.word	0x20000204
 8002fe0:	20001375 	.word	0x20001375
 8002fe4:	20001376 	.word	0x20001376
 8002fe8:	20001378 	.word	0x20001378
 8002fec:	2000137e 	.word	0x2000137e

08002ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b094      	sub	sp, #80	@ 0x50
 8002ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	2234      	movs	r2, #52	@ 0x34
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 f8b2 	bl	8007168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003004:	f107 0308 	add.w	r3, r7, #8
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	4b2c      	ldr	r3, [pc, #176]	@ (80030c8 <SystemClock_Config+0xd8>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	4a2b      	ldr	r2, [pc, #172]	@ (80030c8 <SystemClock_Config+0xd8>)
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800301e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003020:	4b29      	ldr	r3, [pc, #164]	@ (80030c8 <SystemClock_Config+0xd8>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800302c:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <SystemClock_Config+0xdc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003034:	4a25      	ldr	r2, [pc, #148]	@ (80030cc <SystemClock_Config+0xdc>)
 8003036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b23      	ldr	r3, [pc, #140]	@ (80030cc <SystemClock_Config+0xdc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003048:	2302      	movs	r3, #2
 800304a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800304c:	2301      	movs	r3, #1
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003050:	2310      	movs	r3, #16
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003054:	2302      	movs	r3, #2
 8003056:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003058:	2300      	movs	r3, #0
 800305a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800305c:	2308      	movs	r3, #8
 800305e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 8003060:	236c      	movs	r3, #108	@ 0x6c
 8003062:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003064:	2302      	movs	r3, #2
 8003066:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003068:	2302      	movs	r3, #2
 800306a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800306c:	2302      	movs	r3, #2
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fa6d 	bl	8005554 <HAL_RCC_OscConfig>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003080:	f000 fd38 	bl	8003af4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003084:	f002 fa16 	bl	80054b4 <HAL_PWREx_EnableOverDrive>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800308e:	f000 fd31 	bl	8003af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003092:	230f      	movs	r3, #15
 8003094:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003096:	2302      	movs	r3, #2
 8003098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800309e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	2103      	movs	r1, #3
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fcfd 	bl	8005ab0 <HAL_RCC_ClockConfig>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80030bc:	f000 fd1a 	bl	8003af4 <Error_Handler>
  }
}
 80030c0:	bf00      	nop
 80030c2:	3750      	adds	r7, #80	@ 0x50
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40007000 	.word	0x40007000

080030d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80030d4:	4b17      	ldr	r3, [pc, #92]	@ (8003134 <MX_CAN1_Init+0x64>)
 80030d6:	4a18      	ldr	r2, [pc, #96]	@ (8003138 <MX_CAN1_Init+0x68>)
 80030d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80030da:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <MX_CAN1_Init+0x64>)
 80030dc:	220c      	movs	r2, #12
 80030de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80030e0:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <MX_CAN1_Init+0x64>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80030e6:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <MX_CAN1_Init+0x64>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80030ec:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <MX_CAN1_Init+0x64>)
 80030ee:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80030f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80030f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <MX_CAN1_Init+0x64>)
 80030f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80030fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <MX_CAN1_Init+0x64>)
 80030fe:	2200      	movs	r2, #0
 8003100:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <MX_CAN1_Init+0x64>)
 8003104:	2200      	movs	r2, #0
 8003106:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003108:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <MX_CAN1_Init+0x64>)
 800310a:	2200      	movs	r2, #0
 800310c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <MX_CAN1_Init+0x64>)
 8003110:	2200      	movs	r2, #0
 8003112:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003114:	4b07      	ldr	r3, [pc, #28]	@ (8003134 <MX_CAN1_Init+0x64>)
 8003116:	2200      	movs	r2, #0
 8003118:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <MX_CAN1_Init+0x64>)
 800311c:	2200      	movs	r2, #0
 800311e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003120:	4804      	ldr	r0, [pc, #16]	@ (8003134 <MX_CAN1_Init+0x64>)
 8003122:	f000 ffdf 	bl	80040e4 <HAL_CAN_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800312c:	f000 fce2 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200003ac 	.word	0x200003ac
 8003138:	40006400 	.word	0x40006400

0800313c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003140:	4b17      	ldr	r3, [pc, #92]	@ (80031a0 <MX_CAN2_Init+0x64>)
 8003142:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <MX_CAN2_Init+0x68>)
 8003144:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8003146:	4b16      	ldr	r3, [pc, #88]	@ (80031a0 <MX_CAN2_Init+0x64>)
 8003148:	220c      	movs	r2, #12
 800314a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800314c:	4b14      	ldr	r3, [pc, #80]	@ (80031a0 <MX_CAN2_Init+0x64>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <MX_CAN2_Init+0x64>)
 8003154:	2200      	movs	r2, #0
 8003156:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <MX_CAN2_Init+0x64>)
 800315a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800315e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_6TQ;
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <MX_CAN2_Init+0x64>)
 8003162:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8003166:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003168:	4b0d      	ldr	r3, [pc, #52]	@ (80031a0 <MX_CAN2_Init+0x64>)
 800316a:	2200      	movs	r2, #0
 800316c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800316e:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <MX_CAN2_Init+0x64>)
 8003170:	2200      	movs	r2, #0
 8003172:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003174:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <MX_CAN2_Init+0x64>)
 8003176:	2200      	movs	r2, #0
 8003178:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <MX_CAN2_Init+0x64>)
 800317c:	2200      	movs	r2, #0
 800317e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003180:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <MX_CAN2_Init+0x64>)
 8003182:	2200      	movs	r2, #0
 8003184:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <MX_CAN2_Init+0x64>)
 8003188:	2200      	movs	r2, #0
 800318a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800318c:	4804      	ldr	r0, [pc, #16]	@ (80031a0 <MX_CAN2_Init+0x64>)
 800318e:	f000 ffa9 	bl	80040e4 <HAL_CAN_Init>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003198:	f000 fcac 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200003d4 	.word	0x200003d4
 80031a4:	40006800 	.word	0x40006800

080031a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <MX_SPI1_Init+0x74>)
 80031ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003220 <MX_SPI1_Init+0x78>)
 80031b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031b2:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <MX_SPI1_Init+0x74>)
 80031b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031ba:	4b18      	ldr	r3, [pc, #96]	@ (800321c <MX_SPI1_Init+0x74>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031c0:	4b16      	ldr	r3, [pc, #88]	@ (800321c <MX_SPI1_Init+0x74>)
 80031c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <MX_SPI1_Init+0x74>)
 80031ca:	2202      	movs	r2, #2
 80031cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80031ce:	4b13      	ldr	r3, [pc, #76]	@ (800321c <MX_SPI1_Init+0x74>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <MX_SPI1_Init+0x74>)
 80031d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <MX_SPI1_Init+0x74>)
 80031de:	2238      	movs	r2, #56	@ 0x38
 80031e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <MX_SPI1_Init+0x74>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <MX_SPI1_Init+0x74>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ee:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <MX_SPI1_Init+0x74>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80031f4:	4b09      	ldr	r3, [pc, #36]	@ (800321c <MX_SPI1_Init+0x74>)
 80031f6:	2207      	movs	r2, #7
 80031f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031fa:	4b08      	ldr	r3, [pc, #32]	@ (800321c <MX_SPI1_Init+0x74>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003200:	4b06      	ldr	r3, [pc, #24]	@ (800321c <MX_SPI1_Init+0x74>)
 8003202:	2200      	movs	r2, #0
 8003204:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003206:	4805      	ldr	r0, [pc, #20]	@ (800321c <MX_SPI1_Init+0x74>)
 8003208:	f002 fe10 	bl	8005e2c <HAL_SPI_Init>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003212:	f000 fc6f 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200003fc 	.word	0x200003fc
 8003220:	40013000 	.word	0x40013000

08003224 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003228:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <MX_TIM13_Init+0x40>)
 800322a:	4a0f      	ldr	r2, [pc, #60]	@ (8003268 <MX_TIM13_Init+0x44>)
 800322c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 10-1;
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <MX_TIM13_Init+0x40>)
 8003230:	2209      	movs	r2, #9
 8003232:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <MX_TIM13_Init+0x40>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10800;
 800323a:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <MX_TIM13_Init+0x40>)
 800323c:	f642 2230 	movw	r2, #10800	@ 0x2a30
 8003240:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003242:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <MX_TIM13_Init+0x40>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003248:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <MX_TIM13_Init+0x40>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800324e:	4805      	ldr	r0, [pc, #20]	@ (8003264 <MX_TIM13_Init+0x40>)
 8003250:	f003 fcb4 	bl	8006bbc <HAL_TIM_Base_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800325a:	f000 fc4b 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000460 	.word	0x20000460
 8003268:	40001c00 	.word	0x40001c00

0800326c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003270:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <MX_TIM14_Init+0x40>)
 8003272:	4a0f      	ldr	r2, [pc, #60]	@ (80032b0 <MX_TIM14_Init+0x44>)
 8003274:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10-1;
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <MX_TIM14_Init+0x40>)
 8003278:	2209      	movs	r2, #9
 800327a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <MX_TIM14_Init+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000;
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <MX_TIM14_Init+0x40>)
 8003284:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003288:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <MX_TIM14_Init+0x40>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <MX_TIM14_Init+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003296:	4805      	ldr	r0, [pc, #20]	@ (80032ac <MX_TIM14_Init+0x40>)
 8003298:	f003 fc90 	bl	8006bbc <HAL_TIM_Base_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80032a2:	f000 fc27 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200004ac 	.word	0x200004ac
 80032b0:	40002000 	.word	0x40002000

080032b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08c      	sub	sp, #48	@ 0x30
 80032b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003408 <MX_GPIO_Init+0x154>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003408 <MX_GPIO_Init+0x154>)
 80032d0:	f043 0310 	orr.w	r3, r3, #16
 80032d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003408 <MX_GPIO_Init+0x154>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e2:	4b49      	ldr	r3, [pc, #292]	@ (8003408 <MX_GPIO_Init+0x154>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	4a48      	ldr	r2, [pc, #288]	@ (8003408 <MX_GPIO_Init+0x154>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ee:	4b46      	ldr	r3, [pc, #280]	@ (8003408 <MX_GPIO_Init+0x154>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032fa:	4b43      	ldr	r3, [pc, #268]	@ (8003408 <MX_GPIO_Init+0x154>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	4a42      	ldr	r2, [pc, #264]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003304:	6313      	str	r3, [r2, #48]	@ 0x30
 8003306:	4b40      	ldr	r3, [pc, #256]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003312:	4b3d      	ldr	r3, [pc, #244]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	4a3c      	ldr	r2, [pc, #240]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6313      	str	r3, [r2, #48]	@ 0x30
 800331e:	4b3a      	ldr	r3, [pc, #232]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	4b37      	ldr	r3, [pc, #220]	@ (8003408 <MX_GPIO_Init+0x154>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	4a36      	ldr	r2, [pc, #216]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6313      	str	r3, [r2, #48]	@ 0x30
 8003336:	4b34      	ldr	r3, [pc, #208]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003342:	4b31      	ldr	r3, [pc, #196]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	4a30      	ldr	r2, [pc, #192]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	6313      	str	r3, [r2, #48]	@ 0x30
 800334e:	4b2e      	ldr	r3, [pc, #184]	@ (8003408 <MX_GPIO_Init+0x154>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_RELAY_GPIO_Port, BMS_RELAY_Pin, GPIO_PIN_RESET);
 800335a:	2200      	movs	r2, #0
 800335c:	2108      	movs	r1, #8
 800335e:	482b      	ldr	r0, [pc, #172]	@ (800340c <MX_GPIO_Init+0x158>)
 8003360:	f002 f88e 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8003364:	2200      	movs	r2, #0
 8003366:	21ec      	movs	r1, #236	@ 0xec
 8003368:	4829      	ldr	r0, [pc, #164]	@ (8003410 <MX_GPIO_Init+0x15c>)
 800336a:	f002 f889 	bl	8005480 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800336e:	2200      	movs	r2, #0
 8003370:	2140      	movs	r1, #64	@ 0x40
 8003372:	4828      	ldr	r0, [pc, #160]	@ (8003414 <MX_GPIO_Init+0x160>)
 8003374:	f002 f884 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BMS_MONITORING_Pin IMD_MONITORING_Pin */
  GPIO_InitStruct.Pin = BMS_MONITORING_Pin|IMD_MONITORING_Pin;
 8003378:	2344      	movs	r3, #68	@ 0x44
 800337a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800337c:	2300      	movs	r3, #0
 800337e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	4619      	mov	r1, r3
 800338a:	4820      	ldr	r0, [pc, #128]	@ (800340c <MX_GPIO_Init+0x158>)
 800338c:	f001 feb4 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_RELAY_Pin */
  GPIO_InitStruct.Pin = BMS_RELAY_Pin;
 8003390:	2308      	movs	r3, #8
 8003392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003394:	2301      	movs	r3, #1
 8003396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BMS_RELAY_GPIO_Port, &GPIO_InitStruct);
 80033a0:	f107 031c 	add.w	r3, r7, #28
 80033a4:	4619      	mov	r1, r3
 80033a6:	4819      	ldr	r0, [pc, #100]	@ (800340c <MX_GPIO_Init+0x158>)
 80033a8:	f001 fea6 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDC_Pin */
  GPIO_InitStruct.Pin = SDC_Pin;
 80033ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b2:	2300      	movs	r3, #0
 80033b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDC_GPIO_Port, &GPIO_InitStruct);
 80033ba:	f107 031c 	add.w	r3, r7, #28
 80033be:	4619      	mov	r1, r3
 80033c0:	4815      	ldr	r0, [pc, #84]	@ (8003418 <MX_GPIO_Init+0x164>)
 80033c2:	f001 fe99 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin PA3 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = USER_LED_Pin|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 80033c6:	23ec      	movs	r3, #236	@ 0xec
 80033c8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ca:	2301      	movs	r3, #1
 80033cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	f107 031c 	add.w	r3, r7, #28
 80033da:	4619      	mov	r1, r3
 80033dc:	480c      	ldr	r0, [pc, #48]	@ (8003410 <MX_GPIO_Init+0x15c>)
 80033de:	f001 fe8b 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033e2:	2340      	movs	r3, #64	@ 0x40
 80033e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e6:	2301      	movs	r3, #1
 80033e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ea:	2301      	movs	r3, #1
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	4619      	mov	r1, r3
 80033f8:	4806      	ldr	r0, [pc, #24]	@ (8003414 <MX_GPIO_Init+0x160>)
 80033fa:	f001 fe7d 	bl	80050f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033fe:	bf00      	nop
 8003400:	3730      	adds	r7, #48	@ 0x30
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	40021000 	.word	0x40021000
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800

0800341c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8003426:	4a1a      	ldr	r2, [pc, #104]	@ (8003490 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8003428:	2100      	movs	r1, #0
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 f956 	bl	80046dc <HAL_CAN_GetRxMessage>
   }
   if(RxHeader.StdId == ETAS_SYNC){					//If the received message through CAN 1 has the ETAS_SYNC COBID
 8003430:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b80      	cmp	r3, #128	@ 0x80
 8003436:	d107      	bne.n	8003448 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
	   msg = 1;									//Start the CAN transmitting function
 8003438:	4b16      	ldr	r3, [pc, #88]	@ (8003494 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
	   etas_flag[0] = HAL_GetTick();			//Actualize the etas_flag with the current tick
 800343e:	f000 fe21 	bl	8004084 <HAL_GetTick>
 8003442:	4603      	mov	r3, r0
 8003444:	4a14      	ldr	r2, [pc, #80]	@ (8003498 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8003446:	6013      	str	r3, [r2, #0]
   }
   if(RxHeader.StdId == AIRS_REQUEST){			//If the received message through CAN 1 has the AIRS_REQUEST COBID
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b90      	cmp	r3, #144	@ 0x90
 800344e:	d103      	bne.n	8003458 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	   AIRs_request = RxData[0];				//Save the RxData which contains the charging state number
 8003450:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8003452:	781a      	ldrb	r2, [r3, #0]
 8003454:	4b11      	ldr	r3, [pc, #68]	@ (800349c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003456:	701a      	strb	r2, [r3, #0]
   }

   if(RxHeader.StdId == CURRENT){				//If the received message through CAN 1 has the CURRENT COBID
 8003458:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f240 32c2 	movw	r2, #962	@ 0x3c2
 8003460:	4293      	cmp	r3, r2
 8003462:	d10e      	bne.n	8003482 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
	   Current = Curr_EVAL(RxData);				//Extract the current value sent by CAN 1
 8003464:	4809      	ldr	r0, [pc, #36]	@ (800348c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8003466:	f7ff f8e5 	bl	8002634 <Curr_EVAL>
 800346a:	4603      	mov	r3, r0
 800346c:	4a0c      	ldr	r2, [pc, #48]	@ (80034a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800346e:	6013      	str	r3, [r2, #0]
	   current_sync_flag[0]=HAL_GetTick();		//Actualize the current_sync_flag with the current tick
 8003470:	f000 fe08 	bl	8004084 <HAL_GetTick>
 8003474:	4603      	mov	r3, r0
 8003476:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8003478:	6013      	str	r3, [r2, #0]
	   current_error[0] = RxData[4];			//Saves the error data byte of the current value
 800347a:	4b04      	ldr	r3, [pc, #16]	@ (800348c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800347c:	791a      	ldrb	r2, [r3, #4]
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8003480:	701a      	strb	r2, [r3, #0]
   }


 }
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20001404 	.word	0x20001404
 8003490:	20001380 	.word	0x20001380
 8003494:	2000137c 	.word	0x2000137c
 8003498:	20001360 	.word	0x20001360
 800349c:	2000137f 	.word	0x2000137f
 80034a0:	200008f4 	.word	0x200008f4
 80034a4:	20001368 	.word	0x20001368
 80034a8:	20000208 	.word	0x20000208

080034ac <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK){
 80034b4:	4b17      	ldr	r3, [pc, #92]	@ (8003514 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80034b6:	4a18      	ldr	r2, [pc, #96]	@ (8003518 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80034b8:	2101      	movs	r1, #1
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f001 f90e 	bl	80046dc <HAL_CAN_GetRxMessage>
   }
   if(RxHeader.StdId == DISPLAY_SYNC){			//If the received message through CAN 2 has the DISPLAY_SYNC COBID
 80034c0:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2be0      	cmp	r3, #224	@ 0xe0
 80034c6:	d102      	bne.n	80034ce <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	   RX_VOLT_TEMP = 1;						//Set the RX_VOLT_TEMP to 1 to start the Voltages and Temperatures transmission through CAN 2
 80034c8:	4b14      	ldr	r3, [pc, #80]	@ (800351c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
   }
   if(RxHeader.StdId == CAN_FORCED_BALANCING){	//If the received message through CAN 2 has the CAN_FORCED_BALANCING COBID
 80034ce:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034d6:	d104      	bne.n	80034e2 <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
	   can_balancing_flag[0] = HAL_GetTick();	//Actualize the can_balancing_flag with the current tick
 80034d8:	f000 fdd4 	bl	8004084 <HAL_GetTick>
 80034dc:	4603      	mov	r3, r0
 80034de:	4a10      	ldr	r2, [pc, #64]	@ (8003520 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 80034e0:	6013      	str	r3, [r2, #0]
   }
   if(RxHeader.StdId == CAN_BMS_SELECTION){	//If the received message through CAN 2 has the CAN_FORCED_BALANCING COBID
 80034e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b69      	cmp	r3, #105	@ 0x69
 80034e8:	d110      	bne.n	800350c <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
	   BMS_SELECTION = RxData[0] & 0x01;	//Actualize the can_balancing_flag with the current tick
 80034ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003514 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 80034f6:	701a      	strb	r2, [r3, #0]
	   TOTAL_IC = RxData[0]>>1;
 80034f8:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 8003502:	701a      	strb	r2, [r3, #0]
	   val = RxData[0];
 8003504:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	4b08      	ldr	r3, [pc, #32]	@ (800352c <HAL_CAN_RxFifo1MsgPendingCallback+0x80>)
 800350a:	701a      	strb	r2, [r3, #0]
   }
   if(RxHeader.StdId == CAN_BMS_SELECTION){	//If the received message through CAN 2 has the CAN_FORCED_BALANCING COBID

      }
 }
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20001404 	.word	0x20001404
 8003518:	20001380 	.word	0x20001380
 800351c:	20001444 	.word	0x20001444
 8003520:	2000136c 	.word	0x2000136c
 8003524:	20001445 	.word	0x20001445
 8003528:	20000000 	.word	0x20000000
 800352c:	20001446 	.word	0x20001446

08003530 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	b0b1      	sub	sp, #196	@ 0xc4
 8003534:	af1c      	add	r7, sp, #112	@ 0x70
 8003536:	63f8      	str	r0, [r7, #60]	@ 0x3c
   if (htim->Instance == TIM14)					//When the TIMER 14 has a pulse, the function moves 1 iteration forward, up to 5 times
 8003538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5e      	ldr	r2, [pc, #376]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800353e:	4293      	cmp	r3, r2
 8003540:	f040 810a 	bne.w	8003758 <HAL_TIM_PeriodElapsedCallback+0x228>
   {
  	 switch(msg){								//Depending on the msg state
 8003544:	4b5d      	ldr	r3, [pc, #372]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	3b01      	subs	r3, #1
 800354a:	2b04      	cmp	r3, #4
 800354c:	f200 8104 	bhi.w	8003758 <HAL_TIM_PeriodElapsedCallback+0x228>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800356d 	.word	0x0800356d
 800355c:	080035c5 	.word	0x080035c5
 8003560:	08003629 	.word	0x08003629
 8003564:	08003667 	.word	0x08003667
 8003568:	080036ed 	.word	0x080036ed
   case 1:
  	 message_cantx_Voltage_State(hcan1, min_volt, max_volt, sum_volt, TxData, TxHeader); 		//Send the min, max and mean voltage values through CAN 1
 800356c:	4b54      	ldr	r3, [pc, #336]	@ (80036c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003572:	4b54      	ldr	r3, [pc, #336]	@ (80036c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	637a      	str	r2, [r7, #52]	@ 0x34
 8003578:	4b53      	ldr	r3, [pc, #332]	@ (80036c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	6339      	str	r1, [r7, #48]	@ 0x30
 800357e:	4e53      	ldr	r6, [pc, #332]	@ (80036cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003580:	4b53      	ldr	r3, [pc, #332]	@ (80036d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003582:	ac0a      	add	r4, sp, #40	@ 0x28
 8003584:	461d      	mov	r5, r3
 8003586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800358a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800358e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003592:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003594:	9309      	str	r3, [sp, #36]	@ 0x24
 8003596:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003598:	9108      	str	r1, [sp, #32]
 800359a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800359c:	9207      	str	r2, [sp, #28]
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	9306      	str	r3, [sp, #24]
 80035a2:	466d      	mov	r5, sp
 80035a4:	f106 0410 	add.w	r4, r6, #16
 80035a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80035b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035b8:	f7fe fcae 	bl	8001f18 <message_cantx_Voltage_State>
  	 msg=2;																						//Set the msg state to 2
 80035bc:	4b3f      	ldr	r3, [pc, #252]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80035be:	2202      	movs	r2, #2
 80035c0:	701a      	strb	r2, [r3, #0]
  	 break;
 80035c2:	e0c9      	b.n	8003758 <HAL_TIM_PeriodElapsedCallback+0x228>
   case 2:
  	 message_cantx_Temperature_State(hcan1, min_temp, max_temp, mean_temp, TxData, TxHeader);	//Send the min, max and mean temperature values through CAN 1
 80035c4:	4b44      	ldr	r3, [pc, #272]	@ (80036d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035ca:	4b44      	ldr	r3, [pc, #272]	@ (80036dc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80035cc:	881a      	ldrh	r2, [r3, #0]
 80035ce:	637a      	str	r2, [r7, #52]	@ 0x34
 80035d0:	4b43      	ldr	r3, [pc, #268]	@ (80036e0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035da:	ee17 3a90 	vmov	r3, s15
 80035de:	b299      	uxth	r1, r3
 80035e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80035e2:	4e3a      	ldr	r6, [pc, #232]	@ (80036cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80035e4:	4b3a      	ldr	r3, [pc, #232]	@ (80036d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80035e6:	ac0a      	add	r4, sp, #40	@ 0x28
 80035e8:	461d      	mov	r5, r3
 80035ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80035f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80035f6:	4b37      	ldr	r3, [pc, #220]	@ (80036d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80035f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80035fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035fc:	9108      	str	r1, [sp, #32]
 80035fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003600:	9207      	str	r2, [sp, #28]
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	9306      	str	r3, [sp, #24]
 8003606:	466d      	mov	r5, sp
 8003608:	f106 0410 	add.w	r4, r6, #16
 800360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003610:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003614:	e885 0003 	stmia.w	r5, {r0, r1}
 8003618:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800361c:	f7fe fc36 	bl	8001e8c <message_cantx_Temperature_State>
  	 msg=3;																						//Set the msg state to 3
 8003620:	4b26      	ldr	r3, [pc, #152]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003622:	2203      	movs	r2, #3
 8003624:	701a      	strb	r2, [r3, #0]
  	 break;
 8003626:	e097      	b.n	8003758 <HAL_TIM_PeriodElapsedCallback+0x228>
   case 3:
  	 message_cantx_AIR_State(hcan1,Airs_State, TxData, TxHeader);								//Send the Airs_State array through CAN 1, contains the current state of each AIR
 8003628:	4e28      	ldr	r6, [pc, #160]	@ (80036cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800362a:	4b29      	ldr	r3, [pc, #164]	@ (80036d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800362c:	ac08      	add	r4, sp, #32
 800362e:	461d      	mov	r5, r3
 8003630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003634:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003638:	e884 0003 	stmia.w	r4, {r0, r1}
 800363c:	4b25      	ldr	r3, [pc, #148]	@ (80036d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800363e:	9307      	str	r3, [sp, #28]
 8003640:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003642:	9306      	str	r3, [sp, #24]
 8003644:	466d      	mov	r5, sp
 8003646:	f106 0410 	add.w	r4, r6, #16
 800364a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003652:	e885 0003 	stmia.w	r5, {r0, r1}
 8003656:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800365a:	f7fe fbf1 	bl	8001e40 <message_cantx_AIR_State>
  	 msg=4;																						//Set the msg state to 4
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003660:	2204      	movs	r2, #4
 8003662:	701a      	strb	r2, [r3, #0]
  	 break;
 8003664:	e078      	b.n	8003758 <HAL_TIM_PeriodElapsedCallback+0x228>
   case 4:
  	 message_cantx_Keep_Alive(hcan1, KEEP_ALIVE, TxData, TxHeader);								//Send the Keep_Alive of the master
 8003666:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800366c:	4e17      	ldr	r6, [pc, #92]	@ (80036cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800366e:	4b18      	ldr	r3, [pc, #96]	@ (80036d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003670:	ac08      	add	r4, sp, #32
 8003672:	461d      	mov	r5, r3
 8003674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003678:	e895 0003 	ldmia.w	r5, {r0, r1}
 800367c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003680:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003682:	9307      	str	r3, [sp, #28]
 8003684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003686:	9306      	str	r3, [sp, #24]
 8003688:	466d      	mov	r5, sp
 800368a:	f106 0410 	add.w	r4, r6, #16
 800368e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003696:	e885 0003 	stmia.w	r5, {r0, r1}
 800369a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800369e:	f7fe fc85 	bl	8001fac <message_cantx_Keep_Alive>
  	 KEEP_ALIVE++;																				//Sum 1 to the Keep_alive value
 80036a2:	4b11      	ldr	r3, [pc, #68]	@ (80036e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80036ac:	701a      	strb	r2, [r3, #0]
  	 msg=5;																						//Set the msg state to 5
 80036ae:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80036b0:	2205      	movs	r2, #5
 80036b2:	701a      	strb	r2, [r3, #0]
  	 break;
 80036b4:	e050      	b.n	8003758 <HAL_TIM_PeriodElapsedCallback+0x228>
 80036b6:	bf00      	nop
 80036b8:	40002000 	.word	0x40002000
 80036bc:	2000137c 	.word	0x2000137c
 80036c0:	200008f8 	.word	0x200008f8
 80036c4:	200008fa 	.word	0x200008fa
 80036c8:	200008fc 	.word	0x200008fc
 80036cc:	200003ac 	.word	0x200003ac
 80036d0:	2000139c 	.word	0x2000139c
 80036d4:	20001424 	.word	0x20001424
 80036d8:	20000900 	.word	0x20000900
 80036dc:	20000902 	.word	0x20000902
 80036e0:	20000904 	.word	0x20000904
 80036e4:	20001378 	.word	0x20001378
 80036e8:	20001370 	.word	0x20001370
   case 5:
  	 message_cantx_Shutdown(hcan1, SDC_MONITORING, BMS_MONITORING, IMD_MONITORING, AMS_LED, IMD_LED,TxData, TxHeader);	//Send the SDC, BMS, IMD monitoring through CAN 1
 80036ec:	4b86      	ldr	r3, [pc, #536]	@ (8003908 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036f2:	4b86      	ldr	r3, [pc, #536]	@ (800390c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80036f8:	4b85      	ldr	r3, [pc, #532]	@ (8003910 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80036fa:	7819      	ldrb	r1, [r3, #0]
 80036fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80036fe:	4b85      	ldr	r3, [pc, #532]	@ (8003914 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8003700:	7818      	ldrb	r0, [r3, #0]
 8003702:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003704:	4b84      	ldr	r3, [pc, #528]	@ (8003918 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8003706:	781c      	ldrb	r4, [r3, #0]
 8003708:	62bc      	str	r4, [r7, #40]	@ 0x28
 800370a:	4e84      	ldr	r6, [pc, #528]	@ (800391c <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800370c:	4b84      	ldr	r3, [pc, #528]	@ (8003920 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800370e:	ac0c      	add	r4, sp, #48	@ 0x30
 8003710:	461d      	mov	r5, r3
 8003712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003716:	e895 0003 	ldmia.w	r5, {r0, r1}
 800371a:	e884 0003 	stmia.w	r4, {r0, r1}
 800371e:	4b81      	ldr	r3, [pc, #516]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8003720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003722:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003724:	940a      	str	r4, [sp, #40]	@ 0x28
 8003726:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003728:	9009      	str	r0, [sp, #36]	@ 0x24
 800372a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800372c:	9108      	str	r1, [sp, #32]
 800372e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003730:	9207      	str	r2, [sp, #28]
 8003732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003734:	9306      	str	r3, [sp, #24]
 8003736:	466d      	mov	r5, sp
 8003738:	f106 0410 	add.w	r4, r6, #16
 800373c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003740:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003744:	e885 0003 	stmia.w	r5, {r0, r1}
 8003748:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800374c:	f7fe fc54 	bl	8001ff8 <message_cantx_Shutdown>
  	 msg =0;																							//Set the msg state to 0
 8003750:	4b75      	ldr	r3, [pc, #468]	@ (8003928 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
  	 break;
 8003756:	bf00      	nop
   }
}
   if (htim->Instance == TIM13){					//When the TIMER 14 has a pulse, the function moves 1 iteration forward, up to 5 times
 8003758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a73      	ldr	r2, [pc, #460]	@ (800392c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	f040 8175 	bne.w	8003a4e <HAL_TIM_PeriodElapsedCallback+0x51e>
	if((RX_VOLT_TEMP<=2*TOTAL_IC) && (RX_VOLT_TEMP > 0)){						//Enters the function if RX_VOLT_TEMP is between 1 and 2*TOTAL_IC, so that the odd ones will be the TEMP Rx and the pair ones will be the VOLT Rx
 8003764:	4b72      	ldr	r3, [pc, #456]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4b72      	ldr	r3, [pc, #456]	@ (8003934 <HAL_TIM_PeriodElapsedCallback+0x404>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	429a      	cmp	r2, r3
 8003772:	f300 8169 	bgt.w	8003a48 <HAL_TIM_PeriodElapsedCallback+0x518>
 8003776:	4b6e      	ldr	r3, [pc, #440]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8164 	beq.w	8003a48 <HAL_TIM_PeriodElapsedCallback+0x518>
	   if((RX_VOLT_TEMP == 1) || (RX_VOLT_TEMP == 3) || (RX_VOLT_TEMP == 5) || (RX_VOLT_TEMP == 7) || (RX_VOLT_TEMP == 9) || (RX_VOLT_TEMP == 11) || (RX_VOLT_TEMP == 13) || (RX_VOLT_TEMP == 15) || (RX_VOLT_TEMP == 17) || (RX_VOLT_TEMP == 19) || (RX_VOLT_TEMP == 21) || (RX_VOLT_TEMP == 23) || (RX_VOLT_TEMP == 25) || (RX_VOLT_TEMP == 27) || (RX_VOLT_TEMP == 29)){
 8003780:	4b6b      	ldr	r3, [pc, #428]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d037      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8003788:	4b69      	ldr	r3, [pc, #420]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d033      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8003790:	4b67      	ldr	r3, [pc, #412]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d02f      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8003798:	4b65      	ldr	r3, [pc, #404]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b07      	cmp	r3, #7
 800379e:	d02b      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037a0:	4b63      	ldr	r3, [pc, #396]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b09      	cmp	r3, #9
 80037a6:	d027      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037a8:	4b61      	ldr	r3, [pc, #388]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b0b      	cmp	r3, #11
 80037ae:	d023      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b0d      	cmp	r3, #13
 80037b6:	d01f      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	d01b      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b11      	cmp	r3, #17
 80037c6:	d017      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037c8:	4b59      	ldr	r3, [pc, #356]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b13      	cmp	r3, #19
 80037ce:	d013      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037d0:	4b57      	ldr	r3, [pc, #348]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b15      	cmp	r3, #21
 80037d6:	d00f      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037d8:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b17      	cmp	r3, #23
 80037de:	d00b      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037e0:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b19      	cmp	r3, #25
 80037e6:	d007      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037e8:	4b51      	ldr	r3, [pc, #324]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b1b      	cmp	r3, #27
 80037ee:	d003      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80037f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b1d      	cmp	r3, #29
 80037f6:	d13d      	bne.n	8003874 <HAL_TIM_PeriodElapsedCallback+0x344>
		   message_cantx_TEMPERATURES_IT(COBID_TEMP, IC_TEMP, hcan2, temperatures_conv, TxData, TxHeader); //Send all voltages of a slave through CAN 2, the slave iterates by summing 1 to the IC
 80037f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003938 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80037fa:	f8b3 c000 	ldrh.w	ip, [r3]
 80037fe:	4b4f      	ldr	r3, [pc, #316]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8003800:	f893 e000 	ldrb.w	lr, [r3]
 8003804:	4e4e      	ldr	r6, [pc, #312]	@ (8003940 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8003806:	4b46      	ldr	r3, [pc, #280]	@ (8003920 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8003808:	ac0a      	add	r4, sp, #40	@ 0x28
 800380a:	461d      	mov	r5, r3
 800380c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800380e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003810:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003814:	e884 0003 	stmia.w	r4, {r0, r1}
 8003818:	4b42      	ldr	r3, [pc, #264]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 800381a:	9309      	str	r3, [sp, #36]	@ 0x24
 800381c:	4b49      	ldr	r3, [pc, #292]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800381e:	9308      	str	r3, [sp, #32]
 8003820:	466d      	mov	r5, sp
 8003822:	f106 0408 	add.w	r4, r6, #8
 8003826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800382e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003832:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003836:	4671      	mov	r1, lr
 8003838:	4660      	mov	r0, ip
 800383a:	f7fd ff83 	bl	8001744 <message_cantx_TEMPERATURES_IT>
		   IC_TEMP = IC_TEMP+1;													//Sum 1 to the IC
 800383e:	4b3f      	ldr	r3, [pc, #252]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8003848:	701a      	strb	r2, [r3, #0]
		   if(IC_TEMP<TOTAL_IC) COBID_TEMP += 2;
 800384a:	4b3c      	ldr	r3, [pc, #240]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d206      	bcs.n	8003864 <HAL_TIM_PeriodElapsedCallback+0x334>
 8003856:	4b38      	ldr	r3, [pc, #224]	@ (8003938 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	3302      	adds	r3, #2
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	e07f      	b.n	8003964 <HAL_TIM_PeriodElapsedCallback+0x434>
		   else IC_TEMP = 0, COBID_TEMP = 0x11A;
 8003864:	4b35      	ldr	r3, [pc, #212]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	4b33      	ldr	r3, [pc, #204]	@ (8003938 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800386c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003870:	801a      	strh	r2, [r3, #0]
		   if(IC_TEMP<TOTAL_IC) COBID_TEMP += 2;
 8003872:	e077      	b.n	8003964 <HAL_TIM_PeriodElapsedCallback+0x434>
	   }

	   else{
		   message_cantx_VOLTATJES_IT(COBID_VOLT, IC_VOLT, hcan2, voltatjes, TxData, TxHeader);
 8003874:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8003876:	f8b3 c000 	ldrh.w	ip, [r3]
 800387a:	4b34      	ldr	r3, [pc, #208]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800387c:	f893 e000 	ldrb.w	lr, [r3]
 8003880:	4e2f      	ldr	r6, [pc, #188]	@ (8003940 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8003882:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8003884:	ac0a      	add	r4, sp, #40	@ 0x28
 8003886:	461d      	mov	r5, r3
 8003888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800388a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800388c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003890:	e884 0003 	stmia.w	r4, {r0, r1}
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8003896:	9309      	str	r3, [sp, #36]	@ 0x24
 8003898:	4b2d      	ldr	r3, [pc, #180]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800389a:	9308      	str	r3, [sp, #32]
 800389c:	466d      	mov	r5, sp
 800389e:	f106 0408 	add.w	r4, r6, #8
 80038a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80038ae:	e896 000c 	ldmia.w	r6, {r2, r3}
 80038b2:	4671      	mov	r1, lr
 80038b4:	4660      	mov	r0, ip
 80038b6:	f7fe f83d 	bl	8001934 <message_cantx_VOLTATJES_IT>
		   uint8_t increments[15] = {3,2,3,3,2,3,3,2,3,3,2,3,3,2,3};
 80038ba:	4b26      	ldr	r3, [pc, #152]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80038bc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80038c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038c2:	c407      	stmia	r4!, {r0, r1, r2}
 80038c4:	8023      	strh	r3, [r4, #0]
 80038c6:	3402      	adds	r4, #2
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	7023      	strb	r3, [r4, #0]
		   IC_VOLT = IC_VOLT+1;
 80038cc:	4b1f      	ldr	r3, [pc, #124]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b1d      	ldr	r3, [pc, #116]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80038d6:	701a      	strb	r2, [r3, #0]
		   if (IC_VOLT < TOTAL_IC) COBID_VOLT += increments[IC_VOLT-1];
 80038d8:	4b1c      	ldr	r3, [pc, #112]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d239      	bcs.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x428>
 80038e4:	4b19      	ldr	r3, [pc, #100]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	3318      	adds	r3, #24
 80038ec:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80038f0:	4413      	add	r3, r2
 80038f2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	4413      	add	r3, r2
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	e02e      	b.n	8003964 <HAL_TIM_PeriodElapsedCallback+0x434>
 8003906:	bf00      	nop
 8003908:	20001373 	.word	0x20001373
 800390c:	20001371 	.word	0x20001371
 8003910:	20001372 	.word	0x20001372
 8003914:	20000209 	.word	0x20000209
 8003918:	2000020a 	.word	0x2000020a
 800391c:	200003ac 	.word	0x200003ac
 8003920:	2000139c 	.word	0x2000139c
 8003924:	20001424 	.word	0x20001424
 8003928:	2000137c 	.word	0x2000137c
 800392c:	40001c00 	.word	0x40001c00
 8003930:	20001444 	.word	0x20001444
 8003934:	20000000 	.word	0x20000000
 8003938:	20000214 	.word	0x20000214
 800393c:	20001442 	.word	0x20001442
 8003940:	200003d4 	.word	0x200003d4
 8003944:	20000804 	.word	0x20000804
 8003948:	20000216 	.word	0x20000216
 800394c:	20001443 	.word	0x20001443
 8003950:	200005ac 	.word	0x200005ac
 8003954:	0800800c 	.word	0x0800800c
		   else IC_VOLT = 0, COBID_VOLT = 0xEA;
 8003958:	4b3f      	ldr	r3, [pc, #252]	@ (8003a58 <HAL_TIM_PeriodElapsedCallback+0x528>)
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a5c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8003960:	22ea      	movs	r2, #234	@ 0xea
 8003962:	801a      	strh	r2, [r3, #0]
	   }
	   RX_VOLT_TEMP += 1;
 8003964:	4b3e      	ldr	r3, [pc, #248]	@ (8003a60 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a60 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800396e:	701a      	strb	r2, [r3, #0]

	   message_cantx_SF(hcan2, UT_FLAG, OT_FLAG, OV_FLAG, UV_FLAG, OC_FLAG, Airs_State[3], Airs_State[1], Airs_State[2], SDC_MONITORING, BMS_OK, SD_FLAG, CE_FLAG, UV_FLAG, BLC, TxData, TxHeader);
 8003970:	4b3c      	ldr	r3, [pc, #240]	@ (8003a64 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003976:	4b3c      	ldr	r3, [pc, #240]	@ (8003a68 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	637a      	str	r2, [r7, #52]	@ 0x34
 800397c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a6c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800397e:	7819      	ldrb	r1, [r3, #0]
 8003980:	6339      	str	r1, [r7, #48]	@ 0x30
 8003982:	4b3b      	ldr	r3, [pc, #236]	@ (8003a70 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8003984:	7818      	ldrb	r0, [r3, #0]
 8003986:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003988:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800398a:	781c      	ldrb	r4, [r3, #0]
 800398c:	62bc      	str	r4, [r7, #40]	@ 0x28
 800398e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a78 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8003990:	78dd      	ldrb	r5, [r3, #3]
 8003992:	627d      	str	r5, [r7, #36]	@ 0x24
 8003994:	4b38      	ldr	r3, [pc, #224]	@ (8003a78 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8003996:	785e      	ldrb	r6, [r3, #1]
 8003998:	623e      	str	r6, [r7, #32]
 800399a:	4b37      	ldr	r3, [pc, #220]	@ (8003a78 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800399c:	789e      	ldrb	r6, [r3, #2]
 800399e:	61fe      	str	r6, [r7, #28]
 80039a0:	4b36      	ldr	r3, [pc, #216]	@ (8003a7c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80039a2:	f893 c000 	ldrb.w	ip, [r3]
 80039a6:	4661      	mov	r1, ip
 80039a8:	61b9      	str	r1, [r7, #24]
 80039aa:	4b35      	ldr	r3, [pc, #212]	@ (8003a80 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80039ac:	f893 c000 	ldrb.w	ip, [r3]
 80039b0:	4660      	mov	r0, ip
 80039b2:	6178      	str	r0, [r7, #20]
 80039b4:	4b33      	ldr	r3, [pc, #204]	@ (8003a84 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80039b6:	f893 c000 	ldrb.w	ip, [r3]
 80039ba:	4664      	mov	r4, ip
 80039bc:	613c      	str	r4, [r7, #16]
 80039be:	4b32      	ldr	r3, [pc, #200]	@ (8003a88 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80039c0:	f893 c000 	ldrb.w	ip, [r3]
 80039c4:	4665      	mov	r5, ip
 80039c6:	60fd      	str	r5, [r7, #12]
 80039c8:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80039ca:	f893 c000 	ldrb.w	ip, [r3]
 80039ce:	4666      	mov	r6, ip
 80039d0:	60be      	str	r6, [r7, #8]
 80039d2:	4b2e      	ldr	r3, [pc, #184]	@ (8003a8c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80039d4:	f893 c000 	ldrb.w	ip, [r3]
 80039d8:	4662      	mov	r2, ip
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	4e2c      	ldr	r6, [pc, #176]	@ (8003a90 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80039de:	4b2d      	ldr	r3, [pc, #180]	@ (8003a94 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80039e0:	ad15      	add	r5, sp, #84	@ 0x54
 80039e2:	461c      	mov	r4, r3
 80039e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80039f0:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80039f2:	9314      	str	r3, [sp, #80]	@ 0x50
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	9213      	str	r2, [sp, #76]	@ 0x4c
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80039fc:	68fd      	ldr	r5, [r7, #12]
 80039fe:	9511      	str	r5, [sp, #68]	@ 0x44
 8003a00:	693c      	ldr	r4, [r7, #16]
 8003a02:	9410      	str	r4, [sp, #64]	@ 0x40
 8003a04:	6978      	ldr	r0, [r7, #20]
 8003a06:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	910e      	str	r1, [sp, #56]	@ 0x38
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	920d      	str	r2, [sp, #52]	@ 0x34
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	930c      	str	r3, [sp, #48]	@ 0x30
 8003a14:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8003a16:	950b      	str	r5, [sp, #44]	@ 0x2c
 8003a18:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003a1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8003a1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a1e:	9009      	str	r0, [sp, #36]	@ 0x24
 8003a20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a22:	9108      	str	r1, [sp, #32]
 8003a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a26:	9207      	str	r2, [sp, #28]
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	9306      	str	r3, [sp, #24]
 8003a2c:	466d      	mov	r5, sp
 8003a2e:	f106 0410 	add.w	r4, r6, #16
 8003a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003a42:	f7fe f99f 	bl	8001d84 <message_cantx_SF>
	}
	else RX_VOLT_TEMP = 0;
   }

}
 8003a46:	e002      	b.n	8003a4e <HAL_TIM_PeriodElapsedCallback+0x51e>
	else RX_VOLT_TEMP = 0;
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	3754      	adds	r7, #84	@ 0x54
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20001443 	.word	0x20001443
 8003a5c:	20000216 	.word	0x20000216
 8003a60:	20001444 	.word	0x20001444
 8003a64:	20001374 	.word	0x20001374
 8003a68:	2000020d 	.word	0x2000020d
 8003a6c:	2000020b 	.word	0x2000020b
 8003a70:	2000020c 	.word	0x2000020c
 8003a74:	2000020e 	.word	0x2000020e
 8003a78:	20001378 	.word	0x20001378
 8003a7c:	20001373 	.word	0x20001373
 8003a80:	20000204 	.word	0x20000204
 8003a84:	2000020f 	.word	0x2000020f
 8003a88:	20000210 	.word	0x20000210
 8003a8c:	2000137e 	.word	0x2000137e
 8003a90:	200003d4 	.word	0x200003d4
 8003a94:	2000139c 	.word	0x2000139c
 8003a98:	20001424 	.word	0x20001424

08003a9c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003aae:	f001 fa85 	bl	8004fbc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003abe:	231f      	movs	r3, #31
 8003ac0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003ac2:	2387      	movs	r3, #135	@ 0x87
 8003ac4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003aca:	2300      	movs	r3, #0
 8003acc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003ade:	463b      	mov	r3, r7
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 faa3 	bl	800502c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003ae6:	2004      	movs	r0, #4
 8003ae8:	f001 fa80 	bl	8004fec <HAL_MPU_Enable>

}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003af8:	b672      	cpsid	i
}
 8003afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <Error_Handler+0x8>

08003b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <HAL_MspInit+0x44>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b44 <HAL_MspInit+0x44>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_MspInit+0x44>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1e:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <HAL_MspInit+0x44>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <HAL_MspInit+0x44>)
 8003b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_MspInit+0x44>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800

08003b48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	@ 0x30
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f107 031c 	add.w	r3, r7, #28
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5d      	ldr	r2, [pc, #372]	@ (8003cdc <HAL_CAN_MspInit+0x194>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d151      	bne.n	8003c0e <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003b6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ce0 <HAL_CAN_MspInit+0x198>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4a5b      	ldr	r2, [pc, #364]	@ (8003ce0 <HAL_CAN_MspInit+0x198>)
 8003b72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003b74:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce0 <HAL_CAN_MspInit+0x198>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d10b      	bne.n	8003b94 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003b7c:	4b59      	ldr	r3, [pc, #356]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	4a58      	ldr	r2, [pc, #352]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003b82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b88:	4b56      	ldr	r3, [pc, #344]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b94:	4b53      	ldr	r3, [pc, #332]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	4a52      	ldr	r2, [pc, #328]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003b9a:	f043 0308 	orr.w	r3, r3, #8
 8003b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba0:	4b50      	ldr	r3, [pc, #320]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003bac:	2303      	movs	r3, #3
 8003bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003bbc:	2309      	movs	r3, #9
 8003bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bc0:	f107 031c 	add.w	r3, r7, #28
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4848      	ldr	r0, [pc, #288]	@ (8003ce8 <HAL_CAN_MspInit+0x1a0>)
 8003bc8:	f001 fa96 	bl	80050f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2101      	movs	r1, #1
 8003bd0:	2013      	movs	r0, #19
 8003bd2:	f001 f9bc 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003bd6:	2013      	movs	r0, #19
 8003bd8:	f001 f9d5 	bl	8004f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2103      	movs	r1, #3
 8003be0:	2014      	movs	r0, #20
 8003be2:	f001 f9b4 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003be6:	2014      	movs	r0, #20
 8003be8:	f001 f9cd 	bl	8004f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2103      	movs	r1, #3
 8003bf0:	2015      	movs	r0, #21
 8003bf2:	f001 f9ac 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003bf6:	2015      	movs	r0, #21
 8003bf8:	f001 f9c5 	bl	8004f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2100      	movs	r1, #0
 8003c00:	2016      	movs	r0, #22
 8003c02:	f001 f9a4 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003c06:	2016      	movs	r0, #22
 8003c08:	f001 f9bd 	bl	8004f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003c0c:	e062      	b.n	8003cd4 <HAL_CAN_MspInit+0x18c>
  else if(hcan->Instance==CAN2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a36      	ldr	r2, [pc, #216]	@ (8003cec <HAL_CAN_MspInit+0x1a4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d15d      	bne.n	8003cd4 <HAL_CAN_MspInit+0x18c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003c18:	4b32      	ldr	r3, [pc, #200]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	4a31      	ldr	r2, [pc, #196]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c24:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003c30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce0 <HAL_CAN_MspInit+0x198>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce0 <HAL_CAN_MspInit+0x198>)
 8003c38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003c3a:	4b29      	ldr	r3, [pc, #164]	@ (8003ce0 <HAL_CAN_MspInit+0x198>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10b      	bne.n	8003c5a <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003c42:	4b28      	ldr	r3, [pc, #160]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4a27      	ldr	r2, [pc, #156]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4e:	4b25      	ldr	r3, [pc, #148]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c66:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce4 <HAL_CAN_MspInit+0x19c>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003c72:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c80:	2303      	movs	r3, #3
 8003c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003c84:	2309      	movs	r3, #9
 8003c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c88:	f107 031c 	add.w	r3, r7, #28
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4818      	ldr	r0, [pc, #96]	@ (8003cf0 <HAL_CAN_MspInit+0x1a8>)
 8003c90:	f001 fa32 	bl	80050f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	2100      	movs	r1, #0
 8003c98:	203f      	movs	r0, #63	@ 0x3f
 8003c9a:	f001 f958 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8003c9e:	203f      	movs	r0, #63	@ 0x3f
 8003ca0:	f001 f971 	bl	8004f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	2040      	movs	r0, #64	@ 0x40
 8003caa:	f001 f950 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003cae:	2040      	movs	r0, #64	@ 0x40
 8003cb0:	f001 f969 	bl	8004f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 2, 0);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	2041      	movs	r0, #65	@ 0x41
 8003cba:	f001 f948 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003cbe:	2041      	movs	r0, #65	@ 0x41
 8003cc0:	f001 f961 	bl	8004f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2042      	movs	r0, #66	@ 0x42
 8003cca:	f001 f940 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8003cce:	2042      	movs	r0, #66	@ 0x42
 8003cd0:	f001 f959 	bl	8004f86 <HAL_NVIC_EnableIRQ>
}
 8003cd4:	bf00      	nop
 8003cd6:	3730      	adds	r7, #48	@ 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40006400 	.word	0x40006400
 8003ce0:	20001448 	.word	0x20001448
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020c00 	.word	0x40020c00
 8003cec:	40006800 	.word	0x40006800
 8003cf0:	40020400 	.word	0x40020400

08003cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a23      	ldr	r2, [pc, #140]	@ (8003da0 <HAL_SPI_MspInit+0xac>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d13f      	bne.n	8003d96 <HAL_SPI_MspInit+0xa2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d16:	4b23      	ldr	r3, [pc, #140]	@ (8003da4 <HAL_SPI_MspInit+0xb0>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	4a22      	ldr	r2, [pc, #136]	@ (8003da4 <HAL_SPI_MspInit+0xb0>)
 8003d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d22:	4b20      	ldr	r3, [pc, #128]	@ (8003da4 <HAL_SPI_MspInit+0xb0>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <HAL_SPI_MspInit+0xb0>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	4a1c      	ldr	r2, [pc, #112]	@ (8003da4 <HAL_SPI_MspInit+0xb0>)
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <HAL_SPI_MspInit+0xb0>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d46:	2308      	movs	r3, #8
 8003d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d52:	2303      	movs	r3, #3
 8003d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d56:	2305      	movs	r3, #5
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d5a:	f107 0314 	add.w	r3, r7, #20
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4811      	ldr	r0, [pc, #68]	@ (8003da8 <HAL_SPI_MspInit+0xb4>)
 8003d62:	f001 f9c9 	bl	80050f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d66:	2330      	movs	r3, #48	@ 0x30
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d72:	2303      	movs	r3, #3
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d76:	2305      	movs	r3, #5
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4809      	ldr	r0, [pc, #36]	@ (8003da8 <HAL_SPI_MspInit+0xb4>)
 8003d82:	f001 f9b9 	bl	80050f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2023      	movs	r0, #35	@ 0x23
 8003d8c:	f001 f8df 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003d90:	2023      	movs	r0, #35	@ 0x23
 8003d92:	f001 f8f8 	bl	8004f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d96:	bf00      	nop
 8003d98:	3728      	adds	r7, #40	@ 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40013000 	.word	0x40013000
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020400 	.word	0x40020400

08003dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <HAL_TIM_Base_MspInit+0x78>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d114      	bne.n	8003de8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <HAL_TIM_Base_MspInit+0x7c>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <HAL_TIM_Base_MspInit+0x7c>)
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dca:	4b17      	ldr	r3, [pc, #92]	@ (8003e28 <HAL_TIM_Base_MspInit+0x7c>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2100      	movs	r1, #0
 8003dda:	202c      	movs	r0, #44	@ 0x2c
 8003ddc:	f001 f8b7 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003de0:	202c      	movs	r0, #44	@ 0x2c
 8003de2:	f001 f8d0 	bl	8004f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003de6:	e018      	b.n	8003e1a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM14)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0f      	ldr	r2, [pc, #60]	@ (8003e2c <HAL_TIM_Base_MspInit+0x80>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d113      	bne.n	8003e1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <HAL_TIM_Base_MspInit+0x7c>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e28 <HAL_TIM_Base_MspInit+0x7c>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <HAL_TIM_Base_MspInit+0x7c>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	202d      	movs	r0, #45	@ 0x2d
 8003e10:	f001 f89d 	bl	8004f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003e14:	202d      	movs	r0, #45	@ 0x2d
 8003e16:	f001 f8b6 	bl	8004f86 <HAL_NVIC_EnableIRQ>
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40001c00 	.word	0x40001c00
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40002000 	.word	0x40002000

08003e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e34:	bf00      	nop
 8003e36:	e7fd      	b.n	8003e34 <NMI_Handler+0x4>

08003e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <HardFault_Handler+0x4>

08003e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <MemManage_Handler+0x4>

08003e48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <BusFault_Handler+0x4>

08003e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <UsageFault_Handler+0x4>

08003e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e86:	f000 f8e9 	bl	800405c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e94:	4802      	ldr	r0, [pc, #8]	@ (8003ea0 <CAN1_TX_IRQHandler+0x10>)
 8003e96:	f000 fd59 	bl	800494c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200003ac 	.word	0x200003ac

08003ea4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ea8:	4802      	ldr	r0, [pc, #8]	@ (8003eb4 <CAN1_RX0_IRQHandler+0x10>)
 8003eaa:	f000 fd4f 	bl	800494c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200003ac 	.word	0x200003ac

08003eb8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ebc:	4802      	ldr	r0, [pc, #8]	@ (8003ec8 <CAN1_RX1_IRQHandler+0x10>)
 8003ebe:	f000 fd45 	bl	800494c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200003ac 	.word	0x200003ac

08003ecc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ed0:	4802      	ldr	r0, [pc, #8]	@ (8003edc <CAN1_SCE_IRQHandler+0x10>)
 8003ed2:	f000 fd3b 	bl	800494c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	200003ac 	.word	0x200003ac

08003ee0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ee4:	4802      	ldr	r0, [pc, #8]	@ (8003ef0 <SPI1_IRQHandler+0x10>)
 8003ee6:	f002 fbcd 	bl	8006684 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200003fc 	.word	0x200003fc

08003ef4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003ef8:	4802      	ldr	r0, [pc, #8]	@ (8003f04 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003efa:	f002 ff2f 	bl	8006d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000460 	.word	0x20000460

08003f08 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003f0c:	4802      	ldr	r0, [pc, #8]	@ (8003f18 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003f0e:	f002 ff25 	bl	8006d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200004ac 	.word	0x200004ac

08003f1c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f20:	4802      	ldr	r0, [pc, #8]	@ (8003f2c <CAN2_TX_IRQHandler+0x10>)
 8003f22:	f000 fd13 	bl	800494c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200003d4 	.word	0x200003d4

08003f30 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f34:	4802      	ldr	r0, [pc, #8]	@ (8003f40 <CAN2_RX0_IRQHandler+0x10>)
 8003f36:	f000 fd09 	bl	800494c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200003d4 	.word	0x200003d4

08003f44 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <CAN2_RX1_IRQHandler+0x10>)
 8003f4a:	f000 fcff 	bl	800494c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200003d4 	.word	0x200003d4

08003f58 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f5c:	4802      	ldr	r0, [pc, #8]	@ (8003f68 <CAN2_SCE_IRQHandler+0x10>)
 8003f5e:	f000 fcf5 	bl	800494c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200003d4 	.word	0x200003d4

08003f6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f70:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <SystemInit+0x20>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f76:	4a05      	ldr	r2, [pc, #20]	@ (8003f8c <SystemInit+0x20>)
 8003f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f94:	480d      	ldr	r0, [pc, #52]	@ (8003fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f96:	490e      	ldr	r1, [pc, #56]	@ (8003fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f98:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f9c:	e002      	b.n	8003fa4 <LoopCopyDataInit>

08003f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fa2:	3304      	adds	r3, #4

08003fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fa8:	d3f9      	bcc.n	8003f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003faa:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fac:	4c0b      	ldr	r4, [pc, #44]	@ (8003fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fb0:	e001      	b.n	8003fb6 <LoopFillZerobss>

08003fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fb4:	3204      	adds	r2, #4

08003fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fb8:	d3fb      	bcc.n	8003fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003fba:	f7ff ffd7 	bl	8003f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fbe:	f003 f8db 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fc2:	f7fe fd7b 	bl	8002abc <main>
  bx  lr    
 8003fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fd0:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003fd4:	0800803c 	.word	0x0800803c
  ldr r2, =_sbss
 8003fd8:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8003fdc:	20001450 	.word	0x20001450

08003fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fe0:	e7fe      	b.n	8003fe0 <ADC_IRQHandler>

08003fe2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe6:	2003      	movs	r0, #3
 8003fe8:	f000 ffa6 	bl	8004f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fec:	200f      	movs	r0, #15
 8003fee:	f000 f805 	bl	8003ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ff2:	f7ff fd85 	bl	8003b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004004:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <HAL_InitTick+0x54>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <HAL_InitTick+0x58>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4619      	mov	r1, r3
 800400e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004012:	fbb3 f3f1 	udiv	r3, r3, r1
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ffc1 	bl	8004fa2 <HAL_SYSTICK_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e00e      	b.n	8004048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b0f      	cmp	r3, #15
 800402e:	d80a      	bhi.n	8004046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004030:	2200      	movs	r2, #0
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	f000 ff89 	bl	8004f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800403c:	4a06      	ldr	r2, [pc, #24]	@ (8004058 <HAL_InitTick+0x5c>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000218 	.word	0x20000218
 8004054:	20000220 	.word	0x20000220
 8004058:	2000021c 	.word	0x2000021c

0800405c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004060:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_IncTick+0x20>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_IncTick+0x24>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4413      	add	r3, r2
 800406c:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <HAL_IncTick+0x24>)
 800406e:	6013      	str	r3, [r2, #0]
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000220 	.word	0x20000220
 8004080:	2000144c 	.word	0x2000144c

08004084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return uwTick;
 8004088:	4b03      	ldr	r3, [pc, #12]	@ (8004098 <HAL_GetTick+0x14>)
 800408a:	681b      	ldr	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000144c 	.word	0x2000144c

0800409c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040a4:	f7ff ffee 	bl	8004084 <HAL_GetTick>
 80040a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d005      	beq.n	80040c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040b6:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <HAL_Delay+0x44>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040c2:	bf00      	nop
 80040c4:	f7ff ffde 	bl	8004084 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d8f7      	bhi.n	80040c4 <HAL_Delay+0x28>
  {
  }
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000220 	.word	0x20000220

080040e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0ed      	b.n	80042d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d102      	bne.n	8004108 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fd20 	bl	8003b48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004118:	f7ff ffb4 	bl	8004084 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800411e:	e012      	b.n	8004146 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004120:	f7ff ffb0 	bl	8004084 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b0a      	cmp	r3, #10
 800412c:	d90b      	bls.n	8004146 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2205      	movs	r2, #5
 800413e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0c5      	b.n	80042d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0e5      	beq.n	8004120 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0202 	bic.w	r2, r2, #2
 8004162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004164:	f7ff ff8e 	bl	8004084 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800416a:	e012      	b.n	8004192 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800416c:	f7ff ff8a 	bl	8004084 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b0a      	cmp	r3, #10
 8004178:	d90b      	bls.n	8004192 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2205      	movs	r2, #5
 800418a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e09f      	b.n	80042d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7e1b      	ldrb	r3, [r3, #24]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d108      	bne.n	80041ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e007      	b.n	80041ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7e5b      	ldrb	r3, [r3, #25]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d108      	bne.n	80041e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e007      	b.n	80041f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7e9b      	ldrb	r3, [r3, #26]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d108      	bne.n	800420e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0220 	orr.w	r2, r2, #32
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e007      	b.n	800421e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0220 	bic.w	r2, r2, #32
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	7edb      	ldrb	r3, [r3, #27]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d108      	bne.n	8004238 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0210 	bic.w	r2, r2, #16
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e007      	b.n	8004248 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0210 	orr.w	r2, r2, #16
 8004246:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7f1b      	ldrb	r3, [r3, #28]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d108      	bne.n	8004262 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0208 	orr.w	r2, r2, #8
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e007      	b.n	8004272 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0208 	bic.w	r2, r2, #8
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	7f5b      	ldrb	r3, [r3, #29]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d108      	bne.n	800428c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0204 	orr.w	r2, r2, #4
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e007      	b.n	800429c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	ea42 0103 	orr.w	r1, r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	1e5a      	subs	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d003      	beq.n	8004302 <HAL_CAN_ConfigFilter+0x26>
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	f040 80c7 	bne.w	8004490 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a69      	ldr	r2, [pc, #420]	@ (80044ac <HAL_CAN_ConfigFilter+0x1d0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d001      	beq.n	8004310 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800430c:	4b68      	ldr	r3, [pc, #416]	@ (80044b0 <HAL_CAN_ConfigFilter+0x1d4>)
 800430e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004316:	f043 0201 	orr.w	r2, r3, #1
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	4a63      	ldr	r2, [pc, #396]	@ (80044b0 <HAL_CAN_ConfigFilter+0x1d4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d111      	bne.n	800434c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800432e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	431a      	orrs	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2201      	movs	r2, #1
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d123      	bne.n	80043be <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	43db      	mvns	r3, r3
 8004380:	401a      	ands	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004398:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3248      	adds	r2, #72	@ 0x48
 800439e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043b4:	6979      	ldr	r1, [r7, #20]
 80043b6:	3348      	adds	r3, #72	@ 0x48
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d122      	bne.n	800440c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3248      	adds	r2, #72	@ 0x48
 80043ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004400:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004402:	6979      	ldr	r1, [r7, #20]
 8004404:	3348      	adds	r3, #72	@ 0x48
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	440b      	add	r3, r1
 800440a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	43db      	mvns	r3, r3
 800441e:	401a      	ands	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004426:	e007      	b.n	8004438 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	431a      	orrs	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	43db      	mvns	r3, r3
 800444a:	401a      	ands	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004452:	e007      	b.n	8004464 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	431a      	orrs	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d107      	bne.n	800447c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	431a      	orrs	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e006      	b.n	800449e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40003400 	.word	0x40003400
 80044b0:	40006400 	.word	0x40006400

080044b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d12e      	bne.n	8004526 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044e0:	f7ff fdd0 	bl	8004084 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044e6:	e012      	b.n	800450e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044e8:	f7ff fdcc 	bl	8004084 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b0a      	cmp	r3, #10
 80044f4:	d90b      	bls.n	800450e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2205      	movs	r2, #5
 8004506:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e012      	b.n	8004534 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e006      	b.n	8004534 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	@ 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004550:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800455a:	7ffb      	ldrb	r3, [r7, #31]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d003      	beq.n	8004568 <HAL_CAN_AddTxMessage+0x2c>
 8004560:	7ffb      	ldrb	r3, [r7, #31]
 8004562:	2b02      	cmp	r3, #2
 8004564:	f040 80ad 	bne.w	80046c2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8095 	beq.w	80046b2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	0e1b      	lsrs	r3, r3, #24
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004592:	2201      	movs	r2, #1
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	409a      	lsls	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	6809      	ldr	r1, [r1, #0]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	3318      	adds	r3, #24
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	440b      	add	r3, r1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e00f      	b.n	80045e0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045ca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045d0:	68f9      	ldr	r1, [r7, #12]
 80045d2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80045d4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3318      	adds	r3, #24
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	440b      	add	r3, r1
 80045de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	3318      	adds	r3, #24
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	440b      	add	r3, r1
 80045f0:	3304      	adds	r3, #4
 80045f2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	7d1b      	ldrb	r3, [r3, #20]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d111      	bne.n	8004620 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	3318      	adds	r3, #24
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	6811      	ldr	r1, [r2, #0]
 8004610:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3318      	adds	r3, #24
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	440b      	add	r3, r1
 800461c:	3304      	adds	r3, #4
 800461e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3307      	adds	r3, #7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	061a      	lsls	r2, r3, #24
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3306      	adds	r3, #6
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3305      	adds	r3, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	4313      	orrs	r3, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	3204      	adds	r2, #4
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	4610      	mov	r0, r2
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6811      	ldr	r1, [r2, #0]
 8004648:	ea43 0200 	orr.w	r2, r3, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	440b      	add	r3, r1
 8004652:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004656:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3303      	adds	r3, #3
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	061a      	lsls	r2, r3, #24
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3302      	adds	r3, #2
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	041b      	lsls	r3, r3, #16
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3301      	adds	r3, #1
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	4313      	orrs	r3, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	7812      	ldrb	r2, [r2, #0]
 8004678:	4610      	mov	r0, r2
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	6811      	ldr	r1, [r2, #0]
 800467e:	ea43 0200 	orr.w	r2, r3, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	440b      	add	r3, r1
 8004688:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800468c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	3318      	adds	r3, #24
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	4413      	add	r3, r2
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	6811      	ldr	r1, [r2, #0]
 80046a0:	f043 0201 	orr.w	r2, r3, #1
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	3318      	adds	r3, #24
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	440b      	add	r3, r1
 80046ac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e00e      	b.n	80046d0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e006      	b.n	80046d0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3724      	adds	r7, #36	@ 0x24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d003      	beq.n	8004700 <HAL_CAN_GetRxMessage+0x24>
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	f040 80f3 	bne.w	80048e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10e      	bne.n	8004724 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0e7      	b.n	80048f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d107      	bne.n	8004742 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0d8      	b.n	80048f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	331b      	adds	r3, #27
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	4413      	add	r3, r2
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0204 	and.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	331b      	adds	r3, #27
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4413      	add	r3, r2
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	0d5b      	lsrs	r3, r3, #21
 8004770:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e00b      	b.n	8004792 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	331b      	adds	r3, #27
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	4413      	add	r3, r2
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	331b      	adds	r3, #27
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	4413      	add	r3, r2
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0202 	and.w	r2, r3, #2
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	331b      	adds	r3, #27
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	4413      	add	r3, r2
 80047b4:	3304      	adds	r3, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 020f 	and.w	r2, r3, #15
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	331b      	adds	r3, #27
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	4413      	add	r3, r2
 80047cc:	3304      	adds	r3, #4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	331b      	adds	r3, #27
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	4413      	add	r3, r2
 80047e4:	3304      	adds	r3, #4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4413      	add	r3, r2
 8004810:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	0a1a      	lsrs	r2, r3, #8
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	3301      	adds	r3, #1
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	4413      	add	r3, r2
 800482a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0c1a      	lsrs	r2, r3, #16
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	3302      	adds	r3, #2
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	4413      	add	r3, r2
 8004844:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	0e1a      	lsrs	r2, r3, #24
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	3303      	adds	r3, #3
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	4413      	add	r3, r2
 800485e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	3304      	adds	r3, #4
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0a1a      	lsrs	r2, r3, #8
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	3305      	adds	r3, #5
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	4413      	add	r3, r2
 8004890:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	0c1a      	lsrs	r2, r3, #16
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	3306      	adds	r3, #6
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0e1a      	lsrs	r2, r3, #24
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	3307      	adds	r3, #7
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d108      	bne.n	80048d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0220 	orr.w	r2, r2, #32
 80048ce:	60da      	str	r2, [r3, #12]
 80048d0:	e007      	b.n	80048e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0220 	orr.w	r2, r2, #32
 80048e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e006      	b.n	80048f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004910:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d002      	beq.n	800491e <HAL_CAN_ActivateNotification+0x1e>
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d109      	bne.n	8004932 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6959      	ldr	r1, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e006      	b.n	8004940 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	@ 0x28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d07c      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d023      	beq.n	80049e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f983 	bl	8004cba <HAL_CAN_TxMailbox0CompleteCallback>
 80049b4:	e016      	b.n	80049e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c8:	e00c      	b.n	80049e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
 80049dc:	e002      	b.n	80049e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f989 	bl	8004cf6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d024      	beq.n	8004a38 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f963 	bl	8004cce <HAL_CAN_TxMailbox1CompleteCallback>
 8004a08:	e016      	b.n	8004a38 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a1c:	e00c      	b.n	8004a38 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d004      	beq.n	8004a32 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a30:	e002      	b.n	8004a38 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f969 	bl	8004d0a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d024      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f943 	bl	8004ce2 <HAL_CAN_TxMailbox2CompleteCallback>
 8004a5c:	e016      	b.n	8004a8c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a70:	e00c      	b.n	8004a8c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a84:	e002      	b.n	8004a8c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f949 	bl	8004d1e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2210      	movs	r2, #16
 8004aae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d006      	beq.n	8004ad2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f930 	bl	8004d32 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fe fc96 	bl	800341c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2210      	movs	r2, #16
 8004b12:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f908 	bl	8004d46 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d009      	beq.n	8004b54 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fe fcac 	bl	80034ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f8f2 	bl	8004d5a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d006      	beq.n	8004b98 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2208      	movs	r2, #8
 8004b90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8eb 	bl	8004d6e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d07b      	beq.n	8004c9a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d072      	beq.n	8004c92 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	f043 0302 	orr.w	r3, r3, #2
 8004be2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	f043 0304 	orr.w	r3, r3, #4
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d043      	beq.n	8004c92 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03e      	beq.n	8004c92 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c1a:	2b60      	cmp	r3, #96	@ 0x60
 8004c1c:	d02b      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x32a>
 8004c1e:	2b60      	cmp	r3, #96	@ 0x60
 8004c20:	d82e      	bhi.n	8004c80 <HAL_CAN_IRQHandler+0x334>
 8004c22:	2b50      	cmp	r3, #80	@ 0x50
 8004c24:	d022      	beq.n	8004c6c <HAL_CAN_IRQHandler+0x320>
 8004c26:	2b50      	cmp	r3, #80	@ 0x50
 8004c28:	d82a      	bhi.n	8004c80 <HAL_CAN_IRQHandler+0x334>
 8004c2a:	2b40      	cmp	r3, #64	@ 0x40
 8004c2c:	d019      	beq.n	8004c62 <HAL_CAN_IRQHandler+0x316>
 8004c2e:	2b40      	cmp	r3, #64	@ 0x40
 8004c30:	d826      	bhi.n	8004c80 <HAL_CAN_IRQHandler+0x334>
 8004c32:	2b30      	cmp	r3, #48	@ 0x30
 8004c34:	d010      	beq.n	8004c58 <HAL_CAN_IRQHandler+0x30c>
 8004c36:	2b30      	cmp	r3, #48	@ 0x30
 8004c38:	d822      	bhi.n	8004c80 <HAL_CAN_IRQHandler+0x334>
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d002      	beq.n	8004c44 <HAL_CAN_IRQHandler+0x2f8>
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d005      	beq.n	8004c4e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004c42:	e01d      	b.n	8004c80 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	f043 0308 	orr.w	r3, r3, #8
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004c4c:	e019      	b.n	8004c82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	f043 0310 	orr.w	r3, r3, #16
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004c56:	e014      	b.n	8004c82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5a:	f043 0320 	orr.w	r3, r3, #32
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004c60:	e00f      	b.n	8004c82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004c6a:	e00a      	b.n	8004c82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004c74:	e005      	b.n	8004c82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004c7e:	e000      	b.n	8004c82 <HAL_CAN_IRQHandler+0x336>
            break;
 8004c80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2204      	movs	r2, #4
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f868 	bl	8004d82 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	3728      	adds	r7, #40	@ 0x28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004db4:	4013      	ands	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004dc0:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dc6:	4a04      	ldr	r2, [pc, #16]	@ (8004dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	60d3      	str	r3, [r2, #12]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000ed00 	.word	0xe000ed00
 8004ddc:	05fa0000 	.word	0x05fa0000

08004de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <__NVIC_GetPriorityGrouping+0x18>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	f003 0307 	and.w	r3, r3, #7
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db0b      	blt.n	8004e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	4907      	ldr	r1, [pc, #28]	@ (8004e34 <__NVIC_EnableIRQ+0x38>)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000e100 	.word	0xe000e100

08004e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db0a      	blt.n	8004e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	490c      	ldr	r1, [pc, #48]	@ (8004e84 <__NVIC_SetPriority+0x4c>)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	0112      	lsls	r2, r2, #4
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e60:	e00a      	b.n	8004e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	4908      	ldr	r1, [pc, #32]	@ (8004e88 <__NVIC_SetPriority+0x50>)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	3b04      	subs	r3, #4
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	440b      	add	r3, r1
 8004e76:	761a      	strb	r2, [r3, #24]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000e100 	.word	0xe000e100
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b089      	sub	sp, #36	@ 0x24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f1c3 0307 	rsb	r3, r3, #7
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	bf28      	it	cs
 8004eaa:	2304      	movcs	r3, #4
 8004eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d902      	bls.n	8004ebc <NVIC_EncodePriority+0x30>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3b03      	subs	r3, #3
 8004eba:	e000      	b.n	8004ebe <NVIC_EncodePriority+0x32>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	401a      	ands	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	43d9      	mvns	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee4:	4313      	orrs	r3, r2
         );
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3724      	adds	r7, #36	@ 0x24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f04:	d301      	bcc.n	8004f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f06:	2301      	movs	r3, #1
 8004f08:	e00f      	b.n	8004f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f34 <SysTick_Config+0x40>)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f12:	210f      	movs	r1, #15
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	f7ff ff8e 	bl	8004e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <SysTick_Config+0x40>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f22:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <SysTick_Config+0x40>)
 8004f24:	2207      	movs	r2, #7
 8004f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	e000e010 	.word	0xe000e010

08004f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff ff29 	bl	8004d98 <__NVIC_SetPriorityGrouping>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	4603      	mov	r3, r0
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
 8004f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f60:	f7ff ff3e 	bl	8004de0 <__NVIC_GetPriorityGrouping>
 8004f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	6978      	ldr	r0, [r7, #20]
 8004f6c:	f7ff ff8e 	bl	8004e8c <NVIC_EncodePriority>
 8004f70:	4602      	mov	r2, r0
 8004f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f76:	4611      	mov	r1, r2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff ff5d 	bl	8004e38 <__NVIC_SetPriority>
}
 8004f7e:	bf00      	nop
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ff31 	bl	8004dfc <__NVIC_EnableIRQ>
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ffa2 	bl	8004ef4 <SysTick_Config>
 8004fb0:	4603      	mov	r3, r0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004fc0:	f3bf 8f5f 	dmb	sy
}
 8004fc4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004fc6:	4b07      	ldr	r3, [pc, #28]	@ (8004fe4 <HAL_MPU_Disable+0x28>)
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	4a06      	ldr	r2, [pc, #24]	@ (8004fe4 <HAL_MPU_Disable+0x28>)
 8004fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004fd2:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <HAL_MPU_Disable+0x2c>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	605a      	str	r2, [r3, #4]
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	e000ed00 	.word	0xe000ed00
 8004fe8:	e000ed90 	.word	0xe000ed90

08004fec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8005024 <HAL_MPU_Enable+0x38>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <HAL_MPU_Enable+0x3c>)
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	4a09      	ldr	r2, [pc, #36]	@ (8005028 <HAL_MPU_Enable+0x3c>)
 8005004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005008:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800500a:	f3bf 8f4f 	dsb	sy
}
 800500e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005010:	f3bf 8f6f 	isb	sy
}
 8005014:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	e000ed90 	.word	0xe000ed90
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	785a      	ldrb	r2, [r3, #1]
 8005038:	4b1d      	ldr	r3, [pc, #116]	@ (80050b0 <HAL_MPU_ConfigRegion+0x84>)
 800503a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d029      	beq.n	8005098 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8005044:	4a1a      	ldr	r2, [pc, #104]	@ (80050b0 <HAL_MPU_ConfigRegion+0x84>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	7b1b      	ldrb	r3, [r3, #12]
 8005050:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	7adb      	ldrb	r3, [r3, #11]
 8005056:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005058:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7a9b      	ldrb	r3, [r3, #10]
 800505e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005060:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7b5b      	ldrb	r3, [r3, #13]
 8005066:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005068:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7b9b      	ldrb	r3, [r3, #14]
 800506e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005070:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	7bdb      	ldrb	r3, [r3, #15]
 8005076:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005078:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	7a5b      	ldrb	r3, [r3, #9]
 800507e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005080:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7a1b      	ldrb	r3, [r3, #8]
 8005086:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005088:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	7812      	ldrb	r2, [r2, #0]
 800508e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005090:	4a07      	ldr	r2, [pc, #28]	@ (80050b0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005092:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005094:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005096:	e005      	b.n	80050a4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <HAL_MPU_ConfigRegion+0x84>)
 800509a:	2200      	movs	r2, #0
 800509c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800509e:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <HAL_MPU_ConfigRegion+0x84>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	611a      	str	r2, [r3, #16]
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	e000ed90 	.word	0xe000ed90

080050b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d004      	beq.n	80050d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2280      	movs	r2, #128	@ 0x80
 80050cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e00c      	b.n	80050ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2205      	movs	r2, #5
 80050d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b089      	sub	sp, #36	@ 0x24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e175      	b.n	8005404 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005118:	2201      	movs	r2, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	429a      	cmp	r2, r3
 8005132:	f040 8164 	bne.w	80053fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b01      	cmp	r3, #1
 8005140:	d005      	beq.n	800514e <HAL_GPIO_Init+0x56>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d130      	bne.n	80051b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	2203      	movs	r2, #3
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005184:	2201      	movs	r2, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	43db      	mvns	r3, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4013      	ands	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 0201 	and.w	r2, r3, #1
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d017      	beq.n	80051ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	2203      	movs	r2, #3
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d123      	bne.n	8005240 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	08da      	lsrs	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3208      	adds	r2, #8
 8005200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	220f      	movs	r2, #15
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	08da      	lsrs	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3208      	adds	r2, #8
 800523a:	69b9      	ldr	r1, [r7, #24]
 800523c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	2203      	movs	r2, #3
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0203 	and.w	r2, r3, #3
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80be 	beq.w	80053fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005282:	4b66      	ldr	r3, [pc, #408]	@ (800541c <HAL_GPIO_Init+0x324>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	4a65      	ldr	r2, [pc, #404]	@ (800541c <HAL_GPIO_Init+0x324>)
 8005288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800528c:	6453      	str	r3, [r2, #68]	@ 0x44
 800528e:	4b63      	ldr	r3, [pc, #396]	@ (800541c <HAL_GPIO_Init+0x324>)
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800529a:	4a61      	ldr	r2, [pc, #388]	@ (8005420 <HAL_GPIO_Init+0x328>)
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	089b      	lsrs	r3, r3, #2
 80052a0:	3302      	adds	r3, #2
 80052a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	220f      	movs	r2, #15
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43db      	mvns	r3, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a58      	ldr	r2, [pc, #352]	@ (8005424 <HAL_GPIO_Init+0x32c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d037      	beq.n	8005336 <HAL_GPIO_Init+0x23e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a57      	ldr	r2, [pc, #348]	@ (8005428 <HAL_GPIO_Init+0x330>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d031      	beq.n	8005332 <HAL_GPIO_Init+0x23a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a56      	ldr	r2, [pc, #344]	@ (800542c <HAL_GPIO_Init+0x334>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02b      	beq.n	800532e <HAL_GPIO_Init+0x236>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a55      	ldr	r2, [pc, #340]	@ (8005430 <HAL_GPIO_Init+0x338>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d025      	beq.n	800532a <HAL_GPIO_Init+0x232>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a54      	ldr	r2, [pc, #336]	@ (8005434 <HAL_GPIO_Init+0x33c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d01f      	beq.n	8005326 <HAL_GPIO_Init+0x22e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a53      	ldr	r2, [pc, #332]	@ (8005438 <HAL_GPIO_Init+0x340>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d019      	beq.n	8005322 <HAL_GPIO_Init+0x22a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a52      	ldr	r2, [pc, #328]	@ (800543c <HAL_GPIO_Init+0x344>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_GPIO_Init+0x226>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a51      	ldr	r2, [pc, #324]	@ (8005440 <HAL_GPIO_Init+0x348>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00d      	beq.n	800531a <HAL_GPIO_Init+0x222>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a50      	ldr	r2, [pc, #320]	@ (8005444 <HAL_GPIO_Init+0x34c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d007      	beq.n	8005316 <HAL_GPIO_Init+0x21e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a4f      	ldr	r2, [pc, #316]	@ (8005448 <HAL_GPIO_Init+0x350>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_GPIO_Init+0x21a>
 800530e:	2309      	movs	r3, #9
 8005310:	e012      	b.n	8005338 <HAL_GPIO_Init+0x240>
 8005312:	230a      	movs	r3, #10
 8005314:	e010      	b.n	8005338 <HAL_GPIO_Init+0x240>
 8005316:	2308      	movs	r3, #8
 8005318:	e00e      	b.n	8005338 <HAL_GPIO_Init+0x240>
 800531a:	2307      	movs	r3, #7
 800531c:	e00c      	b.n	8005338 <HAL_GPIO_Init+0x240>
 800531e:	2306      	movs	r3, #6
 8005320:	e00a      	b.n	8005338 <HAL_GPIO_Init+0x240>
 8005322:	2305      	movs	r3, #5
 8005324:	e008      	b.n	8005338 <HAL_GPIO_Init+0x240>
 8005326:	2304      	movs	r3, #4
 8005328:	e006      	b.n	8005338 <HAL_GPIO_Init+0x240>
 800532a:	2303      	movs	r3, #3
 800532c:	e004      	b.n	8005338 <HAL_GPIO_Init+0x240>
 800532e:	2302      	movs	r3, #2
 8005330:	e002      	b.n	8005338 <HAL_GPIO_Init+0x240>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <HAL_GPIO_Init+0x240>
 8005336:	2300      	movs	r3, #0
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	f002 0203 	and.w	r2, r2, #3
 800533e:	0092      	lsls	r2, r2, #2
 8005340:	4093      	lsls	r3, r2
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4313      	orrs	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005348:	4935      	ldr	r1, [pc, #212]	@ (8005420 <HAL_GPIO_Init+0x328>)
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	089b      	lsrs	r3, r3, #2
 800534e:	3302      	adds	r3, #2
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005356:	4b3d      	ldr	r3, [pc, #244]	@ (800544c <HAL_GPIO_Init+0x354>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	43db      	mvns	r3, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800537a:	4a34      	ldr	r2, [pc, #208]	@ (800544c <HAL_GPIO_Init+0x354>)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005380:	4b32      	ldr	r3, [pc, #200]	@ (800544c <HAL_GPIO_Init+0x354>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	43db      	mvns	r3, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4013      	ands	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053a4:	4a29      	ldr	r2, [pc, #164]	@ (800544c <HAL_GPIO_Init+0x354>)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053aa:	4b28      	ldr	r3, [pc, #160]	@ (800544c <HAL_GPIO_Init+0x354>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	43db      	mvns	r3, r3
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	4013      	ands	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053ce:	4a1f      	ldr	r2, [pc, #124]	@ (800544c <HAL_GPIO_Init+0x354>)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053d4:	4b1d      	ldr	r3, [pc, #116]	@ (800544c <HAL_GPIO_Init+0x354>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	43db      	mvns	r3, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4013      	ands	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053f8:	4a14      	ldr	r2, [pc, #80]	@ (800544c <HAL_GPIO_Init+0x354>)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3301      	adds	r3, #1
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b0f      	cmp	r3, #15
 8005408:	f67f ae86 	bls.w	8005118 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	3724      	adds	r7, #36	@ 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800
 8005420:	40013800 	.word	0x40013800
 8005424:	40020000 	.word	0x40020000
 8005428:	40020400 	.word	0x40020400
 800542c:	40020800 	.word	0x40020800
 8005430:	40020c00 	.word	0x40020c00
 8005434:	40021000 	.word	0x40021000
 8005438:	40021400 	.word	0x40021400
 800543c:	40021800 	.word	0x40021800
 8005440:	40021c00 	.word	0x40021c00
 8005444:	40022000 	.word	0x40022000
 8005448:	40022400 	.word	0x40022400
 800544c:	40013c00 	.word	0x40013c00

08005450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	887b      	ldrh	r3, [r7, #2]
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
 800546c:	e001      	b.n	8005472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005472:	7bfb      	ldrb	r3, [r7, #15]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	807b      	strh	r3, [r7, #2]
 800548c:	4613      	mov	r3, r2
 800548e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005490:	787b      	ldrb	r3, [r7, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005496:	887a      	ldrh	r2, [r7, #2]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800549c:	e003      	b.n	80054a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800549e:	887b      	ldrh	r3, [r7, #2]
 80054a0:	041a      	lsls	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	619a      	str	r2, [r3, #24]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	4b23      	ldr	r3, [pc, #140]	@ (800554c <HAL_PWREx_EnableOverDrive+0x98>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	4a22      	ldr	r2, [pc, #136]	@ (800554c <HAL_PWREx_EnableOverDrive+0x98>)
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80054ca:	4b20      	ldr	r3, [pc, #128]	@ (800554c <HAL_PWREx_EnableOverDrive+0x98>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054e2:	f7fe fdcf 	bl	8004084 <HAL_GetTick>
 80054e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054e8:	e009      	b.n	80054fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054ea:	f7fe fdcb 	bl	8004084 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054f8:	d901      	bls.n	80054fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e022      	b.n	8005544 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800550a:	d1ee      	bne.n	80054ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800550c:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0f      	ldr	r2, [pc, #60]	@ (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005516:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005518:	f7fe fdb4 	bl	8004084 <HAL_GetTick>
 800551c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800551e:	e009      	b.n	8005534 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005520:	f7fe fdb0 	bl	8004084 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800552e:	d901      	bls.n	8005534 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e007      	b.n	8005544 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005534:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005540:	d1ee      	bne.n	8005520 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40023800 	.word	0x40023800
 8005550:	40007000 	.word	0x40007000

08005554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800555c:	2300      	movs	r3, #0
 800555e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e29b      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8087 	beq.w	8005686 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005578:	4b96      	ldr	r3, [pc, #600]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 030c 	and.w	r3, r3, #12
 8005580:	2b04      	cmp	r3, #4
 8005582:	d00c      	beq.n	800559e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005584:	4b93      	ldr	r3, [pc, #588]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 030c 	and.w	r3, r3, #12
 800558c:	2b08      	cmp	r3, #8
 800558e:	d112      	bne.n	80055b6 <HAL_RCC_OscConfig+0x62>
 8005590:	4b90      	ldr	r3, [pc, #576]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800559c:	d10b      	bne.n	80055b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800559e:	4b8d      	ldr	r3, [pc, #564]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d06c      	beq.n	8005684 <HAL_RCC_OscConfig+0x130>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d168      	bne.n	8005684 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e275      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055be:	d106      	bne.n	80055ce <HAL_RCC_OscConfig+0x7a>
 80055c0:	4b84      	ldr	r3, [pc, #528]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a83      	ldr	r2, [pc, #524]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e02e      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCC_OscConfig+0x9c>
 80055d6:	4b7f      	ldr	r3, [pc, #508]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a7e      	ldr	r2, [pc, #504]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4b7c      	ldr	r3, [pc, #496]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7b      	ldr	r2, [pc, #492]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e01d      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0xc0>
 80055fa:	4b76      	ldr	r3, [pc, #472]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a75      	ldr	r2, [pc, #468]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b73      	ldr	r3, [pc, #460]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a72      	ldr	r2, [pc, #456]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 800560c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e00b      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 8005614:	4b6f      	ldr	r3, [pc, #444]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6e      	ldr	r2, [pc, #440]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 800561a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4b6c      	ldr	r3, [pc, #432]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a6b      	ldr	r2, [pc, #428]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800562a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d013      	beq.n	800565c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fe fd26 	bl	8004084 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800563c:	f7fe fd22 	bl	8004084 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	@ 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e229      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564e:	4b61      	ldr	r3, [pc, #388]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0xe8>
 800565a:	e014      	b.n	8005686 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fe fd12 	bl	8004084 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005664:	f7fe fd0e 	bl	8004084 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	@ 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e215      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005676:	4b57      	ldr	r3, [pc, #348]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x110>
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d069      	beq.n	8005766 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005692:	4b50      	ldr	r3, [pc, #320]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 030c 	and.w	r3, r3, #12
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800569e:	4b4d      	ldr	r3, [pc, #308]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 030c 	and.w	r3, r3, #12
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d11c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x190>
 80056aa:	4b4a      	ldr	r3, [pc, #296]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d116      	bne.n	80056e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056b6:	4b47      	ldr	r3, [pc, #284]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_RCC_OscConfig+0x17a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d001      	beq.n	80056ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e1e9      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ce:	4b41      	ldr	r3, [pc, #260]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	493d      	ldr	r1, [pc, #244]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e2:	e040      	b.n	8005766 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d023      	beq.n	8005734 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ec:	4b39      	ldr	r3, [pc, #228]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a38      	ldr	r2, [pc, #224]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fe fcc4 	bl	8004084 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005700:	f7fe fcc0 	bl	8004084 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1c7      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005712:	4b30      	ldr	r3, [pc, #192]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571e:	4b2d      	ldr	r3, [pc, #180]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4929      	ldr	r1, [pc, #164]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]
 8005732:	e018      	b.n	8005766 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005734:	4b27      	ldr	r3, [pc, #156]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a26      	ldr	r2, [pc, #152]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fe fca0 	bl	8004084 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005748:	f7fe fc9c 	bl	8004084 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e1a3      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800575a:	4b1e      	ldr	r3, [pc, #120]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d038      	beq.n	80057e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d019      	beq.n	80057ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800577a:	4b16      	ldr	r3, [pc, #88]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 800577c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800577e:	4a15      	ldr	r2, [pc, #84]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005786:	f7fe fc7d 	bl	8004084 <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578e:	f7fe fc79 	bl	8004084 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e180      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a0:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80057a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f0      	beq.n	800578e <HAL_RCC_OscConfig+0x23a>
 80057ac:	e01a      	b.n	80057e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ae:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	4a08      	ldr	r2, [pc, #32]	@ (80057d4 <HAL_RCC_OscConfig+0x280>)
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ba:	f7fe fc63 	bl	8004084 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c2:	f7fe fc5f 	bl	8004084 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d903      	bls.n	80057d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e166      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
 80057d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d8:	4b92      	ldr	r3, [pc, #584]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80057da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ee      	bne.n	80057c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80a4 	beq.w	800593a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f2:	4b8c      	ldr	r3, [pc, #560]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10d      	bne.n	800581a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80057fe:	4b89      	ldr	r3, [pc, #548]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	4a88      	ldr	r2, [pc, #544]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005808:	6413      	str	r3, [r2, #64]	@ 0x40
 800580a:	4b86      	ldr	r3, [pc, #536]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581a:	4b83      	ldr	r3, [pc, #524]	@ (8005a28 <HAL_RCC_OscConfig+0x4d4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d118      	bne.n	8005858 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005826:	4b80      	ldr	r3, [pc, #512]	@ (8005a28 <HAL_RCC_OscConfig+0x4d4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a28 <HAL_RCC_OscConfig+0x4d4>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005832:	f7fe fc27 	bl	8004084 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583a:	f7fe fc23 	bl	8004084 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b64      	cmp	r3, #100	@ 0x64
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e12a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800584c:	4b76      	ldr	r3, [pc, #472]	@ (8005a28 <HAL_RCC_OscConfig+0x4d4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d106      	bne.n	800586e <HAL_RCC_OscConfig+0x31a>
 8005860:	4b70      	ldr	r3, [pc, #448]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005864:	4a6f      	ldr	r2, [pc, #444]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6713      	str	r3, [r2, #112]	@ 0x70
 800586c:	e02d      	b.n	80058ca <HAL_RCC_OscConfig+0x376>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10c      	bne.n	8005890 <HAL_RCC_OscConfig+0x33c>
 8005876:	4b6b      	ldr	r3, [pc, #428]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	4a6a      	ldr	r2, [pc, #424]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	6713      	str	r3, [r2, #112]	@ 0x70
 8005882:	4b68      	ldr	r3, [pc, #416]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005886:	4a67      	ldr	r2, [pc, #412]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005888:	f023 0304 	bic.w	r3, r3, #4
 800588c:	6713      	str	r3, [r2, #112]	@ 0x70
 800588e:	e01c      	b.n	80058ca <HAL_RCC_OscConfig+0x376>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b05      	cmp	r3, #5
 8005896:	d10c      	bne.n	80058b2 <HAL_RCC_OscConfig+0x35e>
 8005898:	4b62      	ldr	r3, [pc, #392]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	4a61      	ldr	r2, [pc, #388]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 800589e:	f043 0304 	orr.w	r3, r3, #4
 80058a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a4:	4b5f      	ldr	r3, [pc, #380]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a8:	4a5e      	ldr	r2, [pc, #376]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b0:	e00b      	b.n	80058ca <HAL_RCC_OscConfig+0x376>
 80058b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80058be:	4b59      	ldr	r3, [pc, #356]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80058c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c2:	4a58      	ldr	r2, [pc, #352]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80058c4:	f023 0304 	bic.w	r3, r3, #4
 80058c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d015      	beq.n	80058fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d2:	f7fe fbd7 	bl	8004084 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fe fbd3 	bl	8004084 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e0d8      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ee      	beq.n	80058da <HAL_RCC_OscConfig+0x386>
 80058fc:	e014      	b.n	8005928 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fe:	f7fe fbc1 	bl	8004084 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fe fbbd 	bl	8004084 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e0c2      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800591c:	4b41      	ldr	r3, [pc, #260]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ee      	bne.n	8005906 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d105      	bne.n	800593a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800592e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	4a3c      	ldr	r2, [pc, #240]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005938:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 80ae 	beq.w	8005aa0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005944:	4b37      	ldr	r3, [pc, #220]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b08      	cmp	r3, #8
 800594e:	d06d      	beq.n	8005a2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d14b      	bne.n	80059f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005958:	4b32      	ldr	r3, [pc, #200]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a31      	ldr	r2, [pc, #196]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 800595e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fe fb8e 	bl	8004084 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596c:	f7fe fb8a 	bl	8004084 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e091      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597e:	4b29      	ldr	r3, [pc, #164]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69da      	ldr	r2, [r3, #28]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	085b      	lsrs	r3, r3, #1
 80059a2:	3b01      	subs	r3, #1
 80059a4:	041b      	lsls	r3, r3, #16
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ac:	061b      	lsls	r3, r3, #24
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b4:	071b      	lsls	r3, r3, #28
 80059b6:	491b      	ldr	r1, [pc, #108]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059bc:	4b19      	ldr	r3, [pc, #100]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a18      	ldr	r2, [pc, #96]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80059c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fe fb5c 	bl	8004084 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d0:	f7fe fb58 	bl	8004084 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e05f      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e2:	4b10      	ldr	r3, [pc, #64]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCC_OscConfig+0x47c>
 80059ee:	e057      	b.n	8005aa0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 80059f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fe fb42 	bl	8004084 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a04:	f7fe fb3e 	bl	8004084 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e045      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a16:	4b03      	ldr	r3, [pc, #12]	@ (8005a24 <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0x4b0>
 8005a22:	e03d      	b.n	8005aa0 <HAL_RCC_OscConfig+0x54c>
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8005aac <HAL_RCC_OscConfig+0x558>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d030      	beq.n	8005a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d129      	bne.n	8005a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d122      	bne.n	8005a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d119      	bne.n	8005a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	3b01      	subs	r3, #1
 8005a76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d10f      	bne.n	8005a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d001      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800

08005ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0d0      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d910      	bls.n	8005af8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad6:	4b67      	ldr	r3, [pc, #412]	@ (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 020f 	bic.w	r2, r3, #15
 8005ade:	4965      	ldr	r1, [pc, #404]	@ (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae6:	4b63      	ldr	r3, [pc, #396]	@ (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0b8      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d020      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b10:	4b59      	ldr	r3, [pc, #356]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a58      	ldr	r2, [pc, #352]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b28:	4b53      	ldr	r3, [pc, #332]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4a52      	ldr	r2, [pc, #328]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b34:	4b50      	ldr	r3, [pc, #320]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	494d      	ldr	r1, [pc, #308]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d040      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d107      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5a:	4b47      	ldr	r3, [pc, #284]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d115      	bne.n	8005b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e07f      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d107      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b72:	4b41      	ldr	r3, [pc, #260]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e073      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b82:	4b3d      	ldr	r3, [pc, #244]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e06b      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b92:	4b39      	ldr	r3, [pc, #228]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f023 0203 	bic.w	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4936      	ldr	r1, [pc, #216]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba4:	f7fe fa6e 	bl	8004084 <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005baa:	e00a      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bac:	f7fe fa6a 	bl	8004084 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e053      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 020c 	and.w	r2, r3, #12
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d1eb      	bne.n	8005bac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd4:	4b27      	ldr	r3, [pc, #156]	@ (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d210      	bcs.n	8005c04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be2:	4b24      	ldr	r3, [pc, #144]	@ (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 020f 	bic.w	r2, r3, #15
 8005bea:	4922      	ldr	r1, [pc, #136]	@ (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b20      	ldr	r3, [pc, #128]	@ (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e032      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c10:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4916      	ldr	r1, [pc, #88]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c2e:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	490e      	ldr	r1, [pc, #56]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c42:	f000 f821 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8005c46:	4602      	mov	r2, r0
 8005c48:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	490a      	ldr	r1, [pc, #40]	@ (8005c7c <HAL_RCC_ClockConfig+0x1cc>)
 8005c54:	5ccb      	ldrb	r3, [r1, r3]
 8005c56:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5a:	4a09      	ldr	r2, [pc, #36]	@ (8005c80 <HAL_RCC_ClockConfig+0x1d0>)
 8005c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c5e:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <HAL_RCC_ClockConfig+0x1d4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe f9ca 	bl	8003ffc <HAL_InitTick>

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40023c00 	.word	0x40023c00
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	0800801c 	.word	0x0800801c
 8005c80:	20000218 	.word	0x20000218
 8005c84:	2000021c 	.word	0x2000021c

08005c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c8c:	b090      	sub	sp, #64	@ 0x40
 8005c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c94:	2300      	movs	r3, #0
 8005c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c98:	2300      	movs	r3, #0
 8005c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ca0:	4b59      	ldr	r3, [pc, #356]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 030c 	and.w	r3, r3, #12
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d00d      	beq.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	f200 80a1 	bhi.w	8005df4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_RCC_GetSysClockFreq+0x34>
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d003      	beq.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cba:	e09b      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cbc:	4b53      	ldr	r3, [pc, #332]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8005cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cc0:	e09b      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cc2:	4b53      	ldr	r3, [pc, #332]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cc6:	e098      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d028      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cde:	4b4a      	ldr	r3, [pc, #296]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	099b      	lsrs	r3, r3, #6
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	623b      	str	r3, [r7, #32]
 8005ce8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4b47      	ldr	r3, [pc, #284]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cf4:	fb03 f201 	mul.w	r2, r3, r1
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	fb00 f303 	mul.w	r3, r0, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	4a43      	ldr	r2, [pc, #268]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d02:	fba0 1202 	umull	r1, r2, r0, r2
 8005d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d08:	460a      	mov	r2, r1
 8005d0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d0e:	4413      	add	r3, r2
 8005d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d14:	2200      	movs	r2, #0
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	61fa      	str	r2, [r7, #28]
 8005d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005d22:	f7fa fa89 	bl	8000238 <__aeabi_uldivmod>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d2e:	e053      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d30:	4b35      	ldr	r3, [pc, #212]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	099b      	lsrs	r3, r3, #6
 8005d36:	2200      	movs	r2, #0
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	617a      	str	r2, [r7, #20]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d42:	f04f 0b00 	mov.w	fp, #0
 8005d46:	4652      	mov	r2, sl
 8005d48:	465b      	mov	r3, fp
 8005d4a:	f04f 0000 	mov.w	r0, #0
 8005d4e:	f04f 0100 	mov.w	r1, #0
 8005d52:	0159      	lsls	r1, r3, #5
 8005d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d58:	0150      	lsls	r0, r2, #5
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	ebb2 080a 	subs.w	r8, r2, sl
 8005d62:	eb63 090b 	sbc.w	r9, r3, fp
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d7a:	ebb2 0408 	subs.w	r4, r2, r8
 8005d7e:	eb63 0509 	sbc.w	r5, r3, r9
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	00eb      	lsls	r3, r5, #3
 8005d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d90:	00e2      	lsls	r2, r4, #3
 8005d92:	4614      	mov	r4, r2
 8005d94:	461d      	mov	r5, r3
 8005d96:	eb14 030a 	adds.w	r3, r4, sl
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	eb45 030b 	adc.w	r3, r5, fp
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dae:	4629      	mov	r1, r5
 8005db0:	028b      	lsls	r3, r1, #10
 8005db2:	4621      	mov	r1, r4
 8005db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005db8:	4621      	mov	r1, r4
 8005dba:	028a      	lsls	r2, r1, #10
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	60fa      	str	r2, [r7, #12]
 8005dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dcc:	f7fa fa34 	bl	8000238 <__aeabi_uldivmod>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	3301      	adds	r3, #1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005de8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005df2:	e002      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005df4:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8005df6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3740      	adds	r7, #64	@ 0x40
 8005e00:	46bd      	mov	sp, r7
 8005e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e06:	bf00      	nop
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	00f42400 	.word	0x00f42400
 8005e10:	017d7840 	.word	0x017d7840

08005e14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e18:	4b03      	ldr	r3, [pc, #12]	@ (8005e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20000218 	.word	0x20000218

08005e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e09d      	b.n	8005f7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d108      	bne.n	8005e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e4e:	d009      	beq.n	8005e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	61da      	str	r2, [r3, #28]
 8005e56:	e005      	b.n	8005e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fd ff38 	bl	8003cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ea4:	d902      	bls.n	8005eac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e002      	b.n	8005eb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005eb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005eba:	d007      	beq.n	8005ecc <HAL_SPI_Init+0xa0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ec4:	d002      	beq.n	8005ecc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0e:	ea42 0103 	orr.w	r1, r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	f003 0204 	and.w	r2, r3, #4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f48:	ea42 0103 	orr.w	r1, r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b088      	sub	sp, #32
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_SPI_Transmit+0x22>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e158      	b.n	8006256 <HAL_SPI_Transmit+0x2d4>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fac:	f7fe f86a 	bl	8004084 <HAL_GetTick>
 8005fb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d002      	beq.n	8005fc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fc6:	e13d      	b.n	8006244 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_SPI_Transmit+0x52>
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fd8:	e134      	b.n	8006244 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2203      	movs	r2, #3
 8005fde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	88fa      	ldrh	r2, [r7, #6]
 8005ff2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006024:	d10f      	bne.n	8006046 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006034:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006044:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006050:	2b40      	cmp	r3, #64	@ 0x40
 8006052:	d007      	beq.n	8006064 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800606c:	d94b      	bls.n	8006106 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_SPI_Transmit+0xfa>
 8006076:	8afb      	ldrh	r3, [r7, #22]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d13e      	bne.n	80060fa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006080:	881a      	ldrh	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	1c9a      	adds	r2, r3, #2
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060a0:	e02b      	b.n	80060fa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d112      	bne.n	80060d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	881a      	ldrh	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060d4:	e011      	b.n	80060fa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d6:	f7fd ffd5 	bl	8004084 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d803      	bhi.n	80060ee <HAL_SPI_Transmit+0x16c>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d102      	bne.n	80060f4 <HAL_SPI_Transmit+0x172>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060f8:	e0a4      	b.n	8006244 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1ce      	bne.n	80060a2 <HAL_SPI_Transmit+0x120>
 8006104:	e07c      	b.n	8006200 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_SPI_Transmit+0x192>
 800610e:	8afb      	ldrh	r3, [r7, #22]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d170      	bne.n	80061f6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	d912      	bls.n	8006144 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b02      	subs	r3, #2
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006142:	e058      	b.n	80061f6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800616a:	e044      	b.n	80061f6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d12b      	bne.n	80061d2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	d912      	bls.n	80061aa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006188:	881a      	ldrh	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b02      	subs	r3, #2
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061a8:	e025      	b.n	80061f6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061d0:	e011      	b.n	80061f6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061d2:	f7fd ff57 	bl	8004084 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d803      	bhi.n	80061ea <HAL_SPI_Transmit+0x268>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d102      	bne.n	80061f0 <HAL_SPI_Transmit+0x26e>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d102      	bne.n	80061f6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061f4:	e026      	b.n	8006244 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1b5      	bne.n	800616c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fc6f 	bl	8006ae8 <SPI_EndRxTxTransaction>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e000      	b.n	8006244 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006242:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006254:	7ffb      	ldrb	r3, [r7, #31]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b08a      	sub	sp, #40	@ 0x28
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
 800626a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800626c:	2301      	movs	r3, #1
 800626e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x26>
 8006280:	2302      	movs	r3, #2
 8006282:	e1fb      	b.n	800667c <HAL_SPI_TransmitReceive+0x41e>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628c:	f7fd fefa 	bl	8004084 <HAL_GetTick>
 8006290:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006298:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80062a0:	887b      	ldrh	r3, [r7, #2]
 80062a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80062a4:	887b      	ldrh	r3, [r7, #2]
 80062a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062a8:	7efb      	ldrb	r3, [r7, #27]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d00e      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x6e>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062b4:	d106      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x66>
 80062be:	7efb      	ldrb	r3, [r7, #27]
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d003      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80062ca:	e1cd      	b.n	8006668 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <HAL_SPI_TransmitReceive+0x80>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_SPI_TransmitReceive+0x80>
 80062d8:	887b      	ldrh	r3, [r7, #2]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d103      	bne.n	80062e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80062e4:	e1c0      	b.n	8006668 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d003      	beq.n	80062fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2205      	movs	r2, #5
 80062f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	887a      	ldrh	r2, [r7, #2]
 800630a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	887a      	ldrh	r2, [r7, #2]
 8006312:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	887a      	ldrh	r2, [r7, #2]
 8006320:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	887a      	ldrh	r2, [r7, #2]
 8006326:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800633c:	d802      	bhi.n	8006344 <HAL_SPI_TransmitReceive+0xe6>
 800633e:	8a3b      	ldrh	r3, [r7, #16]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d908      	bls.n	8006356 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006352:	605a      	str	r2, [r3, #4]
 8006354:	e007      	b.n	8006366 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006364:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d007      	beq.n	8006384 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800638c:	d97c      	bls.n	8006488 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_SPI_TransmitReceive+0x13e>
 8006396:	8a7b      	ldrh	r3, [r7, #18]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d169      	bne.n	8006470 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a0:	881a      	ldrh	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	1c9a      	adds	r2, r3, #2
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c0:	e056      	b.n	8006470 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d11b      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x1aa>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d016      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x1aa>
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d113      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e4:	881a      	ldrh	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	1c9a      	adds	r2, r3, #2
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b01      	cmp	r3, #1
 8006414:	d11c      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x1f2>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642c:	b292      	uxth	r2, r2
 800642e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	1c9a      	adds	r2, r3, #2
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800644c:	2301      	movs	r3, #1
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006450:	f7fd fe18 	bl	8004084 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800645c:	429a      	cmp	r2, r3
 800645e:	d807      	bhi.n	8006470 <HAL_SPI_TransmitReceive+0x212>
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d003      	beq.n	8006470 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800646e:	e0fb      	b.n	8006668 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1a3      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x164>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d19d      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x164>
 8006486:	e0df      	b.n	8006648 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_SPI_TransmitReceive+0x23a>
 8006490:	8a7b      	ldrh	r3, [r7, #18]
 8006492:	2b01      	cmp	r3, #1
 8006494:	f040 80cb 	bne.w	800662e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d912      	bls.n	80064c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a6:	881a      	ldrh	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	1c9a      	adds	r2, r3, #2
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b02      	subs	r3, #2
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064c6:	e0b2      	b.n	800662e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ee:	e09e      	b.n	800662e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d134      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x30a>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02f      	beq.n	8006568 <HAL_SPI_TransmitReceive+0x30a>
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	2b01      	cmp	r3, #1
 800650c:	d12c      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d912      	bls.n	800653e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	881a      	ldrh	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	1c9a      	adds	r2, r3, #2
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b02      	subs	r3, #2
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800653c:	e012      	b.n	8006564 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	7812      	ldrb	r2, [r2, #0]
 800654a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b01      	cmp	r3, #1
 8006574:	d148      	bne.n	8006608 <HAL_SPI_TransmitReceive+0x3aa>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d042      	beq.n	8006608 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b01      	cmp	r3, #1
 800658c:	d923      	bls.n	80065d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006598:	b292      	uxth	r2, r2
 800659a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b02      	subs	r3, #2
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d81f      	bhi.n	8006604 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065d2:	605a      	str	r2, [r3, #4]
 80065d4:	e016      	b.n	8006604 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f103 020c 	add.w	r2, r3, #12
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006604:	2301      	movs	r3, #1
 8006606:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006608:	f7fd fd3c 	bl	8004084 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006614:	429a      	cmp	r2, r3
 8006616:	d803      	bhi.n	8006620 <HAL_SPI_TransmitReceive+0x3c2>
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d102      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x3c8>
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800662c:	e01c      	b.n	8006668 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	f47f af5b 	bne.w	80064f0 <HAL_SPI_TransmitReceive+0x292>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	f47f af54 	bne.w	80064f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 fa4b 	bl	8006ae8 <SPI_EndRxTxTransaction>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	661a      	str	r2, [r3, #96]	@ 0x60
 8006664:	e000      	b.n	8006668 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006666:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006678:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800667c:	4618      	mov	r0, r3
 800667e:	3728      	adds	r7, #40	@ 0x28
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10e      	bne.n	80066c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d004      	beq.n	80066c4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
    return;
 80066c2:	e0ce      	b.n	8006862 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <HAL_SPI_IRQHandler+0x5e>
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
    return;
 80066e0:	e0bf      	b.n	8006862 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <HAL_SPI_IRQHandler+0x7e>
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80b0 	beq.w	8006862 <HAL_SPI_IRQHandler+0x1de>
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80aa 	beq.w	8006862 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d023      	beq.n	8006760 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b03      	cmp	r3, #3
 8006722:	d011      	beq.n	8006748 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006728:	f043 0204 	orr.w	r2, r3, #4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	e00b      	b.n	8006760 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006748:	2300      	movs	r3, #0
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
        return;
 800675e:	e080      	b.n	8006862 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d014      	beq.n	8006794 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676e:	f043 0201 	orr.w	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00c      	beq.n	80067b8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a2:	f043 0208 	orr.w	r2, r3, #8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067aa:	2300      	movs	r3, #0
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d04f      	beq.n	8006860 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d104      	bne.n	80067ec <HAL_SPI_IRQHandler+0x168>
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d034      	beq.n	8006856 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0203 	bic.w	r2, r2, #3
 80067fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006800:	2b00      	cmp	r3, #0
 8006802:	d011      	beq.n	8006828 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006808:	4a17      	ldr	r2, [pc, #92]	@ (8006868 <HAL_SPI_IRQHandler+0x1e4>)
 800680a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006810:	4618      	mov	r0, r3
 8006812:	f7fe fc4f 	bl	80050b4 <HAL_DMA_Abort_IT>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006820:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006834:	4a0c      	ldr	r2, [pc, #48]	@ (8006868 <HAL_SPI_IRQHandler+0x1e4>)
 8006836:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683c:	4618      	mov	r0, r3
 800683e:	f7fe fc39 	bl	80050b4 <HAL_DMA_Abort_IT>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00a      	beq.n	800685e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800684c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006854:	e003      	b.n	800685e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f808 	bl	800686c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800685c:	e000      	b.n	8006860 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800685e:	bf00      	nop
    return;
 8006860:	bf00      	nop
  }
}
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	08006881 	.word	0x08006881

0800686c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff ffe5 	bl	800686c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068bc:	f7fd fbe2 	bl	8004084 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	4413      	add	r3, r2
 80068ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068cc:	f7fd fbda 	bl	8004084 <HAL_GetTick>
 80068d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068d2:	4b39      	ldr	r3, [pc, #228]	@ (80069b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	015b      	lsls	r3, r3, #5
 80068d8:	0d1b      	lsrs	r3, r3, #20
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	fb02 f303 	mul.w	r3, r2, r3
 80068e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068e2:	e054      	b.n	800698e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d050      	beq.n	800698e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068ec:	f7fd fbca 	bl	8004084 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d902      	bls.n	8006902 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d13d      	bne.n	800697e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006910:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800691a:	d111      	bne.n	8006940 <SPI_WaitFlagStateUntilTimeout+0x94>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006924:	d004      	beq.n	8006930 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800692e:	d107      	bne.n	8006940 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800693e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006948:	d10f      	bne.n	800696a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006968:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e017      	b.n	80069ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	3b01      	subs	r3, #1
 800698c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4013      	ands	r3, r2
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	429a      	cmp	r2, r3
 800699c:	bf0c      	ite	eq
 800699e:	2301      	moveq	r3, #1
 80069a0:	2300      	movne	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d19b      	bne.n	80068e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000218 	.word	0x20000218

080069bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069ce:	f7fd fb59 	bl	8004084 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	4413      	add	r3, r2
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80069de:	f7fd fb51 	bl	8004084 <HAL_GetTick>
 80069e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069ec:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	00da      	lsls	r2, r3, #3
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	0d1b      	lsrs	r3, r3, #20
 80069fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a04:	e060      	b.n	8006ac8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006a0c:	d107      	bne.n	8006a1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d050      	beq.n	8006ac8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a26:	f7fd fb2d 	bl	8004084 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d902      	bls.n	8006a3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d13d      	bne.n	8006ab8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a54:	d111      	bne.n	8006a7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a5e:	d004      	beq.n	8006a6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a68:	d107      	bne.n	8006a7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a82:	d10f      	bne.n	8006aa4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006aa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e010      	b.n	8006ada <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d196      	bne.n	8006a06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3728      	adds	r7, #40	@ 0x28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000218 	.word	0x20000218

08006ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff ff5b 	bl	80069bc <SPI_WaitFifoStateUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b10:	f043 0220 	orr.w	r2, r3, #32
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e046      	b.n	8006baa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b1c:	4b25      	ldr	r3, [pc, #148]	@ (8006bb4 <SPI_EndRxTxTransaction+0xcc>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a25      	ldr	r2, [pc, #148]	@ (8006bb8 <SPI_EndRxTxTransaction+0xd0>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	0d5b      	lsrs	r3, r3, #21
 8006b28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b2c:	fb02 f303 	mul.w	r3, r2, r3
 8006b30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b3a:	d112      	bne.n	8006b62 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	2180      	movs	r1, #128	@ 0x80
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff feb0 	bl	80068ac <SPI_WaitFlagStateUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d016      	beq.n	8006b80 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b56:	f043 0220 	orr.w	r2, r3, #32
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e023      	b.n	8006baa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b78:	2b80      	cmp	r3, #128	@ 0x80
 8006b7a:	d0f2      	beq.n	8006b62 <SPI_EndRxTxTransaction+0x7a>
 8006b7c:	e000      	b.n	8006b80 <SPI_EndRxTxTransaction+0x98>
        break;
 8006b7e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff ff15 	bl	80069bc <SPI_WaitFifoStateUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b9c:	f043 0220 	orr.w	r2, r3, #32
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e000      	b.n	8006baa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000218 	.word	0x20000218
 8006bb8:	165e9f81 	.word	0x165e9f81

08006bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e049      	b.n	8006c62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fd f8e2 	bl	8003dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	f000 f9f6 	bl	8006fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d001      	beq.n	8006c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e054      	b.n	8006d2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a26      	ldr	r2, [pc, #152]	@ (8006d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d022      	beq.n	8006cec <HAL_TIM_Base_Start_IT+0x80>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cae:	d01d      	beq.n	8006cec <HAL_TIM_Base_Start_IT+0x80>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a22      	ldr	r2, [pc, #136]	@ (8006d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d018      	beq.n	8006cec <HAL_TIM_Base_Start_IT+0x80>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a21      	ldr	r2, [pc, #132]	@ (8006d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d013      	beq.n	8006cec <HAL_TIM_Base_Start_IT+0x80>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00e      	beq.n	8006cec <HAL_TIM_Base_Start_IT+0x80>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d4c <HAL_TIM_Base_Start_IT+0xe0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d009      	beq.n	8006cec <HAL_TIM_Base_Start_IT+0x80>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d50 <HAL_TIM_Base_Start_IT+0xe4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d004      	beq.n	8006cec <HAL_TIM_Base_Start_IT+0x80>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d54 <HAL_TIM_Base_Start_IT+0xe8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d115      	bne.n	8006d18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	4b19      	ldr	r3, [pc, #100]	@ (8006d58 <HAL_TIM_Base_Start_IT+0xec>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b06      	cmp	r3, #6
 8006cfc:	d015      	beq.n	8006d2a <HAL_TIM_Base_Start_IT+0xbe>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d04:	d011      	beq.n	8006d2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0201 	orr.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d16:	e008      	b.n	8006d2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	e000      	b.n	8006d2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40000800 	.word	0x40000800
 8006d48:	40000c00 	.word	0x40000c00
 8006d4c:	40010400 	.word	0x40010400
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40001800 	.word	0x40001800
 8006d58:	00010007 	.word	0x00010007

08006d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d122      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d11b      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0202 	mvn.w	r2, #2
 8006d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f905 	bl	8006fae <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f8f7 	bl	8006f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f908 	bl	8006fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d122      	bne.n	8006e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d11b      	bne.n	8006e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0204 	mvn.w	r2, #4
 8006ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f8db 	bl	8006fae <HAL_TIM_IC_CaptureCallback>
 8006df8:	e005      	b.n	8006e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f8cd 	bl	8006f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8de 	bl	8006fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d122      	bne.n	8006e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d11b      	bne.n	8006e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0208 	mvn.w	r2, #8
 8006e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2204      	movs	r2, #4
 8006e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8b1 	bl	8006fae <HAL_TIM_IC_CaptureCallback>
 8006e4c:	e005      	b.n	8006e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f8a3 	bl	8006f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8b4 	bl	8006fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0210 	mvn.w	r2, #16
 8006e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2208      	movs	r2, #8
 8006e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f887 	bl	8006fae <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f879 	bl	8006f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f88a 	bl	8006fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d107      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0201 	mvn.w	r2, #1
 8006ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fc fb28 	bl	8003530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eea:	2b80      	cmp	r3, #128	@ 0x80
 8006eec:	d10e      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef8:	2b80      	cmp	r3, #128	@ 0x80
 8006efa:	d107      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f91a 	bl	8007140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1a:	d10e      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f26:	2b80      	cmp	r3, #128	@ 0x80
 8006f28:	d107      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f90d 	bl	8007154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f44:	2b40      	cmp	r3, #64	@ 0x40
 8006f46:	d10e      	bne.n	8006f66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f52:	2b40      	cmp	r3, #64	@ 0x40
 8006f54:	d107      	bne.n	8006f66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f838 	bl	8006fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d10e      	bne.n	8006f92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d107      	bne.n	8006f92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f06f 0220 	mvn.w	r2, #32
 8006f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f8cd 	bl	800712c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a40      	ldr	r2, [pc, #256]	@ (8007100 <TIM_Base_SetConfig+0x114>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700a:	d00f      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a3d      	ldr	r2, [pc, #244]	@ (8007104 <TIM_Base_SetConfig+0x118>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00b      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a3c      	ldr	r2, [pc, #240]	@ (8007108 <TIM_Base_SetConfig+0x11c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a3b      	ldr	r2, [pc, #236]	@ (800710c <TIM_Base_SetConfig+0x120>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a3a      	ldr	r2, [pc, #232]	@ (8007110 <TIM_Base_SetConfig+0x124>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d108      	bne.n	800703e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a2f      	ldr	r2, [pc, #188]	@ (8007100 <TIM_Base_SetConfig+0x114>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d02b      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704c:	d027      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a2c      	ldr	r2, [pc, #176]	@ (8007104 <TIM_Base_SetConfig+0x118>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d023      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a2b      	ldr	r2, [pc, #172]	@ (8007108 <TIM_Base_SetConfig+0x11c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01f      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a2a      	ldr	r2, [pc, #168]	@ (800710c <TIM_Base_SetConfig+0x120>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01b      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a29      	ldr	r2, [pc, #164]	@ (8007110 <TIM_Base_SetConfig+0x124>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d017      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a28      	ldr	r2, [pc, #160]	@ (8007114 <TIM_Base_SetConfig+0x128>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a27      	ldr	r2, [pc, #156]	@ (8007118 <TIM_Base_SetConfig+0x12c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00f      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a26      	ldr	r2, [pc, #152]	@ (800711c <TIM_Base_SetConfig+0x130>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00b      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a25      	ldr	r2, [pc, #148]	@ (8007120 <TIM_Base_SetConfig+0x134>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d007      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a24      	ldr	r2, [pc, #144]	@ (8007124 <TIM_Base_SetConfig+0x138>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a23      	ldr	r2, [pc, #140]	@ (8007128 <TIM_Base_SetConfig+0x13c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d108      	bne.n	80070b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007100 <TIM_Base_SetConfig+0x114>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_Base_SetConfig+0xf8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a0c      	ldr	r2, [pc, #48]	@ (8007110 <TIM_Base_SetConfig+0x124>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d103      	bne.n	80070ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	615a      	str	r2, [r3, #20]
}
 80070f2:	bf00      	nop
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40010000 	.word	0x40010000
 8007104:	40000400 	.word	0x40000400
 8007108:	40000800 	.word	0x40000800
 800710c:	40000c00 	.word	0x40000c00
 8007110:	40010400 	.word	0x40010400
 8007114:	40014000 	.word	0x40014000
 8007118:	40014400 	.word	0x40014400
 800711c:	40014800 	.word	0x40014800
 8007120:	40001800 	.word	0x40001800
 8007124:	40001c00 	.word	0x40001c00
 8007128:	40002000 	.word	0x40002000

0800712c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <memset>:
 8007168:	4402      	add	r2, r0
 800716a:	4603      	mov	r3, r0
 800716c:	4293      	cmp	r3, r2
 800716e:	d100      	bne.n	8007172 <memset+0xa>
 8007170:	4770      	bx	lr
 8007172:	f803 1b01 	strb.w	r1, [r3], #1
 8007176:	e7f9      	b.n	800716c <memset+0x4>

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4d0d      	ldr	r5, [pc, #52]	@ (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	@ (80071b4 <__libc_init_array+0x3c>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2600      	movs	r6, #0
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4d0b      	ldr	r5, [pc, #44]	@ (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	@ (80071bc <__libc_init_array+0x44>)
 800718c:	f000 f826 	bl	80071dc <_init>
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2600      	movs	r6, #0
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	08008034 	.word	0x08008034
 80071b4:	08008034 	.word	0x08008034
 80071b8:	08008034 	.word	0x08008034
 80071bc:	08008038 	.word	0x08008038

080071c0 <memcpy>:
 80071c0:	440a      	add	r2, r1
 80071c2:	4291      	cmp	r1, r2
 80071c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071c8:	d100      	bne.n	80071cc <memcpy+0xc>
 80071ca:	4770      	bx	lr
 80071cc:	b510      	push	{r4, lr}
 80071ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d6:	4291      	cmp	r1, r2
 80071d8:	d1f9      	bne.n	80071ce <memcpy+0xe>
 80071da:	bd10      	pop	{r4, pc}

080071dc <_init>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	bf00      	nop
 80071e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e2:	bc08      	pop	{r3}
 80071e4:	469e      	mov	lr, r3
 80071e6:	4770      	bx	lr

080071e8 <_fini>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	bf00      	nop
 80071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ee:	bc08      	pop	{r3}
 80071f0:	469e      	mov	lr, r3
 80071f2:	4770      	bx	lr
