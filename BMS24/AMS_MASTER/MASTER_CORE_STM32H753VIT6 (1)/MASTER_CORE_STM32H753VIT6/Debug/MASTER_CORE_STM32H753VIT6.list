
MASTER_CORE_STM32H753VIT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a300  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e94  0800a598  0800a598  0000b598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b42c  0800b42c  0000c42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800b430  0800b430  0000c430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000022c  24000000  0800b434  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001694  2400022c  0800b660  0000d22c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240018c0  0800b660  0000d8c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d22c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018e28  00000000  00000000  0000d25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d77  00000000  00000000  00026082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001498  00000000  00000000  00028e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ff4  00000000  00000000  0002a298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039a6c  00000000  00000000  0002b28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001b8ed  00000000  00000000  00064cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016f12c  00000000  00000000  000805e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ef711  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000595c  00000000  00000000  001ef754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000080  00000000  00000000  001f50b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400022c 	.word	0x2400022c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a580 	.word	0x0800a580

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000230 	.word	0x24000230
 80002d4:	0800a580 	.word	0x0800a580

080002d8 <StateMachineSteps>:
//	PRECHARGE = 2;
//	CL_AIRS = 3;
//	CH_PRECHARGE = 4;
//	CL_CHARGER = 5;

uint8_t StateMachineSteps(uint8_t run_cur_state, uint8_t AIRs_request, uint8_t BMS_OK,uint8_t ETAS_SYNC_FLAG){
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4604      	mov	r4, r0
 80002e0:	4608      	mov	r0, r1
 80002e2:	4611      	mov	r1, r2
 80002e4:	461a      	mov	r2, r3
 80002e6:	4623      	mov	r3, r4
 80002e8:	71fb      	strb	r3, [r7, #7]
 80002ea:	4603      	mov	r3, r0
 80002ec:	71bb      	strb	r3, [r7, #6]
 80002ee:	460b      	mov	r3, r1
 80002f0:	717b      	strb	r3, [r7, #5]
 80002f2:	4613      	mov	r3, r2
 80002f4:	713b      	strb	r3, [r7, #4]
	switch(run_cur_state){
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	3b01      	subs	r3, #1
 80002fa:	2b04      	cmp	r3, #4
 80002fc:	f200 808e 	bhi.w	800041c <StateMachineSteps+0x144>
 8000300:	a201      	add	r2, pc, #4	@ (adr r2, 8000308 <StateMachineSteps+0x30>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	0800031d 	.word	0x0800031d
 800030c:	0800036d 	.word	0x0800036d
 8000310:	080003a1 	.word	0x080003a1
 8000314:	080003c1 	.word	0x080003c1
 8000318:	080003eb 	.word	0x080003eb
			  case 1:		//OPEN AIRS
				  if(AIRs_request == 6){
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	2b06      	cmp	r3, #6
 8000320:	d101      	bne.n	8000326 <StateMachineSteps+0x4e>
					  run_cur_state = 2;
 8000322:	2302      	movs	r3, #2
 8000324:	71fb      	strb	r3, [r7, #7]
				  }
				  if(AIRs_request == 8){
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	2b08      	cmp	r3, #8
 800032a:	d101      	bne.n	8000330 <StateMachineSteps+0x58>
					  run_cur_state = 4;
 800032c:	2304      	movs	r3, #4
 800032e:	71fb      	strb	r3, [r7, #7]
				  }
				  if(AIRs_request == 3){
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	2b03      	cmp	r3, #3
 8000334:	d114      	bne.n	8000360 <StateMachineSteps+0x88>
						HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2120      	movs	r1, #32
 800033a:	483b      	ldr	r0, [pc, #236]	@ (8000428 <StateMachineSteps+0x150>)
 800033c:	f006 f958 	bl	80065f0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2180      	movs	r1, #128	@ 0x80
 8000344:	4838      	ldr	r0, [pc, #224]	@ (8000428 <StateMachineSteps+0x150>)
 8000346:	f006 f953 	bl	80065f0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	2140      	movs	r1, #64	@ 0x40
 800034e:	4836      	ldr	r0, [pc, #216]	@ (8000428 <StateMachineSteps+0x150>)
 8000350:	f006 f94e 	bl	80065f0 <HAL_GPIO_WritePin>
						HAL_Delay(3000);
 8000354:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000358:	f004 f9c8 	bl	80046ec <HAL_Delay>
							  run_cur_state = 3;
 800035c:	2303      	movs	r3, #3
 800035e:	71fb      	strb	r3, [r7, #7]
						  }
				  if(BMS_OK == 0){
 8000360:	797b      	ldrb	r3, [r7, #5]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d151      	bne.n	800040a <StateMachineSteps+0x132>
					  run_cur_state = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	71fb      	strb	r3, [r7, #7]
				  }
				  break;
 800036a:	e04e      	b.n	800040a <StateMachineSteps+0x132>

			  case 2:		//PRECHARGE
				  if(AIRs_request == 0){
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d101      	bne.n	8000376 <StateMachineSteps+0x9e>
					  run_cur_state = 1;
 8000372:	2301      	movs	r3, #1
 8000374:	71fb      	strb	r3, [r7, #7]
				  }
				  if(AIRs_request == 3){
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d101      	bne.n	8000380 <StateMachineSteps+0xa8>
					  run_cur_state = 3;
 800037c:	2303      	movs	r3, #3
 800037e:	71fb      	strb	r3, [r7, #7]
				  }
				  if(AIRs_request == 8){
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	2b08      	cmp	r3, #8
 8000384:	d101      	bne.n	800038a <StateMachineSteps+0xb2>
					  run_cur_state = 4;
 8000386:	2304      	movs	r3, #4
 8000388:	71fb      	strb	r3, [r7, #7]
				  }
				  if(BMS_OK == 0){
 800038a:	797b      	ldrb	r3, [r7, #5]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d101      	bne.n	8000394 <StateMachineSteps+0xbc>
					  run_cur_state = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	71fb      	strb	r3, [r7, #7]
				  }
				  if(ETAS_SYNC_FLAG == 1){
 8000394:	793b      	ldrb	r3, [r7, #4]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d139      	bne.n	800040e <StateMachineSteps+0x136>
				  run_cur_state = 1;
 800039a:	2301      	movs	r3, #1
 800039c:	71fb      	strb	r3, [r7, #7]
				  				  }
				  				  break;
 800039e:	e036      	b.n	800040e <StateMachineSteps+0x136>

			  case 3:	//CLOSED_AIRS
				  if(AIRs_request == 0){
 80003a0:	79bb      	ldrb	r3, [r7, #6]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d101      	bne.n	80003aa <StateMachineSteps+0xd2>
					  run_cur_state = 1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	71fb      	strb	r3, [r7, #7]
				  }
				  if(BMS_OK == 0){
 80003aa:	797b      	ldrb	r3, [r7, #5]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d101      	bne.n	80003b4 <StateMachineSteps+0xdc>
					  run_cur_state = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	71fb      	strb	r3, [r7, #7]
				  }
				  if(ETAS_SYNC_FLAG == 1){
 80003b4:	793b      	ldrb	r3, [r7, #4]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d12b      	bne.n	8000412 <StateMachineSteps+0x13a>
				  run_cur_state = 1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	71fb      	strb	r3, [r7, #7]
				  }
				  break;
 80003be:	e028      	b.n	8000412 <StateMachineSteps+0x13a>

			  case 4:	//CHARGER_PRECHARGE
				  if(AIRs_request == 9){
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b09      	cmp	r3, #9
 80003c4:	d101      	bne.n	80003ca <StateMachineSteps+0xf2>
					  run_cur_state = 5;
 80003c6:	2305      	movs	r3, #5
 80003c8:	71fb      	strb	r3, [r7, #7]
				  }
				  if(AIRs_request == 0){
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <StateMachineSteps+0xfc>
					  run_cur_state = 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	71fb      	strb	r3, [r7, #7]
				  }
				  if(BMS_OK == 0){
 80003d4:	797b      	ldrb	r3, [r7, #5]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d101      	bne.n	80003de <StateMachineSteps+0x106>
					  run_cur_state = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	71fb      	strb	r3, [r7, #7]
				  }
				  if(ETAS_SYNC_FLAG == 1){
 80003de:	793b      	ldrb	r3, [r7, #4]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d118      	bne.n	8000416 <StateMachineSteps+0x13e>
				  run_cur_state = 1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	71fb      	strb	r3, [r7, #7]
				  }
				  break;
 80003e8:	e015      	b.n	8000416 <StateMachineSteps+0x13e>

			  case 5:		//CLOSED_CHARGER
				  if(AIRs_request == 0){
 80003ea:	79bb      	ldrb	r3, [r7, #6]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <StateMachineSteps+0x11c>
					  run_cur_state = 1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	71fb      	strb	r3, [r7, #7]
				  }
				  if(BMS_OK == 0){
 80003f4:	797b      	ldrb	r3, [r7, #5]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d101      	bne.n	80003fe <StateMachineSteps+0x126>
					  run_cur_state = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	71fb      	strb	r3, [r7, #7]
				  }
				  if(ETAS_SYNC_FLAG == 1){
 80003fe:	793b      	ldrb	r3, [r7, #4]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d10a      	bne.n	800041a <StateMachineSteps+0x142>
				  run_cur_state = 1;
 8000404:	2301      	movs	r3, #1
 8000406:	71fb      	strb	r3, [r7, #7]
				  }
				  break;
 8000408:	e007      	b.n	800041a <StateMachineSteps+0x142>
				  break;
 800040a:	bf00      	nop
 800040c:	e006      	b.n	800041c <StateMachineSteps+0x144>
				  				  break;
 800040e:	bf00      	nop
 8000410:	e004      	b.n	800041c <StateMachineSteps+0x144>
				  break;
 8000412:	bf00      	nop
 8000414:	e002      	b.n	800041c <StateMachineSteps+0x144>
				  break;
 8000416:	bf00      	nop
 8000418:	e000      	b.n	800041c <StateMachineSteps+0x144>
				  break;
 800041a:	bf00      	nop
			  }
	return run_cur_state;
 800041c:	79fb      	ldrb	r3, [r7, #7]
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bd90      	pop	{r4, r7, pc}
 8000426:	bf00      	nop
 8000428:	58020000 	.word	0x58020000

0800042c <StateMachineActuation>:
//airs_state = 3 -> CLOSED_AIRS
//airs_state = 6 -> PRECHARGE
//airs_state = 8 -> PRECHARGE_CHARGER
//airs_state = 9 -> CLOSED_CHARGER

uint8_t StateMachineActuation(uint8_t run_cur_state,uint8_t *airs_state, uint8_t CAN_BALANCING){
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	6039      	str	r1, [r7, #0]
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	71bb      	strb	r3, [r7, #6]
	uint8_t BLC = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	73fb      	strb	r3, [r7, #15]
	switch(run_cur_state){
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	2b05      	cmp	r3, #5
 8000444:	f200 80f4 	bhi.w	8000630 <StateMachineActuation+0x204>
 8000448:	a201      	add	r2, pc, #4	@ (adr r2, 8000450 <StateMachineActuation+0x24>)
 800044a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044e:	bf00      	nop
 8000450:	08000469 	.word	0x08000469
 8000454:	080004b5 	.word	0x080004b5
 8000458:	08000501 	.word	0x08000501
 800045c:	0800054d 	.word	0x0800054d
 8000460:	08000599 	.word	0x08000599
 8000464:	080005e5 	.word	0x080005e5
		  case 0:			//Obrir reles BMS
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2108      	movs	r1, #8
 800046c:	4875      	ldr	r0, [pc, #468]	@ (8000644 <StateMachineActuation+0x218>)
 800046e:	f006 f8bf 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2120      	movs	r1, #32
 8000476:	4874      	ldr	r0, [pc, #464]	@ (8000648 <StateMachineActuation+0x21c>)
 8000478:	f006 f8ba 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2180      	movs	r1, #128	@ 0x80
 8000480:	4871      	ldr	r0, [pc, #452]	@ (8000648 <StateMachineActuation+0x21c>)
 8000482:	f006 f8b5 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2140      	movs	r1, #64	@ 0x40
 800048a:	486f      	ldr	r0, [pc, #444]	@ (8000648 <StateMachineActuation+0x21c>)
 800048c:	f006 f8b0 	bl	80065f0 <HAL_GPIO_WritePin>
			BLC = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 0;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 0;
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 0;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	3302      	adds	r3, #2
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 0;
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	3303      	adds	r3, #3
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
			break;
 80004b2:	e0bd      	b.n	8000630 <StateMachineActuation+0x204>
		  case 1:		//OPEN_AIRS: Obrir tots els relés
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2108      	movs	r1, #8
 80004b8:	4862      	ldr	r0, [pc, #392]	@ (8000644 <StateMachineActuation+0x218>)
 80004ba:	f006 f899 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	2120      	movs	r1, #32
 80004c2:	4861      	ldr	r0, [pc, #388]	@ (8000648 <StateMachineActuation+0x21c>)
 80004c4:	f006 f894 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2180      	movs	r1, #128	@ 0x80
 80004cc:	485e      	ldr	r0, [pc, #376]	@ (8000648 <StateMachineActuation+0x21c>)
 80004ce:	f006 f88f 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2140      	movs	r1, #64	@ 0x40
 80004d6:	485c      	ldr	r0, [pc, #368]	@ (8000648 <StateMachineActuation+0x21c>)
 80004d8:	f006 f88a 	bl	80065f0 <HAL_GPIO_WritePin>
			BLC = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 0;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 0;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 0;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	3302      	adds	r3, #2
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 0;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	3303      	adds	r3, #3
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
			  break;
 80004fe:	e097      	b.n	8000630 <StateMachineActuation+0x204>
		  case 2:		//PRECHARGE: Tancar relé de precharge i AIRminus
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2108      	movs	r1, #8
 8000504:	484f      	ldr	r0, [pc, #316]	@ (8000644 <StateMachineActuation+0x218>)
 8000506:	f006 f873 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2120      	movs	r1, #32
 800050e:	484e      	ldr	r0, [pc, #312]	@ (8000648 <StateMachineActuation+0x21c>)
 8000510:	f006 f86e 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	484b      	ldr	r0, [pc, #300]	@ (8000648 <StateMachineActuation+0x21c>)
 800051a:	f006 f869 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2140      	movs	r1, #64	@ 0x40
 8000522:	4849      	ldr	r0, [pc, #292]	@ (8000648 <StateMachineActuation+0x21c>)
 8000524:	f006 f864 	bl	80065f0 <HAL_GPIO_WritePin>
			BLC = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 6;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	2206      	movs	r2, #6
 8000530:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 0;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 1;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	3302      	adds	r3, #2
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 1;
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	3303      	adds	r3, #3
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
			  break;
 800054a:	e071      	b.n	8000630 <StateMachineActuation+0x204>
		  case 3:			//CLOSED_AIRS: Obrir relé de precharge i tancar AIRs
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	483c      	ldr	r0, [pc, #240]	@ (8000644 <StateMachineActuation+0x218>)
 8000552:	f006 f84d 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2120      	movs	r1, #32
 800055a:	483b      	ldr	r0, [pc, #236]	@ (8000648 <StateMachineActuation+0x21c>)
 800055c:	f006 f848 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2180      	movs	r1, #128	@ 0x80
 8000564:	4838      	ldr	r0, [pc, #224]	@ (8000648 <StateMachineActuation+0x21c>)
 8000566:	f006 f843 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2140      	movs	r1, #64	@ 0x40
 800056e:	4836      	ldr	r0, [pc, #216]	@ (8000648 <StateMachineActuation+0x21c>)
 8000570:	f006 f83e 	bl	80065f0 <HAL_GPIO_WritePin>
			BLC = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 3;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2203      	movs	r2, #3
 800057c:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 1;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 1;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	3302      	adds	r3, #2
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 0;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3303      	adds	r3, #3
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
			  break;
 8000596:	e04b      	b.n	8000630 <StateMachineActuation+0x204>
		  case 4:	//CHARGER_PRECHARGE: Tancar relé de precharge i AIRminus
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2108      	movs	r1, #8
 800059c:	4829      	ldr	r0, [pc, #164]	@ (8000644 <StateMachineActuation+0x218>)
 800059e:	f006 f827 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	4828      	ldr	r0, [pc, #160]	@ (8000648 <StateMachineActuation+0x21c>)
 80005a8:	f006 f822 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	4825      	ldr	r0, [pc, #148]	@ (8000648 <StateMachineActuation+0x21c>)
 80005b2:	f006 f81d 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2140      	movs	r1, #64	@ 0x40
 80005ba:	4823      	ldr	r0, [pc, #140]	@ (8000648 <StateMachineActuation+0x21c>)
 80005bc:	f006 f818 	bl	80065f0 <HAL_GPIO_WritePin>
			BLC = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 6;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2206      	movs	r2, #6
 80005c8:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 0;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 1;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	3302      	adds	r3, #2
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 1;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3303      	adds	r3, #3
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
			  break;
 80005e2:	e025      	b.n	8000630 <StateMachineActuation+0x204>
		  case 5:		//CLOSED_CHARGER: Obrir relé de precharge i tancar AIRs
			HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	4816      	ldr	r0, [pc, #88]	@ (8000644 <StateMachineActuation+0x218>)
 80005ea:	f006 f801 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRPLUS_PORT, AIRPLUS_PIN, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2120      	movs	r1, #32
 80005f2:	4815      	ldr	r0, [pc, #84]	@ (8000648 <StateMachineActuation+0x21c>)
 80005f4:	f005 fffc 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIRMINUS_PORT, AIRMINUS_PIN, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2180      	movs	r1, #128	@ 0x80
 80005fc:	4812      	ldr	r0, [pc, #72]	@ (8000648 <StateMachineActuation+0x21c>)
 80005fe:	f005 fff7 	bl	80065f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PRECHARGE_PORT, PRECHARGE_PIN, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2140      	movs	r1, #64	@ 0x40
 8000606:	4810      	ldr	r0, [pc, #64]	@ (8000648 <StateMachineActuation+0x21c>)
 8000608:	f005 fff2 	bl	80065f0 <HAL_GPIO_WritePin>
			BLC = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	73fb      	strb	r3, [r7, #15]
			airs_state[0] = 3;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2203      	movs	r2, #3
 8000614:	701a      	strb	r2, [r3, #0]
			airs_state[1] = 1;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
			airs_state[2] = 1;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	3302      	adds	r3, #2
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
			airs_state[3] = 0;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	3303      	adds	r3, #3
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
			  break;
 800062e:	bf00      	nop
		  }
	if(CAN_BALANCING == 1){
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d101      	bne.n	800063a <StateMachineActuation+0x20e>
		BLC = 1;
 8000636:	2301      	movs	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
	}
	return BLC;
 800063a:	7bfb      	ldrb	r3, [r7, #15]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	58021000 	.word	0x58021000
 8000648:	58020000 	.word	0x58020000

0800064c <Balancing>:
 * Set the Discharge of the cells: 1 -> Turn ON Shorting Switch for Cell x; 0 -> Turn OFF Shorting Switch for Cell x (Default);
 * It is an array of 12 bits for each slave
 * Inputs: Minimum voltage for start balancing, less charged cell, cell voltages array, limit voltage to balance, maximum difference between the value and the minimum voltage, and the number of ICs
*/
void Balancing(uint16_t *VOLTAGES, uint16_t VCELL_MIN)		// Array of the read voltages
		{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
			//uint16_t VCELL_MIN = 27000;					// Variable of the less charged cell
			for(int j = 0; j < TOTAL_IC; j++)				// Loops for each voltage in the evaluated IC
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	e0a5      	b.n	80007aa <Balancing+0x15e>
			{
				uint16_t BALANCING1 = 0b00000000;			// Variable 0 or 1 that sets if the evaluated cell should (1) or not (0) start balancing, has a 16 bits dimension
 800065e:	2300      	movs	r3, #0
 8000660:	827b      	strh	r3, [r7, #18]
				uint16_t BALANCING2 = 0b00000000;			// Variable 0 or 1 that sets if the evaluated cell should (1) or not (0) start balancing, has a 16 bits dimension
 8000662:	2300      	movs	r3, #0
 8000664:	823b      	strh	r3, [r7, #16]

				for(int i = 0; i < 12; i++)					// A for function that evaluates each cell of the IC
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e083      	b.n	8000774 <Balancing+0x128>
				{
				    if(i < 8){
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b07      	cmp	r3, #7
 8000670:	dc3b      	bgt.n	80006ea <Balancing+0x9e>
				        if(VOLTAGES[i+j*12]>V_MIN && (VOLTAGES[i+j*12] > V_BALANCING || (VOLTAGES[i+j*12]-VCELL_MIN)>DIFF_MAX))	//If the evaluated voltage is over V_MIN && (the evaluated voltage is over V_BALANCING || the difference between the evaluated voltage and VCELL_MIN is bigger than DIFF_MAX
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	461a      	mov	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	881a      	ldrh	r2, [r3, #0]
 800068a:	4b4f      	ldr	r3, [pc, #316]	@ (80007c8 <Balancing+0x17c>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	429a      	cmp	r2, r3
 8000690:	d96d      	bls.n	800076e <Balancing+0x122>
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	881a      	ldrh	r2, [r3, #0]
 80006aa:	4b48      	ldr	r3, [pc, #288]	@ (80007cc <Balancing+0x180>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d810      	bhi.n	80006d4 <Balancing+0x88>
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	461a      	mov	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	2bc8      	cmp	r3, #200	@ 0xc8
 80006d2:	dd4c      	ble.n	800076e <Balancing+0x122>
					    {
						BALANCING1 = (BALANCING1|(1<<i));	//Set a 1 in the position of the evaluated cell in the BALANCING variable
 80006d4:	2201      	movs	r2, #1
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	b21a      	sxth	r2, r3
 80006de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	827b      	strh	r3, [r7, #18]
 80006e8:	e041      	b.n	800076e <Balancing+0x122>
					    }
				    }
				    else if(i>=8 && i<=12){
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	dd3e      	ble.n	800076e <Balancing+0x122>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0c      	cmp	r3, #12
 80006f4:	dc3b      	bgt.n	800076e <Balancing+0x122>
				        if(VOLTAGES[i+j*12]>V_MIN && (VOLTAGES[i+j*12] > V_BALANCING || (VOLTAGES[i+j*12]-VCELL_MIN)>DIFF_MAX))	//If the evaluated voltage is over V_MIN && (the evaluated voltage is over V_BALANCING || the difference between the evaluated voltage and VCELL_MIN is bigger than DIFF_MAX
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	461a      	mov	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4413      	add	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	881a      	ldrh	r2, [r3, #0]
 800070e:	4b2e      	ldr	r3, [pc, #184]	@ (80007c8 <Balancing+0x17c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	d92b      	bls.n	800076e <Balancing+0x122>
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	461a      	mov	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	881a      	ldrh	r2, [r3, #0]
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <Balancing+0x180>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d810      	bhi.n	8000758 <Balancing+0x10c>
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	4613      	mov	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	4413      	add	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	461a      	mov	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4413      	add	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	887b      	ldrh	r3, [r7, #2]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	2bc8      	cmp	r3, #200	@ 0xc8
 8000756:	dd0a      	ble.n	800076e <Balancing+0x122>
					    {
						BALANCING2 = (BALANCING2|(1<<(i-8)));//Set a 1 in the position of the evaluated cell in the BALANCING variable
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3b08      	subs	r3, #8
 800075c:	2201      	movs	r2, #1
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	b21a      	sxth	r2, r3
 8000764:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000768:	4313      	orrs	r3, r2
 800076a:	b21b      	sxth	r3, r3
 800076c:	823b      	strh	r3, [r7, #16]
				for(int i = 0; i < 12; i++)					// A for function that evaluates each cell of the IC
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b0b      	cmp	r3, #11
 8000778:	f77f af78 	ble.w	800066c <Balancing+0x20>
					    }
				    }
				}
				EVAL[j] = (BALANCING2<<8) + (BALANCING1);	 //Set the DCC array in the evaluated IC position to the value of the BALANCING variable
 800077c:	8a3b      	ldrh	r3, [r7, #16]
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	b29a      	uxth	r2, r3
 8000782:	8a7b      	ldrh	r3, [r7, #18]
 8000784:	4413      	add	r3, r2
 8000786:	b299      	uxth	r1, r3
 8000788:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <Balancing+0x184>)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				DCC[j] = (BALANCING2<<8) + (BALANCING1);
 8000790:	8a3b      	ldrh	r3, [r7, #16]
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	b29a      	uxth	r2, r3
 8000796:	8a7b      	ldrh	r3, [r7, #18]
 8000798:	4413      	add	r3, r2
 800079a:	b299      	uxth	r1, r3
 800079c:	4a0d      	ldr	r2, [pc, #52]	@ (80007d4 <Balancing+0x188>)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j < TOTAL_IC; j++)				// Loops for each voltage in the evaluated IC
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	3301      	adds	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <Balancing+0x18c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	4293      	cmp	r3, r2
 80007b4:	f6ff af53 	blt.w	800065e <Balancing+0x12>
				}
		}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	24000004 	.word	0x24000004
 80007cc:	24000002 	.word	0x24000002
 80007d0:	240003b0 	.word	0x240003b0
 80007d4:	24000248 	.word	0x24000248
 80007d8:	24000000 	.word	0x24000000

080007dc <MUX_SWITCH>:
//MUX CH = 4 -> GPIO 5 = 1; GPIO 4 = 0; GPIO 3 = 0; GPIO 2 = 0; GPIO 1 = 0;
//MUX CH = 5 -> GPIO 5 = 1; GPIO 4 = 0; GPIO 3 = 1; GPIO 2 = 0; GPIO 1 = 0;
//MUX CH = 6 -> GPIO 5 = 1; GPIO 4 = 1; GPIO 3 = 0; GPIO 2 = 0; GPIO 1 = 0;
//MUX CH = 7 -> GPIO 5 = 1; GPIO 4 = 1; GPIO 3 = 1; GPIO 2 = 0; GPIO 1 = 0;

uint16_t MUX_SWITCH(uint16_t GPIOx){
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
	switch (GPIOx){
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	2b1c      	cmp	r3, #28
 80007ec:	d854      	bhi.n	8000898 <MUX_SWITCH+0xbc>
 80007ee:	a201      	add	r2, pc, #4	@ (adr r2, 80007f4 <MUX_SWITCH+0x18>)
 80007f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f4:	08000869 	.word	0x08000869
 80007f8:	08000899 	.word	0x08000899
 80007fc:	08000899 	.word	0x08000899
 8000800:	08000899 	.word	0x08000899
 8000804:	0800086f 	.word	0x0800086f
 8000808:	08000899 	.word	0x08000899
 800080c:	08000899 	.word	0x08000899
 8000810:	08000899 	.word	0x08000899
 8000814:	08000875 	.word	0x08000875
 8000818:	08000899 	.word	0x08000899
 800081c:	08000899 	.word	0x08000899
 8000820:	08000899 	.word	0x08000899
 8000824:	0800087b 	.word	0x0800087b
 8000828:	08000899 	.word	0x08000899
 800082c:	08000899 	.word	0x08000899
 8000830:	08000899 	.word	0x08000899
 8000834:	08000881 	.word	0x08000881
 8000838:	08000899 	.word	0x08000899
 800083c:	08000899 	.word	0x08000899
 8000840:	08000899 	.word	0x08000899
 8000844:	08000887 	.word	0x08000887
 8000848:	08000899 	.word	0x08000899
 800084c:	08000899 	.word	0x08000899
 8000850:	08000899 	.word	0x08000899
 8000854:	0800088d 	.word	0x0800088d
 8000858:	08000899 	.word	0x08000899
 800085c:	08000899 	.word	0x08000899
 8000860:	08000899 	.word	0x08000899
 8000864:	08000893 	.word	0x08000893
		  case 0b00000011:
			GPIOx = 0b00000111;
 8000868:	2307      	movs	r3, #7
 800086a:	80fb      	strh	r3, [r7, #6]
			break;
 800086c:	e014      	b.n	8000898 <MUX_SWITCH+0xbc>
		  case 0b00000111:
			GPIOx = 0b00001011;
 800086e:	230b      	movs	r3, #11
 8000870:	80fb      	strh	r3, [r7, #6]
			break;
 8000872:	e011      	b.n	8000898 <MUX_SWITCH+0xbc>
		  case 0b00001011:
			GPIOx = 0b00001111;
 8000874:	230f      	movs	r3, #15
 8000876:	80fb      	strh	r3, [r7, #6]
			break;
 8000878:	e00e      	b.n	8000898 <MUX_SWITCH+0xbc>
		  case 0b00001111:
			GPIOx = 0b00010011;
 800087a:	2313      	movs	r3, #19
 800087c:	80fb      	strh	r3, [r7, #6]
			break;
 800087e:	e00b      	b.n	8000898 <MUX_SWITCH+0xbc>
		  case 0b00010011:
			GPIOx = 0b00010111;
 8000880:	2317      	movs	r3, #23
 8000882:	80fb      	strh	r3, [r7, #6]
			break;
 8000884:	e008      	b.n	8000898 <MUX_SWITCH+0xbc>
		  case 0b00010111:
			GPIOx = 0b00011011;
 8000886:	231b      	movs	r3, #27
 8000888:	80fb      	strh	r3, [r7, #6]
			break;
 800088a:	e005      	b.n	8000898 <MUX_SWITCH+0xbc>
		  case 0b00011011:
			GPIOx = 0b00011111;
 800088c:	231f      	movs	r3, #31
 800088e:	80fb      	strh	r3, [r7, #6]
			break;
 8000890:	e002      	b.n	8000898 <MUX_SWITCH+0xbc>
		  case 0b00011111:
			GPIOx = 0b00000011;
 8000892:	2303      	movs	r3, #3
 8000894:	80fb      	strh	r3, [r7, #6]
			break;
 8000896:	bf00      	nop
	  }
	  return GPIOx;
 8000898:	88fb      	ldrh	r3, [r7, #6]
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop

080008a8 <outputCS>:

/*
 * Function: outputCS
 * Purpose: The outputCs is a function that sets the CS pin to high or low depending on the entering value input (1) or (0)
 */
void outputCS(uint8_t CS_INPUT){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	if(CS_INPUT == 1){
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d105      	bne.n	80008c4 <outputCS+0x1c>
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_SET);			//The High state of the chip select pin is set
 80008b8:	2201      	movs	r2, #1
 80008ba:	2140      	movs	r1, #64	@ 0x40
 80008bc:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <outputCS+0x30>)
 80008be:	f005 fe97 	bl	80065f0 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_RESET);		//The Low state of the chip select pin is set
	}
}
 80008c2:	e004      	b.n	80008ce <outputCS+0x26>
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_RESET);		//The Low state of the chip select pin is set
 80008c4:	2200      	movs	r2, #0
 80008c6:	2140      	movs	r1, #64	@ 0x40
 80008c8:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <outputCS+0x30>)
 80008ca:	f005 fe91 	bl	80065f0 <HAL_GPIO_WritePin>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58020400 	.word	0x58020400

080008dc <wakeup_idle>:
/*
 * Function: wakeup_idle
 * Purpose: The wakeup_idle function sends a byte thought SPI with no specific purpose, it just wakes up the ICs.
 * Inputs: The spi_channel which wants to be used
 */
void wakeup_idle(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<TOTAL_IC; i++)				// Loops for each IC
 80008e2:	2300      	movs	r3, #0
 80008e4:	71fb      	strb	r3, [r7, #7]
 80008e6:	e00e      	b.n	8000906 <wakeup_idle+0x2a>
		{
	outputCS(0);		// The Low state of the chip select pin is set
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff ffdd 	bl	80008a8 <outputCS>
	delay_us(20);		// Waits WAKEUP_DELAY to send again
 80008ee:	2014      	movs	r0, #20
 80008f0:	f001 fd3a 	bl	8002368 <delay_us>
	outputCS(1);		// The High state of the chip select pin is set
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff ffd7 	bl	80008a8 <outputCS>
	delay_us(20);		// Waits WAKEUP_DELAY to send again
 80008fa:	2014      	movs	r0, #20
 80008fc:	f001 fd34 	bl	8002368 <delay_us>
	for(uint8_t i = 0; i<TOTAL_IC; i++)				// Loops for each IC
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	3301      	adds	r3, #1
 8000904:	71fb      	strb	r3, [r7, #7]
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <wakeup_idle+0x40>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	429a      	cmp	r2, r3
 800090e:	d3eb      	bcc.n	80008e8 <wakeup_idle+0xc>
		}
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000000 	.word	0x24000000

08000920 <pec15_calc>:
 * Inputs: The length of the data calculated and the data which has to be evaluated to calculate the PEC
 * uint8_t DATA_LENGTH, 		// Number of bytes that will be used to calculate a PEC
   uint8_t *DATA 				// Array of data that will be used to calculate  a PEC

*/
uint16_t pec15_calc(uint8_t DATA_LENGTH, uint8_t *DATA){
 8000920:	b480      	push	{r7}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder;
  uint16_t addr;
  remainder = 16;								// Initialize the PEC
 800092c:	2310      	movs	r3, #16
 800092e:	82fb      	strh	r3, [r7, #22]
  for (uint8_t i = 0; i<DATA_LENGTH; i++) 		// Loops for each byte in data array
 8000930:	2300      	movs	r3, #0
 8000932:	757b      	strb	r3, [r7, #21]
 8000934:	e01b      	b.n	800096e <pec15_calc+0x4e>
  {
    addr = ((remainder>>7)^DATA[i])&0xff;		// Calculate PEC table address
 8000936:	8afb      	ldrh	r3, [r7, #22]
 8000938:	09db      	lsrs	r3, r3, #7
 800093a:	b29b      	uxth	r3, r3
 800093c:	7d7a      	ldrb	r2, [r7, #21]
 800093e:	6839      	ldr	r1, [r7, #0]
 8000940:	440a      	add	r2, r1
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	4053      	eors	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	827b      	strh	r3, [r7, #18]
    remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
 800094c:	8afb      	ldrh	r3, [r7, #22]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	b21a      	sxth	r2, r3
 8000952:	8a7b      	ldrh	r3, [r7, #18]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	490c      	ldr	r1, [pc, #48]	@ (8000988 <pec15_calc+0x68>)
 8000958:	440b      	add	r3, r1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b21b      	sxth	r3, r3
 8000962:	4053      	eors	r3, r2
 8000964:	b21b      	sxth	r3, r3
 8000966:	82fb      	strh	r3, [r7, #22]
  for (uint8_t i = 0; i<DATA_LENGTH; i++) 		// Loops for each byte in data array
 8000968:	7d7b      	ldrb	r3, [r7, #21]
 800096a:	3301      	adds	r3, #1
 800096c:	757b      	strb	r3, [r7, #21]
 800096e:	7d7a      	ldrb	r2, [r7, #21]
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	429a      	cmp	r2, r3
 8000974:	d3df      	bcc.n	8000936 <pec15_calc+0x16>
  }
  return(remainder*2);							// The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000976:	8afb      	ldrh	r3, [r7, #22]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	b29b      	uxth	r3, r3
}
 800097c:	4618      	mov	r0, r3
 800097e:	371c      	adds	r7, #28
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	24000008 	.word	0x24000008

0800098c <ltc6811_wrcfg>:
// * Purpose: This command will write the configuration registers of the ltc6811-1s
// * connected in a daisy chain stack. The configuration is written in descending
// * order so the last device's configuration is written first.
// * Inputs: The number of ICs, the configuration from the function set_cfgr, the SPI channel used
*/
void ltc6811_wrcfg(SPI_HandleTypeDef spi_channel, uint8_t GPIOx, uint16_t *VOLTAGES, uint8_t BLC, uint16_t VCELL_MIN){
 800098c:	b084      	sub	sp, #16
 800098e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000992:	b095      	sub	sp, #84	@ 0x54
 8000994:	af00      	add	r7, sp, #0
 8000996:	f107 0678 	add.w	r6, r7, #120	@ 0x78
 800099a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800099e:	466b      	mov	r3, sp
 80009a0:	461e      	mov	r6, r3
  const uint8_t BYTES_IN_REG = 6;
 80009a2:	2306      	movs	r3, #6
 80009a4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  const uint8_t CMD_LEN = 4+(8*TOTAL_IC);
 80009a8:	4bc3      	ldr	r3, [pc, #780]	@ (8000cb8 <ltc6811_wrcfg+0x32c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	3304      	adds	r3, #4
 80009b2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  uint8_t cmd[CMD_LEN];			// CMD array
 80009b6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80009ba:	3b01      	subs	r3, #1
 80009bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009be:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80009c2:	2200      	movs	r2, #0
 80009c4:	461c      	mov	r4, r3
 80009c6:	4615      	mov	r5, r2
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	00eb      	lsls	r3, r5, #3
 80009d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009d6:	00e2      	lsls	r2, r4, #3
 80009d8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80009dc:	2200      	movs	r2, #0
 80009de:	623b      	str	r3, [r7, #32]
 80009e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	f04f 0300 	mov.w	r3, #0
 80009ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80009ee:	4629      	mov	r1, r5
 80009f0:	00cb      	lsls	r3, r1, #3
 80009f2:	4621      	mov	r1, r4
 80009f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80009f8:	4621      	mov	r1, r4
 80009fa:	00ca      	lsls	r2, r1, #3
 80009fc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000a00:	3307      	adds	r3, #7
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	ebad 0d03 	sub.w	sp, sp, r3
 8000a0a:	466b      	mov	r3, sp
 8000a0c:	3300      	adds	r3, #0
 8000a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t cfg_pec;				// PEC
  uint8_t cmd_index; 			// Command counter
  uint8_t config[TOTAL_IC][6];
 8000a10:	4ba9      	ldr	r3, [pc, #676]	@ (8000cb8 <ltc6811_wrcfg+0x32c>)
 8000a12:	7819      	ldrb	r1, [r3, #0]
 8000a14:	460b      	mov	r3, r1
 8000a16:	3b01      	subs	r3, #1
 8000a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a1a:	b2cb      	uxtb	r3, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	61fa      	str	r2, [r7, #28]
 8000a22:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000a26:	4622      	mov	r2, r4
 8000a28:	462b      	mov	r3, r5
 8000a2a:	1890      	adds	r0, r2, r2
 8000a2c:	60b8      	str	r0, [r7, #8]
 8000a2e:	415b      	adcs	r3, r3
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a36:	4620      	mov	r0, r4
 8000a38:	eb12 0a00 	adds.w	sl, r2, r0
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	eb43 0b00 	adc.w	fp, r3, r0
 8000a42:	f04f 0200 	mov.w	r2, #0
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000a4e:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000a52:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000a56:	b2cb      	uxtb	r3, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	617a      	str	r2, [r7, #20]
 8000a5e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000a62:	4622      	mov	r2, r4
 8000a64:	462b      	mov	r3, r5
 8000a66:	1890      	adds	r0, r2, r2
 8000a68:	6038      	str	r0, [r7, #0]
 8000a6a:	415b      	adcs	r3, r3
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a72:	4620      	mov	r0, r4
 8000a74:	eb12 0800 	adds.w	r8, r2, r0
 8000a78:	4628      	mov	r0, r5
 8000a7a:	eb43 0900 	adc.w	r9, r3, r0
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000a8a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000a8e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000a92:	460a      	mov	r2, r1
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	3307      	adds	r3, #7
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	ebad 0d03 	sub.w	sp, sp, r3
 8000aa6:	466b      	mov	r3, sp
 8000aa8:	3300      	adds	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30


  if(BLC == 0){
 8000aac:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d115      	bne.n	8000ae0 <ltc6811_wrcfg+0x154>
	  for(int i = 0; i < TOTAL_IC*12; i++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ab8:	e007      	b.n	8000aca <ltc6811_wrcfg+0x13e>
		  DCC[i] = 0;
 8000aba:	4a80      	ldr	r2, [pc, #512]	@ (8000cbc <ltc6811_wrcfg+0x330>)
 8000abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = 0; i < TOTAL_IC*12; i++){
 8000ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000aca:	4b7b      	ldr	r3, [pc, #492]	@ (8000cb8 <ltc6811_wrcfg+0x32c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000adc:	4293      	cmp	r3, r2
 8000ade:	dbec      	blt.n	8000aba <ltc6811_wrcfg+0x12e>
	  }
  }
  if(BLC == 1){
 8000ae0:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d106      	bne.n	8000af6 <ltc6811_wrcfg+0x16a>
	  Balancing(VOLTAGES, VCELL_MIN);
 8000ae8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8000aec:	4619      	mov	r1, r3
 8000aee:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8000af2:	f7ff fdab 	bl	800064c <Balancing>
  }

  for(int i= 0; i < TOTAL_IC; i++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8000afa:	e056      	b.n	8000baa <ltc6811_wrcfg+0x21e>
  		{
	  	  	config[i][0] = (uint8_t)((GPIOx<<3)&0xF8)|((REFON<<2)&0x04)|((DTEN<<1)&0x02)|(ADCOPT&0x01);
 8000afc:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	f023 0307 	bic.w	r3, r3, #7
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	b2d8      	uxtb	r0, r3
 8000b12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	440b      	add	r3, r1
 8000b20:	4602      	mov	r2, r0
 8000b22:	701a      	strb	r2, [r3, #0]
  	    /*				0b01011000 & 0b11111000 | 0b00000100 & 0b0100 | 0b00000010 & 0b0010 | 0b00000001 & 0b00000001
  		    	  		   0b0101 1000		  |     0b0000 0100	    |	 0b0000 0010	      | 		  0b0000 0001
  		    		CFGR0 -> 0b0101 1111*/
  			config[i][1] = (uint8_t)(UNDERVOLTAGE_TH&(0x00FF));
 8000b24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	440b      	add	r3, r1
 8000b32:	3301      	adds	r3, #1
 8000b34:	22d5      	movs	r2, #213	@ 0xd5
 8000b36:	701a      	strb	r2, [r3, #0]
  			config[i][2] = (uint8_t)(((OVERVOLTAGE_TH&(0x000F))<<4) | ((UNDERVOLTAGE_TH&(0x0F00))>>8));
 8000b38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	440b      	add	r3, r1
 8000b46:	3302      	adds	r3, #2
 8000b48:	2216      	movs	r2, #22
 8000b4a:	701a      	strb	r2, [r3, #0]
  			config[i][3] = (uint8_t)((OVERVOLTAGE_TH&(0x0FF0))>>4);
 8000b4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	440b      	add	r3, r1
 8000b5a:	3303      	adds	r3, #3
 8000b5c:	22a4      	movs	r2, #164	@ 0xa4
 8000b5e:	701a      	strb	r2, [r3, #0]
  			config[i][4] = (uint8_t)(DCC[i]&0x00FF); //DCC[TOTAL_IC-i-1]
 8000b60:	4a56      	ldr	r2, [pc, #344]	@ (8000cbc <ltc6811_wrcfg+0x330>)
 8000b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b68:	b2d8      	uxtb	r0, r3
 8000b6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000b6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	440b      	add	r3, r1
 8000b78:	3304      	adds	r3, #4
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	701a      	strb	r2, [r3, #0]
  		    				/*0b00001111 11111111 & 0b00000000 11111111
  		    							0b00000000 11111111
  		     							CFGR4 -> 0b11111111*/
  			config[i][5] = (uint8_t)(((DCTO)<<4) | (((DCC[i]&0x0F00))>>8));
 8000b7e:	4a4f      	ldr	r2, [pc, #316]	@ (8000cbc <ltc6811_wrcfg+0x330>)
 8000b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b86:	121b      	asrs	r3, r3, #8
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	b2d8      	uxtb	r0, r3
 8000b90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3305      	adds	r3, #5
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	701a      	strb	r2, [r3, #0]
  for(int i= 0; i < TOTAL_IC; i++)
 8000ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8000baa:	4b43      	ldr	r3, [pc, #268]	@ (8000cb8 <ltc6811_wrcfg+0x32c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	dba2      	blt.n	8000afc <ltc6811_wrcfg+0x170>
  		       0b11000000 	 | (0b00001111 00000000)>>8
  		       0b11000000 	 | 0b00000000 00001111
  		     		CFGR5 =	0b11001111*/
  		}

  cmd[0] = 0x00;		// Command format 0
 8000bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x01;		// Command format 1
 8000bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	705a      	strb	r2, [r3, #1]
  cmd[2] = 0x3d;		// Calculated PEC of Command format 0
 8000bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bc4:	223d      	movs	r2, #61	@ 0x3d
 8000bc6:	709a      	strb	r2, [r3, #2]
  cmd[3] = 0x6e;		// Calculated PEC of Command format 1
 8000bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bca:	226e      	movs	r2, #110	@ 0x6e
 8000bcc:	70da      	strb	r2, [r3, #3]


  cmd_index = 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for (uint8_t current_ic = TOTAL_IC; current_ic > 0; current_ic--)    	// executes for each ltc6811 in daisy chain, this loops starts with
 8000bd4:	4b38      	ldr	r3, [pc, #224]	@ (8000cb8 <ltc6811_wrcfg+0x32c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000bdc:	e04e      	b.n	8000c7c <ltc6811_wrcfg+0x2f0>
  {
    // the last IC on the stack. The first configuration written is
    // received by the last IC in the daisy chain

    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000be4:	e01a      	b.n	8000c1c <ltc6811_wrcfg+0x290>
    {
      // current_byte is the byte counter

      cmd[cmd_index] = config[current_ic-1][current_byte];           	 //adding the config data to the array to be sent
 8000be6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	f897 0042 	ldrb.w	r0, [r7, #66]	@ 0x42
 8000bf0:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8000bf4:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4423      	add	r3, r4
 8000c00:	4403      	add	r3, r0
 8000c02:	781a      	ldrb	r2, [r3, #0]
 8000c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c06:	545a      	strb	r2, [r3, r1]
      cmd_index = cmd_index + 1;
 8000c08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000c12:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000c16:	3301      	adds	r3, #1
 8000c18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000c1c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8000c20:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3de      	bcc.n	8000be6 <ltc6811_wrcfg+0x25a>
    }

    cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);   // calculating the PEC for each ICs configuration register data
 8000c28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	4613      	mov	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c38:	441a      	add	r2, r3
 8000c3a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fe6d 	bl	8000920 <pec15_calc>
 8000c46:	4603      	mov	r3, r0
 8000c48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8000c4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000c54:	b2d1      	uxtb	r1, r2
 8000c56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c58:	54d1      	strb	r1, [r2, r3]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8000c5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000c5e:	3301      	adds	r3, #1
 8000c60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000c62:	b2d1      	uxtb	r1, r2
 8000c64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c66:	54d1      	strb	r1, [r2, r3]
    cmd_index = cmd_index + 2;
 8000c68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for (uint8_t current_ic = TOTAL_IC; current_ic > 0; current_ic--)    	// executes for each ltc6811 in daisy chain, this loops starts with
 8000c72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000c7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1ac      	bne.n	8000bde <ltc6811_wrcfg+0x252>
  }


  wakeup_idle ();               // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8000c84:	f7ff fe2a 	bl	80008dc <wakeup_idle>

  outputCS(0);								// Set the CS to low to send data
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fe0d 	bl	80008a8 <outputCS>
  HAL_SPI_Transmit(&spi_channel, (uint8_t*)cmd, CMD_LEN, HAL_MAX_DELAY); // Sends the CMD trough SPI
 8000c8e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000c9a:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8000c9e:	f008 f947 	bl	8008f30 <HAL_SPI_Transmit>
  outputCS(1);								// Set the CS to high
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fe00 	bl	80008a8 <outputCS>
 8000ca8:	46b5      	mov	sp, r6
}
 8000caa:	bf00      	nop
 8000cac:	3754      	adds	r7, #84	@ 0x54
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr
 8000cb8:	24000000 	.word	0x24000000
 8000cbc:	24000248 	.word	0x24000248

08000cc0 <ltc6811_wrpwm>:


void ltc6811_wrpwm(SPI_HandleTypeDef spi_channel){
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc6:	b097      	sub	sp, #92	@ 0x5c
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	f107 0680 	add.w	r6, r7, #128	@ 0x80
 8000cce:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000cd2:	466b      	mov	r3, sp
 8000cd4:	461e      	mov	r6, r3
  const uint8_t BYTES_IN_REG = 6;
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  const uint8_t CMD_LEN = 4+(8*TOTAL_IC);
 8000cdc:	4ba6      	ldr	r3, [pc, #664]	@ (8000f78 <ltc6811_wrpwm+0x2b8>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  uint8_t cmd[CMD_LEN];			// CMD array
 8000cea:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8000cf2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	461c      	mov	r4, r3
 8000cfa:	4615      	mov	r5, r2
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	00eb      	lsls	r3, r5, #3
 8000d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d0a:	00e2      	lsls	r2, r4, #3
 8000d0c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000d10:	2200      	movs	r2, #0
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	627a      	str	r2, [r7, #36]	@ 0x24
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	f04f 0300 	mov.w	r3, #0
 8000d1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000d22:	4629      	mov	r1, r5
 8000d24:	00cb      	lsls	r3, r1, #3
 8000d26:	4621      	mov	r1, r4
 8000d28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	00ca      	lsls	r2, r1, #3
 8000d30:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000d34:	3307      	adds	r3, #7
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000d3e:	466b      	mov	r3, sp
 8000d40:	3300      	adds	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t cfg_pec;				// PEC
  uint8_t cmd_index; 			// Command counter
  uint8_t config[TOTAL_IC][6];
 8000d44:	4b8c      	ldr	r3, [pc, #560]	@ (8000f78 <ltc6811_wrpwm+0x2b8>)
 8000d46:	7819      	ldrb	r1, [r3, #0]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d4e:	b2cb      	uxtb	r3, r1
 8000d50:	2200      	movs	r2, #0
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	61fa      	str	r2, [r7, #28]
 8000d56:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	462b      	mov	r3, r5
 8000d5e:	1890      	adds	r0, r2, r2
 8000d60:	60b8      	str	r0, [r7, #8]
 8000d62:	415b      	adcs	r3, r3
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	eb12 0a00 	adds.w	sl, r2, r0
 8000d70:	4628      	mov	r0, r5
 8000d72:	eb43 0b00 	adc.w	fp, r3, r0
 8000d76:	f04f 0200 	mov.w	r2, #0
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000d82:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000d86:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000d8a:	b2cb      	uxtb	r3, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	617a      	str	r2, [r7, #20]
 8000d92:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000d96:	4622      	mov	r2, r4
 8000d98:	462b      	mov	r3, r5
 8000d9a:	1890      	adds	r0, r2, r2
 8000d9c:	6038      	str	r0, [r7, #0]
 8000d9e:	415b      	adcs	r3, r3
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000da6:	4620      	mov	r0, r4
 8000da8:	eb12 0800 	adds.w	r8, r2, r0
 8000dac:	4628      	mov	r0, r5
 8000dae:	eb43 0900 	adc.w	r9, r3, r0
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	f04f 0300 	mov.w	r3, #0
 8000dba:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000dbe:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000dc2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dda:	466b      	mov	r3, sp
 8000ddc:	3300      	adds	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t cmd_pec;
  uint8_t cmd_1[2];

// Patrón de PWM para balanceo
    uint8_t PWM_ON = 0b0111;
 8000de0:	2307      	movs	r3, #7
 8000de2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t PWM_OFF = 0b0000;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    // Inicializar el array config basado en EVAL
    for (int i = 0; i < TOTAL_IC; i++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8000df0:	e091      	b.n	8000f16 <ltc6811_wrpwm+0x256>
        for (int j = 0; j < 6; j++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000df6:	e00d      	b.n	8000e14 <ltc6811_wrpwm+0x154>
            config[i][j] = 0;
 8000df8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000dfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	18ca      	adds	r2, r1, r3
 8000e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 6; j++) {
 8000e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e10:	3301      	adds	r3, #1
 8000e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	ddee      	ble.n	8000df8 <ltc6811_wrpwm+0x138>
        }

        for (int j = 0; j < 12; j++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000e1e:	e074      	b.n	8000f0a <ltc6811_wrpwm+0x24a>
            uint8_t bit_value = (EVAL[i] >> j) & 1;
 8000e20:	4a56      	ldr	r2, [pc, #344]	@ (8000f7c <ltc6811_wrpwm+0x2bc>)
 8000e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e2c:	fa42 f303 	asr.w	r3, r2, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            uint8_t pwm_value = bit_value ? PWM_ON : PWM_OFF;
 8000e3a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <ltc6811_wrpwm+0x188>
 8000e42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e46:	e001      	b.n	8000e4c <ltc6811_wrpwm+0x18c>
 8000e48:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000e4c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

            if (j < 8) {
 8000e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e52:	2b07      	cmp	r3, #7
 8000e54:	dc29      	bgt.n	8000eaa <ltc6811_wrpwm+0x1ea>
                config[i][j / 2] |= (pwm_value << ((j % 2) * 4));
 8000e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	da00      	bge.n	8000e5e <ltc6811_wrpwm+0x19e>
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	105b      	asrs	r3, r3, #1
 8000e60:	461a      	mov	r2, r3
 8000e62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000e64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000e66:	460b      	mov	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	440b      	add	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4403      	add	r3, r0
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b259      	sxtb	r1, r3
 8000e76:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 8000e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	bfb8      	it	lt
 8000e84:	425b      	neglt	r3, r3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa00 f303 	lsl.w	r3, r0, r3
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	b2dc      	uxtb	r4, r3
 8000e94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000e96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000e98:	460b      	mov	r3, r1
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	440b      	add	r3, r1
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4403      	add	r3, r0
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e02c      	b.n	8000f04 <ltc6811_wrpwm+0x244>
            } else {
                config[i][4 + (j - 8) / 2] |= (pwm_value << (((j - 8) % 2) * 4));
 8000eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000eac:	3b08      	subs	r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da00      	bge.n	8000eb4 <ltc6811_wrpwm+0x1f4>
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	105b      	asrs	r3, r3, #1
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	1d10      	adds	r0, r2, #4
 8000eba:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8000ebc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	440b      	add	r3, r1
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4423      	add	r3, r4
 8000ec8:	4403      	add	r3, r0
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b259      	sxtb	r1, r3
 8000ece:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 8000ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ed4:	3b08      	subs	r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	bfb8      	it	lt
 8000ede:	425b      	neglt	r3, r3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	fa00 f303 	lsl.w	r3, r0, r3
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	1d11      	adds	r1, r2, #4
 8000eee:	b2dc      	uxtb	r4, r3
 8000ef0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000ef2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4403      	add	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	4622      	mov	r2, r4
 8000f02:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 12; j++) {
 8000f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f06:	3301      	adds	r3, #1
 8000f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f0c:	2b0b      	cmp	r3, #11
 8000f0e:	dd87      	ble.n	8000e20 <ltc6811_wrpwm+0x160>
    for (int i = 0; i < TOTAL_IC; i++) {
 8000f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f12:	3301      	adds	r3, #1
 8000f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <ltc6811_wrpwm+0x2b8>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f6ff af67 	blt.w	8000df2 <ltc6811_wrpwm+0x132>
            }
        }
    }

  cmd_1[0] = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  cmd_1[1] = 0x20;
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  cmd[0] = 0x00;
 8000f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x20;
 8000f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f38:	2220      	movs	r2, #32
 8000f3a:	705a      	strb	r2, [r3, #1]
  cmd_pec = pec15_calc(2, cmd_1);
 8000f3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f40:	4619      	mov	r1, r3
 8000f42:	2002      	movs	r0, #2
 8000f44:	f7ff fcec 	bl	8000920 <pec15_calc>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	863b      	strh	r3, [r7, #48]	@ 0x30
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000f4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f56:	709a      	strb	r2, [r3, #2]
  cmd[3] = (uint8_t)(cmd_pec);
 8000f58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f5e:	70da      	strb	r2, [r3, #3]


  cmd_index = 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  for (uint8_t current_ic = TOTAL_IC; current_ic > 0; current_ic--)    	// executes for each ltc6811 in daisy chain, this loops starts with
 8000f66:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <ltc6811_wrpwm+0x2b8>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000f6e:	e052      	b.n	8001016 <ltc6811_wrpwm+0x356>
  {
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000f76:	e01e      	b.n	8000fb6 <ltc6811_wrpwm+0x2f6>
 8000f78:	24000000 	.word	0x24000000
 8000f7c:	240003b0 	.word	0x240003b0
    {
      cmd[cmd_index] = config[current_ic-1][current_byte];           	 //adding the config data to the array to be sent
 8000f80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	f897 0046 	ldrb.w	r0, [r7, #70]	@ 0x46
 8000f8a:	f897 1057 	ldrb.w	r1, [r7, #87]	@ 0x57
 8000f8e:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4423      	add	r3, r4
 8000f9a:	4403      	add	r3, r0
 8000f9c:	781a      	ldrb	r2, [r3, #0]
 8000f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fa0:	545a      	strb	r2, [r3, r1]
      cmd_index = cmd_index + 1;
 8000fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000fac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000fb6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000fba:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3de      	bcc.n	8000f80 <ltc6811_wrpwm+0x2c0>
    }
    cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);   // calculating the PEC for each ICs configuration register data
 8000fc2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000fc6:	1e5a      	subs	r2, r3, #1
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fd2:	441a      	add	r2, r3
 8000fd4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fca0 	bl	8000920 <pec15_calc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8000fe4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000fee:	b2d1      	uxtb	r1, r2
 8000ff0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ff2:	54d1      	strb	r1, [r2, r3]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8000ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000ffc:	b2d1      	uxtb	r1, r2
 8000ffe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001000:	54d1      	strb	r1, [r2, r3]
    cmd_index = cmd_index + 2;
 8001002:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001006:	3302      	adds	r3, #2
 8001008:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  for (uint8_t current_ic = TOTAL_IC; current_ic > 0; current_ic--)    	// executes for each ltc6811 in daisy chain, this loops starts with
 800100c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001010:	3b01      	subs	r3, #1
 8001012:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001016:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1a8      	bne.n	8000f70 <ltc6811_wrpwm+0x2b0>
  }


  wakeup_idle ();               // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800101e:	f7ff fc5d 	bl	80008dc <wakeup_idle>
  outputCS(0);								// Set the CS to low to send data
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff fc40 	bl	80008a8 <outputCS>
  HAL_SPI_Transmit(&spi_channel, (uint8_t*)cmd, CMD_LEN, HAL_MAX_DELAY); // Sends the CMD trough SPI
 8001028:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800102c:	b29a      	uxth	r2, r3
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001034:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8001038:	f007 ff7a 	bl	8008f30 <HAL_SPI_Transmit>
  outputCS(1);								// Set the CS to high
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fc33 	bl	80008a8 <outputCS>
 8001042:	46b5      	mov	sp, r6
}
 8001044:	bf00      	nop
 8001046:	375c      	adds	r7, #92	@ 0x5c
 8001048:	46bd      	mov	sp, r7
 800104a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800104e:	b004      	add	sp, #16
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <ltc6811_adcv>:
|CMD[0:1] |  15   |  14   |  13   |  12   |  11   |  10   |   9   |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
|ADCV:      |   0   |   0   |   0   |   0   |   0   |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
* Inputs: The Conversion Mode (MD), discharge permitted (DCP), the cell selection for ADC conversion (CH) and the SPI channel used
*/
void ltc6811_adcv(SPI_HandleTypeDef spi_channel, uint8_t CH){
 8001054:	b084      	sub	sp, #16
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	f107 0c10 	add.w	ip, r7, #16
 8001060:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  uint8_t cmd[4];
	  uint16_t cmd_pec;
	  uint8_t md_bits;

		  md_bits = (MD & 0x02) >> 1;
 8001064:	2300      	movs	r3, #0
 8001066:	71fb      	strb	r3, [r7, #7]
		  cmd[0] = md_bits + 0x02;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3302      	adds	r3, #2
 800106c:	b2db      	uxtb	r3, r3
 800106e:	703b      	strb	r3, [r7, #0]
		  md_bits = (MD & 0x01) << 7;
 8001070:	2300      	movs	r3, #0
 8001072:	71fb      	strb	r3, [r7, #7]
		  cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001074:	79fa      	ldrb	r2, [r7, #7]
 8001076:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800107a:	4413      	add	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3360      	adds	r3, #96	@ 0x60
 8001080:	b2db      	uxtb	r3, r3
 8001082:	707b      	strb	r3, [r7, #1]
		  cmd_pec = pec15_calc(2, cmd);
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	2002      	movs	r0, #2
 800108a:	f7ff fc49 	bl	8000920 <pec15_calc>
 800108e:	4603      	mov	r3, r0
 8001090:	80bb      	strh	r3, [r7, #4]
		  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	70bb      	strb	r3, [r7, #2]
		  cmd[3] = (uint8_t)(cmd_pec);
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	70fb      	strb	r3, [r7, #3]

		  wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80010a2:	f7ff fc1b 	bl	80008dc <wakeup_idle>

		  outputCS(0);															//The Low state of the chip select pin is set
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbfe 	bl	80008a8 <outputCS>
		  HAL_SPI_Transmit(&spi_channel, (uint8_t *)cmd, 4, HAL_MAX_DELAY);
 80010ac:	4639      	mov	r1, r7
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	2204      	movs	r2, #4
 80010b4:	f107 0010 	add.w	r0, r7, #16
 80010b8:	f007 ff3a 	bl	8008f30 <HAL_SPI_Transmit>
		  outputCS(0);
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fbf3 	bl	80008a8 <outputCS>
															//The High state of the chip select pin is set
	}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <ltc6811_rdcv_reg>:
	 * uint8_t *data //An array of the unparsed cell codes


 * Inputs: The register read, the number of ICs, the voltage of the cells array and the SPI channel used
*/
void ltc6811_rdcv_reg(SPI_HandleTypeDef spi_channel,uint8_t reg, uint8_t *data){
 80010d0:	b084      	sub	sp, #16
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af02      	add	r7, sp, #8
 80010d8:	f107 0c10 	add.w	ip, r7, #16
 80010dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80010e0:	2308      	movs	r3, #8
 80010e2:	71fb      	strb	r3, [r7, #7]
		  uint8_t REG_LEN_TOTAL_IC = (4+REG_LEN*(TOTAL_IC));
 80010e4:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <ltc6811_rdcv_reg+0xe4>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	fb12 f303 	smulbb	r3, r2, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	3304      	adds	r3, #4
 80010f2:	71bb      	strb	r3, [r7, #6]
		  uint8_t cmd[4];
		  uint16_t cmd_pec;

		  if (reg == 1)     //1: RDCVA
 80010f4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d104      	bne.n	8001106 <ltc6811_rdcv_reg+0x36>
		  {
			cmd[1] = 0x04;
 80010fc:	2304      	movs	r3, #4
 80010fe:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	703b      	strb	r3, [r7, #0]
 8001104:	e02b      	b.n	800115e <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 2) //2: RDCVB
 8001106:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800110a:	2b02      	cmp	r3, #2
 800110c:	d104      	bne.n	8001118 <ltc6811_rdcv_reg+0x48>
		  {
			cmd[1] = 0x06;
 800110e:	2306      	movs	r3, #6
 8001110:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	703b      	strb	r3, [r7, #0]
 8001116:	e022      	b.n	800115e <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 3) //3: RDCVC
 8001118:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800111c:	2b03      	cmp	r3, #3
 800111e:	d104      	bne.n	800112a <ltc6811_rdcv_reg+0x5a>
		  {
			cmd[1] = 0x08;
 8001120:	2308      	movs	r3, #8
 8001122:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8001124:	2300      	movs	r3, #0
 8001126:	703b      	strb	r3, [r7, #0]
 8001128:	e019      	b.n	800115e <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 4) //4: RDCVD
 800112a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800112e:	2b04      	cmp	r3, #4
 8001130:	d104      	bne.n	800113c <ltc6811_rdcv_reg+0x6c>
		  {
			cmd[1] = 0x0A;
 8001132:	230a      	movs	r3, #10
 8001134:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	703b      	strb	r3, [r7, #0]
 800113a:	e010      	b.n	800115e <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 5) //4: RDCVE
 800113c:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001140:	2b05      	cmp	r3, #5
 8001142:	d104      	bne.n	800114e <ltc6811_rdcv_reg+0x7e>
		  {
			cmd[1] = 0x09;
 8001144:	2309      	movs	r3, #9
 8001146:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 8001148:	2300      	movs	r3, #0
 800114a:	703b      	strb	r3, [r7, #0]
 800114c:	e007      	b.n	800115e <ltc6811_rdcv_reg+0x8e>
		  }
		  else if (reg == 6) //4: RDCVF
 800114e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001152:	2b06      	cmp	r3, #6
 8001154:	d103      	bne.n	800115e <ltc6811_rdcv_reg+0x8e>
		  {
			cmd[1] = 0x0B;
 8001156:	230b      	movs	r3, #11
 8001158:	707b      	strb	r3, [r7, #1]
			cmd[0] = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	703b      	strb	r3, [r7, #0]
		  }


		  cmd_pec = pec15_calc(2, cmd);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	2002      	movs	r0, #2
 8001164:	f7ff fbdc 	bl	8000920 <pec15_calc>
 8001168:	4603      	mov	r3, r0
 800116a:	80bb      	strh	r3, [r7, #4]
		  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b29b      	uxth	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	70bb      	strb	r3, [r7, #2]
		  cmd[3] = (uint8_t)(cmd_pec);
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	70fb      	strb	r3, [r7, #3]

		  wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800117c:	f7ff fbae 	bl	80008dc <wakeup_idle>

		  outputCS(0);								// Set the CS to low to send data
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fb91 	bl	80008a8 <outputCS>
		  HAL_SPI_TransmitReceive(&spi_channel, (uint8_t *)cmd, (uint8_t *)data, REG_LEN_TOTAL_IC, HAL_MAX_DELAY);
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	b29b      	uxth	r3, r3
 800118a:	4639      	mov	r1, r7
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	9200      	str	r2, [sp, #0]
 8001192:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001196:	f107 0010 	add.w	r0, r7, #16
 800119a:	f008 f8b7 	bl	800930c <HAL_SPI_TransmitReceive>
		  outputCS(1);					//The Low state of the chip select pin is set
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff fb82 	bl	80008a8 <outputCS>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011ae:	b004      	add	sp, #16
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	24000000 	.word	0x24000000

080011b8 <ltc6811_rav>:
	0: No PEC error detected

	-1: PEC error detected, retry read
* Inputs: The voltage of the cells array and the SPI channel used
*/
void ltc6811_rav(SPI_HandleTypeDef spi_channel, uint8_t *PEC_SLAVES, uint16_t *voltatjes, uint8_t GPIOx, uint8_t CH, uint8_t BLC, uint16_t VCELL_MIN){
 80011b8:	b084      	sub	sp, #16
 80011ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011be:	b0a9      	sub	sp, #164	@ 0xa4
 80011c0:	af22      	add	r7, sp, #136	@ 0x88
 80011c2:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 80011c6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80011ca:	466b      	mov	r3, sp
 80011cc:	461e      	mov	r6, r3
	uint8_t recieve[4+TOTAL_IC*8];
 80011ce:	4b96      	ldr	r3, [pc, #600]	@ (8001428 <ltc6811_rav+0x270>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	1d19      	adds	r1, r3, #4
 80011d6:	1e4b      	subs	r3, r1, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	460a      	mov	r2, r1
 80011dc:	2300      	movs	r3, #0
 80011de:	4690      	mov	r8, r2
 80011e0:	4699      	mov	r9, r3
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011f6:	460a      	mov	r2, r1
 80011f8:	2300      	movs	r3, #0
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	00eb      	lsls	r3, r5, #3
 8001208:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800120c:	00e2      	lsls	r2, r4, #3
 800120e:	460b      	mov	r3, r1
 8001210:	3307      	adds	r3, #7
 8001212:	08db      	lsrs	r3, r3, #3
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	ebad 0d03 	sub.w	sp, sp, r3
 800121a:	ab22      	add	r3, sp, #136	@ 0x88
 800121c:	3300      	adds	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
	uint8_t pec_array[6];
	uint8_t data_pec;
	uint8_t received_pec;

	 ltc6811_wrcfg(spi_channel, GPIOx, voltatjes, BLC, VCELL_MIN);
 8001220:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8001224:	9321      	str	r3, [sp, #132]	@ 0x84
 8001226:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 800122a:	9320      	str	r3, [sp, #128]	@ 0x80
 800122c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001230:	931f      	str	r3, [sp, #124]	@ 0x7c
 8001232:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8001236:	931e      	str	r3, [sp, #120]	@ 0x78
 8001238:	4668      	mov	r0, sp
 800123a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800123e:	2278      	movs	r2, #120	@ 0x78
 8001240:	4619      	mov	r1, r3
 8001242:	f009 f98f 	bl	800a564 <memcpy>
 8001246:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800124a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124c:	f7ff fb9e 	bl	800098c <ltc6811_wrcfg>
	 ltc6811_adcv(spi_channel, CH);
 8001250:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8001254:	931e      	str	r3, [sp, #120]	@ 0x78
 8001256:	4668      	mov	r0, sp
 8001258:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800125c:	2278      	movs	r2, #120	@ 0x78
 800125e:	4619      	mov	r1, r3
 8001260:	f009 f980 	bl	800a564 <memcpy>
 8001264:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126a:	f7ff fef3 	bl	8001054 <ltc6811_adcv>
	 HAL_Delay(13);
 800126e:	200d      	movs	r0, #13
 8001270:	f003 fa3c 	bl	80046ec <HAL_Delay>

	 for(int reg = 0; reg<4; reg++){
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e0ca      	b.n	8001410 <ltc6811_rav+0x258>
		  ltc6811_rdcv_reg(spi_channel, reg+1, recieve);
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3301      	adds	r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	921f      	str	r2, [sp, #124]	@ 0x7c
 8001286:	931e      	str	r3, [sp, #120]	@ 0x78
 8001288:	4668      	mov	r0, sp
 800128a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800128e:	2278      	movs	r2, #120	@ 0x78
 8001290:	4619      	mov	r1, r3
 8001292:	f009 f967 	bl	800a564 <memcpy>
 8001296:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800129a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129c:	f7ff ff18 	bl	80010d0 <ltc6811_rdcv_reg>
		  uint8_t sum = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	74fb      	strb	r3, [r7, #19]
		  uint8_t sum2 = 4;
 80012a4:	2304      	movs	r3, #4
 80012a6:	74bb      	strb	r3, [r7, #18]
		  uint8_t ic = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	747b      	strb	r3, [r7, #17]
		  while(sum<6*TOTAL_IC){
 80012ac:	e0a2      	b.n	80013f4 <ltc6811_rav+0x23c>

			  received_pec = (recieve[sum2+6] << 8) + recieve[sum2+7]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80012ae:	7cbb      	ldrb	r3, [r7, #18]
 80012b0:	3307      	adds	r3, #7
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	71fb      	strb	r3, [r7, #7]

			  pec_array[0] = recieve[sum2];
 80012b8:	7cbb      	ldrb	r3, [r7, #18]
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	703b      	strb	r3, [r7, #0]
			  pec_array[1] = recieve[sum2+1];
 80012c0:	7cbb      	ldrb	r3, [r7, #18]
 80012c2:	3301      	adds	r3, #1
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	707b      	strb	r3, [r7, #1]
			  pec_array[2] = recieve[sum2+2];
 80012ca:	7cbb      	ldrb	r3, [r7, #18]
 80012cc:	3302      	adds	r3, #2
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	70bb      	strb	r3, [r7, #2]
			  pec_array[3] = recieve[sum2+3];
 80012d4:	7cbb      	ldrb	r3, [r7, #18]
 80012d6:	3303      	adds	r3, #3
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	70fb      	strb	r3, [r7, #3]
			  pec_array[4] = recieve[sum2+4];
 80012de:	7cbb      	ldrb	r3, [r7, #18]
 80012e0:	3304      	adds	r3, #4
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	713b      	strb	r3, [r7, #4]
			  pec_array[5] = recieve[sum2+5];
 80012e8:	7cbb      	ldrb	r3, [r7, #18]
 80012ea:	3305      	adds	r3, #5
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	717b      	strb	r3, [r7, #5]

			  data_pec = pec15_calc(6, pec_array);
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	2006      	movs	r0, #6
 80012f8:	f7ff fb12 	bl	8000920 <pec15_calc>
 80012fc:	4603      	mov	r3, r0
 80012fe:	71bb      	strb	r3, [r7, #6]
	  	        if (received_pec != data_pec)
 8001300:	79fa      	ldrb	r2, [r7, #7]
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	429a      	cmp	r2, r3
 8001306:	d00a      	beq.n	800131e <ltc6811_rav+0x166>
	  	        {
	  	        	PEC_SLAVES[ic * 4 + reg] = 1;
 8001308:	7c7b      	ldrb	r3, [r7, #17]
 800130a:	009a      	lsls	r2, r3, #2
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4413      	add	r3, r2
 8001310:	461a      	mov	r2, r3
 8001312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001316:	4413      	add	r3, r2
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	e061      	b.n	80013e2 <ltc6811_rav+0x22a>
	  	        }
	  	        else{
	  	        	voltatjes[12*ic+(reg*3)+2] = (recieve[sum2+5]<<8)+recieve[sum2+4];
 800131e:	7cbb      	ldrb	r3, [r7, #18]
 8001320:	3305      	adds	r3, #5
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b299      	uxth	r1, r3
 800132a:	7cbb      	ldrb	r3, [r7, #18]
 800132c:	3304      	adds	r3, #4
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	4618      	mov	r0, r3
 8001334:	7c7a      	ldrb	r2, [r7, #17]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	461c      	mov	r4, r3
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	4423      	add	r3, r4
 800134a:	3302      	adds	r3, #2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001352:	4413      	add	r3, r2
 8001354:	180a      	adds	r2, r1, r0
 8001356:	b292      	uxth	r2, r2
 8001358:	801a      	strh	r2, [r3, #0]
					voltatjes[12*ic+(reg*3)+1] = (recieve[sum2+3]<<8)+recieve[sum2+2];
 800135a:	7cbb      	ldrb	r3, [r7, #18]
 800135c:	3303      	adds	r3, #3
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b299      	uxth	r1, r3
 8001366:	7cbb      	ldrb	r3, [r7, #18]
 8001368:	3302      	adds	r3, #2
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	4618      	mov	r0, r3
 8001370:	7c7a      	ldrb	r2, [r7, #17]
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	461c      	mov	r4, r3
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	4423      	add	r3, r4
 8001386:	3301      	adds	r3, #1
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800138e:	4413      	add	r3, r2
 8001390:	180a      	adds	r2, r1, r0
 8001392:	b292      	uxth	r2, r2
 8001394:	801a      	strh	r2, [r3, #0]
					voltatjes[12*ic+(reg*3)] = (recieve[sum2+1]<<8)+recieve[sum2];
 8001396:	7cbb      	ldrb	r3, [r7, #18]
 8001398:	3301      	adds	r3, #1
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b299      	uxth	r1, r3
 80013a2:	7cbb      	ldrb	r3, [r7, #18]
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	4618      	mov	r0, r3
 80013aa:	7c7a      	ldrb	r2, [r7, #17]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	461c      	mov	r4, r3
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	4423      	add	r3, r4
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80013c6:	4413      	add	r3, r2
 80013c8:	180a      	adds	r2, r1, r0
 80013ca:	b292      	uxth	r2, r2
 80013cc:	801a      	strh	r2, [r3, #0]
					PEC_SLAVES[ic * 4 + reg] = 0;
 80013ce:	7c7b      	ldrb	r3, [r7, #17]
 80013d0:	009a      	lsls	r2, r3, #2
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	4413      	add	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80013dc:	4413      	add	r3, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	  	        }
	  	      sum = sum+6;
 80013e2:	7cfb      	ldrb	r3, [r7, #19]
 80013e4:	3306      	adds	r3, #6
 80013e6:	74fb      	strb	r3, [r7, #19]
	  	      sum2= sum2+8;
 80013e8:	7cbb      	ldrb	r3, [r7, #18]
 80013ea:	3308      	adds	r3, #8
 80013ec:	74bb      	strb	r3, [r7, #18]
	  	      ic++;
 80013ee:	7c7b      	ldrb	r3, [r7, #17]
 80013f0:	3301      	adds	r3, #1
 80013f2:	747b      	strb	r3, [r7, #17]
		  while(sum<6*TOTAL_IC){
 80013f4:	7cfa      	ldrb	r2, [r7, #19]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <ltc6811_rav+0x270>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	460b      	mov	r3, r1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	440b      	add	r3, r1
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	429a      	cmp	r2, r3
 8001406:	f6ff af52 	blt.w	80012ae <ltc6811_rav+0xf6>
	 for(int reg = 0; reg<4; reg++){
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b03      	cmp	r3, #3
 8001414:	f77f af31 	ble.w	800127a <ltc6811_rav+0xc2>
 8001418:	46b5      	mov	sp, r6
		  }

	 }
}
 800141a:	bf00      	nop
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001424:	b004      	add	sp, #16
 8001426:	4770      	bx	lr
 8001428:	24000000 	.word	0x24000000

0800142c <ltc6811_adax>:
	|CMD[0:1] |  15   |  14   |  13   |  12   |  11   |  10   |   9   |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
	|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
	|ADAX:      |   0   |   0   |   0   |   0   |   0   |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  0    |   0   | CHG[2]| CHG[1]| CHG[0]|
* Inputs: The Conversion Mode (MD), GPIO Selection for ADC and the SPI channel which has to be used
*/
void ltc6811_adax(SPI_HandleTypeDef spi_channel){
 800142c:	b084      	sub	sp, #16
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	f107 0c10 	add.w	ip, r7, #16
 8001438:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		uint8_t cmd[4];
		uint16_t cmd_pec;
		uint8_t md_bits;

		md_bits = (MD & 0x02) >> 1;
 800143c:	2300      	movs	r3, #0
 800143e:	71fb      	strb	r3, [r7, #7]
		cmd[0] = md_bits + 0x04;
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	3304      	adds	r3, #4
 8001444:	b2db      	uxtb	r3, r3
 8001446:	703b      	strb	r3, [r7, #0]
		md_bits = (MD & 0x01) << 7;
 8001448:	2300      	movs	r3, #0
 800144a:	71fb      	strb	r3, [r7, #7]
		cmd[1] = md_bits + 0x60 + CHG ;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	3361      	adds	r3, #97	@ 0x61
 8001450:	b2db      	uxtb	r3, r3
 8001452:	707b      	strb	r3, [r7, #1]

		cmd_pec = pec15_calc(2, cmd);
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	2002      	movs	r0, #2
 800145a:	f7ff fa61 	bl	8000920 <pec15_calc>
 800145e:	4603      	mov	r3, r0
 8001460:	80bb      	strh	r3, [r7, #4]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	b29b      	uxth	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	70bb      	strb	r3, [r7, #2]
		cmd[3] = (uint8_t)(cmd_pec);
 800146c:	88bb      	ldrh	r3, [r7, #4]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	70fb      	strb	r3, [r7, #3]

		wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001472:	f7ff fa33 	bl	80008dc <wakeup_idle>

		outputCS(0);					//The Low state of the chip select pin is set
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fa16 	bl	80008a8 <outputCS>
		HAL_SPI_Transmit(&spi_channel, cmd, 4, HAL_MAX_DELAY);
 800147c:	4639      	mov	r1, r7
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	2204      	movs	r2, #4
 8001484:	f107 0010 	add.w	r0, r7, #16
 8001488:	f007 fd52 	bl	8008f30 <HAL_SPI_Transmit>
		outputCS(1);					//The Low state of the chip select pin is set
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff fa0b 	bl	80008a8 <outputCS>
	  }
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800149c:	b004      	add	sp, #16
 800149e:	4770      	bx	lr

080014a0 <ltc6811_rdaux_reg>:
|RDAUXA:      |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   1   |   1   |   0   |   0   |
|RDAUXB:      |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   1   |   1   |   1   |   0   |
* Inputs: The register read, the number of ICs, the voltage of the cells array and the SPI channel used
*/
void ltc6811_rdaux_reg(SPI_HandleTypeDef spi_channel, uint8_t reg, uint8_t *data //Array of the unparsed auxiliary codes
					   ){
 80014a0:	b084      	sub	sp, #16
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af02      	add	r7, sp, #8
 80014a8:	f107 0c10 	add.w	ip, r7, #16
 80014ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  // SPI_HandleTypeDef hspi1;
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 80014b0:	2308      	movs	r3, #8
 80014b2:	71fb      	strb	r3, [r7, #7]
  uint8_t REG_LEN_TOTAL_IC = (4+(REG_LEN*TOTAL_IC));
 80014b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <ltc6811_rdaux_reg+0xc8>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	fb12 f303 	smulbb	r3, r2, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3304      	adds	r3, #4
 80014c2:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint16_t cmd_pec;


  if (reg == 1)     //Read back auxiliary group A
 80014c4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d104      	bne.n	80014d6 <ltc6811_rdaux_reg+0x36>
  {
    cmd[1] = 0x0C;
 80014cc:	230c      	movs	r3, #12
 80014ce:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 80014d0:	2300      	movs	r3, #0
 80014d2:	703b      	strb	r3, [r7, #0]
 80014d4:	e01e      	b.n	8001514 <ltc6811_rdaux_reg+0x74>
  }
  else if (reg == 2)  //Read back auxiliary group B
 80014d6:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d104      	bne.n	80014e8 <ltc6811_rdaux_reg+0x48>
  {
    cmd[1] = 0x0e;
 80014de:	230e      	movs	r3, #14
 80014e0:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	703b      	strb	r3, [r7, #0]
 80014e6:	e015      	b.n	8001514 <ltc6811_rdaux_reg+0x74>
  }
  else if (reg == 3)  //Read back auxiliary group B
 80014e8:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d104      	bne.n	80014fa <ltc6811_rdaux_reg+0x5a>
  {
    cmd[1] = 0x0D;
 80014f0:	230d      	movs	r3, #13
 80014f2:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 80014f4:	2300      	movs	r3, #0
 80014f6:	703b      	strb	r3, [r7, #0]
 80014f8:	e00c      	b.n	8001514 <ltc6811_rdaux_reg+0x74>
  }
  else if (reg == 4)  //Read back auxiliary group B
 80014fa:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d104      	bne.n	800150c <ltc6811_rdaux_reg+0x6c>
  {
    cmd[1] = 0x0F;
 8001502:	230f      	movs	r3, #15
 8001504:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	703b      	strb	r3, [r7, #0]
 800150a:	e003      	b.n	8001514 <ltc6811_rdaux_reg+0x74>
  }
  else          //Read back auxiliary group A
  {
    cmd[1] = 0x0C;
 800150c:	230c      	movs	r3, #12
 800150e:	707b      	strb	r3, [r7, #1]
    cmd[0] = 0x00;
 8001510:	2300      	movs	r3, #0
 8001512:	703b      	strb	r3, [r7, #0]
  }

  cmd_pec = pec15_calc(2, cmd);
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	2002      	movs	r0, #2
 800151a:	f7ff fa01 	bl	8000920 <pec15_calc>
 800151e:	4603      	mov	r3, r0
 8001520:	80bb      	strh	r3, [r7, #4]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001522:	88bb      	ldrh	r3, [r7, #4]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b29b      	uxth	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	70bb      	strb	r3, [r7, #2]
  cmd[3] = (uint8_t)(cmd_pec);
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	70fb      	strb	r3, [r7, #3]

	  wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001532:	f7ff f9d3 	bl	80008dc <wakeup_idle>

	  outputCS(0);								// Set the CS to low to send data
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff f9b6 	bl	80008a8 <outputCS>
	  HAL_SPI_TransmitReceive(&spi_channel, (uint8_t *)cmd, (uint8_t *)data, REG_LEN_TOTAL_IC,HAL_MAX_DELAY); // Sends the CMD trough SPI
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4639      	mov	r1, r7
 8001542:	f04f 32ff 	mov.w	r2, #4294967295
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800154c:	f107 0010 	add.w	r0, r7, #16
 8001550:	f007 fedc 	bl	800930c <HAL_SPI_TransmitReceive>
	  outputCS(1);								// Set the  CS to high
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff f9a7 	bl	80008a8 <outputCS>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001564:	b004      	add	sp, #16
 8001566:	4770      	bx	lr
 8001568:	24000000 	.word	0x24000000

0800156c <ltc6811_rat>:
//@return  int8_t, PEC Status
//  0: No PEC error detected
// -1: PEC error detected, retry read
// * Inputs: uint16_t aux_codes[][AUX_CHANNELS]//A two dimensional array of the gpio voltage codes.
*/
void ltc6811_rat(SPI_HandleTypeDef spi_channel, uint8_t *PEC_SLAVES, uint16_t *voltatjes, uint16_t *temperatures, uint8_t BLC, uint16_t VCELL_MIN) {
 800156c:	b084      	sub	sp, #16
 800156e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001572:	b0af      	sub	sp, #188	@ 0xbc
 8001574:	af22      	add	r7, sp, #136	@ 0x88
 8001576:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 800157a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800157e:	466b      	mov	r3, sp
 8001580:	461e      	mov	r6, r3
    uint8_t recieve[4 + TOTAL_IC * 8];
 8001582:	4b7d      	ldr	r3, [pc, #500]	@ (8001778 <ltc6811_rat+0x20c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	1d19      	adds	r1, r3, #4
 800158a:	1e4b      	subs	r3, r1, #1
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	460a      	mov	r2, r1
 8001590:	2300      	movs	r3, #0
 8001592:	4690      	mov	r8, r2
 8001594:	4699      	mov	r9, r3
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015aa:	460a      	mov	r2, r1
 80015ac:	2300      	movs	r3, #0
 80015ae:	4614      	mov	r4, r2
 80015b0:	461d      	mov	r5, r3
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	00eb      	lsls	r3, r5, #3
 80015bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015c0:	00e2      	lsls	r2, r4, #3
 80015c2:	460b      	mov	r3, r1
 80015c4:	3307      	adds	r3, #7
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	ebad 0d03 	sub.w	sp, sp, r3
 80015ce:	ab22      	add	r3, sp, #136	@ 0x88
 80015d0:	3300      	adds	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
    uint8_t pec_array[6];
    uint16_t data_pec;
    uint16_t received_pec;
    uint8_t GPIOx = 0b00000011;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    for (int gpio = 0; gpio < 8; gpio++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015de:	e0be      	b.n	800175e <ltc6811_rat+0x1f2>
        for (int i = 0; i < 5; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e4:	e01a      	b.n	800161c <ltc6811_rat+0xb0>
            ltc6811_wrcfg(spi_channel, GPIOx, voltatjes, BLC, VCELL_MIN);
 80015e6:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 80015ea:	9321      	str	r3, [sp, #132]	@ 0x84
 80015ec:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 80015f0:	9320      	str	r3, [sp, #128]	@ 0x80
 80015f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80015f6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80015f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015fc:	931e      	str	r3, [sp, #120]	@ 0x78
 80015fe:	4668      	mov	r0, sp
 8001600:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001604:	2278      	movs	r2, #120	@ 0x78
 8001606:	4619      	mov	r1, r3
 8001608:	f008 ffac 	bl	800a564 <memcpy>
 800160c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001612:	f7ff f9bb 	bl	800098c <ltc6811_wrcfg>
        for (int i = 0; i < 5; i++) {
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	3301      	adds	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	2b04      	cmp	r3, #4
 8001620:	dde1      	ble.n	80015e6 <ltc6811_rat+0x7a>
        }

        delay_us(700);
 8001622:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001626:	f000 fe9f 	bl	8002368 <delay_us>

        for (int i = 0; i < 4; i++) {
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	e00e      	b.n	800164e <ltc6811_rat+0xe2>
            ltc6811_adax(spi_channel);
 8001630:	4668      	mov	r0, sp
 8001632:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001636:	2278      	movs	r2, #120	@ 0x78
 8001638:	4619      	mov	r1, r3
 800163a:	f008 ff93 	bl	800a564 <memcpy>
 800163e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001644:	f7ff fef2 	bl	800142c <ltc6811_adax>
        for (int i = 0; i < 4; i++) {
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	3301      	adds	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	2b03      	cmp	r3, #3
 8001652:	dded      	ble.n	8001630 <ltc6811_rat+0xc4>
        }

        delay_us(2400);
 8001654:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001658:	f000 fe86 	bl	8002368 <delay_us>

        uint8_t cont = 4;
 800165c:	2304      	movs	r3, #4
 800165e:	77fb      	strb	r3, [r7, #31]
        ltc6811_rdaux_reg(spi_channel, 1, recieve);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	931f      	str	r3, [sp, #124]	@ 0x7c
 8001664:	2301      	movs	r3, #1
 8001666:	931e      	str	r3, [sp, #120]	@ 0x78
 8001668:	4668      	mov	r0, sp
 800166a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800166e:	2278      	movs	r2, #120	@ 0x78
 8001670:	4619      	mov	r1, r3
 8001672:	f008 ff77 	bl	800a564 <memcpy>
 8001676:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800167a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800167c:	f7ff ff10 	bl	80014a0 <ltc6811_rdaux_reg>

        for (int ic = 0; ic < TOTAL_IC; ic++) {
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	e059      	b.n	800173a <ltc6811_rat+0x1ce>
            received_pec = (recieve[cont + 6] << 8) + recieve[cont + 7];
 8001686:	7ffb      	ldrb	r3, [r7, #31]
 8001688:	3306      	adds	r3, #6
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b29b      	uxth	r3, r3
 8001692:	7ffa      	ldrb	r2, [r7, #31]
 8001694:	3207      	adds	r2, #7
 8001696:	68f9      	ldr	r1, [r7, #12]
 8001698:	5c8a      	ldrb	r2, [r1, r2]
 800169a:	4413      	add	r3, r2
 800169c:	817b      	strh	r3, [r7, #10]

            for (int i = 0; i < 6; i++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e00c      	b.n	80016be <ltc6811_rat+0x152>
                pec_array[i] = recieve[cont + i];
 80016a4:	7ffa      	ldrb	r2, [r7, #31]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4413      	add	r3, r2
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	5cd1      	ldrb	r1, [r2, r3]
 80016ae:	463a      	mov	r2, r7
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	4413      	add	r3, r2
 80016b4:	460a      	mov	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; i++) {
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	ddef      	ble.n	80016a4 <ltc6811_rat+0x138>
            }

            data_pec = pec15_calc(6, pec_array);
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	2006      	movs	r0, #6
 80016ca:	f7ff f929 	bl	8000920 <pec15_calc>
 80016ce:	4603      	mov	r3, r0
 80016d0:	813b      	strh	r3, [r7, #8]

            if (received_pec != data_pec) {
 80016d2:	897a      	ldrh	r2, [r7, #10]
 80016d4:	893b      	ldrh	r3, [r7, #8]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d00a      	beq.n	80016f0 <ltc6811_rat+0x184>
                PEC_SLAVES[ic * 8 + gpio] = 1;
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	00da      	lsls	r2, r3, #3
 80016de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e0:	4413      	add	r3, r2
 80016e2:	461a      	mov	r2, r3
 80016e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80016e8:	4413      	add	r3, r2
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e01e      	b.n	800172e <ltc6811_rat+0x1c2>
            } else {
                temperatures[gpio + ic * 8] = (recieve[cont + 1] << 8) + recieve[cont];
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	3301      	adds	r3, #1
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	7ffb      	ldrb	r3, [r7, #31]
 80016fe:	68f9      	ldr	r1, [r7, #12]
 8001700:	5ccb      	ldrb	r3, [r1, r3]
 8001702:	4618      	mov	r0, r3
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	00d9      	lsls	r1, r3, #3
 8001708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170a:	440b      	add	r3, r1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8001712:	440b      	add	r3, r1
 8001714:	4402      	add	r2, r0
 8001716:	b292      	uxth	r2, r2
 8001718:	801a      	strh	r2, [r3, #0]
                PEC_SLAVES[ic * 8 + gpio] = 0;
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	00da      	lsls	r2, r3, #3
 800171e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001720:	4413      	add	r3, r2
 8001722:	461a      	mov	r2, r3
 8001724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001728:	4413      	add	r3, r2
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
            }

            cont += 8;
 800172e:	7ffb      	ldrb	r3, [r7, #31]
 8001730:	3308      	adds	r3, #8
 8001732:	77fb      	strb	r3, [r7, #31]
        for (int ic = 0; ic < TOTAL_IC; ic++) {
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	3301      	adds	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <ltc6811_rat+0x20c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	4293      	cmp	r3, r2
 8001744:	db9f      	blt.n	8001686 <ltc6811_rat+0x11a>
        }
        GPIOx = MUX_SWITCH(GPIOx);
 8001746:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800174a:	b29b      	uxth	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff f845 	bl	80007dc <MUX_SWITCH>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (int gpio = 0; gpio < 8; gpio++) {
 8001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175a:	3301      	adds	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001760:	2b07      	cmp	r3, #7
 8001762:	f77f af3d 	ble.w	80015e0 <ltc6811_rat+0x74>
 8001766:	46b5      	mov	sp, r6
    }
}
 8001768:	bf00      	nop
 800176a:	3734      	adds	r7, #52	@ 0x34
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001772:	b004      	add	sp, #16
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	24000000 	.word	0x24000000

0800177c <message_cantx_TEMPERATURES_IT>:
    if(HAL_FDCAN_ConfigFilter(&hcan, &canfil) != HAL_OK) Error_Handler();
    if(HAL_FDCAN_Start(&hcan) != HAL_OK)Error_Handler();
    if(HAL_FDCAN_ActivateNotification(&hcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)Error_Handler();
}

void message_cantx_TEMPERATURES_IT(uint16_t COBID, uint8_t IC, FDCAN_HandleTypeDef hcan2, uint16_t *temperatures, uint8_t *TxData, FDCAN_TxHeaderTypeDef TxHeader){
 800177c:	b082      	sub	sp, #8
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	f107 0c10 	add.w	ip, r7, #16
 8001788:	e88c 000c 	stmia.w	ip, {r2, r3}
 800178c:	4603      	mov	r3, r0
 800178e:	80fb      	strh	r3, [r7, #6]
 8001790:	460b      	mov	r3, r1
 8001792:	717b      	strb	r3, [r7, #5]
	TxHeader.Identifier = COBID;
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80017a6:	2308      	movs	r3, #8
 80017a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	TxHeader.MessageMarker = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	TxData[0] = temperatures[0+IC*8] >> 8;
 80017ca:	797b      	ldrb	r3, [r7, #5]
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80017d2:	4413      	add	r3, r2
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017e0:	701a      	strb	r2, [r3, #0]
	TxData[1] = temperatures[0+IC*8];
 80017e2:	797b      	ldrb	r3, [r7, #5]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80017ea:	4413      	add	r3, r2
 80017ec:	881a      	ldrh	r2, [r3, #0]
 80017ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017f2:	3301      	adds	r3, #1
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
	TxData[2] = temperatures[1+IC*8] >> 8;
 80017f8:	797b      	ldrb	r3, [r7, #5]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	3301      	adds	r3, #1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001804:	4413      	add	r3, r2
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	b29a      	uxth	r2, r3
 800180c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001810:	3302      	adds	r3, #2
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
	TxData[3] = temperatures[1+IC*8];
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	3301      	adds	r3, #1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001822:	4413      	add	r3, r2
 8001824:	881a      	ldrh	r2, [r3, #0]
 8001826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800182a:	3303      	adds	r3, #3
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]
	TxData[4] = temperatures[2+IC*8] >> 8;
 8001830:	797b      	ldrb	r3, [r7, #5]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	3302      	adds	r3, #2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800183c:	4413      	add	r3, r2
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b29a      	uxth	r2, r3
 8001844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001848:	3304      	adds	r3, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]
	TxData[5] = temperatures[2+IC*8];
 800184e:	797b      	ldrb	r3, [r7, #5]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	3302      	adds	r3, #2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800185a:	4413      	add	r3, r2
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001862:	3305      	adds	r3, #5
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]
	TxData[6] = temperatures[3+IC*8] >> 8;
 8001868:	797b      	ldrb	r3, [r7, #5]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	3303      	adds	r3, #3
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001874:	4413      	add	r3, r2
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	b29a      	uxth	r2, r3
 800187c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001880:	3306      	adds	r3, #6
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]
	TxData[7] = temperatures[3+IC*8];
 8001886:	797b      	ldrb	r3, [r7, #5]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	3303      	adds	r3, #3
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001892:	4413      	add	r3, r2
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800189a:	3307      	adds	r3, #7
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan2, &TxHeader, TxData) != HAL_OK);
 80018a0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80018a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018a8:	4619      	mov	r1, r3
 80018aa:	f107 0010 	add.w	r0, r7, #16
 80018ae:	f003 fd9a 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
	COBID = COBID + 1;
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	3301      	adds	r3, #1
 80018b6:	80fb      	strh	r3, [r7, #6]
	TxHeader.Identifier = COBID;
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018ca:	2308      	movs	r3, #8
 80018cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	TxHeader.MessageMarker = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	TxData[0] = temperatures[4+IC*8] >> 8;
 80018ee:	797b      	ldrb	r3, [r7, #5]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	3304      	adds	r3, #4
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80018fa:	4413      	add	r3, r2
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	b29b      	uxth	r3, r3
 8001902:	b2da      	uxtb	r2, r3
 8001904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001908:	701a      	strb	r2, [r3, #0]
	TxData[1] = temperatures[4+IC*8];
 800190a:	797b      	ldrb	r3, [r7, #5]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	3304      	adds	r3, #4
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001916:	4413      	add	r3, r2
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800191e:	3301      	adds	r3, #1
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	701a      	strb	r2, [r3, #0]
	TxData[2] = temperatures[5+IC*8] >> 8;
 8001924:	797b      	ldrb	r3, [r7, #5]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	3305      	adds	r3, #5
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001930:	4413      	add	r3, r2
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	b29a      	uxth	r2, r3
 8001938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800193c:	3302      	adds	r3, #2
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]
	TxData[3] = temperatures[5+IC*8];
 8001942:	797b      	ldrb	r3, [r7, #5]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	3305      	adds	r3, #5
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800194e:	4413      	add	r3, r2
 8001950:	881a      	ldrh	r2, [r3, #0]
 8001952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001956:	3303      	adds	r3, #3
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
	TxData[4] = temperatures[6+IC*8] >> 8;
 800195c:	797b      	ldrb	r3, [r7, #5]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	3306      	adds	r3, #6
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001968:	4413      	add	r3, r2
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b29a      	uxth	r2, r3
 8001970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001974:	3304      	adds	r3, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]
	TxData[5] = temperatures[6+IC*8];
 800197a:	797b      	ldrb	r3, [r7, #5]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	3306      	adds	r3, #6
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001986:	4413      	add	r3, r2
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800198e:	3305      	adds	r3, #5
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
	TxData[6] = temperatures[7+IC*8] >> 8;
 8001994:	797b      	ldrb	r3, [r7, #5]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	3307      	adds	r3, #7
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80019a0:	4413      	add	r3, r2
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019ac:	3306      	adds	r3, #6
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]
	TxData[7] = temperatures[7+IC*8];
 80019b2:	797b      	ldrb	r3, [r7, #5]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	3307      	adds	r3, #7
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80019be:	4413      	add	r3, r2
 80019c0:	881a      	ldrh	r2, [r3, #0]
 80019c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019c6:	3307      	adds	r3, #7
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan2, &TxHeader, TxData) != HAL_OK);
 80019cc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80019d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019d4:	4619      	mov	r1, r3
 80019d6:	f107 0010 	add.w	r0, r7, #16
 80019da:	f003 fd04 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019e8:	b002      	add	sp, #8
 80019ea:	4770      	bx	lr

080019ec <message_cantx_VOLTATJES_IT>:

void message_cantx_VOLTATJES_IT(uint16_t COBID, uint8_t IC, FDCAN_HandleTypeDef hcan2, uint16_t *voltatjes, uint8_t *TxData, FDCAN_TxHeaderTypeDef TxHeader){
 80019ec:	b082      	sub	sp, #8
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	f107 0c10 	add.w	ip, r7, #16
 80019f8:	e88c 000c 	stmia.w	ip, {r2, r3}
 80019fc:	4603      	mov	r3, r0
 80019fe:	80fb      	strh	r3, [r7, #6]
 8001a00:	460b      	mov	r3, r1
 8001a02:	717b      	strb	r3, [r7, #5]
	TxHeader.Identifier = COBID;
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001a16:	2308      	movs	r3, #8
 8001a18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	TxHeader.MessageMarker = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	TxData[0] = voltatjes[0+IC*12] >> 8;
 8001a3a:	797a      	ldrb	r2, [r7, #5]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	461a      	mov	r2, r3
 8001a46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a4a:	4413      	add	r3, r2
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a58:	701a      	strb	r2, [r3, #0]
	TxData[1] = voltatjes[0+IC*12];
 8001a5a:	797a      	ldrb	r2, [r7, #5]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	461a      	mov	r2, r3
 8001a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a6a:	4413      	add	r3, r2
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
	TxData[2] = voltatjes[1+IC*12] >> 8;
 8001a78:	797a      	ldrb	r2, [r7, #5]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	3301      	adds	r3, #1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001a8a:	4413      	add	r3, r2
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a96:	3302      	adds	r3, #2
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
	TxData[3] = voltatjes[1+IC*12];
 8001a9c:	797a      	ldrb	r2, [r7, #5]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001aae:	4413      	add	r3, r2
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ab6:	3303      	adds	r3, #3
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]
	TxData[4] = voltatjes[2+IC*12] >> 8;
 8001abc:	797a      	ldrb	r2, [r7, #5]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ace:	4413      	add	r3, r2
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ada:	3304      	adds	r3, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
	TxData[5] = voltatjes[2+IC*12];
 8001ae0:	797a      	ldrb	r2, [r7, #5]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001af2:	4413      	add	r3, r2
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001afa:	3305      	adds	r3, #5
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
	TxData[6] = voltatjes[3+IC*12] >> 8;
 8001b00:	797a      	ldrb	r2, [r7, #5]
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	3303      	adds	r3, #3
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001b12:	4413      	add	r3, r2
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b1e:	3306      	adds	r3, #6
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	701a      	strb	r2, [r3, #0]
	TxData[7] = voltatjes[3+IC*12];
 8001b24:	797a      	ldrb	r2, [r7, #5]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	3303      	adds	r3, #3
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001b36:	4413      	add	r3, r2
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b3e:	3307      	adds	r3, #7
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan2, &TxHeader, TxData) != HAL_OK);
 8001b44:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001b48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f107 0010 	add.w	r0, r7, #16
 8001b52:	f003 fc48 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
	COBID = COBID + 1;
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	80fb      	strh	r3, [r7, #6]
	if((IC == 0) || (IC == 2) || (IC == 3) || (IC == 5) || (IC == 6) || (IC == 8) || (IC == 9) || (IC == 11) || (IC == 12) || (IC == 14)){
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01b      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d018      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b68:	797b      	ldrb	r3, [r7, #5]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d015      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b6e:	797b      	ldrb	r3, [r7, #5]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d012      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b74:	797b      	ldrb	r3, [r7, #5]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d00f      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b7a:	797b      	ldrb	r3, [r7, #5]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d00c      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b80:	797b      	ldrb	r3, [r7, #5]
 8001b82:	2b09      	cmp	r3, #9
 8001b84:	d009      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b86:	797b      	ldrb	r3, [r7, #5]
 8001b88:	2b0b      	cmp	r3, #11
 8001b8a:	d006      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b8c:	797b      	ldrb	r3, [r7, #5]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d003      	beq.n	8001b9a <message_cantx_VOLTATJES_IT+0x1ae>
 8001b92:	797b      	ldrb	r3, [r7, #5]
 8001b94:	2b0e      	cmp	r3, #14
 8001b96:	f040 8116 	bne.w	8001dc6 <message_cantx_VOLTATJES_IT+0x3da>
	TxHeader.Identifier = COBID;
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001bac:	2308      	movs	r3, #8
 8001bae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	TxHeader.MessageMarker = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	TxData[0] = voltatjes[4+IC*12] >> 8;
 8001bd0:	797a      	ldrb	r2, [r7, #5]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	3304      	adds	r3, #4
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001be2:	4413      	add	r3, r2
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bf0:	701a      	strb	r2, [r3, #0]
	TxData[1] = voltatjes[4+IC*12];
 8001bf2:	797a      	ldrb	r2, [r7, #5]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001c04:	4413      	add	r3, r2
 8001c06:	881a      	ldrh	r2, [r3, #0]
 8001c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]
	TxData[2] = voltatjes[6+IC*12] >> 8;
 8001c12:	797a      	ldrb	r2, [r7, #5]
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3306      	adds	r3, #6
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001c24:	4413      	add	r3, r2
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c30:	3302      	adds	r3, #2
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
	TxData[3] = voltatjes[6+IC*12];
 8001c36:	797a      	ldrb	r2, [r7, #5]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	3306      	adds	r3, #6
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001c48:	4413      	add	r3, r2
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c50:	3303      	adds	r3, #3
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]
	TxData[4] = voltatjes[7+IC*12] >> 8;
 8001c56:	797a      	ldrb	r2, [r7, #5]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	3307      	adds	r3, #7
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001c68:	4413      	add	r3, r2
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c74:	3304      	adds	r3, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]
	TxData[5] = voltatjes[7+IC*12];
 8001c7a:	797a      	ldrb	r2, [r7, #5]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	3307      	adds	r3, #7
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001c8c:	4413      	add	r3, r2
 8001c8e:	881a      	ldrh	r2, [r3, #0]
 8001c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c94:	3305      	adds	r3, #5
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
	TxData[6] = voltatjes[8+IC*12] >> 8;
 8001c9a:	797a      	ldrb	r2, [r7, #5]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	3308      	adds	r3, #8
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001cac:	4413      	add	r3, r2
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cb8:	3306      	adds	r3, #6
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
	TxData[7] = voltatjes[8+IC*12];
 8001cbe:	797a      	ldrb	r2, [r7, #5]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	3308      	adds	r3, #8
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cd8:	3307      	adds	r3, #7
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan2, &TxHeader, TxData) != HAL_OK);
 8001cde:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f107 0010 	add.w	r0, r7, #16
 8001cec:	f003 fb7b 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
	COBID = COBID + 1;
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	80fb      	strh	r3, [r7, #6]
	TxHeader.Identifier = COBID;
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	TxHeader.DataLength = FDCAN_DLC_BYTES_4;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	TxHeader.MessageMarker = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

	TxData[0] = voltatjes[9+IC*12] >> 8;
 8001d2c:	797a      	ldrb	r2, [r7, #5]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3309      	adds	r3, #9
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001d3e:	4413      	add	r3, r2
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d4c:	701a      	strb	r2, [r3, #0]
	TxData[1] = voltatjes[9+IC*12];
 8001d4e:	797a      	ldrb	r2, [r7, #5]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	3309      	adds	r3, #9
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001d60:	4413      	add	r3, r2
 8001d62:	881a      	ldrh	r2, [r3, #0]
 8001d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
	TxData[2] = voltatjes[10+IC*12] >> 8;
 8001d6e:	797a      	ldrb	r2, [r7, #5]
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	330a      	adds	r3, #10
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001d80:	4413      	add	r3, r2
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
	TxData[3] = voltatjes[10+IC*12];
 8001d92:	797a      	ldrb	r2, [r7, #5]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	330a      	adds	r3, #10
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001da4:	4413      	add	r3, r2
 8001da6:	881a      	ldrh	r2, [r3, #0]
 8001da8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dac:	3303      	adds	r3, #3
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan2, &TxHeader, TxData) != HAL_OK);
 8001db2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f107 0010 	add.w	r0, r7, #16
 8001dc0:	f003 fb11 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001dc4:	e0ab      	b.n	8001f1e <message_cantx_VOLTATJES_IT+0x532>
	}else{
	TxHeader.Identifier = COBID;
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	TxHeader.MessageMarker = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	TxData[0] = voltatjes[6+IC*12] >> 8;
 8001dfc:	797a      	ldrb	r2, [r7, #5]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3306      	adds	r3, #6
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e0e:	4413      	add	r3, r2
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e1c:	701a      	strb	r2, [r3, #0]
	TxData[1] = voltatjes[6+IC*12];
 8001e1e:	797a      	ldrb	r2, [r7, #5]
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	3306      	adds	r3, #6
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e30:	4413      	add	r3, r2
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
	TxData[2] = voltatjes[7+IC*12] >> 8;
 8001e3e:	797a      	ldrb	r2, [r7, #5]
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	3307      	adds	r3, #7
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e50:	4413      	add	r3, r2
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]
	TxData[3] = voltatjes[7+IC*12];
 8001e62:	797a      	ldrb	r2, [r7, #5]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	3307      	adds	r3, #7
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e74:	4413      	add	r3, r2
 8001e76:	881a      	ldrh	r2, [r3, #0]
 8001e78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]
	TxData[4] = voltatjes[8+IC*12] >> 8;
 8001e82:	797a      	ldrb	r2, [r7, #5]
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e94:	4413      	add	r3, r2
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]
	TxData[5] = voltatjes[8+IC*12];
 8001ea6:	797a      	ldrb	r2, [r7, #5]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001eb8:	4413      	add	r3, r2
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ec0:	3305      	adds	r3, #5
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]
	TxData[6] = voltatjes[9+IC*12] >> 8;
 8001ec6:	797a      	ldrb	r2, [r7, #5]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3309      	adds	r3, #9
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ed8:	4413      	add	r3, r2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ee4:	3306      	adds	r3, #6
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
	TxData[7] = voltatjes[9+IC*12];
 8001eea:	797a      	ldrb	r2, [r7, #5]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3309      	adds	r3, #9
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001efc:	4413      	add	r3, r2
 8001efe:	881a      	ldrh	r2, [r3, #0]
 8001f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f04:	3307      	adds	r3, #7
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan2, &TxHeader, TxData) != HAL_OK);
 8001f0a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f12:	4619      	mov	r1, r3
 8001f14:	f107 0010 	add.w	r0, r7, #16
 8001f18:	f003 fa65 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f28:	b002      	add	sp, #8
 8001f2a:	4770      	bx	lr

08001f2c <message_cantx_SF>:

	void message_cantx_SF(FDCAN_HandleTypeDef hcan, uint8_t UT_FLAG, uint8_t OT_FLAG, uint8_t OV_FLAG, uint8_t UV_FLAG, uint8_t OC_FLAG, uint8_t PRECHARGE_RELAY, uint8_t AIRPLUS, uint8_t AIRMINUS, uint8_t ACCU_INTERLOCK,uint8_t BMS_OK, uint8_t SLAVE_DISC, uint8_t CURRENT_DISC, uint8_t SHOULD_CHARGE, uint8_t IS_CHARGING, uint8_t *TxData, FDCAN_TxHeaderTypeDef TxHeader){
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	b590      	push	{r4, r7, lr}
 8001f30:	b087      	sub	sp, #28
 8001f32:	af04      	add	r7, sp, #16
 8001f34:	f107 0418 	add.w	r4, r7, #24
 8001f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint8_t missatge1 = combined_bits(UT_FLAG, OT_FLAG, OV_FLAG, UV_FLAG, OC_FLAG, PRECHARGE_RELAY, AIRPLUS, AIRMINUS);
 8001f3c:	f897 40c4 	ldrb.w	r4, [r7, #196]	@ 0xc4
 8001f40:	f897 20c0 	ldrb.w	r2, [r7, #192]	@ 0xc0
 8001f44:	f897 10bc 	ldrb.w	r1, [r7, #188]	@ 0xbc
 8001f48:	f897 00b8 	ldrb.w	r0, [r7, #184]	@ 0xb8
 8001f4c:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8001f50:	9303      	str	r3, [sp, #12]
 8001f52:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8001f56:	9302      	str	r3, [sp, #8]
 8001f58:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	4623      	mov	r3, r4
 8001f66:	f000 f9c4 	bl	80022f2 <combined_bits>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
		uint8_t missatge2 = combined_bits(ACCU_INTERLOCK, BMS_OK, SLAVE_DISC, CURRENT_DISC, SHOULD_CHARGE, IS_CHARGING, 0, 0);
 8001f6e:	f897 40e4 	ldrb.w	r4, [r7, #228]	@ 0xe4
 8001f72:	f897 20e0 	ldrb.w	r2, [r7, #224]	@ 0xe0
 8001f76:	f897 10dc 	ldrb.w	r1, [r7, #220]	@ 0xdc
 8001f7a:	f897 00d8 	ldrb.w	r0, [r7, #216]	@ 0xd8
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9303      	str	r3, [sp, #12]
 8001f82:	2300      	movs	r3, #0
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	f897 30e8 	ldrb.w	r3, [r7, #232]	@ 0xe8
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4623      	mov	r3, r4
 8001f94:	f000 f9ad 	bl	80022f2 <combined_bits>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71bb      	strb	r3, [r7, #6]
		TxHeader.Identifier = SF;
 8001f9c:	23e1      	movs	r3, #225	@ 0xe1
 8001f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
		TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		TxHeader.MessageMarker = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		TxData[0] = missatge1;
 8001fd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001fd6:	79fa      	ldrb	r2, [r7, #7]
 8001fd8:	701a      	strb	r2, [r3, #0]
		TxData[1] = missatge2;
 8001fda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001fde:	3301      	adds	r3, #1
 8001fe0:	79ba      	ldrb	r2, [r7, #6]
 8001fe2:	701a      	strb	r2, [r3, #0]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan, &TxHeader, TxData) != HAL_OK);
 8001fe4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001fe8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8001fec:	4619      	mov	r1, r3
 8001fee:	f107 0018 	add.w	r0, r7, #24
 8001ff2:	f003 f9f8 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002000:	b004      	add	sp, #16
 8002002:	4770      	bx	lr

08002004 <message_cantx_AIR_State>:

	void message_cantx_AIR_State(FDCAN_HandleTypeDef hcan1, uint8_t *AIRs_State, uint8_t *TxData, FDCAN_TxHeaderTypeDef TxHeader){
 8002004:	b084      	sub	sp, #16
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
 800200a:	f107 0c08 	add.w	ip, r7, #8
 800200e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.Identifier = 0x91;
 8002012:	2391      	movs	r3, #145	@ 0x91
 8002014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8002024:	2301      	movs	r3, #1
 8002026:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		TxHeader.MessageMarker = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		TxData[0] = AIRs_State[0];
 8002048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002052:	701a      	strb	r2, [r3, #0]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan1, &TxHeader, TxData) != HAL_OK);//Sent data. The TxData is the buffer where the data is saved
 8002054:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002058:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800205c:	4619      	mov	r1, r3
 800205e:	f107 0008 	add.w	r0, r7, #8
 8002062:	f003 f9c0 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
		}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800206e:	b004      	add	sp, #16
 8002070:	4770      	bx	lr

08002072 <message_cantx_Temperature_State>:
	/*
	 * 	Function: message_cantx_Temperature_State
	 * 	Purpose: Take the inputs and variables needed and send it via CAN.
	 * 	Inputs: Lowest, Highest and Average Temperatures
	 */
	void message_cantx_Temperature_State(FDCAN_HandleTypeDef hcan1, uint16_t Lowest_CellTemperature, uint16_t Highest_CellTemperature, uint16_t Average_CellTemperature, uint8_t *TxData, FDCAN_TxHeaderTypeDef TxHeader){
 8002072:	b084      	sub	sp, #16
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
 8002078:	f107 0c08 	add.w	ip, r7, #8
 800207c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.Identifier = 0x93;
 8002080:	2393      	movs	r3, #147	@ 0x93
 8002082:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 8002092:	2306      	movs	r3, #6
 8002094:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		TxHeader.MessageMarker = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		TxData[0] = Lowest_CellTemperature >> 8;
 80020b6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020c4:	701a      	strb	r2, [r3, #0]
		TxData[1] = Lowest_CellTemperature;
 80020c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020ca:	3301      	adds	r3, #1
 80020cc:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	@ 0xa8
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
		TxData[2] = Highest_CellTemperature >> 8;
 80020d4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	b29a      	uxth	r2, r3
 80020dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020e0:	3302      	adds	r3, #2
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]
		TxData[3] = Highest_CellTemperature;
 80020e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020ea:	3303      	adds	r3, #3
 80020ec:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
		TxData[4] = Average_CellTemperature >> 8;
 80020f4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002100:	3304      	adds	r3, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]
		TxData[5] = Average_CellTemperature;
 8002106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800210a:	3305      	adds	r3, #5
 800210c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	701a      	strb	r2, [r3, #0]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan1, &TxHeader, TxData) != HAL_OK);
 8002114:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8002118:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800211c:	4619      	mov	r1, r3
 800211e:	f107 0008 	add.w	r0, r7, #8
 8002122:	f003 f960 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
		}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800212e:	b004      	add	sp, #16
 8002130:	4770      	bx	lr

08002132 <message_cantx_Voltage_State>:
	 * 	Function: message_cantx_Voltage_State
	 * 	Purpose: Take the inputs and variables needed and send it via CAN.
	 * 	Inputs: Lowest, Lowest and Average Cell Voltage
	 */

	void message_cantx_Voltage_State(FDCAN_HandleTypeDef hcan1,uint16_t Lowest_CellVoltage, uint16_t Highest_CellVoltage, uint32_t Sum_Of_All_Voltages,uint8_t *TxData, FDCAN_TxHeaderTypeDef TxHeader){
 8002132:	b084      	sub	sp, #16
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
 8002138:	f107 0c08 	add.w	ip, r7, #8
 800213c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.Identifier = 0x92;
 8002140:	2392      	movs	r3, #146	@ 0x92
 8002142:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		TxHeader.DataLength = FDCAN_DLC_BYTES_7;
 8002152:	2307      	movs	r3, #7
 8002154:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		TxHeader.MessageMarker = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		TxData[0] = Lowest_CellVoltage >> 8;				//Sent data. The TxData is the buffer where the data is saved
 8002176:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b29b      	uxth	r3, r3
 800217e:	b2da      	uxtb	r2, r3
 8002180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002184:	701a      	strb	r2, [r3, #0]
		TxData[1] = Lowest_CellVoltage;
 8002186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800218a:	3301      	adds	r3, #1
 800218c:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	@ 0xa8
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
		TxData[2] = Highest_CellVoltage >> 8;
 8002194:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29a      	uxth	r2, r3
 800219c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021a0:	3302      	adds	r3, #2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]
		TxData[3] = Highest_CellVoltage;
 80021a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021aa:	3303      	adds	r3, #3
 80021ac:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]
		TxData[4] = Sum_Of_All_Voltages >> 16;
 80021b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021b8:	0c1a      	lsrs	r2, r3, #16
 80021ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021be:	3304      	adds	r3, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]
		TxData[5] = Sum_Of_All_Voltages>> 8;
 80021c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021c8:	0a1a      	lsrs	r2, r3, #8
 80021ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ce:	3305      	adds	r3, #5
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
		TxData[6] = Sum_Of_All_Voltages;
 80021d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021d8:	3306      	adds	r3, #6
 80021da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan1, &TxHeader, TxData) != HAL_OK);
 80021e2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80021e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021ea:	4619      	mov	r1, r3
 80021ec:	f107 0008 	add.w	r0, r7, #8
 80021f0:	f003 f8f9 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
						//Sent data. The TxData is the buffer where the data is saved
		}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021fc:	b004      	add	sp, #16
 80021fe:	4770      	bx	lr

08002200 <message_cantx_Keep_Alive>:
	 * 	Function: message_cantx_Keep_Alive
	 * 	Purpose: Take the inputs and variables needed and send it via CAN.
	 * 	Inputs: Keep Alive
	 */

	void message_cantx_Keep_Alive(FDCAN_HandleTypeDef hcan1, uint8_t Keep_Alive, uint8_t *TxData, FDCAN_TxHeaderTypeDef TxHeader){
 8002200:	b084      	sub	sp, #16
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
 8002206:	f107 0c08 	add.w	ip, r7, #8
 800220a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.Identifier = 0xCA;
 800220e:	23ca      	movs	r3, #202	@ 0xca
 8002210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8002220:	2301      	movs	r3, #1
 8002222:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		TxHeader.MessageMarker = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		TxData[0] = Keep_Alive;
 8002244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002248:	f897 20a8 	ldrb.w	r2, [r7, #168]	@ 0xa8
 800224c:	701a      	strb	r2, [r3, #0]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan1, &TxHeader, TxData) != HAL_OK); //Sent data. The TxData is the buffer where the data is saved
 800224e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002252:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002256:	4619      	mov	r1, r3
 8002258:	f107 0008 	add.w	r0, r7, #8
 800225c:	f003 f8c3 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
		}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002268:	b004      	add	sp, #16
 800226a:	4770      	bx	lr

0800226c <message_cantx_Shutdown>:
	 * 	Function: message_cantx_Shutdown
	 * 	Purpose: Take the inputs and variables needed and send it via CAN.
	 * 	Inputs: Package Interlock, BMS (BMS_OK) and IMD -> Bits
	 */

	void message_cantx_Shutdown(FDCAN_HandleTypeDef hcan1, unsigned char Shutdown_PackageIntck, unsigned char Shutdown_BMS, unsigned char Shutdown_IMD, uint8_t *TxData, FDCAN_TxHeaderTypeDef TxHeader){
 800226c:	b084      	sub	sp, #16
 800226e:	b580      	push	{r7, lr}
 8002270:	af00      	add	r7, sp, #0
 8002272:	f107 0c08 	add.w	ip, r7, #8
 8002276:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		TxHeader.Identifier = 0x82;
 800227a:	2382      	movs	r3, #130	@ 0x82
 800227c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 800228c:	2301      	movs	r3, #1
 800228e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		TxHeader.MessageMarker = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		TxData[0] = (Shutdown_IMD << 2) | (Shutdown_BMS << 1) | Shutdown_PackageIntck; 	//Sent data. The TxData is the buffer where the data is saved
 80022b0:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	b25a      	sxtb	r2, r3
 80022b8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	b25a      	sxtb	r2, r3
 80022c4:	f997 30a8 	ldrsb.w	r3, [r7, #168]	@ 0xa8
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022d2:	701a      	strb	r2, [r3, #0]
					// Lectura de pinaje | Shutdown_BMS = BMS_OK | Lectura de pinaje
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hcan1, &TxHeader, TxData) != HAL_OK); //Sent data. The TxData is the buffer where the data is saved
 80022d4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80022d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022dc:	4619      	mov	r1, r3
 80022de:	f107 0008 	add.w	r0, r7, #8
 80022e2:	f003 f880 	bl	80053e6 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022ee:	b004      	add	sp, #16
 80022f0:	4770      	bx	lr

080022f2 <combined_bits>:

	uint8_t combined_bits(unsigned char bit1, unsigned char bit2, unsigned char bit3, unsigned char bit4,
						   unsigned char bit5, unsigned char bit6, unsigned char bit7, unsigned char bit8){
 80022f2:	b490      	push	{r4, r7}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4604      	mov	r4, r0
 80022fa:	4608      	mov	r0, r1
 80022fc:	4611      	mov	r1, r2
 80022fe:	461a      	mov	r2, r3
 8002300:	4623      	mov	r3, r4
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	4603      	mov	r3, r0
 8002306:	71bb      	strb	r3, [r7, #6]
 8002308:	460b      	mov	r3, r1
 800230a:	717b      	strb	r3, [r7, #5]
 800230c:	4613      	mov	r3, r2
 800230e:	713b      	strb	r3, [r7, #4]

		uint8_t byte = (uint8_t)(bit8 << 7) | (uint8_t)(bit7 << 6) | (uint8_t)(bit6 << 5) | (uint8_t)(bit5 << 4) |
 8002310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002314:	01db      	lsls	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	f897 3020 	ldrb.w	r3, [r7, #32]
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	b2db      	uxtb	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	b2da      	uxtb	r2, r3
 8002324:	7f3b      	ldrb	r3, [r7, #28]
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	b2da      	uxtb	r2, r3
 800232e:	7e3b      	ldrb	r3, [r7, #24]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4313      	orrs	r3, r2
 8002336:	b2da      	uxtb	r2, r3
		                (uint8_t)(bit4 << 3) | (uint8_t)(bit3 << 2) | (uint8_t)(bit2 << 1) | (uint8_t)bit1;
 8002338:	793b      	ldrb	r3, [r7, #4]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	b2db      	uxtb	r3, r3
		uint8_t byte = (uint8_t)(bit8 << 7) | (uint8_t)(bit7 << 6) | (uint8_t)(bit6 << 5) | (uint8_t)(bit5 << 4) |
 800233e:	4313      	orrs	r3, r2
 8002340:	b2da      	uxtb	r2, r3
		                (uint8_t)(bit4 << 3) | (uint8_t)(bit3 << 2) | (uint8_t)(bit2 << 1) | (uint8_t)bit1;
 8002342:	797b      	ldrb	r3, [r7, #5]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	b2db      	uxtb	r3, r3
		uint8_t byte = (uint8_t)(bit8 << 7) | (uint8_t)(bit7 << 6) | (uint8_t)(bit6 << 5) | (uint8_t)(bit5 << 4) |
 8002348:	4313      	orrs	r3, r2
 800234a:	b2da      	uxtb	r2, r3
		                (uint8_t)(bit4 << 3) | (uint8_t)(bit3 << 2) | (uint8_t)(bit2 << 1) | (uint8_t)bit1;
 800234c:	79bb      	ldrb	r3, [r7, #6]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
		uint8_t byte = (uint8_t)(bit8 << 7) | (uint8_t)(bit7 << 6) | (uint8_t)(bit6 << 5) | (uint8_t)(bit5 << 4) |
 8002352:	4313      	orrs	r3, r2
 8002354:	b2da      	uxtb	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4313      	orrs	r3, r2
 800235a:	73fb      	strb	r3, [r7, #15]

		// Bit 1 is the Least Significant Bit and it goes up until Bit 8 which has the Most Significant Bit
		// Byte -> [Bit 8  Bit 7  Bit 6  Bit 5  Bit 4  Bit 3  Bit 2  Bit 1]

		return byte;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
	}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bc90      	pop	{r4, r7}
 8002366:	4770      	bx	lr

08002368 <delay_us>:
/* Function: delay_us
 * Purpose: Generate a delay in microseconds
 * Inputs: The amount of microseconds of the loop, the timer which has to be used
 */
void delay_us (long int us)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	long int delay = us * (HAL_RCC_GetHCLKFreq() / 840000);
 8002370:	f005 f91c 	bl	80075ac <HAL_RCC_GetHCLKFreq>
 8002374:	4603      	mov	r3, r0
 8002376:	4a0c      	ldr	r2, [pc, #48]	@ (80023a8 <delay_us+0x40>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	0bdb      	lsrs	r3, r3, #15
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	60bb      	str	r3, [r7, #8]

	for(long int i = 0; i < delay; i += 18){
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	e003      	b.n	8002394 <delay_us+0x2c>
		__ASM("NOP");
 800238c:	bf00      	nop
	for(long int i = 0; i < delay; i += 18){
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3312      	adds	r3, #18
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	dbf7      	blt.n	800238c <delay_us+0x24>
	}
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	09fc8735 	.word	0x09fc8735

080023ac <Min_Volt>:

uint16_t Min_Volt(uint16_t *voltatjes){
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	uint16_t minimum_volt = 40000;
 80023b4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80023b8:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < TOTAL_IC; i++){
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e066      	b.n	800248e <Min_Volt+0xe2>
		for(int j = 0; j < 12; j++){
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e05d      	b.n	8002482 <Min_Volt+0xd6>
			if((((j!=5) && (j!=11)) && ((i==0) ||(i==2) ||(i==3) ||(i==5) ||(i==6) ||(i==8) ||(i==9) ||(i==11) ||(i==12) ||(i==14))) || (((j!=4) && (j!=5) && (j!=10) && (j!=11)) && ((i==1) ||(i==4) ||(i==7) ||(i==10) ||(i==13)))){
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d020      	beq.n	800240e <Min_Volt+0x62>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b0b      	cmp	r3, #11
 80023d0:	d01d      	beq.n	800240e <Min_Volt+0x62>
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d035      	beq.n	8002444 <Min_Volt+0x98>
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d032      	beq.n	8002444 <Min_Volt+0x98>
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d02f      	beq.n	8002444 <Min_Volt+0x98>
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d02c      	beq.n	8002444 <Min_Volt+0x98>
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d029      	beq.n	8002444 <Min_Volt+0x98>
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d026      	beq.n	8002444 <Min_Volt+0x98>
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	d023      	beq.n	8002444 <Min_Volt+0x98>
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b0b      	cmp	r3, #11
 8002400:	d020      	beq.n	8002444 <Min_Volt+0x98>
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d01d      	beq.n	8002444 <Min_Volt+0x98>
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b0e      	cmp	r3, #14
 800240c:	d01a      	beq.n	8002444 <Min_Volt+0x98>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d033      	beq.n	800247c <Min_Volt+0xd0>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b05      	cmp	r3, #5
 8002418:	d030      	beq.n	800247c <Min_Volt+0xd0>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b0a      	cmp	r3, #10
 800241e:	d02d      	beq.n	800247c <Min_Volt+0xd0>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b0b      	cmp	r3, #11
 8002424:	d02a      	beq.n	800247c <Min_Volt+0xd0>
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d00b      	beq.n	8002444 <Min_Volt+0x98>
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b04      	cmp	r3, #4
 8002430:	d008      	beq.n	8002444 <Min_Volt+0x98>
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b07      	cmp	r3, #7
 8002436:	d005      	beq.n	8002444 <Min_Volt+0x98>
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b0a      	cmp	r3, #10
 800243c:	d002      	beq.n	8002444 <Min_Volt+0x98>
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b0d      	cmp	r3, #13
 8002442:	d11b      	bne.n	800247c <Min_Volt+0xd0>
				if((voltatjes[12*i+j] <= minimum_volt)){
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	8afa      	ldrh	r2, [r7, #22]
 800245e:	429a      	cmp	r2, r3
 8002460:	d30c      	bcc.n	800247c <Min_Volt+0xd0>
					minimum_volt = voltatjes[12*i+j];
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	82fb      	strh	r3, [r7, #22]
		for(int j = 0; j < 12; j++){
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b0b      	cmp	r3, #11
 8002486:	dd9e      	ble.n	80023c6 <Min_Volt+0x1a>
	for(int i = 0; i < TOTAL_IC; i++){
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	3301      	adds	r3, #1
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <Min_Volt+0xfc>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4293      	cmp	r3, r2
 8002498:	db92      	blt.n	80023c0 <Min_Volt+0x14>
				}
			}
		}
	  }
	return minimum_volt;
 800249a:	8afb      	ldrh	r3, [r7, #22]
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	24000000 	.word	0x24000000

080024ac <Max_Volt>:


uint16_t Max_Volt(uint16_t *voltatjes){
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	uint16_t maximum_volt = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < TOTAL_IC; i++){
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	e066      	b.n	800258c <Max_Volt+0xe0>
		for(int j = 0; j < 12; j++){
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e05d      	b.n	8002580 <Max_Volt+0xd4>
			if((((j!=5) && (j!=11)) && ((i==0) ||(i==2) ||(i==3) ||(i==5) ||(i==6) ||(i==8) ||(i==9) ||(i==11) ||(i==12) ||(i==14))) || (((j!=4) && (j!=5) && (j!=10) && (j!=11)) && ((i==1) ||(i==4) ||(i==7) ||(i==10) ||(i==13)))){
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d020      	beq.n	800250c <Max_Volt+0x60>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b0b      	cmp	r3, #11
 80024ce:	d01d      	beq.n	800250c <Max_Volt+0x60>
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d035      	beq.n	8002542 <Max_Volt+0x96>
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d032      	beq.n	8002542 <Max_Volt+0x96>
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d02f      	beq.n	8002542 <Max_Volt+0x96>
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d02c      	beq.n	8002542 <Max_Volt+0x96>
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d029      	beq.n	8002542 <Max_Volt+0x96>
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d026      	beq.n	8002542 <Max_Volt+0x96>
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	d023      	beq.n	8002542 <Max_Volt+0x96>
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b0b      	cmp	r3, #11
 80024fe:	d020      	beq.n	8002542 <Max_Volt+0x96>
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d01d      	beq.n	8002542 <Max_Volt+0x96>
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b0e      	cmp	r3, #14
 800250a:	d01a      	beq.n	8002542 <Max_Volt+0x96>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d033      	beq.n	800257a <Max_Volt+0xce>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b05      	cmp	r3, #5
 8002516:	d030      	beq.n	800257a <Max_Volt+0xce>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b0a      	cmp	r3, #10
 800251c:	d02d      	beq.n	800257a <Max_Volt+0xce>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b0b      	cmp	r3, #11
 8002522:	d02a      	beq.n	800257a <Max_Volt+0xce>
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d00b      	beq.n	8002542 <Max_Volt+0x96>
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b04      	cmp	r3, #4
 800252e:	d008      	beq.n	8002542 <Max_Volt+0x96>
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2b07      	cmp	r3, #7
 8002534:	d005      	beq.n	8002542 <Max_Volt+0x96>
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b0a      	cmp	r3, #10
 800253a:	d002      	beq.n	8002542 <Max_Volt+0x96>
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2b0d      	cmp	r3, #13
 8002540:	d11b      	bne.n	800257a <Max_Volt+0xce>
				if((voltatjes[12*i+j] >= maximum_volt)){
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	461a      	mov	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	8afa      	ldrh	r2, [r7, #22]
 800255c:	429a      	cmp	r2, r3
 800255e:	d80c      	bhi.n	800257a <Max_Volt+0xce>
					maximum_volt = voltatjes[12*i+j];
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	82fb      	strh	r3, [r7, #22]
		for(int j = 0; j < 12; j++){
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3301      	adds	r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b0b      	cmp	r3, #11
 8002584:	dd9e      	ble.n	80024c4 <Max_Volt+0x18>
	for(int i = 0; i < TOTAL_IC; i++){
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	3301      	adds	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <Max_Volt+0xfc>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4293      	cmp	r3, r2
 8002596:	db92      	blt.n	80024be <Max_Volt+0x12>
				}
			}
		}
	  }
	return maximum_volt;
 8002598:	8afb      	ldrh	r3, [r7, #22]
}
 800259a:	4618      	mov	r0, r3
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	24000000 	.word	0x24000000

080025ac <Mean_Volt>:

float Mean_Volt(uint16_t *voltatjes){
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	float mean_volt = 0;
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
	uint8_t volt_length = 12*TOTAL_IC;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <Mean_Volt+0x78>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	0052      	lsls	r2, r2, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<volt_length; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	e011      	b.n	80025f2 <Mean_Volt+0x46>
		mean_volt = mean_volt + voltatjes[i];
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i<volt_length; i++){
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3301      	adds	r3, #1
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	dbe9      	blt.n	80025ce <Mean_Volt+0x22>
		}
	mean_volt = mean_volt/volt_length;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	ee07 3a90 	vmov	s15, r3
 8002600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002604:	edd7 6a05 	vldr	s13, [r7, #20]
 8002608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260c:	edc7 7a05 	vstr	s15, [r7, #20]
	return mean_volt;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	ee07 3a90 	vmov	s15, r3
	}
 8002616:	eeb0 0a67 	vmov.f32	s0, s15
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	24000000 	.word	0x24000000

08002628 <Sum_Volt>:

uint32_t Sum_Volt(uint16_t *voltatjes){
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	uint32_t sum_volt = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
		uint8_t volt_length = 12*TOTAL_IC;
 8002634:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <Sum_Volt+0x50>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	0052      	lsls	r2, r2, #1
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	73fb      	strb	r3, [r7, #15]
		for(int i = 0; i<volt_length; i++){
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	e00b      	b.n	8002660 <Sum_Volt+0x38>
			sum_volt = sum_volt + voltatjes[i];
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4413      	add	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
		for(int i = 0; i<volt_length; i++){
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	3301      	adds	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbef      	blt.n	8002648 <Sum_Volt+0x20>
		}
		return sum_volt;
 8002668:	697b      	ldr	r3, [r7, #20]
}
 800266a:	4618      	mov	r0, r3
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	24000000 	.word	0x24000000

0800267c <Min_Temp>:

uint16_t Min_Temp(uint16_t *temperatures){
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	uint16_t minimum_temp = temperatures[0];
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	82fb      	strh	r3, [r7, #22]
	uint8_t temp_length = 8*TOTAL_IC;
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <Min_Temp+0x54>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<temp_length; i++){
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	e010      	b.n	80026ba <Min_Temp+0x3e>
		if(temperatures[i] <= minimum_temp){
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	8afa      	ldrh	r2, [r7, #22]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d305      	bcc.n	80026b4 <Min_Temp+0x38>
			minimum_temp = temperatures[i];
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<temp_length; i++){
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	3301      	adds	r3, #1
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	dbea      	blt.n	8002698 <Min_Temp+0x1c>
		}
	}
	return minimum_temp;
 80026c2:	8afb      	ldrh	r3, [r7, #22]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	24000000 	.word	0x24000000

080026d4 <Max_Temp>:

uint16_t Max_Temp(uint16_t *temperatures){
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	uint16_t maximum_temp = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	82fb      	strh	r3, [r7, #22]
	uint8_t temp_length = 8*TOTAL_IC;
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <Max_Temp+0x54>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<temp_length; i++){
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e010      	b.n	8002710 <Max_Temp+0x3c>
		if(temperatures[i] >= maximum_temp){
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	8afa      	ldrh	r2, [r7, #22]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d805      	bhi.n	800270a <Max_Temp+0x36>
			maximum_temp = temperatures[i];
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<temp_length; i++){
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	3301      	adds	r3, #1
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	dbea      	blt.n	80026ee <Max_Temp+0x1a>
		}
	}
	return maximum_temp;
 8002718:	8afb      	ldrh	r3, [r7, #22]
}
 800271a:	4618      	mov	r0, r3
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	24000000 	.word	0x24000000

0800272c <Mean_Temp>:

float Mean_Temp(uint16_t *temperatures){
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	uint16_t mean_temp = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	82fb      	strh	r3, [r7, #22]
	uint8_t temp_length = 8*TOTAL_IC;
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <Mean_Temp+0x5c>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<temp_length; i++){
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e00a      	b.n	800275c <Mean_Temp+0x30>
		mean_temp = mean_temp + temperatures[i];
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	8afb      	ldrh	r3, [r7, #22]
 8002752:	4413      	add	r3, r2
 8002754:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<temp_length; i++){
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	3301      	adds	r3, #1
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	dbf0      	blt.n	8002746 <Mean_Temp+0x1a>
		}
	mean_temp = mean_temp/temp_length;
 8002764:	8afa      	ldrh	r2, [r7, #22]
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	fb92 f3f3 	sdiv	r3, r2, r3
 800276c:	82fb      	strh	r3, [r7, #22]
	return mean_temp;
 800276e:	8afb      	ldrh	r3, [r7, #22]
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eef8 7a67 	vcvt.f32.u32	s15, s15
	}
 8002778:	eeb0 0a67 	vmov.f32	s0, s15
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	24000000 	.word	0x24000000

0800278c <Conv_Temp>:



void Conv_Temp(uint16_t *temperatures, uint16_t *temperatures_conv){
 800278c:	b580      	push	{r7, lr}
 800278e:	f6ad 6d28 	subw	sp, sp, #3624	@ 0xe28
 8002792:	af00      	add	r7, sp, #0
 8002794:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 8002798:	f6a3 6324 	subw	r3, r3, #3620	@ 0xe24
 800279c:	6018      	str	r0, [r3, #0]
 800279e:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 80027a2:	f6a3 6328 	subw	r3, r3, #3624	@ 0xe28
 80027a6:	6019      	str	r1, [r3, #0]
	const uint16_t Temp_table[901]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900};
 80027a8:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 80027ac:	f2a3 7314 	subw	r3, r3, #1812	@ 0x714
 80027b0:	4a3b      	ldr	r2, [pc, #236]	@ (80028a0 <Conv_Temp+0x114>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	4611      	mov	r1, r2
 80027b6:	f240 730a 	movw	r3, #1802	@ 0x70a
 80027ba:	461a      	mov	r2, r3
 80027bc:	f007 fed2 	bl	800a564 <memcpy>
	const uint16_t Lec[901]={22950, 22923, 22895, 22868, 22840, 22812, 22784, 22757, 22729, 22701, 22673, 22645, 22617, 22589, 22560, 22532, 22504, 22475, 22447, 22419, 22390, 22361, 22333, 22304, 22275, 22247, 22218, 22189, 22160, 22131, 22102, 22073, 22044, 22014, 21985, 21956, 21927, 21897, 21868, 21838, 21809, 21779, 21750, 21720, 21690, 21660, 21630, 21601, 21571, 21541, 21511, 21481, 21451, 21420, 21390, 21360, 21330, 21299, 21269, 21239, 21208, 21178, 21147, 21116, 21086, 21055, 21024, 20994, 20963, 20932, 20901, 20870, 20839, 20808, 20777, 20746, 20715, 20684, 20653, 20621, 20590, 20559, 20527, 20496, 20465, 20433, 20402, 20370, 20339, 20307, 20275, 20244, 20212, 20180, 20149, 20117, 20085, 20053, 20021, 19989, 19957, 19925, 19893, 19861, 19829, 19797, 19765, 19733, 19700, 19668, 19636, 19604, 19571, 19539, 19507, 19474, 19442, 19409, 19377, 19344, 19312, 19279, 19247, 19214, 19181, 19149, 19116, 19083, 19051, 19018, 18985, 18952, 18920, 18887, 18854, 18821, 18788, 18755, 18722, 18690, 18657, 18624, 18591, 18558, 18525, 18492, 18459, 18425, 18392, 18359, 18326, 18293, 18260, 18227, 18194, 18160, 18127, 18094, 18061, 18028, 17994, 17961, 17928, 17894, 17861, 17828, 17795, 17761, 17728, 17695, 17661, 17628, 17595, 17561, 17528, 17495, 17461, 17428, 17394, 17361, 17328, 17294, 17261, 17227, 17194, 17161, 17127, 17094, 17060, 17027, 16994, 16960, 16927, 16893, 16860, 16826, 16793, 16760, 16726, 16693, 16659, 16626, 16593, 16559, 16526, 16492, 16459, 16426, 16392, 16359, 16326, 16292, 16259, 16226, 16192, 16159, 16126, 16092, 16059, 16026, 15992, 15959, 15926, 15893, 15859, 15826, 15793, 15760, 15727, 15693, 15660, 15627, 15594, 15561, 15528, 15495, 15461, 15428, 15395, 15362, 15329, 15296, 15263, 15230, 15197, 15164, 15132, 15099, 15066, 15033, 15000, 14967, 14934, 14902, 14869, 14836, 14803, 14771, 14738, 14705, 14673, 14640, 14607, 14575, 14542, 14510, 14477, 14445, 14412, 14380, 14347, 14315, 14283, 14250, 14218, 14186, 14153, 14121, 14089, 14057, 14025, 13993, 13961, 13928, 13896, 13864, 13832, 13800, 13769, 13737, 13705, 13673, 13641, 13609, 13578, 13546, 13514, 13483, 13451, 13419, 13388, 13356, 13325, 13293, 13262, 13231, 13199, 13168, 13137, 13105, 13074, 13043, 13012, 12981, 12950, 12919, 12888, 12857, 12826, 12795, 12764, 12733, 12702, 12672, 12641, 12610, 12580, 12549, 12518, 12488, 12457, 12427, 12397, 12366, 12336, 12306, 12275, 12245, 12215, 12185, 12155, 12125, 12095, 12065, 12035, 12005, 11975, 11945, 11916, 11886, 11856, 11827, 11797, 11768, 11738, 11709, 11679, 11650, 11621, 11591, 11562, 11533, 11504, 11475, 11446, 11417, 11388, 11359, 11330, 11301, 11272, 11243, 11215, 11186, 11158, 11129, 11100, 11072, 11044, 11015, 10987, 10959, 10930, 10902, 10874, 10846, 10818, 10790, 10762, 10734, 10706, 10678, 10651, 10623, 10595, 10568, 10540, 10513, 10485, 10458, 10430, 10403, 10376, 10349, 10321, 10294, 10267, 10240, 10213, 10186, 10159, 10133, 10106, 10079, 10052, 10026, 9999, 9973, 9946, 9920, 9893, 9867, 9841, 9815, 9788, 9762, 9736, 9710, 9684, 9658, 9632, 9607, 9581, 9555, 9529, 9504, 9478, 9453, 9427, 9402, 9376, 9351, 9326, 9301, 9276, 9250, 9225, 9200, 9175, 9151, 9126, 9101, 9076, 9051, 9027, 9002, 8978, 8953, 8929, 8904, 8880, 8856, 8832, 8807, 8783, 8759, 8735, 8711, 8687, 8663, 8640, 8616, 8592, 8569, 8545, 8521, 8498, 8474, 8451, 8428, 8404, 8381, 8358, 8335, 8312, 8289, 8266, 8243, 8220, 8197, 8174, 8152, 8129, 8107, 8084, 8061, 8039, 8017, 7994, 7972, 7950, 7928, 7905, 7883, 7861, 7839, 7817, 7795, 7774, 7752, 7730, 7708, 7687, 7665, 7644, 7622, 7601, 7579, 7558, 7537, 7516, 7495, 7473, 7452, 7431, 7410, 7389, 7369, 7348, 7327, 7306, 7286, 7265, 7245, 7224, 7204, 7183, 7163, 7143, 7122, 7102, 7082, 7062, 7042, 7022, 7002, 6982, 6962, 6942, 6923, 6903, 6883, 6864, 6844, 6825, 6805, 6786, 6767, 6747, 6728, 6709, 6690, 6671, 6651, 6632, 6614, 6595, 6576, 6557, 6538, 6520, 6501, 6482, 6464, 6445, 6427, 6408, 6390, 6372, 6353, 6335, 6317, 6299, 6281, 6263, 6245, 6227, 6209, 6191, 6173, 6156, 6138, 6120, 6103, 6085, 6068, 6050, 6033, 6015, 5998, 5981, 5963, 5946, 5929, 5912, 5895, 5878, 5861, 5844, 5827, 5810, 5794, 5777, 5760, 5744, 5727, 5711, 5694, 5678, 5661, 5645, 5629, 5612, 5596, 5580, 5564, 5548, 5532, 5516, 5500, 5484, 5468, 5452, 5436, 5421, 5405, 5389, 5374, 5358, 5343, 5327, 5312, 5296, 5281, 5266, 5250, 5235, 5220, 5205, 5190, 5175, 5160, 5145, 5130, 5115, 5100, 5085, 5071, 5056, 5041, 5027, 5012, 4997, 4983, 4968, 4954, 4940, 4925, 4911, 4897, 4883, 4868, 4854, 4840, 4826, 4812, 4798, 4784, 4770, 4756, 4743, 4729, 4715, 4701, 4688, 4674, 4661, 4647, 4634, 4620, 4607, 4593, 4580, 4567, 4553, 4540, 4527, 4514, 4501, 4488, 4475, 4462, 4449, 4436, 4423, 4410, 4397, 4385, 4372, 4359, 4346, 4334, 4321, 4309, 4296, 4284, 4271, 4259, 4247, 4234, 4222, 4210, 4197, 4185, 4173, 4161, 4149, 4137, 4125, 4113, 4101, 4089, 4077, 4065, 4054, 4042, 4030, 4018, 4007, 3995, 3984, 3972, 3961, 3949, 3938, 3926, 3915, 3903, 3892, 3881, 3870, 3858, 3847, 3836, 3825, 3814, 3803, 3792, 3781, 3770, 3759, 3748, 3737, 3727, 3716, 3705, 3694, 3684, 3673, 3662, 3652, 3641, 3631, 3620, 3610, 3599, 3589, 3578, 3568, 3558, 3548, 3537, 3527, 3517, 3507, 3497, 3487, 3477, 3466, 3456, 3447, 3437, 3427, 3417, 3407, 3397, 3387, 3378, 3368, 3358, 3348, 3339, 3329, 3320, 3310, 3301, 3291, 3282, 3272, 3263, 3253, 3244, 3235, 3225, 3216, 3207, 3198, 3188, 3179, 3170, 3161, 3152, 3143, 3134, 3125, 3116, 3107, 3098, 3089, 3080, 3072, 3063, 3054, 3045, 3036, 3028, 3019, 3010, 3002, 2993, 2985, 2976, 2968, 2959, 2951, 2942, 2934, 2925, 2917, 2909, 2900, 2892, 2884, 2876, 2868, 2859, 2851, 2843, 2835, 2827, 2819, 2811, 2803, 2795, 2787, 2779, 2771, 2763, 2755, 2747, 2740, 2732, 2724, 2716, 2709, 2701, 2693, 2686, 2678, 2670, 2663, 2655, 2648, 2640, 2633, 2625, 2618, 2610, 2603, 2596, 2588, 2581, 2574, 2566, 2559, 2552, 2545, 2537, 2530, 2523, 2516};
 80027c0:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 80027c4:	f5a3 6362 	sub.w	r3, r3, #3616	@ 0xe20
 80027c8:	4a36      	ldr	r2, [pc, #216]	@ (80028a4 <Conv_Temp+0x118>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	4611      	mov	r1, r2
 80027ce:	f240 730a 	movw	r3, #1802	@ 0x70a
 80027d2:	461a      	mov	r2, r3
 80027d4:	f007 fec6 	bl	800a564 <memcpy>

	   for(int a=0;a<8*TOTAL_IC;a++){
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 3e24 	str.w	r3, [r7, #3620]	@ 0xe24
 80027de:	e052      	b.n	8002886 <Conv_Temp+0xfa>
	   	      	int i = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 3e20 	str.w	r3, [r7, #3616]	@ 0xe20
	   			while (i < 900 && temperatures[a] < Lec[i + 1]) {
 80027e6:	e004      	b.n	80027f2 <Conv_Temp+0x66>
	   				i++;
 80027e8:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	@ 0xe20
 80027ec:	3301      	adds	r3, #1
 80027ee:	f8c7 3e20 	str.w	r3, [r7, #3616]	@ 0xe20
	   			while (i < 900 && temperatures[a] < Lec[i + 1]) {
 80027f2:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	@ 0xe20
 80027f6:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80027fa:	da14      	bge.n	8002826 <Conv_Temp+0x9a>
 80027fc:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 8002806:	f6a2 6224 	subw	r2, r2, #3620	@ 0xe24
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	4413      	add	r3, r2
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	f8d7 3e20 	ldr.w	r3, [r7, #3616]	@ 0xe20
 8002814:	1c59      	adds	r1, r3, #1
 8002816:	f607 6328 	addw	r3, r7, #3624	@ 0xe28
 800281a:	f5a3 6362 	sub.w	r3, r3, #3616	@ 0xe20
 800281e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002822:	429a      	cmp	r2, r3
 8002824:	d3e0      	bcc.n	80027e8 <Conv_Temp+0x5c>
	   			}
	   			temperatures_conv[a]=Temp_table[i];
 8002826:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 8002830:	f6a2 6228 	subw	r2, r2, #3624	@ 0xe28
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	4413      	add	r3, r2
 8002838:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 800283c:	f2a2 7214 	subw	r2, r2, #1812	@ 0x714
 8002840:	f8d7 1e20 	ldr.w	r1, [r7, #3616]	@ 0xe20
 8002844:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002848:	801a      	strh	r2, [r3, #0]
	   			if(temperatures_conv[a] == 866){
 800284a:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 8002854:	f6a2 6228 	subw	r2, r2, #3624	@ 0xe28
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4413      	add	r3, r2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	f240 3262 	movw	r2, #866	@ 0x362
 8002862:	4293      	cmp	r3, r2
 8002864:	d10a      	bne.n	800287c <Conv_Temp+0xf0>
	   				temperatures_conv[a] = 0;
 8002866:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	f607 6228 	addw	r2, r7, #3624	@ 0xe28
 8002870:	f6a2 6228 	subw	r2, r2, #3624	@ 0xe28
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	4413      	add	r3, r2
 8002878:	2200      	movs	r2, #0
 800287a:	801a      	strh	r2, [r3, #0]
	   for(int a=0;a<8*TOTAL_IC;a++){
 800287c:	f8d7 3e24 	ldr.w	r3, [r7, #3620]	@ 0xe24
 8002880:	3301      	adds	r3, #1
 8002882:	f8c7 3e24 	str.w	r3, [r7, #3620]	@ 0xe24
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <Conv_Temp+0x11c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	f8d7 2e24 	ldr.w	r2, [r7, #3620]	@ 0xe24
 8002890:	429a      	cmp	r2, r3
 8002892:	dba5      	blt.n	80027e0 <Conv_Temp+0x54>
	   			}
	   	}
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	f607 6728 	addw	r7, r7, #3624	@ 0xe28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0800a598 	.word	0x0800a598
 80028a4:	0800aca4 	.word	0x0800aca4
 80028a8:	24000000 	.word	0x24000000

080028ac <Curr_EVAL>:
int32_t Curr_EVAL(uint8_t *current_arr) {
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    int32_t current;
    current = (current_arr[3] + (current_arr[2] << 8)+ (current_arr[1] << 16)+ ((current_arr[0]^0X80)<< 24));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3303      	adds	r3, #3
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3302      	adds	r3, #2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3301      	adds	r3, #1
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	441a      	add	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7819      	ldrb	r1, [r3, #0]
 80028d4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80028d8:	404b      	eors	r3, r1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
    return current;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <OV_EVAL>:
#include "stdlib.h"
#include "LTC6811-1_eTechRacing.h"
#include "eTechRacing.h"


	uint8_t OV_EVAL(uint16_t *VOLTATGES, uint32_t *FLAG_ARRAY){
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
		uint8_t OV_FLAG = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < TOTAL_IC; i++){
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e043      	b.n	800298c <OV_EVAL+0x9c>
			for(int j = 0; j < 12; j++){
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e03a      	b.n	8002980 <OV_EVAL+0x90>
				 if((VOLTATGES[12*i+j] >= VCELLMAX)){
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	461a      	mov	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002926:	4293      	cmp	r3, r2
 8002928:	d916      	bls.n	8002958 <OV_EVAL+0x68>
					  if ((HAL_GetTick() - FLAG_ARRAY[12*i+j]) >= ERROR_VOLT_TIME){
 800292a:	f001 fed3 	bl	80046d4 <HAL_GetTick>
 800292e:	4601      	mov	r1, r0
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	4413      	add	r3, r2
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1acb      	subs	r3, r1, r3
 800294a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800294e:	d314      	bcc.n	800297a <OV_EVAL+0x8a>
						  OV_FLAG = 1;
 8002950:	2301      	movs	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
						  return OV_FLAG;
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	e020      	b.n	800299a <OV_EVAL+0xaa>
					  }
				  }
				  else{
					  FLAG_ARRAY[12*i+j] = HAL_GetTick();
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	18d4      	adds	r4, r2, r3
 800296e:	f001 feb1 	bl	80046d4 <HAL_GetTick>
 8002972:	4603      	mov	r3, r0
 8002974:	6023      	str	r3, [r4, #0]
					  OV_FLAG = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
			for(int j = 0; j < 12; j++){
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3301      	adds	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b0b      	cmp	r3, #11
 8002984:	ddc1      	ble.n	800290a <OV_EVAL+0x1a>
		for(int i = 0; i < TOTAL_IC; i++){
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	3301      	adds	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <OV_EVAL+0xb4>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4293      	cmp	r3, r2
 8002996:	dbb5      	blt.n	8002904 <OV_EVAL+0x14>
				  }
			}
		  }
		return OV_FLAG;
 8002998:	7dfb      	ldrb	r3, [r7, #23]
	}
 800299a:	4618      	mov	r0, r3
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	bf00      	nop
 80029a4:	24000000 	.word	0x24000000

080029a8 <UV_EVAL>:

	 uint8_t UV_EVAL(uint16_t *VOLTATGES, uint32_t *FLAG_ARRAY){
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
		uint8_t UV_FLAG = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < TOTAL_IC; i++){
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e095      	b.n	8002ae8 <UV_EVAL+0x140>
			for(int j = 0; j < 12; j++){
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e08b      	b.n	8002ada <UV_EVAL+0x132>
				if((((j!=5) && (j!=11)) && ((i==0) ||(i==2) ||(i==3) ||(i==5) ||(i==6) ||(i==8) ||(i==9) ||(i==11) ||(i==12) ||(i==14))) || (((j!=4) && (j!=5) && (j!=10) && (j!=11)) && ((i==1) ||(i==4) ||(i==7) ||(i==10) ||(i==13)))){
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d020      	beq.n	8002a0a <UV_EVAL+0x62>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b0b      	cmp	r3, #11
 80029cc:	d01d      	beq.n	8002a0a <UV_EVAL+0x62>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d035      	beq.n	8002a40 <UV_EVAL+0x98>
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d032      	beq.n	8002a40 <UV_EVAL+0x98>
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d02f      	beq.n	8002a40 <UV_EVAL+0x98>
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d02c      	beq.n	8002a40 <UV_EVAL+0x98>
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d029      	beq.n	8002a40 <UV_EVAL+0x98>
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d026      	beq.n	8002a40 <UV_EVAL+0x98>
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b09      	cmp	r3, #9
 80029f6:	d023      	beq.n	8002a40 <UV_EVAL+0x98>
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b0b      	cmp	r3, #11
 80029fc:	d020      	beq.n	8002a40 <UV_EVAL+0x98>
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d01d      	beq.n	8002a40 <UV_EVAL+0x98>
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b0e      	cmp	r3, #14
 8002a08:	d01a      	beq.n	8002a40 <UV_EVAL+0x98>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d050      	beq.n	8002ab2 <UV_EVAL+0x10a>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d04d      	beq.n	8002ab2 <UV_EVAL+0x10a>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b0a      	cmp	r3, #10
 8002a1a:	d04a      	beq.n	8002ab2 <UV_EVAL+0x10a>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b0b      	cmp	r3, #11
 8002a20:	d047      	beq.n	8002ab2 <UV_EVAL+0x10a>
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d00b      	beq.n	8002a40 <UV_EVAL+0x98>
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d008      	beq.n	8002a40 <UV_EVAL+0x98>
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b07      	cmp	r3, #7
 8002a32:	d005      	beq.n	8002a40 <UV_EVAL+0x98>
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b0a      	cmp	r3, #10
 8002a38:	d002      	beq.n	8002a40 <UV_EVAL+0x98>
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b0d      	cmp	r3, #13
 8002a3e:	d138      	bne.n	8002ab2 <UV_EVAL+0x10a>
				 if(VOLTATGES[12*i+j] >= VCELLMIN){
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	f646 525f 	movw	r2, #27999	@ 0x6d5f
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d911      	bls.n	8002a84 <UV_EVAL+0xdc>
					 FLAG_ARRAY[12*i+j] = HAL_GetTick();
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	18d4      	adds	r4, r2, r3
 8002a76:	f001 fe2d 	bl	80046d4 <HAL_GetTick>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6023      	str	r3, [r4, #0]
				 		UV_FLAG = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]
				 if(VOLTATGES[12*i+j] >= VCELLMIN){
 8002a82:	e026      	b.n	8002ad2 <UV_EVAL+0x12a>

					 }
				 else{
					 if ((HAL_GetTick() - FLAG_ARRAY[12*i+j]) >= ERROR_VOLT_TIME){
 8002a84:	f001 fe26 	bl	80046d4 <HAL_GetTick>
 8002a88:	4601      	mov	r1, r0
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	461a      	mov	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1acb      	subs	r3, r1, r3
 8002aa4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002aa8:	d313      	bcc.n	8002ad2 <UV_EVAL+0x12a>
				 		UV_FLAG = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
				 		return UV_FLAG;
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	e022      	b.n	8002af8 <UV_EVAL+0x150>
					 }
				 }
				}

				else{
					FLAG_ARRAY[12*i+j] = HAL_GetTick();
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	461a      	mov	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	18d4      	adds	r4, r2, r3
 8002ac8:	f001 fe04 	bl	80046d4 <HAL_GetTick>
 8002acc:	4603      	mov	r3, r0
 8002ace:	6023      	str	r3, [r4, #0]
 8002ad0:	e000      	b.n	8002ad4 <UV_EVAL+0x12c>
				 if(VOLTATGES[12*i+j] >= VCELLMIN){
 8002ad2:	bf00      	nop
			for(int j = 0; j < 12; j++){
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b0b      	cmp	r3, #11
 8002ade:	f77f af70 	ble.w	80029c2 <UV_EVAL+0x1a>
		for(int i = 0; i < TOTAL_IC; i++){
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <UV_EVAL+0x158>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4293      	cmp	r3, r2
 8002af2:	f6ff af63 	blt.w	80029bc <UV_EVAL+0x14>
				}
			}
		  }
		return UV_FLAG;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
	}
 8002af8:	4618      	mov	r0, r3
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}
 8002b00:	24000000 	.word	0x24000000

08002b04 <OT_EVAL>:


		uint8_t OT_EVAL(uint16_t *TEMPERATURES, uint32_t *FLAG_ARRAY){
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
				for(int i = 0; i <= 16; i ++){
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e021      	b.n	8002b58 <OT_EVAL+0x54>

						if (TEMPERATURES[i] <= 600){
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002b22:	d808      	bhi.n	8002b36 <OT_EVAL+0x32>
							FLAG_ARRAY[i] = HAL_GetTick();
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	18d4      	adds	r4, r2, r3
 8002b2c:	f001 fdd2 	bl	80046d4 <HAL_GetTick>
 8002b30:	4603      	mov	r3, r0
 8002b32:	6023      	str	r3, [r4, #0]
 8002b34:	e00d      	b.n	8002b52 <OT_EVAL+0x4e>
						}
						else {
							if ((HAL_GetTick() - FLAG_ARRAY[i]) >= 1000){
 8002b36:	f001 fdcd 	bl	80046d4 <HAL_GetTick>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1acb      	subs	r3, r1, r3
 8002b48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b4c:	d301      	bcc.n	8002b52 <OT_EVAL+0x4e>
								return 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e006      	b.n	8002b60 <OT_EVAL+0x5c>
				for(int i = 0; i <= 16; i ++){
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	ddda      	ble.n	8002b14 <OT_EVAL+0x10>
							}
						}
				}
				return 0;
 8002b5e:	2300      	movs	r3, #0
			}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd90      	pop	{r4, r7, pc}

08002b68 <UT_EVAL>:



	uint8_t UT_EVAL(uint16_t *TEMPERATURES, uint32_t *FLAG_ARRAY){
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
			for(int i = 0; i <= 16; i ++){
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e020      	b.n	8002bba <UT_EVAL+0x52>

					if (TEMPERATURES[i] >= 100){
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	2b63      	cmp	r3, #99	@ 0x63
 8002b84:	d908      	bls.n	8002b98 <UT_EVAL+0x30>
						FLAG_ARRAY[i] = HAL_GetTick();
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	18d4      	adds	r4, r2, r3
 8002b8e:	f001 fda1 	bl	80046d4 <HAL_GetTick>
 8002b92:	4603      	mov	r3, r0
 8002b94:	6023      	str	r3, [r4, #0]
 8002b96:	e00d      	b.n	8002bb4 <UT_EVAL+0x4c>
					}
					else {
						if ((HAL_GetTick() - FLAG_ARRAY[i]) >= 1000){
 8002b98:	f001 fd9c 	bl	80046d4 <HAL_GetTick>
 8002b9c:	4601      	mov	r1, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1acb      	subs	r3, r1, r3
 8002baa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bae:	d301      	bcc.n	8002bb4 <UT_EVAL+0x4c>
							return 1;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e006      	b.n	8002bc2 <UT_EVAL+0x5a>
			for(int i = 0; i <= 16; i ++){
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	dddb      	ble.n	8002b78 <UT_EVAL+0x10>
						}
					}
			}
			return 0;
 8002bc0:	2300      	movs	r3, #0
		}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}

08002bca <ETAS_SYNC_EVAL>:

	uint8_t ETAS_SYNC_EVAL(uint32_t *etas_flag_arr){
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]

		if((HAL_GetTick() - etas_flag_arr[0]) >= ETAS_SYNC_MAX_TIME){
 8002bd2:	f001 fd7f 	bl	80046d4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2bc7      	cmp	r3, #199	@ 0xc7
 8002be0:	d901      	bls.n	8002be6 <ETAS_SYNC_EVAL+0x1c>
			return 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <ETAS_SYNC_EVAL+0x1e>
		}
		return 0;
 8002be6:	2300      	movs	r3, #0
	}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <CURR_SYNC_EVAL>:

	uint8_t CURR_SYNC_EVAL(uint32_t *curr_flag_arr){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

		if((HAL_GetTick() - curr_flag_arr[0]) >= CURR_SYNC_MAX_TIME){
 8002bf8:	f001 fd6c 	bl	80046d4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c08:	d301      	bcc.n	8002c0e <CURR_SYNC_EVAL+0x1e>
			return 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <CURR_SYNC_EVAL+0x20>
		}
		return 0;
 8002c0e:	2300      	movs	r3, #0
	}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <BALANCING_SYNC_EVAL>:

	uint8_t BALANCING_SYNC_EVAL(uint32_t *balancing_flag_arr){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

		if((HAL_GetTick() - balancing_flag_arr[0]) >= CAN_BALANCING_SYNC_TIME){
 8002c20:	f001 fd58 	bl	80046d4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c30:	d301      	bcc.n	8002c36 <BALANCING_SYNC_EVAL+0x1e>
			return 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <BALANCING_SYNC_EVAL+0x20>
		}
		return 1;
 8002c36:	2301      	movs	r3, #1
	}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <detection_BMSerror_OverCurrent>:

	//Condició1: Si pasa de 136A durant 500ms -> Salta error
	//Condició2: Si en algun punt passa de 200A
	uint8_t detection_BMSerror_OverCurrent(int32_t Current, uint32_t *FLAG_ARRAY){				// Time of the Error Temperature
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
		if (Current >= MAXCURRENT){
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c88 <detection_BMSerror_OverCurrent+0x48>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	dd01      	ble.n	8002c56 <detection_BMSerror_OverCurrent+0x16>
			return 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e014      	b.n	8002c80 <detection_BMSerror_OverCurrent+0x40>
		}
		if((Current >= HIGHCURRENT)){
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	@ (8002c8c <detection_BMSerror_OverCurrent+0x4c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	dd0a      	ble.n	8002c74 <detection_BMSerror_OverCurrent+0x34>
			if (HAL_GetTick() - FLAG_ARRAY[0] > ERROR_CURRENT_TIME){
 8002c5e:	f001 fd39 	bl	80046d4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c6e:	d906      	bls.n	8002c7e <detection_BMSerror_OverCurrent+0x3e>
						return 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e005      	b.n	8002c80 <detection_BMSerror_OverCurrent+0x40>
			}
		}
		 else {
			FLAG_ARRAY[0] = HAL_GetTick();
 8002c74:	f001 fd2e 	bl	80046d4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8002c7e:	2300      	movs	r3, #0
	}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	00030d3f 	.word	0x00030d3f
 8002c8c:	00020f57 	.word	0x00020f57

08002c90 <slave_disc>:

	uint8_t slave_disc(uint8_t *PEC_SLAVES_Volt,uint8_t *PEC_SLAVES_Temp, uint32_t *FLAG_ARRAY_Volt,uint32_t *FLAG_ARRAY_Temp){
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b089      	sub	sp, #36	@ 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
		uint8_t flag = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	77fb      	strb	r3, [r7, #31]
		for(int i = 0; i < 8*TOTAL_IC; i++){
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e01f      	b.n	8002ce8 <slave_disc+0x58>
			if(PEC_SLAVES_Temp[i] == 1){
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10e      	bne.n	8002cd2 <slave_disc+0x42>
				  if((HAL_GetTick() - FLAG_ARRAY_Temp[i]) >= SLAVE_DISC_TIME){
 8002cb4:	f001 fd0e 	bl	80046d4 <HAL_GetTick>
 8002cb8:	4601      	mov	r1, r0
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	1acb      	subs	r3, r1, r3
 8002cc6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002cca:	d30a      	bcc.n	8002ce2 <slave_disc+0x52>
					  flag=1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e007      	b.n	8002ce2 <slave_disc+0x52>
				  }
			}
				  else
					  FLAG_ARRAY_Temp[i] = HAL_GetTick();
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	18d4      	adds	r4, r2, r3
 8002cda:	f001 fcfb 	bl	80046d4 <HAL_GetTick>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < 8*TOTAL_IC; i++){
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <slave_disc+0xc0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dbd9      	blt.n	8002ca8 <slave_disc+0x18>


		  }
		for(int i = 0; i < 4*TOTAL_IC; i++){
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e01f      	b.n	8002d3a <slave_disc+0xaa>
					if(PEC_SLAVES_Volt[i] == 1){
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10e      	bne.n	8002d24 <slave_disc+0x94>
						  if((HAL_GetTick() - FLAG_ARRAY_Volt[i]) >= SLAVE_DISC_TIME){
 8002d06:	f001 fce5 	bl	80046d4 <HAL_GetTick>
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	1acb      	subs	r3, r1, r3
 8002d18:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d1c:	d30a      	bcc.n	8002d34 <slave_disc+0xa4>
							  flag = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e007      	b.n	8002d34 <slave_disc+0xa4>
						  }
					}
					else
						FLAG_ARRAY_Volt[i] = HAL_GetTick();
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	18d4      	adds	r4, r2, r3
 8002d2c:	f001 fcd2 	bl	80046d4 <HAL_GetTick>
 8002d30:	4603      	mov	r3, r0
 8002d32:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < 4*TOTAL_IC; i++){
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3301      	adds	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <slave_disc+0xc0>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbd9      	blt.n	8002cfa <slave_disc+0x6a>
				  }
		return flag;
 8002d46:	7ffb      	ldrb	r3, [r7, #31]
	}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3724      	adds	r7, #36	@ 0x24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	24000000 	.word	0x24000000

08002d54 <current_error_eval>:

	uint8_t current_error_eval(uint8_t *current_error, uint32_t *FLAG_ARRAY){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
			if(current_error[0] == 1){
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10a      	bne.n	8002d7c <current_error_eval+0x28>
				  if((HAL_GetTick() - FLAG_ARRAY[0]) >= SLAVE_DISC_TIME){
 8002d66:	f001 fcb5 	bl	80046d4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d76:	d308      	bcc.n	8002d8a <current_error_eval+0x36>
					  return 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e007      	b.n	8002d8c <current_error_eval+0x38>
				  }
			}
				  else
				  {
					  FLAG_ARRAY[0] = HAL_GetTick();
 8002d7c:	f001 fcaa 	bl	80046d4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	601a      	str	r2, [r3, #0]
					  return 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <current_error_eval+0x38>
				  }
			return 0;
 8002d8a:	2300      	movs	r3, #0
	}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b0a5      	sub	sp, #148	@ 0x94
 8002d98:	af24      	add	r7, sp, #144	@ 0x90
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002d9a:	f001 f8e1 	bl	8003f60 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d9e:	f001 fc13 	bl	80045c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002da2:	f000 fabd 	bl	8003320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002da6:	f000 fca5 	bl	80036f4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8002daa:	f000 fb37 	bl	800341c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002dae:	f000 fb9b 	bl	80034e8 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8002db2:	f000 fbff 	bl	80035b4 <MX_SPI1_Init>
  MX_TIM13_Init();
 8002db6:	f000 fc55 	bl	8003664 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002dba:	f000 fc77 	bl	80036ac <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	   FDCAN_Config();
 8002dbe:	f000 fd5f 	bl	8003880 <FDCAN_Config>

  	   if(HAL_TIM_Base_Start_IT(&htim14) != HAL_OK) Error_Handler();			//TIMER 14 Initialization
 8002dc2:	486a      	ldr	r0, [pc, #424]	@ (8002f6c <main+0x1d8>)
 8002dc4:	f007 f936 	bl	800a034 <HAL_TIM_Base_Start_IT>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <main+0x3e>
 8002dce:	f001 f8f3 	bl	8003fb8 <Error_Handler>
  	   if(HAL_TIM_Base_Start_IT(&htim13) != HAL_OK) Error_Handler();			//TIMER 13 Initialization
 8002dd2:	4867      	ldr	r0, [pc, #412]	@ (8002f70 <main+0x1dc>)
 8002dd4:	f007 f92e 	bl	800a034 <HAL_TIM_Base_Start_IT>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <main+0x4e>
 8002dde:	f001 f8eb 	bl	8003fb8 <Error_Handler>

  	   HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);		//Close BMS relay
 8002de2:	2200      	movs	r2, #0
 8002de4:	2108      	movs	r1, #8
 8002de6:	4863      	ldr	r0, [pc, #396]	@ (8002f74 <main+0x1e0>)
 8002de8:	f003 fc02 	bl	80065f0 <HAL_GPIO_WritePin>

  	   outputCS(1);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7fd fd5b 	bl	80008a8 <outputCS>
	   while (1)
	   {
//		   Flash_Write_Data(0x080A0000,&num1, 1);
//		   Flash_Read_Data(0x080A0000, &num2, 1);

	 	  if((BLC == 1 && BLC_COUNTER >=3000)){ //ATURA PER LLEGIR O LLEGEIX NORMAL
 8002df2:	4b61      	ldr	r3, [pc, #388]	@ (8002f78 <main+0x1e4>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d14b      	bne.n	8002e92 <main+0xfe>
 8002dfa:	4b60      	ldr	r3, [pc, #384]	@ (8002f7c <main+0x1e8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d945      	bls.n	8002e92 <main+0xfe>
	 	  		  	  ltc6811_wrpwm(hspi1);
 8002e06:	4c5e      	ldr	r4, [pc, #376]	@ (8002f80 <main+0x1ec>)
 8002e08:	4668      	mov	r0, sp
 8002e0a:	f104 0310 	add.w	r3, r4, #16
 8002e0e:	2278      	movs	r2, #120	@ 0x78
 8002e10:	4619      	mov	r1, r3
 8002e12:	f007 fba7 	bl	800a564 <memcpy>
 8002e16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e1a:	f7fd ff51 	bl	8000cc0 <ltc6811_wrpwm>
	 	  		  //Voltage & Temperature lectures--------------------------------------------------------------------
	 	  		  	  ltc6811_rav(hspi1, PEC_SLAVES_Volt, voltatjes, GPIOx, CH, 0, min_volt);	//Voltage lectures
 8002e1e:	4b59      	ldr	r3, [pc, #356]	@ (8002f84 <main+0x1f0>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4a59      	ldr	r2, [pc, #356]	@ (8002f88 <main+0x1f4>)
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	4959      	ldr	r1, [pc, #356]	@ (8002f8c <main+0x1f8>)
 8002e28:	8809      	ldrh	r1, [r1, #0]
 8002e2a:	4c55      	ldr	r4, [pc, #340]	@ (8002f80 <main+0x1ec>)
 8002e2c:	9123      	str	r1, [sp, #140]	@ 0x8c
 8002e2e:	2100      	movs	r1, #0
 8002e30:	9122      	str	r1, [sp, #136]	@ 0x88
 8002e32:	9221      	str	r2, [sp, #132]	@ 0x84
 8002e34:	9320      	str	r3, [sp, #128]	@ 0x80
 8002e36:	4b56      	ldr	r3, [pc, #344]	@ (8002f90 <main+0x1fc>)
 8002e38:	931f      	str	r3, [sp, #124]	@ 0x7c
 8002e3a:	4b56      	ldr	r3, [pc, #344]	@ (8002f94 <main+0x200>)
 8002e3c:	931e      	str	r3, [sp, #120]	@ 0x78
 8002e3e:	4668      	mov	r0, sp
 8002e40:	f104 0310 	add.w	r3, r4, #16
 8002e44:	2278      	movs	r2, #120	@ 0x78
 8002e46:	4619      	mov	r1, r3
 8002e48:	f007 fb8c 	bl	800a564 <memcpy>
 8002e4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e50:	f7fe f9b2 	bl	80011b8 <ltc6811_rav>
	 	  		  //Voltage & Temperature lectures--------------------------------------------------------------------
	 	  		  	   ltc6811_rat(hspi1, PEC_SLAVES_Temp, voltatjes, temperatures, 0, min_volt); //Temperature lectures
 8002e54:	4b4d      	ldr	r3, [pc, #308]	@ (8002f8c <main+0x1f8>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	4c49      	ldr	r4, [pc, #292]	@ (8002f80 <main+0x1ec>)
 8002e5a:	9322      	str	r3, [sp, #136]	@ 0x88
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9321      	str	r3, [sp, #132]	@ 0x84
 8002e60:	4b4d      	ldr	r3, [pc, #308]	@ (8002f98 <main+0x204>)
 8002e62:	9320      	str	r3, [sp, #128]	@ 0x80
 8002e64:	4b4a      	ldr	r3, [pc, #296]	@ (8002f90 <main+0x1fc>)
 8002e66:	931f      	str	r3, [sp, #124]	@ 0x7c
 8002e68:	4b4c      	ldr	r3, [pc, #304]	@ (8002f9c <main+0x208>)
 8002e6a:	931e      	str	r3, [sp, #120]	@ 0x78
 8002e6c:	4668      	mov	r0, sp
 8002e6e:	f104 0310 	add.w	r3, r4, #16
 8002e72:	2278      	movs	r2, #120	@ 0x78
 8002e74:	4619      	mov	r1, r3
 8002e76:	f007 fb75 	bl	800a564 <memcpy>
 8002e7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e7e:	f7fe fb75 	bl	800156c <ltc6811_rat>
	 	  		  	   Conv_Temp(temperatures, temperatures_conv);									//Temperature lectures conversion
 8002e82:	4947      	ldr	r1, [pc, #284]	@ (8002fa0 <main+0x20c>)
 8002e84:	4844      	ldr	r0, [pc, #272]	@ (8002f98 <main+0x204>)
 8002e86:	f7ff fc81 	bl	800278c <Conv_Temp>
	 	  		  	   BLC_COUNTER = 0;
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f7c <main+0x1e8>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e063      	b.n	8002f5a <main+0x1c6>
	 	  	  }

	 	  	  else if(BLC == 1 && BLC_COUNTER <3000){ //BALANCEIG
 8002e92:	4b39      	ldr	r3, [pc, #228]	@ (8002f78 <main+0x1e4>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d122      	bne.n	8002ee0 <main+0x14c>
 8002e9a:	4b38      	ldr	r3, [pc, #224]	@ (8002f7c <main+0x1e8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d81c      	bhi.n	8002ee0 <main+0x14c>
	 	  		  	   ltc6811_wrcfg(hspi1, GPIOx, voltatjes, BLC, min_volt);
 8002ea6:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <main+0x1f0>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	4a33      	ldr	r2, [pc, #204]	@ (8002f78 <main+0x1e4>)
 8002eac:	7812      	ldrb	r2, [r2, #0]
 8002eae:	4937      	ldr	r1, [pc, #220]	@ (8002f8c <main+0x1f8>)
 8002eb0:	8809      	ldrh	r1, [r1, #0]
 8002eb2:	4c33      	ldr	r4, [pc, #204]	@ (8002f80 <main+0x1ec>)
 8002eb4:	9121      	str	r1, [sp, #132]	@ 0x84
 8002eb6:	9220      	str	r2, [sp, #128]	@ 0x80
 8002eb8:	4a35      	ldr	r2, [pc, #212]	@ (8002f90 <main+0x1fc>)
 8002eba:	921f      	str	r2, [sp, #124]	@ 0x7c
 8002ebc:	931e      	str	r3, [sp, #120]	@ 0x78
 8002ebe:	4668      	mov	r0, sp
 8002ec0:	f104 0310 	add.w	r3, r4, #16
 8002ec4:	2278      	movs	r2, #120	@ 0x78
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f007 fb4c 	bl	800a564 <memcpy>
 8002ecc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ed0:	f7fd fd5c 	bl	800098c <ltc6811_wrcfg>
	 	  		  	   BLC_COUNTER++;
 8002ed4:	4b29      	ldr	r3, [pc, #164]	@ (8002f7c <main+0x1e8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a28      	ldr	r2, [pc, #160]	@ (8002f7c <main+0x1e8>)
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e03c      	b.n	8002f5a <main+0x1c6>
	 	  	  }else if((BLC == 0)){
 8002ee0:	4b25      	ldr	r3, [pc, #148]	@ (8002f78 <main+0x1e4>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d138      	bne.n	8002f5a <main+0x1c6>
	 	  		  //Voltage & Temperature lectures--------------------------------------------------------------------
	 	  		  	  ltc6811_rav(hspi1, PEC_SLAVES_Volt, voltatjes, GPIOx, CH, 0, min_volt);	//Voltage lectures
 8002ee8:	4b26      	ldr	r3, [pc, #152]	@ (8002f84 <main+0x1f0>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	4a26      	ldr	r2, [pc, #152]	@ (8002f88 <main+0x1f4>)
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	4926      	ldr	r1, [pc, #152]	@ (8002f8c <main+0x1f8>)
 8002ef2:	8809      	ldrh	r1, [r1, #0]
 8002ef4:	4c22      	ldr	r4, [pc, #136]	@ (8002f80 <main+0x1ec>)
 8002ef6:	9123      	str	r1, [sp, #140]	@ 0x8c
 8002ef8:	2100      	movs	r1, #0
 8002efa:	9122      	str	r1, [sp, #136]	@ 0x88
 8002efc:	9221      	str	r2, [sp, #132]	@ 0x84
 8002efe:	9320      	str	r3, [sp, #128]	@ 0x80
 8002f00:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <main+0x1fc>)
 8002f02:	931f      	str	r3, [sp, #124]	@ 0x7c
 8002f04:	4b23      	ldr	r3, [pc, #140]	@ (8002f94 <main+0x200>)
 8002f06:	931e      	str	r3, [sp, #120]	@ 0x78
 8002f08:	4668      	mov	r0, sp
 8002f0a:	f104 0310 	add.w	r3, r4, #16
 8002f0e:	2278      	movs	r2, #120	@ 0x78
 8002f10:	4619      	mov	r1, r3
 8002f12:	f007 fb27 	bl	800a564 <memcpy>
 8002f16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f1a:	f7fe f94d 	bl	80011b8 <ltc6811_rav>
	 	  		  //Voltage & Temperature lectures--------------------------------------------------------------------
	 	  		  	   ltc6811_rat(hspi1, PEC_SLAVES_Temp, voltatjes, temperatures, 0, min_volt); //Temperature lectures
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <main+0x1f8>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	4c17      	ldr	r4, [pc, #92]	@ (8002f80 <main+0x1ec>)
 8002f24:	9322      	str	r3, [sp, #136]	@ 0x88
 8002f26:	2300      	movs	r3, #0
 8002f28:	9321      	str	r3, [sp, #132]	@ 0x84
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <main+0x204>)
 8002f2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8002f2e:	4b18      	ldr	r3, [pc, #96]	@ (8002f90 <main+0x1fc>)
 8002f30:	931f      	str	r3, [sp, #124]	@ 0x7c
 8002f32:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <main+0x208>)
 8002f34:	931e      	str	r3, [sp, #120]	@ 0x78
 8002f36:	4668      	mov	r0, sp
 8002f38:	f104 0310 	add.w	r3, r4, #16
 8002f3c:	2278      	movs	r2, #120	@ 0x78
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f007 fb10 	bl	800a564 <memcpy>
 8002f44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f48:	f7fe fb10 	bl	800156c <ltc6811_rat>
	 	  		  	   Conv_Temp(temperatures, temperatures_conv);									//Temperature lectures conversion
 8002f4c:	4914      	ldr	r1, [pc, #80]	@ (8002fa0 <main+0x20c>)
 8002f4e:	4812      	ldr	r0, [pc, #72]	@ (8002f98 <main+0x204>)
 8002f50:	f7ff fc1c 	bl	800278c <Conv_Temp>
	 	  		  	   BLC_COUNTER = 0;
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <main+0x1e8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
	 	  	  }

	 	  	   switch(BMS_SELECTION){
 8002f5a:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <main+0x210>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d022      	beq.n	8002fa8 <main+0x214>
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	f000 80ed 	beq.w	8003142 <main+0x3ae>
 8002f68:	e162      	b.n	8003230 <main+0x49c>
 8002f6a:	bf00      	nop
 8002f6c:	2400072c 	.word	0x2400072c
 8002f70:	240006e0 	.word	0x240006e0
 8002f74:	58021000 	.word	0x58021000
 8002f78:	240017de 	.word	0x240017de
 8002f7c:	240018b4 	.word	0x240018b4
 8002f80:	24000658 	.word	0x24000658
 8002f84:	24000215 	.word	0x24000215
 8002f88:	240017dd 	.word	0x240017dd
 8002f8c:	24000b78 	.word	0x24000b78
 8002f90:	2400082c 	.word	0x2400082c
 8002f94:	240007f0 	.word	0x240007f0
 8002f98:	24000994 	.word	0x24000994
 8002f9c:	24000778 	.word	0x24000778
 8002fa0:	24000a84 	.word	0x24000a84
 8002fa4:	240018b1 	.word	0x240018b1
	 	  	   case 0:
	 	  		   //Calculation of min, max, avg volt, avg temp & current-----------------------------------------------------------
	 	  		   	   min_volt = Min_Volt(voltatjes);									//Minimum voltage calculation
 8002fa8:	48af      	ldr	r0, [pc, #700]	@ (8003268 <main+0x4d4>)
 8002faa:	f7ff f9ff 	bl	80023ac <Min_Volt>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4bae      	ldr	r3, [pc, #696]	@ (800326c <main+0x4d8>)
 8002fb4:	801a      	strh	r2, [r3, #0]
	 	  		   	   max_volt = Max_Volt(voltatjes);									//Maximum voltage calculation
 8002fb6:	48ac      	ldr	r0, [pc, #688]	@ (8003268 <main+0x4d4>)
 8002fb8:	f7ff fa78 	bl	80024ac <Max_Volt>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4bab      	ldr	r3, [pc, #684]	@ (8003270 <main+0x4dc>)
 8002fc2:	801a      	strh	r2, [r3, #0]
	 	  		   	   sum_volt = Sum_Volt(voltatjes);									//Sum of all voltages
 8002fc4:	48a8      	ldr	r0, [pc, #672]	@ (8003268 <main+0x4d4>)
 8002fc6:	f7ff fb2f 	bl	8002628 <Sum_Volt>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4aa9      	ldr	r2, [pc, #676]	@ (8003274 <main+0x4e0>)
 8002fce:	6013      	str	r3, [r2, #0]
	 	  		   	   mean_volt = Mean_Volt(voltatjes);								//Mean voltage calculation
 8002fd0:	48a5      	ldr	r0, [pc, #660]	@ (8003268 <main+0x4d4>)
 8002fd2:	f7ff faeb 	bl	80025ac <Mean_Volt>
 8002fd6:	eef0 7a40 	vmov.f32	s15, s0
 8002fda:	4ba7      	ldr	r3, [pc, #668]	@ (8003278 <main+0x4e4>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
	 	  		   	   min_temp = Min_Temp(temperatures_conv);							//Minimum temperature calculation
 8002fe0:	48a6      	ldr	r0, [pc, #664]	@ (800327c <main+0x4e8>)
 8002fe2:	f7ff fb4b 	bl	800267c <Min_Temp>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4ba5      	ldr	r3, [pc, #660]	@ (8003280 <main+0x4ec>)
 8002fec:	801a      	strh	r2, [r3, #0]
	 	  		   	   max_temp = Max_Temp(temperatures_conv);							//Maximum temperature calculation
 8002fee:	48a3      	ldr	r0, [pc, #652]	@ (800327c <main+0x4e8>)
 8002ff0:	f7ff fb70 	bl	80026d4 <Max_Temp>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4ba2      	ldr	r3, [pc, #648]	@ (8003284 <main+0x4f0>)
 8002ffa:	801a      	strh	r2, [r3, #0]
	 	  		   	   mean_temp = Mean_Temp(temperatures_conv);						//Mean temperature calculation
 8002ffc:	489f      	ldr	r0, [pc, #636]	@ (800327c <main+0x4e8>)
 8002ffe:	f7ff fb95 	bl	800272c <Mean_Temp>
 8003002:	eef0 7a40 	vmov.f32	s15, s0
 8003006:	4ba0      	ldr	r3, [pc, #640]	@ (8003288 <main+0x4f4>)
 8003008:	edc3 7a00 	vstr	s15, [r3]

	 	  		   //Errors evaluation---------------------------------------------------------------------------------------
	 	  		   	   UT_FLAG = UT_EVAL(temperatures_conv, ut_flag_arr);				//Under voltage error evaluation
 800300c:	499f      	ldr	r1, [pc, #636]	@ (800328c <main+0x4f8>)
 800300e:	489b      	ldr	r0, [pc, #620]	@ (800327c <main+0x4e8>)
 8003010:	f7ff fdaa 	bl	8002b68 <UT_EVAL>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	4b9d      	ldr	r3, [pc, #628]	@ (8003290 <main+0x4fc>)
 800301a:	701a      	strb	r2, [r3, #0]
	 	  		   	   OV_FLAG = OV_EVAL(voltatjes, ov_flag_arr);						//Over voltage error evaluation
 800301c:	499d      	ldr	r1, [pc, #628]	@ (8003294 <main+0x500>)
 800301e:	4892      	ldr	r0, [pc, #584]	@ (8003268 <main+0x4d4>)
 8003020:	f7ff fc66 	bl	80028f0 <OV_EVAL>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	4b9b      	ldr	r3, [pc, #620]	@ (8003298 <main+0x504>)
 800302a:	701a      	strb	r2, [r3, #0]
	 	  		   	   UV_FLAG = UV_EVAL(voltatjes, uv_flag_arr);						//Under voltage error evaluation
 800302c:	499b      	ldr	r1, [pc, #620]	@ (800329c <main+0x508>)
 800302e:	488e      	ldr	r0, [pc, #568]	@ (8003268 <main+0x4d4>)
 8003030:	f7ff fcba 	bl	80029a8 <UV_EVAL>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	4b99      	ldr	r3, [pc, #612]	@ (80032a0 <main+0x50c>)
 800303a:	701a      	strb	r2, [r3, #0]
	 	  		   	   OT_FLAG = OT_EVAL(temperatures_conv, ot_flag_arr);				//Over temperature error evaluation
 800303c:	4999      	ldr	r1, [pc, #612]	@ (80032a4 <main+0x510>)
 800303e:	488f      	ldr	r0, [pc, #572]	@ (800327c <main+0x4e8>)
 8003040:	f7ff fd60 	bl	8002b04 <OT_EVAL>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b97      	ldr	r3, [pc, #604]	@ (80032a8 <main+0x514>)
 800304a:	701a      	strb	r2, [r3, #0]
	 	  		   	   OC_FLAG = detection_BMSerror_OverCurrent(Current, oc_flag_arr);	//Over current error evaluation
 800304c:	4b97      	ldr	r3, [pc, #604]	@ (80032ac <main+0x518>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4997      	ldr	r1, [pc, #604]	@ (80032b0 <main+0x51c>)
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fdf4 	bl	8002c40 <detection_BMSerror_OverCurrent>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	4b95      	ldr	r3, [pc, #596]	@ (80032b4 <main+0x520>)
 800305e:	701a      	strb	r2, [r3, #0]
	 	  		   	   ETAS_SYNC_FLAG = ETAS_SYNC_EVAL(etas_flag);						//Evaluate if the ETAS is alive
 8003060:	4895      	ldr	r0, [pc, #596]	@ (80032b8 <main+0x524>)
 8003062:	f7ff fdb2 	bl	8002bca <ETAS_SYNC_EVAL>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	4b94      	ldr	r3, [pc, #592]	@ (80032bc <main+0x528>)
 800306c:	701a      	strb	r2, [r3, #0]
	 	  		   	   CURR_SYNC_FLAG = CURR_SYNC_EVAL(current_sync_flag);				//Evaluate if the current sensor is alive
 800306e:	4894      	ldr	r0, [pc, #592]	@ (80032c0 <main+0x52c>)
 8003070:	f7ff fdbe 	bl	8002bf0 <CURR_SYNC_EVAL>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	4b92      	ldr	r3, [pc, #584]	@ (80032c4 <main+0x530>)
 800307a:	701a      	strb	r2, [r3, #0]
	 	  		   	   CAN_BALANCING_FLAG = BALANCING_SYNC_EVAL(can_balancing_flag);	//Evaluate the forced balancing sent by CANoe
 800307c:	4892      	ldr	r0, [pc, #584]	@ (80032c8 <main+0x534>)
 800307e:	f7ff fdcb 	bl	8002c18 <BALANCING_SYNC_EVAL>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	4b91      	ldr	r3, [pc, #580]	@ (80032cc <main+0x538>)
 8003088:	701a      	strb	r2, [r3, #0]
	 	  		   	   SD_FLAG = slave_disc(PEC_SLAVES_Volt, PEC_SLAVES_Temp, sd_flag_arr_volt, sd_flag_arr_temp); //Evaluate the slave disconnection
 800308a:	4b91      	ldr	r3, [pc, #580]	@ (80032d0 <main+0x53c>)
 800308c:	4a91      	ldr	r2, [pc, #580]	@ (80032d4 <main+0x540>)
 800308e:	4992      	ldr	r1, [pc, #584]	@ (80032d8 <main+0x544>)
 8003090:	4892      	ldr	r0, [pc, #584]	@ (80032dc <main+0x548>)
 8003092:	f7ff fdfd 	bl	8002c90 <slave_disc>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	4b91      	ldr	r3, [pc, #580]	@ (80032e0 <main+0x54c>)
 800309c:	701a      	strb	r2, [r3, #0]
	 	  		   	   CE_FLAG = current_error_eval(current_error, current_flag);		//Evaluate if there is a current error for more than 500ms
 800309e:	4991      	ldr	r1, [pc, #580]	@ (80032e4 <main+0x550>)
 80030a0:	4891      	ldr	r0, [pc, #580]	@ (80032e8 <main+0x554>)
 80030a2:	f7ff fe57 	bl	8002d54 <current_error_eval>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b90      	ldr	r3, [pc, #576]	@ (80032ec <main+0x558>)
 80030ac:	701a      	strb	r2, [r3, #0]
	 	  		   	   if(HAL_GetTick()>4500){
 80030ae:	f001 fb11 	bl	80046d4 <HAL_GetTick>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f241 1294 	movw	r2, #4500	@ 0x1194
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d922      	bls.n	8003102 <main+0x36e>
	 	  		   	   if(((OV_FLAG == 1) || (UT_FLAG == 1) || (UV_FLAG == 1) || (OT_FLAG == 1) || (OC_FLAG == 1) ||(SD_FLAG == 1)||(CE_FLAG == 1)||(CURR_SYNC_FLAG == 1)) ) BMS_OK = 0;	}//If there is any error, BMS_OK = 0
 80030bc:	4b76      	ldr	r3, [pc, #472]	@ (8003298 <main+0x504>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d01b      	beq.n	80030fc <main+0x368>
 80030c4:	4b72      	ldr	r3, [pc, #456]	@ (8003290 <main+0x4fc>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d017      	beq.n	80030fc <main+0x368>
 80030cc:	4b74      	ldr	r3, [pc, #464]	@ (80032a0 <main+0x50c>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d013      	beq.n	80030fc <main+0x368>
 80030d4:	4b74      	ldr	r3, [pc, #464]	@ (80032a8 <main+0x514>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d00f      	beq.n	80030fc <main+0x368>
 80030dc:	4b75      	ldr	r3, [pc, #468]	@ (80032b4 <main+0x520>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d00b      	beq.n	80030fc <main+0x368>
 80030e4:	4b7e      	ldr	r3, [pc, #504]	@ (80032e0 <main+0x54c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d007      	beq.n	80030fc <main+0x368>
 80030ec:	4b7f      	ldr	r3, [pc, #508]	@ (80032ec <main+0x558>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d003      	beq.n	80030fc <main+0x368>
 80030f4:	4b73      	ldr	r3, [pc, #460]	@ (80032c4 <main+0x530>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d102      	bne.n	8003102 <main+0x36e>
 80030fc:	4b7c      	ldr	r3, [pc, #496]	@ (80032f0 <main+0x55c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
	 	  			   BMS_MONITORING = HAL_GPIO_ReadPin(BMS_MONITORING_PORT, BMS_MONITORING_PIN)^1 ;	//Evaluate the BMS_Monitoring pin
 8003102:	2104      	movs	r1, #4
 8003104:	487b      	ldr	r0, [pc, #492]	@ (80032f4 <main+0x560>)
 8003106:	f003 fa5b 	bl	80065c0 <HAL_GPIO_ReadPin>
 800310a:	4603      	mov	r3, r0
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b79      	ldr	r3, [pc, #484]	@ (80032f8 <main+0x564>)
 8003114:	701a      	strb	r2, [r3, #0]
	 	  			   IMD_MONITORING = HAL_GPIO_ReadPin(IMD_MONITORING_PORT, IMD_MONITORING_PIN)^1;	//Evaluate the IMD_Monitoring pin
 8003116:	2140      	movs	r1, #64	@ 0x40
 8003118:	4876      	ldr	r0, [pc, #472]	@ (80032f4 <main+0x560>)
 800311a:	f003 fa51 	bl	80065c0 <HAL_GPIO_ReadPin>
 800311e:	4603      	mov	r3, r0
 8003120:	f083 0301 	eor.w	r3, r3, #1
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4b75      	ldr	r3, [pc, #468]	@ (80032fc <main+0x568>)
 8003128:	701a      	strb	r2, [r3, #0]
	 	  			   SDC_MONITORING = HAL_GPIO_ReadPin(SDC_MONITORING_PORT, SDC_MONITORING_PIN)^1;	//Evaluate the SDC_Monitoring pin
 800312a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800312e:	4874      	ldr	r0, [pc, #464]	@ (8003300 <main+0x56c>)
 8003130:	f003 fa46 	bl	80065c0 <HAL_GPIO_ReadPin>
 8003134:	4603      	mov	r3, r0
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b71      	ldr	r3, [pc, #452]	@ (8003304 <main+0x570>)
 800313e:	701a      	strb	r2, [r3, #0]
	 	  		  break;
 8003140:	e076      	b.n	8003230 <main+0x49c>
	 	  	   case 1:
	 	  		   //Calculation of min, max, avg volt, avg temp & current-----------------------------------------------------------
	 	  		   	   min_volt = 36000;
 8003142:	4b4a      	ldr	r3, [pc, #296]	@ (800326c <main+0x4d8>)
 8003144:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003148:	801a      	strh	r2, [r3, #0]
	 	  		   	   max_volt = 39500;
 800314a:	4b49      	ldr	r3, [pc, #292]	@ (8003270 <main+0x4dc>)
 800314c:	f649 224c 	movw	r2, #39500	@ 0x9a4c
 8003150:	801a      	strh	r2, [r3, #0]
	 	  		   	   sum_volt = 5880000;
 8003152:	4b48      	ldr	r3, [pc, #288]	@ (8003274 <main+0x4e0>)
 8003154:	4a6c      	ldr	r2, [pc, #432]	@ (8003308 <main+0x574>)
 8003156:	601a      	str	r2, [r3, #0]
	 	  		   	   mean_volt = 37500;
 8003158:	4b47      	ldr	r3, [pc, #284]	@ (8003278 <main+0x4e4>)
 800315a:	4a6c      	ldr	r2, [pc, #432]	@ (800330c <main+0x578>)
 800315c:	601a      	str	r2, [r3, #0]
	 	  		   	   min_temp = 252;
 800315e:	4b48      	ldr	r3, [pc, #288]	@ (8003280 <main+0x4ec>)
 8003160:	22fc      	movs	r2, #252	@ 0xfc
 8003162:	801a      	strh	r2, [r3, #0]
	 	  		   	   max_temp = 263;
 8003164:	4b47      	ldr	r3, [pc, #284]	@ (8003284 <main+0x4f0>)
 8003166:	f240 1207 	movw	r2, #263	@ 0x107
 800316a:	801a      	strh	r2, [r3, #0]
	 	  		   	   mean_temp = 256;
 800316c:	4b46      	ldr	r3, [pc, #280]	@ (8003288 <main+0x4f4>)
 800316e:	f04f 4287 	mov.w	r2, #1132462080	@ 0x43800000
 8003172:	601a      	str	r2, [r3, #0]

	 	  		   //Errors evaluation---------------------------------------------------------------------------------------
	 	  		   	   UT_FLAG = 0;
 8003174:	4b46      	ldr	r3, [pc, #280]	@ (8003290 <main+0x4fc>)
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
	 	  		   	   OV_FLAG = 0;
 800317a:	4b47      	ldr	r3, [pc, #284]	@ (8003298 <main+0x504>)
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
	 	  		   	   UV_FLAG = 0;
 8003180:	4b47      	ldr	r3, [pc, #284]	@ (80032a0 <main+0x50c>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
	 	  		   	   OT_FLAG = 0;
 8003186:	4b48      	ldr	r3, [pc, #288]	@ (80032a8 <main+0x514>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
	 	  		   	   OC_FLAG = 0;
 800318c:	4b49      	ldr	r3, [pc, #292]	@ (80032b4 <main+0x520>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
	 	  		   	   ETAS_SYNC_FLAG = ETAS_SYNC_EVAL(etas_flag);						//Evaluate if the ETAS is alive
 8003192:	4849      	ldr	r0, [pc, #292]	@ (80032b8 <main+0x524>)
 8003194:	f7ff fd19 	bl	8002bca <ETAS_SYNC_EVAL>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <main+0x528>)
 800319e:	701a      	strb	r2, [r3, #0]
	 	  		   	   CURR_SYNC_FLAG = CURR_SYNC_EVAL(current_sync_flag);				//Evaluate if the current sensor is alive
 80031a0:	4847      	ldr	r0, [pc, #284]	@ (80032c0 <main+0x52c>)
 80031a2:	f7ff fd25 	bl	8002bf0 <CURR_SYNC_EVAL>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b46      	ldr	r3, [pc, #280]	@ (80032c4 <main+0x530>)
 80031ac:	701a      	strb	r2, [r3, #0]
	 	  		   	   CAN_BALANCING_FLAG = BALANCING_SYNC_EVAL(can_balancing_flag);	//Evaluate the forced balancing sent by CANoe
 80031ae:	4846      	ldr	r0, [pc, #280]	@ (80032c8 <main+0x534>)
 80031b0:	f7ff fd32 	bl	8002c18 <BALANCING_SYNC_EVAL>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b44      	ldr	r3, [pc, #272]	@ (80032cc <main+0x538>)
 80031ba:	701a      	strb	r2, [r3, #0]
	 	  		   	   SD_FLAG = slave_disc(PEC_SLAVES_Volt, PEC_SLAVES_Temp, sd_flag_arr_volt, sd_flag_arr_temp); //Evaluate the slave disconnection
 80031bc:	4b44      	ldr	r3, [pc, #272]	@ (80032d0 <main+0x53c>)
 80031be:	4a45      	ldr	r2, [pc, #276]	@ (80032d4 <main+0x540>)
 80031c0:	4945      	ldr	r1, [pc, #276]	@ (80032d8 <main+0x544>)
 80031c2:	4846      	ldr	r0, [pc, #280]	@ (80032dc <main+0x548>)
 80031c4:	f7ff fd64 	bl	8002c90 <slave_disc>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b44      	ldr	r3, [pc, #272]	@ (80032e0 <main+0x54c>)
 80031ce:	701a      	strb	r2, [r3, #0]
	 	  		   	   CE_FLAG = current_error_eval(current_error, current_flag);		//Evaluate if there is a current error for more than 500ms
 80031d0:	4944      	ldr	r1, [pc, #272]	@ (80032e4 <main+0x550>)
 80031d2:	4845      	ldr	r0, [pc, #276]	@ (80032e8 <main+0x554>)
 80031d4:	f7ff fdbe 	bl	8002d54 <current_error_eval>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	4b43      	ldr	r3, [pc, #268]	@ (80032ec <main+0x558>)
 80031de:	701a      	strb	r2, [r3, #0]
	 	  		   	 BMS_MONITORING = HAL_GPIO_ReadPin(BMS_MONITORING_PORT, BMS_MONITORING_PIN)^1 ;	//Evaluate the BMS_Monitoring pin
 80031e0:	2104      	movs	r1, #4
 80031e2:	4844      	ldr	r0, [pc, #272]	@ (80032f4 <main+0x560>)
 80031e4:	f003 f9ec 	bl	80065c0 <HAL_GPIO_ReadPin>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	4b41      	ldr	r3, [pc, #260]	@ (80032f8 <main+0x564>)
 80031f2:	701a      	strb	r2, [r3, #0]
	 	  		   		  			   IMD_MONITORING = HAL_GPIO_ReadPin(IMD_MONITORING_PORT, IMD_MONITORING_PIN)^1;	//Evaluate the IMD_Monitoring pin
 80031f4:	2140      	movs	r1, #64	@ 0x40
 80031f6:	483f      	ldr	r0, [pc, #252]	@ (80032f4 <main+0x560>)
 80031f8:	f003 f9e2 	bl	80065c0 <HAL_GPIO_ReadPin>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2da      	uxtb	r2, r3
 8003204:	4b3d      	ldr	r3, [pc, #244]	@ (80032fc <main+0x568>)
 8003206:	701a      	strb	r2, [r3, #0]
	 	  		   		  			   SDC_MONITORING = HAL_GPIO_ReadPin(SDC_MONITORING_PORT, SDC_MONITORING_PIN)^1;	//Evaluate the SDC_Monitoring pin
 8003208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800320c:	483c      	ldr	r0, [pc, #240]	@ (8003300 <main+0x56c>)
 800320e:	f003 f9d7 	bl	80065c0 <HAL_GPIO_ReadPin>
 8003212:	4603      	mov	r3, r0
 8003214:	f083 0301 	eor.w	r3, r3, #1
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4b3a      	ldr	r3, [pc, #232]	@ (8003304 <main+0x570>)
 800321c:	701a      	strb	r2, [r3, #0]
	 	  			   BMS_OK = 1;
 800321e:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <main+0x55c>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
	 	  			  HAL_GPIO_WritePin(BMS_RELAY_PORT, BMS_RELAY_PIN, GPIO_PIN_RESET);		//Close BMS relay
 8003224:	2200      	movs	r2, #0
 8003226:	2108      	movs	r1, #8
 8003228:	4832      	ldr	r0, [pc, #200]	@ (80032f4 <main+0x560>)
 800322a:	f003 f9e1 	bl	80065f0 <HAL_GPIO_WritePin>
	 	  		   break;
 800322e:	bf00      	nop
	 	  	   }
	 	  //State Machine Evaluation------------------------------------------------------------------------------
	 	  	   CURR_STATE = StateMachineSteps(CURR_STATE, AIRs_request, BMS_OK, ETAS_SYNC_FLAG);	//Evaluate which is the current state of the charging process
 8003230:	4b37      	ldr	r3, [pc, #220]	@ (8003310 <main+0x57c>)
 8003232:	7818      	ldrb	r0, [r3, #0]
 8003234:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <main+0x580>)
 8003236:	7819      	ldrb	r1, [r3, #0]
 8003238:	4b2d      	ldr	r3, [pc, #180]	@ (80032f0 <main+0x55c>)
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <main+0x528>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	f7fd f84a 	bl	80002d8 <StateMachineSteps>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <main+0x57c>)
 800324a:	701a      	strb	r2, [r3, #0]
	 	  	   BLC = StateMachineActuation(CURR_STATE, Airs_State, CAN_BALANCING_FLAG);
 800324c:	4b30      	ldr	r3, [pc, #192]	@ (8003310 <main+0x57c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4a1e      	ldr	r2, [pc, #120]	@ (80032cc <main+0x538>)
 8003252:	7812      	ldrb	r2, [r2, #0]
 8003254:	4930      	ldr	r1, [pc, #192]	@ (8003318 <main+0x584>)
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd f8e8 	bl	800042c <StateMachineActuation>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	4b2e      	ldr	r3, [pc, #184]	@ (800331c <main+0x588>)
 8003262:	701a      	strb	r2, [r3, #0]
	 	  if((BLC == 1 && BLC_COUNTER >=3000)){ //ATURA PER LLEGIR O LLEGEIX NORMAL
 8003264:	e5c5      	b.n	8002df2 <main+0x5e>
 8003266:	bf00      	nop
 8003268:	2400082c 	.word	0x2400082c
 800326c:	24000b78 	.word	0x24000b78
 8003270:	24000b7a 	.word	0x24000b7a
 8003274:	24000b7c 	.word	0x24000b7c
 8003278:	24000b88 	.word	0x24000b88
 800327c:	24000a84 	.word	0x24000a84
 8003280:	24000b80 	.word	0x24000b80
 8003284:	24000b82 	.word	0x24000b82
 8003288:	24000b84 	.word	0x24000b84
 800328c:	2400130c 	.word	0x2400130c
 8003290:	24000210 	.word	0x24000210
 8003294:	24000b8c 	.word	0x24000b8c
 8003298:	2400020d 	.word	0x2400020d
 800329c:	24000e5c 	.word	0x24000e5c
 80032a0:	2400020e 	.word	0x2400020e
 80032a4:	2400112c 	.word	0x2400112c
 80032a8:	2400020f 	.word	0x2400020f
 80032ac:	24000b74 	.word	0x24000b74
 80032b0:	240017bc 	.word	0x240017bc
 80032b4:	24000211 	.word	0x24000211
 80032b8:	240017c0 	.word	0x240017c0
 80032bc:	240017d4 	.word	0x240017d4
 80032c0:	240017c8 	.word	0x240017c8
 80032c4:	24000214 	.word	0x24000214
 80032c8:	240017cc 	.word	0x240017cc
 80032cc:	240017d5 	.word	0x240017d5
 80032d0:	240015dc 	.word	0x240015dc
 80032d4:	240014ec 	.word	0x240014ec
 80032d8:	24000778 	.word	0x24000778
 80032dc:	240007f0 	.word	0x240007f0
 80032e0:	24000212 	.word	0x24000212
 80032e4:	240017c4 	.word	0x240017c4
 80032e8:	2400020c 	.word	0x2400020c
 80032ec:	24000213 	.word	0x24000213
 80032f0:	24000208 	.word	0x24000208
 80032f4:	58021000 	.word	0x58021000
 80032f8:	240017d1 	.word	0x240017d1
 80032fc:	240017d2 	.word	0x240017d2
 8003300:	58020800 	.word	0x58020800
 8003304:	240017d3 	.word	0x240017d3
 8003308:	0059b8c0 	.word	0x0059b8c0
 800330c:	47127c00 	.word	0x47127c00
 8003310:	24000216 	.word	0x24000216
 8003314:	240017df 	.word	0x240017df
 8003318:	240017d8 	.word	0x240017d8
 800331c:	240017de 	.word	0x240017de

08003320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b09c      	sub	sp, #112	@ 0x70
 8003324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800332a:	224c      	movs	r2, #76	@ 0x4c
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f007 f8ec 	bl	800a50c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	2220      	movs	r2, #32
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f007 f8e6 	bl	800a50c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003340:	2002      	movs	r0, #2
 8003342:	f003 f96f 	bl	8006624 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003346:	2300      	movs	r3, #0
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	4b32      	ldr	r3, [pc, #200]	@ (8003414 <SystemClock_Config+0xf4>)
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	4a31      	ldr	r2, [pc, #196]	@ (8003414 <SystemClock_Config+0xf4>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003356:	4b2f      	ldr	r3, [pc, #188]	@ (8003414 <SystemClock_Config+0xf4>)
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <SystemClock_Config+0xf8>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003368:	4a2b      	ldr	r2, [pc, #172]	@ (8003418 <SystemClock_Config+0xf8>)
 800336a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336e:	6193      	str	r3, [r2, #24]
 8003370:	4b29      	ldr	r3, [pc, #164]	@ (8003418 <SystemClock_Config+0xf8>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800337c:	bf00      	nop
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <SystemClock_Config+0xf8>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338a:	d1f8      	bne.n	800337e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800338c:	2302      	movs	r3, #2
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003390:	2301      	movs	r3, #1
 8003392:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003394:	2340      	movs	r3, #64	@ 0x40
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003398:	2302      	movs	r3, #2
 800339a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800339c:	2300      	movs	r3, #0
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80033a0:	2304      	movs	r3, #4
 80033a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80033a4:	2309      	movs	r3, #9
 80033a6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80033a8:	2302      	movs	r3, #2
 80033aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80033ac:	2303      	movs	r3, #3
 80033ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033b0:	2302      	movs	r3, #2
 80033b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80033b4:	230c      	movs	r3, #12
 80033b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80033b8:	2302      	movs	r3, #2
 80033ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80033bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 f966 	bl	8006698 <HAL_RCC_OscConfig>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80033d2:	f000 fdf1 	bl	8003fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033d6:	233f      	movs	r3, #63	@ 0x3f
 80033d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033da:	2303      	movs	r3, #3
 80033dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fda6 	bl	8006f4c <HAL_RCC_ClockConfig>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003406:	f000 fdd7 	bl	8003fb8 <Error_Handler>
  }
}
 800340a:	bf00      	nop
 800340c:	3770      	adds	r7, #112	@ 0x70
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	58000400 	.word	0x58000400
 8003418:	58024800 	.word	0x58024800

0800341c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003420:	4b2f      	ldr	r3, [pc, #188]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003422:	4a30      	ldr	r2, [pc, #192]	@ (80034e4 <MX_FDCAN1_Init+0xc8>)
 8003424:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8003426:	4b2e      	ldr	r3, [pc, #184]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003428:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800342c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800342e:	4b2c      	ldr	r3, [pc, #176]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003430:	2200      	movs	r2, #0
 8003432:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003434:	4b2a      	ldr	r3, [pc, #168]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003436:	2201      	movs	r2, #1
 8003438:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800343a:	4b29      	ldr	r3, [pc, #164]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 800343c:	2200      	movs	r2, #0
 800343e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003440:	4b27      	ldr	r3, [pc, #156]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003442:	2200      	movs	r2, #0
 8003444:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003446:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003448:	2201      	movs	r2, #1
 800344a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 800344c:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 800344e:	220d      	movs	r2, #13
 8003450:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8003452:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003454:	2256      	movs	r2, #86	@ 0x56
 8003456:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 8003458:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 800345a:	220d      	movs	r2, #13
 800345c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003460:	2219      	movs	r2, #25
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003464:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003466:	2201      	movs	r2, #1
 8003468:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800346a:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 800346c:	2202      	movs	r2, #2
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003472:	2201      	movs	r2, #1
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003476:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003478:	2200      	movs	r2, #0
 800347a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800347c:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 800347e:	2201      	movs	r2, #1
 8003480:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003482:	4b17      	ldr	r3, [pc, #92]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003484:	2200      	movs	r2, #0
 8003486:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8003488:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 800348a:	2201      	movs	r2, #1
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800348e:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003490:	2204      	movs	r2, #4
 8003492:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003494:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 8003496:	2200      	movs	r2, #0
 8003498:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800349a:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 800349c:	2204      	movs	r2, #4
 800349e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80034a6:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 80034a8:	2204      	movs	r2, #4
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80034ac:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80034b2:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80034b8:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80034be:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 80034c6:	2204      	movs	r2, #4
 80034c8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80034ca:	4805      	ldr	r0, [pc, #20]	@ (80034e0 <MX_FDCAN1_Init+0xc4>)
 80034cc:	f001 fd0c 	bl	8004ee8 <HAL_FDCAN_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80034d6:	f000 fd6f 	bl	8003fb8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	24000518 	.word	0x24000518
 80034e4:	4000a000 	.word	0x4000a000

080034e8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80034ec:	4b2f      	ldr	r3, [pc, #188]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 80034ee:	4a30      	ldr	r2, [pc, #192]	@ (80035b0 <MX_FDCAN2_Init+0xc8>)
 80034f0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80034f2:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 80034f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034f8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80034fa:	4b2c      	ldr	r3, [pc, #176]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8003500:	4b2a      	ldr	r3, [pc, #168]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003502:	2201      	movs	r2, #1
 8003504:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003506:	4b29      	ldr	r3, [pc, #164]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003508:	2200      	movs	r2, #0
 800350a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800350c:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800350e:	2200      	movs	r2, #0
 8003510:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003512:	4b26      	ldr	r3, [pc, #152]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003514:	2201      	movs	r2, #1
 8003516:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 8003518:	4b24      	ldr	r3, [pc, #144]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800351a:	220d      	movs	r2, #13
 800351c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 800351e:	4b23      	ldr	r3, [pc, #140]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003520:	2256      	movs	r2, #86	@ 0x56
 8003522:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 8003524:	4b21      	ldr	r3, [pc, #132]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003526:	220d      	movs	r2, #13
 8003528:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 800352a:	4b20      	ldr	r3, [pc, #128]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800352c:	2219      	movs	r2, #25
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003530:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003532:	2201      	movs	r2, #1
 8003534:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 8003536:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003538:	2202      	movs	r2, #2
 800353a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800353e:	2201      	movs	r2, #1
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 9;
 8003542:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003544:	2209      	movs	r2, #9
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8003548:	4b18      	ldr	r3, [pc, #96]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800354a:	2200      	movs	r2, #0
 800354c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800354e:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003550:	2200      	movs	r2, #0
 8003552:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
 8003554:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003556:	2201      	movs	r2, #1
 8003558:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800355a:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800355c:	2204      	movs	r2, #4
 800355e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8003560:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003562:	2200      	movs	r2, #0
 8003564:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003566:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003568:	2204      	movs	r2, #4
 800356a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800356c:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800356e:	2200      	movs	r2, #0
 8003570:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003572:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003574:	2204      	movs	r2, #4
 8003576:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 4;
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800357a:	2204      	movs	r2, #4
 800357c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 4;
 800357e:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003580:	2204      	movs	r2, #4
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 4;
 8003584:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003586:	2204      	movs	r2, #4
 8003588:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800358a:	4b08      	ldr	r3, [pc, #32]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 800358c:	2200      	movs	r2, #0
 800358e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003590:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003592:	2204      	movs	r2, #4
 8003594:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003596:	4805      	ldr	r0, [pc, #20]	@ (80035ac <MX_FDCAN2_Init+0xc4>)
 8003598:	f001 fca6 	bl	8004ee8 <HAL_FDCAN_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 80035a2:	f000 fd09 	bl	8003fb8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	240005b8 	.word	0x240005b8
 80035b0:	4000a400 	.word	0x4000a400

080035b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035ba:	4a29      	ldr	r2, [pc, #164]	@ (8003660 <MX_SPI1_Init+0xac>)
 80035bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035be:	4b27      	ldr	r3, [pc, #156]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035c0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80035c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035c6:	4b25      	ldr	r3, [pc, #148]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035cc:	4b23      	ldr	r3, [pc, #140]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035ce:	2207      	movs	r2, #7
 80035d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80035d2:	4b22      	ldr	r3, [pc, #136]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035da:	4b20      	ldr	r3, [pc, #128]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035e2:	4b1e      	ldr	r3, [pc, #120]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80035ea:	4b1c      	ldr	r3, [pc, #112]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035ec:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80035f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035f2:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035f8:	4b18      	ldr	r3, [pc, #96]	@ (800365c <MX_SPI1_Init+0xa8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035fe:	4b17      	ldr	r3, [pc, #92]	@ (800365c <MX_SPI1_Init+0xa8>)
 8003600:	2200      	movs	r2, #0
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003604:	4b15      	ldr	r3, [pc, #84]	@ (800365c <MX_SPI1_Init+0xa8>)
 8003606:	2200      	movs	r2, #0
 8003608:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800360a:	4b14      	ldr	r3, [pc, #80]	@ (800365c <MX_SPI1_Init+0xa8>)
 800360c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003610:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003612:	4b12      	ldr	r3, [pc, #72]	@ (800365c <MX_SPI1_Init+0xa8>)
 8003614:	2200      	movs	r2, #0
 8003616:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003618:	4b10      	ldr	r3, [pc, #64]	@ (800365c <MX_SPI1_Init+0xa8>)
 800361a:	2200      	movs	r2, #0
 800361c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800361e:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <MX_SPI1_Init+0xa8>)
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003624:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <MX_SPI1_Init+0xa8>)
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800362a:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <MX_SPI1_Init+0xa8>)
 800362c:	2200      	movs	r2, #0
 800362e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003630:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <MX_SPI1_Init+0xa8>)
 8003632:	2200      	movs	r2, #0
 8003634:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003636:	4b09      	ldr	r3, [pc, #36]	@ (800365c <MX_SPI1_Init+0xa8>)
 8003638:	2200      	movs	r2, #0
 800363a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800363c:	4b07      	ldr	r3, [pc, #28]	@ (800365c <MX_SPI1_Init+0xa8>)
 800363e:	2200      	movs	r2, #0
 8003640:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <MX_SPI1_Init+0xa8>)
 8003644:	2200      	movs	r2, #0
 8003646:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003648:	4804      	ldr	r0, [pc, #16]	@ (800365c <MX_SPI1_Init+0xa8>)
 800364a:	f005 fb4d 	bl	8008ce8 <HAL_SPI_Init>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8003654:	f000 fcb0 	bl	8003fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003658:	bf00      	nop
 800365a:	bd80      	pop	{r7, pc}
 800365c:	24000658 	.word	0x24000658
 8003660:	40013000 	.word	0x40013000

08003664 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003668:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <MX_TIM13_Init+0x40>)
 800366a:	4a0f      	ldr	r2, [pc, #60]	@ (80036a8 <MX_TIM13_Init+0x44>)
 800366c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 75-1;
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <MX_TIM13_Init+0x40>)
 8003670:	224a      	movs	r2, #74	@ 0x4a
 8003672:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003674:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <MX_TIM13_Init+0x40>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 800367a:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <MX_TIM13_Init+0x40>)
 800367c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003680:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003682:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <MX_TIM13_Init+0x40>)
 8003684:	2200      	movs	r2, #0
 8003686:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003688:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <MX_TIM13_Init+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800368e:	4805      	ldr	r0, [pc, #20]	@ (80036a4 <MX_TIM13_Init+0x40>)
 8003690:	f006 fc79 	bl	8009f86 <HAL_TIM_Base_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800369a:	f000 fc8d 	bl	8003fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	240006e0 	.word	0x240006e0
 80036a8:	40001c00 	.word	0x40001c00

080036ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80036b0:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <MX_TIM14_Init+0x40>)
 80036b2:	4a0f      	ldr	r2, [pc, #60]	@ (80036f0 <MX_TIM14_Init+0x44>)
 80036b4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10-1;
 80036b6:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <MX_TIM14_Init+0x40>)
 80036b8:	2209      	movs	r2, #9
 80036ba:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036bc:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <MX_TIM14_Init+0x40>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000;
 80036c2:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <MX_TIM14_Init+0x40>)
 80036c4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80036c8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ca:	4b08      	ldr	r3, [pc, #32]	@ (80036ec <MX_TIM14_Init+0x40>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d0:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <MX_TIM14_Init+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80036d6:	4805      	ldr	r0, [pc, #20]	@ (80036ec <MX_TIM14_Init+0x40>)
 80036d8:	f006 fc55 	bl	8009f86 <HAL_TIM_Base_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80036e2:	f000 fc69 	bl	8003fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2400072c 	.word	0x2400072c
 80036f0:	40002000 	.word	0x40002000

080036f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08c      	sub	sp, #48	@ 0x30
 80036f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fa:	f107 031c 	add.w	r3, r7, #28
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800370a:	4b58      	ldr	r3, [pc, #352]	@ (800386c <MX_GPIO_Init+0x178>)
 800370c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003710:	4a56      	ldr	r2, [pc, #344]	@ (800386c <MX_GPIO_Init+0x178>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800371a:	4b54      	ldr	r3, [pc, #336]	@ (800386c <MX_GPIO_Init+0x178>)
 800371c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003728:	4b50      	ldr	r3, [pc, #320]	@ (800386c <MX_GPIO_Init+0x178>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800372e:	4a4f      	ldr	r2, [pc, #316]	@ (800386c <MX_GPIO_Init+0x178>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003738:	4b4c      	ldr	r3, [pc, #304]	@ (800386c <MX_GPIO_Init+0x178>)
 800373a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003746:	4b49      	ldr	r3, [pc, #292]	@ (800386c <MX_GPIO_Init+0x178>)
 8003748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800374c:	4a47      	ldr	r2, [pc, #284]	@ (800386c <MX_GPIO_Init+0x178>)
 800374e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003756:	4b45      	ldr	r3, [pc, #276]	@ (800386c <MX_GPIO_Init+0x178>)
 8003758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800375c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003764:	4b41      	ldr	r3, [pc, #260]	@ (800386c <MX_GPIO_Init+0x178>)
 8003766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800376a:	4a40      	ldr	r2, [pc, #256]	@ (800386c <MX_GPIO_Init+0x178>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003774:	4b3d      	ldr	r3, [pc, #244]	@ (800386c <MX_GPIO_Init+0x178>)
 8003776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003782:	4b3a      	ldr	r3, [pc, #232]	@ (800386c <MX_GPIO_Init+0x178>)
 8003784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003788:	4a38      	ldr	r2, [pc, #224]	@ (800386c <MX_GPIO_Init+0x178>)
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003792:	4b36      	ldr	r3, [pc, #216]	@ (800386c <MX_GPIO_Init+0x178>)
 8003794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037a0:	4b32      	ldr	r3, [pc, #200]	@ (800386c <MX_GPIO_Init+0x178>)
 80037a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037a6:	4a31      	ldr	r2, [pc, #196]	@ (800386c <MX_GPIO_Init+0x178>)
 80037a8:	f043 0308 	orr.w	r3, r3, #8
 80037ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037b0:	4b2e      	ldr	r3, [pc, #184]	@ (800386c <MX_GPIO_Init+0x178>)
 80037b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_RELAY_GPIO_Port, BMS_RELAY_Pin, GPIO_PIN_RESET);
 80037be:	2200      	movs	r2, #0
 80037c0:	2108      	movs	r1, #8
 80037c2:	482b      	ldr	r0, [pc, #172]	@ (8003870 <MX_GPIO_Init+0x17c>)
 80037c4:	f002 ff14 	bl	80065f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 80037c8:	2200      	movs	r2, #0
 80037ca:	21ec      	movs	r1, #236	@ 0xec
 80037cc:	4829      	ldr	r0, [pc, #164]	@ (8003874 <MX_GPIO_Init+0x180>)
 80037ce:	f002 ff0f 	bl	80065f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2140      	movs	r1, #64	@ 0x40
 80037d6:	4828      	ldr	r0, [pc, #160]	@ (8003878 <MX_GPIO_Init+0x184>)
 80037d8:	f002 ff0a 	bl	80065f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BMS_MONITORING_Pin IMD_MONITORING_Pin */
  GPIO_InitStruct.Pin = BMS_MONITORING_Pin|IMD_MONITORING_Pin;
 80037dc:	2344      	movs	r3, #68	@ 0x44
 80037de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037e8:	f107 031c 	add.w	r3, r7, #28
 80037ec:	4619      	mov	r1, r3
 80037ee:	4820      	ldr	r0, [pc, #128]	@ (8003870 <MX_GPIO_Init+0x17c>)
 80037f0:	f002 fd36 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_RELAY_Pin */
  GPIO_InitStruct.Pin = BMS_RELAY_Pin;
 80037f4:	2308      	movs	r3, #8
 80037f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f8:	2301      	movs	r3, #1
 80037fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003800:	2300      	movs	r3, #0
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BMS_RELAY_GPIO_Port, &GPIO_InitStruct);
 8003804:	f107 031c 	add.w	r3, r7, #28
 8003808:	4619      	mov	r1, r3
 800380a:	4819      	ldr	r0, [pc, #100]	@ (8003870 <MX_GPIO_Init+0x17c>)
 800380c:	f002 fd28 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDC_Pin */
  GPIO_InitStruct.Pin = SDC_Pin;
 8003810:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003816:	2300      	movs	r3, #0
 8003818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDC_GPIO_Port, &GPIO_InitStruct);
 800381e:	f107 031c 	add.w	r3, r7, #28
 8003822:	4619      	mov	r1, r3
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <MX_GPIO_Init+0x188>)
 8003826:	f002 fd1b 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin PA3 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = USER_LED_Pin|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800382a:	23ec      	movs	r3, #236	@ 0xec
 800382c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382e:	2301      	movs	r3, #1
 8003830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	f107 031c 	add.w	r3, r7, #28
 800383e:	4619      	mov	r1, r3
 8003840:	480c      	ldr	r0, [pc, #48]	@ (8003874 <MX_GPIO_Init+0x180>)
 8003842:	f002 fd0d 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003846:	2340      	movs	r3, #64	@ 0x40
 8003848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800384a:	2301      	movs	r3, #1
 800384c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384e:	2301      	movs	r3, #1
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003856:	f107 031c 	add.w	r3, r7, #28
 800385a:	4619      	mov	r1, r3
 800385c:	4806      	ldr	r0, [pc, #24]	@ (8003878 <MX_GPIO_Init+0x184>)
 800385e:	f002 fcff 	bl	8006260 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003862:	bf00      	nop
 8003864:	3730      	adds	r7, #48	@ 0x30
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	58024400 	.word	0x58024400
 8003870:	58021000 	.word	0x58021000
 8003874:	58020000 	.word	0x58020000
 8003878:	58020400 	.word	0x58020400
 800387c:	58020800 	.word	0x58020800

08003880 <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b090      	sub	sp, #64	@ 0x40
 8003884:	af00      	add	r7, sp, #0
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8003886:	2300      	movs	r3, #0
 8003888:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterIndex = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800388e:	2300      	movs	r3, #0
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003892:	2301      	movs	r3, #1
 8003894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sFilterConfig.FilterID1 = 0x00;
 8003896:	2300      	movs	r3, #0
 8003898:	633b      	str	r3, [r7, #48]	@ 0x30
  sFilterConfig.FilterID2 = 0x00;
 800389a:	2300      	movs	r3, #0
 800389c:	637b      	str	r3, [r7, #52]	@ 0x34
  sFilterConfig.RxBufferIndex = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80038a2:	f107 0320 	add.w	r3, r7, #32
 80038a6:	4619      	mov	r1, r3
 80038a8:	4824      	ldr	r0, [pc, #144]	@ (800393c <FDCAN_Config+0xbc>)
 80038aa:	f001 fcfb 	bl	80052a4 <HAL_FDCAN_ConfigFilter>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <FDCAN_Config+0x38>
  {
    Error_Handler();
 80038b4:	f000 fb80 	bl	8003fb8 <Error_Handler>
  }

  FDCAN_FilterTypeDef sFilterConfig2;

  sFilterConfig2.IdType = FDCAN_STANDARD_ID;
 80038b8:	2300      	movs	r3, #0
 80038ba:	603b      	str	r3, [r7, #0]
  sFilterConfig2.FilterIndex = 1;
 80038bc:	2301      	movs	r3, #1
 80038be:	607b      	str	r3, [r7, #4]
  sFilterConfig2.FilterType = FDCAN_FILTER_RANGE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]
  sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80038c4:	2301      	movs	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
  sFilterConfig2.FilterID1 = 0x00;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
  sFilterConfig2.FilterID2 = 0x1E0;
 80038cc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80038d0:	617b      	str	r3, [r7, #20]
  sFilterConfig2.RxBufferIndex = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig2) != HAL_OK)
 80038d6:	463b      	mov	r3, r7
 80038d8:	4619      	mov	r1, r3
 80038da:	4819      	ldr	r0, [pc, #100]	@ (8003940 <FDCAN_Config+0xc0>)
 80038dc:	f001 fce2 	bl	80052a4 <HAL_FDCAN_ConfigFilter>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <FDCAN_Config+0x6a>
  {
    /* Filter configuration Error */
    Error_Handler();
 80038e6:	f000 fb67 	bl	8003fb8 <Error_Handler>
  }
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80038ea:	4814      	ldr	r0, [pc, #80]	@ (800393c <FDCAN_Config+0xbc>)
 80038ec:	f001 fd50 	bl	8005390 <HAL_FDCAN_Start>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <FDCAN_Config+0x7a>
  {
   Error_Handler();
 80038f6:	f000 fb5f 	bl	8003fb8 <Error_Handler>
  }

  // STart FDCAN2
  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 80038fa:	4811      	ldr	r0, [pc, #68]	@ (8003940 <FDCAN_Config+0xc0>)
 80038fc:	f001 fd48 	bl	8005390 <HAL_FDCAN_Start>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <FDCAN_Config+0x8a>
  {
   Error_Handler();
 8003906:	f000 fb57 	bl	8003fb8 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800390a:	2200      	movs	r2, #0
 800390c:	2101      	movs	r1, #1
 800390e:	480b      	ldr	r0, [pc, #44]	@ (800393c <FDCAN_Config+0xbc>)
 8003910:	f001 ff30 	bl	8005774 <HAL_FDCAN_ActivateNotification>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <FDCAN_Config+0x9e>
  {
    /* Notification Error */
    Error_Handler();
 800391a:	f000 fb4d 	bl	8003fb8 <Error_Handler>
  }

  // Activate the notification for new data in FIFO1 for FDCAN2
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800391e:	2200      	movs	r2, #0
 8003920:	2101      	movs	r1, #1
 8003922:	4807      	ldr	r0, [pc, #28]	@ (8003940 <FDCAN_Config+0xc0>)
 8003924:	f001 ff26 	bl	8005774 <HAL_FDCAN_ActivateNotification>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <FDCAN_Config+0xb2>
  {
    /* Notification Error */
    Error_Handler();
 800392e:	f000 fb43 	bl	8003fb8 <Error_Handler>
  }
}
 8003932:	bf00      	nop
 8003934:	3740      	adds	r7, #64	@ 0x40
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	24000518 	.word	0x24000518
 8003940:	240005b8 	.word	0x240005b8

08003944 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d04f      	beq.n	80039f8 <HAL_FDCAN_RxFifo0Callback+0xb4>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003958:	4b29      	ldr	r3, [pc, #164]	@ (8003a00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800395a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 800395c:	2140      	movs	r1, #64	@ 0x40
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f001 fd9c 	bl	800549c <HAL_FDCAN_GetRxMessage>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    Error_Handler();
 800396a:	f000 fb25 	bl	8003fb8 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800396e:	2200      	movs	r2, #0
 8003970:	2101      	movs	r1, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f001 fefe 	bl	8005774 <HAL_FDCAN_ActivateNotification>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      Error_Handler();
 800397e:	f000 fb1b 	bl	8003fb8 <Error_Handler>
    }
        if(RxHeader.Identifier == ETAS_SYNC){					//If the received message through CAN 1 has the ETAS_SYNC COBID
 8003982:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b80      	cmp	r3, #128	@ 0x80
 8003988:	d107      	bne.n	800399a <HAL_FDCAN_RxFifo0Callback+0x56>
      	   msg = 1;									//Start the CAN transmitting function
 800398a:	4b1f      	ldr	r3, [pc, #124]	@ (8003a08 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
      	   etas_flag[0] = HAL_GetTick();			//Actualize the etas_flag with the current tick
 8003990:	f000 fea0 	bl	80046d4 <HAL_GetTick>
 8003994:	4603      	mov	r3, r0
 8003996:	4a1d      	ldr	r2, [pc, #116]	@ (8003a0c <HAL_FDCAN_RxFifo0Callback+0xc8>)
 8003998:	6013      	str	r3, [r2, #0]
        }
        if(RxHeader.Identifier == AIRS_REQUEST){			//If the received message through CAN 1 has the AIRS_REQUEST COBID
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b82      	cmp	r3, #130	@ 0x82
 80039a0:	d103      	bne.n	80039aa <HAL_FDCAN_RxFifo0Callback+0x66>
      	   AIRs_request = RxData[0];				//Save the RxData which contains the charging state number
 80039a2:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 80039a8:	701a      	strb	r2, [r3, #0]
        }

        if(RxHeader.Identifier == CURRENT){				//If the received message through CAN 1 has the CURRENT COBID
 80039aa:	4b16      	ldr	r3, [pc, #88]	@ (8003a04 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 80039b2:	d10e      	bne.n	80039d2 <HAL_FDCAN_RxFifo0Callback+0x8e>
      	   Current = Curr_EVAL(RxData);				//Extract the current value sent by CAN 1
 80039b4:	4812      	ldr	r0, [pc, #72]	@ (8003a00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80039b6:	f7fe ff79 	bl	80028ac <Curr_EVAL>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4a15      	ldr	r2, [pc, #84]	@ (8003a14 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 80039be:	6013      	str	r3, [r2, #0]
      	   current_sync_flag[0]=HAL_GetTick();		//Actualize the current_sync_flag with the current tick
 80039c0:	f000 fe88 	bl	80046d4 <HAL_GetTick>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4a14      	ldr	r2, [pc, #80]	@ (8003a18 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80039c8:	6013      	str	r3, [r2, #0]
      	   current_error[0] = RxData[4];			//Saves the error data byte of the current value
 80039ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80039cc:	791a      	ldrb	r2, [r3, #4]
 80039ce:	4b13      	ldr	r3, [pc, #76]	@ (8003a1c <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80039d0:	701a      	strb	r2, [r3, #0]
        }

        if(RxHeader.Identifier == DISPLAY_SYNC){			//If the received message through CAN 2 has the DISPLAY_SYNC COBID
 80039d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80039da:	d102      	bne.n	80039e2 <HAL_FDCAN_RxFifo0Callback+0x9e>
      	   RX_VOLT_TEMP = 1;						//Set the RX_VOLT_TEMP to 1 to start the Voltages and Temperatures transmission through CAN 2
 80039dc:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
        }
        if(RxHeader.Identifier == CAN_FORCED_BALANCING){	//If the received message through CAN 2 has the CAN_FORCED_BALANCING COBID
 80039e2:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d104      	bne.n	80039f8 <HAL_FDCAN_RxFifo0Callback+0xb4>
      	   can_balancing_flag[0] = HAL_GetTick();	//Actualize the can_balancing_flag with the current tick
 80039ee:	f000 fe71 	bl	80046d4 <HAL_GetTick>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003a24 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 80039f6:	6013      	str	r3, [r2, #0]
//               }


  }

}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	2400182c 	.word	0x2400182c
 8003a04:	240017e0 	.word	0x240017e0
 8003a08:	240017dc 	.word	0x240017dc
 8003a0c:	240017c0 	.word	0x240017c0
 8003a10:	240017df 	.word	0x240017df
 8003a14:	24000b74 	.word	0x24000b74
 8003a18:	240017c8 	.word	0x240017c8
 8003a1c:	2400020c 	.word	0x2400020c
 8003a20:	240018b0 	.word	0x240018b0
 8003a24:	240017cc 	.word	0x240017cc

08003a28 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8003a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	b0d1      	sub	sp, #324	@ 0x144
 8003a2e:	af3c      	add	r7, sp, #240	@ 0xf0
 8003a30:	63f8      	str	r0, [r7, #60]	@ 0x3c
   if (htim->Instance == TIM14)					//When the TIMER 14 has a pulse, the function moves 1 iteration forward, up to 5 times
 8003a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5a      	ldr	r2, [pc, #360]	@ (8003ba0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f040 80f5 	bne.w	8003c28 <HAL_TIM_PeriodElapsedCallback+0x200>
   {
  	 switch(msg){								//Depending on the msg state
 8003a3e:	4b59      	ldr	r3, [pc, #356]	@ (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	f200 80ef 	bhi.w	8003c28 <HAL_TIM_PeriodElapsedCallback+0x200>
 8003a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a50 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a65 	.word	0x08003a65
 8003a54:	08003ab9 	.word	0x08003ab9
 8003a58:	08003b19 	.word	0x08003b19
 8003a5c:	08003b53 	.word	0x08003b53
 8003a60:	08003bd5 	.word	0x08003bd5
   case 1:
  	 message_cantx_Voltage_State(hfdcan1, min_volt, max_volt, sum_volt, TxData, TxHeader); 		//Send the min, max and mean voltage values through CAN 1
 8003a64:	4b50      	ldr	r3, [pc, #320]	@ (8003ba8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a6a:	4b50      	ldr	r3, [pc, #320]	@ (8003bac <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a70:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a76:	4e4f      	ldr	r6, [pc, #316]	@ (8003bb4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003a78:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003a7a:	ac28      	add	r4, sp, #160	@ 0xa0
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a86:	682b      	ldr	r3, [r5, #0]
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003a8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003a8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a90:	9126      	str	r1, [sp, #152]	@ 0x98
 8003a92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a94:	9225      	str	r2, [sp, #148]	@ 0x94
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	9324      	str	r3, [sp, #144]	@ 0x90
 8003a9a:	4668      	mov	r0, sp
 8003a9c:	f106 0310 	add.w	r3, r6, #16
 8003aa0:	2290      	movs	r2, #144	@ 0x90
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f006 fd5e 	bl	800a564 <memcpy>
 8003aa8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003aac:	f7fe fb41 	bl	8002132 <message_cantx_Voltage_State>
  	 msg=2;																						//Set the msg state to 2
 8003ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	701a      	strb	r2, [r3, #0]
  	 break;
 8003ab6:	e0b7      	b.n	8003c28 <HAL_TIM_PeriodElapsedCallback+0x200>
   case 2:
  	 message_cantx_Temperature_State(hfdcan1, min_temp, max_temp, mean_temp, TxData, TxHeader);	//Send the min, max and mean temperature values through CAN 1
 8003ab8:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003abe:	4b41      	ldr	r3, [pc, #260]	@ (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003ac0:	881a      	ldrh	r2, [r3, #0]
 8003ac2:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ac4:	4b40      	ldr	r3, [pc, #256]	@ (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003ac6:	edd3 7a00 	vldr	s15, [r3]
 8003aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ace:	ee17 3a90 	vmov	r3, s15
 8003ad2:	b299      	uxth	r1, r3
 8003ad4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ad6:	4e37      	ldr	r6, [pc, #220]	@ (8003bb4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003ad8:	4b37      	ldr	r3, [pc, #220]	@ (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003ada:	ac28      	add	r4, sp, #160	@ 0xa0
 8003adc:	461d      	mov	r5, r3
 8003ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae6:	682b      	ldr	r3, [r5, #0]
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	4b34      	ldr	r3, [pc, #208]	@ (8003bbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003aec:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003aee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003af0:	9126      	str	r1, [sp, #152]	@ 0x98
 8003af2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003af4:	9225      	str	r2, [sp, #148]	@ 0x94
 8003af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af8:	9324      	str	r3, [sp, #144]	@ 0x90
 8003afa:	4668      	mov	r0, sp
 8003afc:	f106 0310 	add.w	r3, r6, #16
 8003b00:	2290      	movs	r2, #144	@ 0x90
 8003b02:	4619      	mov	r1, r3
 8003b04:	f006 fd2e 	bl	800a564 <memcpy>
 8003b08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003b0c:	f7fe fab1 	bl	8002072 <message_cantx_Temperature_State>
  	 msg=3;																						//Set the msg state to 3
 8003b10:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003b12:	2203      	movs	r2, #3
 8003b14:	701a      	strb	r2, [r3, #0]
  	 break;
 8003b16:	e087      	b.n	8003c28 <HAL_TIM_PeriodElapsedCallback+0x200>
   case 3:
  	 message_cantx_AIR_State(hfdcan1,Airs_State, TxData, TxHeader);								//Send the Airs_State array through CAN 1, contains the current state of each AIR
 8003b18:	4e26      	ldr	r6, [pc, #152]	@ (8003bb4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003b1a:	4b27      	ldr	r3, [pc, #156]	@ (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003b1c:	ac26      	add	r4, sp, #152	@ 0x98
 8003b1e:	461d      	mov	r5, r3
 8003b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	4b23      	ldr	r3, [pc, #140]	@ (8003bbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003b2e:	9325      	str	r3, [sp, #148]	@ 0x94
 8003b30:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003b32:	9324      	str	r3, [sp, #144]	@ 0x90
 8003b34:	4668      	mov	r0, sp
 8003b36:	f106 0310 	add.w	r3, r6, #16
 8003b3a:	2290      	movs	r2, #144	@ 0x90
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f006 fd11 	bl	800a564 <memcpy>
 8003b42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003b46:	f7fe fa5d 	bl	8002004 <message_cantx_AIR_State>
  	 msg=4;																						//Set the msg state to 4
 8003b4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	701a      	strb	r2, [r3, #0]
  	 break;
 8003b50:	e06a      	b.n	8003c28 <HAL_TIM_PeriodElapsedCallback+0x200>
   case 4:
  	 message_cantx_Keep_Alive(hfdcan1, KEEP_ALIVE, TxData, TxHeader);								//Send the Keep_Alive of the master
 8003b52:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b58:	4e16      	ldr	r6, [pc, #88]	@ (8003bb4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003b5a:	4b17      	ldr	r3, [pc, #92]	@ (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003b5c:	ac26      	add	r4, sp, #152	@ 0x98
 8003b5e:	461d      	mov	r5, r3
 8003b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	6023      	str	r3, [r4, #0]
 8003b6c:	4b13      	ldr	r3, [pc, #76]	@ (8003bbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003b6e:	9325      	str	r3, [sp, #148]	@ 0x94
 8003b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b72:	9324      	str	r3, [sp, #144]	@ 0x90
 8003b74:	4668      	mov	r0, sp
 8003b76:	f106 0310 	add.w	r3, r6, #16
 8003b7a:	2290      	movs	r2, #144	@ 0x90
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f006 fcf1 	bl	800a564 <memcpy>
 8003b82:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003b86:	f7fe fb3b 	bl	8002200 <message_cantx_Keep_Alive>
  	 KEEP_ALIVE++;																				//Sum 1 to the Keep_alive value
 8003b8a:	4b11      	ldr	r3, [pc, #68]	@ (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003b94:	701a      	strb	r2, [r3, #0]
  	 msg=5;																						//Set the msg state to 5
 8003b96:	4b03      	ldr	r3, [pc, #12]	@ (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003b98:	2205      	movs	r2, #5
 8003b9a:	701a      	strb	r2, [r3, #0]
  	 break;
 8003b9c:	e044      	b.n	8003c28 <HAL_TIM_PeriodElapsedCallback+0x200>
 8003b9e:	bf00      	nop
 8003ba0:	40002000 	.word	0x40002000
 8003ba4:	240017dc 	.word	0x240017dc
 8003ba8:	24000b78 	.word	0x24000b78
 8003bac:	24000b7a 	.word	0x24000b7a
 8003bb0:	24000b7c 	.word	0x24000b7c
 8003bb4:	24000518 	.word	0x24000518
 8003bb8:	24001808 	.word	0x24001808
 8003bbc:	2400184c 	.word	0x2400184c
 8003bc0:	24000b80 	.word	0x24000b80
 8003bc4:	24000b82 	.word	0x24000b82
 8003bc8:	24000b84 	.word	0x24000b84
 8003bcc:	240017d8 	.word	0x240017d8
 8003bd0:	240017d0 	.word	0x240017d0
   case 5:
  	 message_cantx_Shutdown(hfdcan1, SDC_MONITORING, BMS_MONITORING, IMD_MONITORING, TxData, TxHeader);	//Send the SDC, BMS, IMD monitoring through CAN 1
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bda:	4b7e      	ldr	r3, [pc, #504]	@ (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	637a      	str	r2, [r7, #52]	@ 0x34
 8003be0:	4b7d      	ldr	r3, [pc, #500]	@ (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8003be2:	7819      	ldrb	r1, [r3, #0]
 8003be4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003be6:	4e7d      	ldr	r6, [pc, #500]	@ (8003ddc <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8003be8:	4b7d      	ldr	r3, [pc, #500]	@ (8003de0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8003bea:	ac28      	add	r4, sp, #160	@ 0xa0
 8003bec:	461d      	mov	r5, r3
 8003bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bf6:	682b      	ldr	r3, [r5, #0]
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003de4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8003bfc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003bfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c00:	9126      	str	r1, [sp, #152]	@ 0x98
 8003c02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c04:	9225      	str	r2, [sp, #148]	@ 0x94
 8003c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c08:	9324      	str	r3, [sp, #144]	@ 0x90
 8003c0a:	4668      	mov	r0, sp
 8003c0c:	f106 0310 	add.w	r3, r6, #16
 8003c10:	2290      	movs	r2, #144	@ 0x90
 8003c12:	4619      	mov	r1, r3
 8003c14:	f006 fca6 	bl	800a564 <memcpy>
 8003c18:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003c1c:	f7fe fb26 	bl	800226c <message_cantx_Shutdown>
  	 msg=0;																							//Set the msg state to 0
 8003c20:	4b71      	ldr	r3, [pc, #452]	@ (8003de8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
  	 break;
 8003c26:	bf00      	nop
   }
}

   if (htim->Instance == TIM13){					//When the TIMER 14 has a pulse, the function moves 1 iteration forward, up to 5 times
 8003c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6f      	ldr	r2, [pc, #444]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f040 816f 	bne.w	8003f12 <HAL_TIM_PeriodElapsedCallback+0x4ea>
	   if((RX_VOLT_TEMP<=2*TOTAL_IC) && (RX_VOLT_TEMP > 0)){						//Enters the function if RX_VOLT_TEMP is between 1 and 2*TOTAL_IC, so that the odd ones will be the TEMP Rx and the pair ones will be the VOLT Rx
 8003c34:	4b6e      	ldr	r3, [pc, #440]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003df4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f300 8163 	bgt.w	8003f0c <HAL_TIM_PeriodElapsedCallback+0x4e4>
 8003c46:	4b6a      	ldr	r3, [pc, #424]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 815e 	beq.w	8003f0c <HAL_TIM_PeriodElapsedCallback+0x4e4>
	   if((RX_VOLT_TEMP == 1) || (RX_VOLT_TEMP == 3) || (RX_VOLT_TEMP == 5) || (RX_VOLT_TEMP == 7) || (RX_VOLT_TEMP == 9) || (RX_VOLT_TEMP == 11) || (RX_VOLT_TEMP == 13) || (RX_VOLT_TEMP == 15) || (RX_VOLT_TEMP == 17) || (RX_VOLT_TEMP == 19) || (RX_VOLT_TEMP == 21) || (RX_VOLT_TEMP == 23) || (RX_VOLT_TEMP == 25) || (RX_VOLT_TEMP == 27) || (RX_VOLT_TEMP == 29)){
 8003c50:	4b67      	ldr	r3, [pc, #412]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d037      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c58:	4b65      	ldr	r3, [pc, #404]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d033      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c60:	4b63      	ldr	r3, [pc, #396]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d02f      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c68:	4b61      	ldr	r3, [pc, #388]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b07      	cmp	r3, #7
 8003c6e:	d02b      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c70:	4b5f      	ldr	r3, [pc, #380]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b09      	cmp	r3, #9
 8003c76:	d027      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c78:	4b5d      	ldr	r3, [pc, #372]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b0b      	cmp	r3, #11
 8003c7e:	d023      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c80:	4b5b      	ldr	r3, [pc, #364]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b0d      	cmp	r3, #13
 8003c86:	d01f      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c88:	4b59      	ldr	r3, [pc, #356]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d01b      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c90:	4b57      	ldr	r3, [pc, #348]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b11      	cmp	r3, #17
 8003c96:	d017      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003c98:	4b55      	ldr	r3, [pc, #340]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b13      	cmp	r3, #19
 8003c9e:	d013      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003ca0:	4b53      	ldr	r3, [pc, #332]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b15      	cmp	r3, #21
 8003ca6:	d00f      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003ca8:	4b51      	ldr	r3, [pc, #324]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b17      	cmp	r3, #23
 8003cae:	d00b      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b19      	cmp	r3, #25
 8003cb6:	d007      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b1b      	cmp	r3, #27
 8003cbe:	d003      	beq.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8003cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b1d      	cmp	r3, #29
 8003cc6:	d13b      	bne.n	8003d40 <HAL_TIM_PeriodElapsedCallback+0x318>
		   message_cantx_TEMPERATURES_IT(COBID_TEMP, IC_TEMP, hfdcan2, temperatures_conv, TxData2, TxHeader2); //Send all voltages of a slave through CAN 2, the slave iterates by summing 1 to the IC
 8003cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8003cca:	f8b3 8000 	ldrh.w	r8, [r3]
 8003cce:	4b4b      	ldr	r3, [pc, #300]	@ (8003dfc <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8003cd0:	f893 9000 	ldrb.w	r9, [r3]
 8003cd4:	4e4a      	ldr	r6, [pc, #296]	@ (8003e00 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8003cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003e04 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003cd8:	ac28      	add	r4, sp, #160	@ 0xa0
 8003cda:	461d      	mov	r5, r3
 8003cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	4b47      	ldr	r3, [pc, #284]	@ (8003e08 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8003cea:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003cec:	4b47      	ldr	r3, [pc, #284]	@ (8003e0c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8003cee:	9326      	str	r3, [sp, #152]	@ 0x98
 8003cf0:	4668      	mov	r0, sp
 8003cf2:	f106 0308 	add.w	r3, r6, #8
 8003cf6:	2298      	movs	r2, #152	@ 0x98
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f006 fc33 	bl	800a564 <memcpy>
 8003cfe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003d02:	4649      	mov	r1, r9
 8003d04:	4640      	mov	r0, r8
 8003d06:	f7fd fd39 	bl	800177c <message_cantx_TEMPERATURES_IT>
		   IC_TEMP = IC_TEMP+1;													//Sum 1 to the IC
 8003d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b3a      	ldr	r3, [pc, #232]	@ (8003dfc <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8003d14:	701a      	strb	r2, [r3, #0]
		   if(IC_TEMP<TOTAL_IC) COBID_TEMP += 2;
 8003d16:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d206      	bcs.n	8003d30 <HAL_TIM_PeriodElapsedCallback+0x308>
 8003d22:	4b35      	ldr	r3, [pc, #212]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	3302      	adds	r3, #2
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	4b33      	ldr	r3, [pc, #204]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8003d2c:	801a      	strh	r2, [r3, #0]
 8003d2e:	e07d      	b.n	8003e2c <HAL_TIM_PeriodElapsedCallback+0x404>
		   else IC_TEMP = 0, COBID_TEMP = 0x11A;
 8003d30:	4b32      	ldr	r3, [pc, #200]	@ (8003dfc <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	4b30      	ldr	r3, [pc, #192]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8003d38:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003d3c:	801a      	strh	r2, [r3, #0]
		   if(IC_TEMP<TOTAL_IC) COBID_TEMP += 2;
 8003d3e:	e075      	b.n	8003e2c <HAL_TIM_PeriodElapsedCallback+0x404>
	   }

	   else{
		   message_cantx_VOLTATJES_IT(COBID_VOLT, IC_VOLT, hfdcan2, voltatjes, TxData2, TxHeader2);
 8003d40:	4b33      	ldr	r3, [pc, #204]	@ (8003e10 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8003d42:	f8b3 8000 	ldrh.w	r8, [r3]
 8003d46:	4b33      	ldr	r3, [pc, #204]	@ (8003e14 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8003d48:	f893 9000 	ldrb.w	r9, [r3]
 8003d4c:	4e2c      	ldr	r6, [pc, #176]	@ (8003e00 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8003d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e04 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003d50:	ac28      	add	r4, sp, #160	@ 0xa0
 8003d52:	461d      	mov	r5, r3
 8003d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	4b29      	ldr	r3, [pc, #164]	@ (8003e08 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8003d62:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003d64:	4b2c      	ldr	r3, [pc, #176]	@ (8003e18 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8003d66:	9326      	str	r3, [sp, #152]	@ 0x98
 8003d68:	4668      	mov	r0, sp
 8003d6a:	f106 0308 	add.w	r3, r6, #8
 8003d6e:	2298      	movs	r2, #152	@ 0x98
 8003d70:	4619      	mov	r1, r3
 8003d72:	f006 fbf7 	bl	800a564 <memcpy>
 8003d76:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	f7fd fe35 	bl	80019ec <message_cantx_VOLTATJES_IT>
		   uint8_t increments[15] = {3,2,3,3,2,3,3,2,3,3,2,3,3,2,3};
 8003d82:	4b26      	ldr	r3, [pc, #152]	@ (8003e1c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8003d84:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8003d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d8a:	c407      	stmia	r4!, {r0, r1, r2}
 8003d8c:	8023      	strh	r3, [r4, #0]
 8003d8e:	3402      	adds	r4, #2
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	7023      	strb	r3, [r4, #0]
		   IC_VOLT = IC_VOLT+1;
 8003d94:	4b1f      	ldr	r3, [pc, #124]	@ (8003e14 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e14 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8003d9e:	701a      	strb	r2, [r3, #0]
		   if (IC_VOLT < TOTAL_IC) COBID_VOLT += increments[IC_VOLT-1];
 8003da0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d239      	bcs.n	8003e20 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 8003dac:	4b19      	ldr	r3, [pc, #100]	@ (8003e14 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	3318      	adds	r3, #24
 8003db4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003db8:	4413      	add	r3, r2
 8003dba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b13      	ldr	r3, [pc, #76]	@ (8003e10 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	e02e      	b.n	8003e2c <HAL_TIM_PeriodElapsedCallback+0x404>
 8003dce:	bf00      	nop
 8003dd0:	240017d3 	.word	0x240017d3
 8003dd4:	240017d1 	.word	0x240017d1
 8003dd8:	240017d2 	.word	0x240017d2
 8003ddc:	24000518 	.word	0x24000518
 8003de0:	24001808 	.word	0x24001808
 8003de4:	2400184c 	.word	0x2400184c
 8003de8:	240017dc 	.word	0x240017dc
 8003dec:	40001c00 	.word	0x40001c00
 8003df0:	240018b0 	.word	0x240018b0
 8003df4:	24000000 	.word	0x24000000
 8003df8:	24000218 	.word	0x24000218
 8003dfc:	240018ae 	.word	0x240018ae
 8003e00:	240005b8 	.word	0x240005b8
 8003e04:	2400186c 	.word	0x2400186c
 8003e08:	24001890 	.word	0x24001890
 8003e0c:	24000a84 	.word	0x24000a84
 8003e10:	2400021a 	.word	0x2400021a
 8003e14:	240018af 	.word	0x240018af
 8003e18:	2400082c 	.word	0x2400082c
 8003e1c:	0800b3b0 	.word	0x0800b3b0
		   else IC_VOLT = 0, COBID_VOLT = 0xEA;
 8003e20:	4b3e      	ldr	r3, [pc, #248]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	4b3e      	ldr	r3, [pc, #248]	@ (8003f20 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8003e28:	22ea      	movs	r2, #234	@ 0xea
 8003e2a:	801a      	strh	r2, [r3, #0]
	   }
	   RX_VOLT_TEMP += 1;
 8003e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f24 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	4b3b      	ldr	r3, [pc, #236]	@ (8003f24 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8003e36:	701a      	strb	r2, [r3, #0]

	   message_cantx_SF(hfdcan2, UT_FLAG, OT_FLAG, OV_FLAG, UV_FLAG, OC_FLAG, Airs_State[3], Airs_State[1], Airs_State[2], SDC_MONITORING, BMS_OK, SD_FLAG, CE_FLAG, UV_FLAG, BLC, TxData2, TxHeader2);
 8003e38:	4b3b      	ldr	r3, [pc, #236]	@ (8003f28 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	637a      	str	r2, [r7, #52]	@ 0x34
 8003e44:	4b3a      	ldr	r3, [pc, #232]	@ (8003f30 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8003e46:	7819      	ldrb	r1, [r3, #0]
 8003e48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f34 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8003e4c:	7818      	ldrb	r0, [r3, #0]
 8003e4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003e50:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8003e52:	781c      	ldrb	r4, [r3, #0]
 8003e54:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8003e58:	78dd      	ldrb	r5, [r3, #3]
 8003e5a:	627d      	str	r5, [r7, #36]	@ 0x24
 8003e5c:	4b37      	ldr	r3, [pc, #220]	@ (8003f3c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8003e5e:	785e      	ldrb	r6, [r3, #1]
 8003e60:	623e      	str	r6, [r7, #32]
 8003e62:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8003e64:	789e      	ldrb	r6, [r3, #2]
 8003e66:	61fe      	str	r6, [r7, #28]
 8003e68:	4b35      	ldr	r3, [pc, #212]	@ (8003f40 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8003e6a:	f893 c000 	ldrb.w	ip, [r3]
 8003e6e:	4661      	mov	r1, ip
 8003e70:	61b9      	str	r1, [r7, #24]
 8003e72:	4b34      	ldr	r3, [pc, #208]	@ (8003f44 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8003e74:	f893 c000 	ldrb.w	ip, [r3]
 8003e78:	4660      	mov	r0, ip
 8003e7a:	6178      	str	r0, [r7, #20]
 8003e7c:	4b32      	ldr	r3, [pc, #200]	@ (8003f48 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8003e7e:	f893 c000 	ldrb.w	ip, [r3]
 8003e82:	4664      	mov	r4, ip
 8003e84:	613c      	str	r4, [r7, #16]
 8003e86:	4b31      	ldr	r3, [pc, #196]	@ (8003f4c <HAL_TIM_PeriodElapsedCallback+0x524>)
 8003e88:	f893 c000 	ldrb.w	ip, [r3]
 8003e8c:	4665      	mov	r5, ip
 8003e8e:	60fd      	str	r5, [r7, #12]
 8003e90:	4b28      	ldr	r3, [pc, #160]	@ (8003f34 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8003e92:	f893 c000 	ldrb.w	ip, [r3]
 8003e96:	4666      	mov	r6, ip
 8003e98:	60be      	str	r6, [r7, #8]
 8003e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f50 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8003e9c:	f893 c000 	ldrb.w	ip, [r3]
 8003ea0:	4662      	mov	r2, ip
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	4e2b      	ldr	r6, [pc, #172]	@ (8003f54 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8003ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f58 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003ea8:	ad33      	add	r5, sp, #204	@ 0xcc
 8003eaa:	461c      	mov	r4, r3
 8003eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	4b28      	ldr	r3, [pc, #160]	@ (8003f5c <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003eba:	9332      	str	r3, [sp, #200]	@ 0xc8
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	9231      	str	r2, [sp, #196]	@ 0xc4
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	9330      	str	r3, [sp, #192]	@ 0xc0
 8003ec4:	68fd      	ldr	r5, [r7, #12]
 8003ec6:	952f      	str	r5, [sp, #188]	@ 0xbc
 8003ec8:	693c      	ldr	r4, [r7, #16]
 8003eca:	942e      	str	r4, [sp, #184]	@ 0xb8
 8003ecc:	6978      	ldr	r0, [r7, #20]
 8003ece:	902d      	str	r0, [sp, #180]	@ 0xb4
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	912c      	str	r1, [sp, #176]	@ 0xb0
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	922b      	str	r2, [sp, #172]	@ 0xac
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	932a      	str	r3, [sp, #168]	@ 0xa8
 8003edc:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8003ede:	9529      	str	r5, [sp, #164]	@ 0xa4
 8003ee0:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003ee2:	9428      	str	r4, [sp, #160]	@ 0xa0
 8003ee4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ee6:	9027      	str	r0, [sp, #156]	@ 0x9c
 8003ee8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003eea:	9126      	str	r1, [sp, #152]	@ 0x98
 8003eec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003eee:	9225      	str	r2, [sp, #148]	@ 0x94
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef2:	9324      	str	r3, [sp, #144]	@ 0x90
 8003ef4:	4668      	mov	r0, sp
 8003ef6:	f106 0310 	add.w	r3, r6, #16
 8003efa:	2290      	movs	r2, #144	@ 0x90
 8003efc:	4619      	mov	r1, r3
 8003efe:	f006 fb31 	bl	800a564 <memcpy>
 8003f02:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003f06:	f7fe f811 	bl	8001f2c <message_cantx_SF>
	}
	else RX_VOLT_TEMP = 0;
   }

}
 8003f0a:	e002      	b.n	8003f12 <HAL_TIM_PeriodElapsedCallback+0x4ea>
	else RX_VOLT_TEMP = 0;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	3754      	adds	r7, #84	@ 0x54
 8003f16:	46bd      	mov	sp, r7
 8003f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f1c:	240018af 	.word	0x240018af
 8003f20:	2400021a 	.word	0x2400021a
 8003f24:	240018b0 	.word	0x240018b0
 8003f28:	24000210 	.word	0x24000210
 8003f2c:	2400020f 	.word	0x2400020f
 8003f30:	2400020d 	.word	0x2400020d
 8003f34:	2400020e 	.word	0x2400020e
 8003f38:	24000211 	.word	0x24000211
 8003f3c:	240017d8 	.word	0x240017d8
 8003f40:	240017d3 	.word	0x240017d3
 8003f44:	24000208 	.word	0x24000208
 8003f48:	24000212 	.word	0x24000212
 8003f4c:	24000213 	.word	0x24000213
 8003f50:	240017de 	.word	0x240017de
 8003f54:	240005b8 	.word	0x240005b8
 8003f58:	2400186c 	.word	0x2400186c
 8003f5c:	24001890 	.word	0x24001890

08003f60 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003f66:	463b      	mov	r3, r7
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003f72:	f000 fcfb 	bl	800496c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003f82:	231f      	movs	r3, #31
 8003f84:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003f86:	2387      	movs	r3, #135	@ 0x87
 8003f88:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003f92:	2301      	movs	r3, #1
 8003f94:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003f96:	2301      	movs	r3, #1
 8003f98:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003fa2:	463b      	mov	r3, r7
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fd19 	bl	80049dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003faa:	2004      	movs	r0, #4
 8003fac:	f000 fcf6 	bl	800499c <HAL_MPU_Enable>

}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fbc:	b672      	cpsid	i
}
 8003fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <HAL_MspInit+0x30>)
 8003fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fd8:	4a08      	ldr	r2, [pc, #32]	@ (8003ffc <HAL_MspInit+0x30>)
 8003fda:	f043 0302 	orr.w	r3, r3, #2
 8003fde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_MspInit+0x30>)
 8003fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	58024400 	.word	0x58024400

08004000 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b0bc      	sub	sp, #240	@ 0xf0
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004018:	f107 0318 	add.w	r3, r7, #24
 800401c:	22c0      	movs	r2, #192	@ 0xc0
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f006 fa73 	bl	800a50c <memset>
  if(hfdcan->Instance==FDCAN1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a67      	ldr	r2, [pc, #412]	@ (80041c8 <HAL_FDCAN_MspInit+0x1c8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d160      	bne.n	80040f2 <HAL_FDCAN_MspInit+0xf2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004030:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800403c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004044:	f107 0318 	add.w	r3, r7, #24
 8004048:	4618      	mov	r0, r3
 800404a:	f003 fadf 	bl	800760c <HAL_RCCEx_PeriphCLKConfig>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8004054:	f7ff ffb0 	bl	8003fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004058:	4b5c      	ldr	r3, [pc, #368]	@ (80041cc <HAL_FDCAN_MspInit+0x1cc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	4a5b      	ldr	r2, [pc, #364]	@ (80041cc <HAL_FDCAN_MspInit+0x1cc>)
 8004060:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004062:	4b5a      	ldr	r3, [pc, #360]	@ (80041cc <HAL_FDCAN_MspInit+0x1cc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10e      	bne.n	8004088 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800406a:	4b59      	ldr	r3, [pc, #356]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 800406c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004070:	4a57      	ldr	r2, [pc, #348]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004076:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800407a:	4b55      	ldr	r3, [pc, #340]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 800407c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004088:	4b51      	ldr	r3, [pc, #324]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 800408a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800408e:	4a50      	ldr	r2, [pc, #320]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 8004090:	f043 0308 	orr.w	r3, r3, #8
 8004094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004098:	4b4d      	ldr	r3, [pc, #308]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 800409a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040a6:	2303      	movs	r3, #3
 80040a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80040be:	2309      	movs	r3, #9
 80040c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80040c8:	4619      	mov	r1, r3
 80040ca:	4842      	ldr	r0, [pc, #264]	@ (80041d4 <HAL_FDCAN_MspInit+0x1d4>)
 80040cc:	f002 f8c8 	bl	8006260 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 80040d0:	2200      	movs	r2, #0
 80040d2:	2103      	movs	r1, #3
 80040d4:	2013      	movs	r0, #19
 80040d6:	f000 fc14 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80040da:	2013      	movs	r0, #19
 80040dc:	f000 fc2b 	bl	8004936 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 3, 0);
 80040e0:	2200      	movs	r2, #0
 80040e2:	2103      	movs	r1, #3
 80040e4:	2015      	movs	r0, #21
 80040e6:	f000 fc0c 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80040ea:	2015      	movs	r0, #21
 80040ec:	f000 fc23 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80040f0:	e065      	b.n	80041be <HAL_FDCAN_MspInit+0x1be>
  else if(hfdcan->Instance==FDCAN2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a38      	ldr	r2, [pc, #224]	@ (80041d8 <HAL_FDCAN_MspInit+0x1d8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d160      	bne.n	80041be <HAL_FDCAN_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80040fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004108:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800410c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004110:	f107 0318 	add.w	r3, r7, #24
 8004114:	4618      	mov	r0, r3
 8004116:	f003 fa79 	bl	800760c <HAL_RCCEx_PeriphCLKConfig>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_FDCAN_MspInit+0x124>
      Error_Handler();
 8004120:	f7ff ff4a 	bl	8003fb8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004124:	4b29      	ldr	r3, [pc, #164]	@ (80041cc <HAL_FDCAN_MspInit+0x1cc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	4a28      	ldr	r2, [pc, #160]	@ (80041cc <HAL_FDCAN_MspInit+0x1cc>)
 800412c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800412e:	4b27      	ldr	r3, [pc, #156]	@ (80041cc <HAL_FDCAN_MspInit+0x1cc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d10e      	bne.n	8004154 <HAL_FDCAN_MspInit+0x154>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004136:	4b26      	ldr	r3, [pc, #152]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 8004138:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800413c:	4a24      	ldr	r2, [pc, #144]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 800413e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004142:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8004146:	4b22      	ldr	r3, [pc, #136]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 8004148:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800414c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004154:	4b1e      	ldr	r3, [pc, #120]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 8004156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800415a:	4a1d      	ldr	r2, [pc, #116]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004164:	4b1a      	ldr	r3, [pc, #104]	@ (80041d0 <HAL_FDCAN_MspInit+0x1d0>)
 8004166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004172:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417a:	2302      	movs	r3, #2
 800417c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004186:	2300      	movs	r3, #0
 8004188:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800418c:	2309      	movs	r3, #9
 800418e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004192:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004196:	4619      	mov	r1, r3
 8004198:	4810      	ldr	r0, [pc, #64]	@ (80041dc <HAL_FDCAN_MspInit+0x1dc>)
 800419a:	f002 f861 	bl	8006260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 3, 0);
 800419e:	2200      	movs	r2, #0
 80041a0:	2103      	movs	r1, #3
 80041a2:	2014      	movs	r0, #20
 80041a4:	f000 fbad 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80041a8:	2014      	movs	r0, #20
 80041aa:	f000 fbc4 	bl	8004936 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 3, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2103      	movs	r1, #3
 80041b2:	2016      	movs	r0, #22
 80041b4:	f000 fba5 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80041b8:	2016      	movs	r0, #22
 80041ba:	f000 fbbc 	bl	8004936 <HAL_NVIC_EnableIRQ>
}
 80041be:	bf00      	nop
 80041c0:	37f0      	adds	r7, #240	@ 0xf0
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	4000a000 	.word	0x4000a000
 80041cc:	240018b8 	.word	0x240018b8
 80041d0:	58024400 	.word	0x58024400
 80041d4:	58020c00 	.word	0x58020c00
 80041d8:	4000a400 	.word	0x4000a400
 80041dc:	58020400 	.word	0x58020400

080041e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b0ba      	sub	sp, #232	@ 0xe8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041f8:	f107 0310 	add.w	r3, r7, #16
 80041fc:	22c0      	movs	r2, #192	@ 0xc0
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f006 f983 	bl	800a50c <memset>
  if(hspi->Instance==SPI1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a34      	ldr	r2, [pc, #208]	@ (80042dc <HAL_SPI_MspInit+0xfc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d161      	bne.n	80042d4 <HAL_SPI_MspInit+0xf4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004210:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800421c:	2300      	movs	r3, #0
 800421e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004220:	f107 0310 	add.w	r3, r7, #16
 8004224:	4618      	mov	r0, r3
 8004226:	f003 f9f1 	bl	800760c <HAL_RCCEx_PeriphCLKConfig>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004230:	f7ff fec2 	bl	8003fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004234:	4b2a      	ldr	r3, [pc, #168]	@ (80042e0 <HAL_SPI_MspInit+0x100>)
 8004236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800423a:	4a29      	ldr	r2, [pc, #164]	@ (80042e0 <HAL_SPI_MspInit+0x100>)
 800423c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004240:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004244:	4b26      	ldr	r3, [pc, #152]	@ (80042e0 <HAL_SPI_MspInit+0x100>)
 8004246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800424a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004252:	4b23      	ldr	r3, [pc, #140]	@ (80042e0 <HAL_SPI_MspInit+0x100>)
 8004254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004258:	4a21      	ldr	r2, [pc, #132]	@ (80042e0 <HAL_SPI_MspInit+0x100>)
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004262:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <HAL_SPI_MspInit+0x100>)
 8004264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004270:	2308      	movs	r3, #8
 8004272:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	2302      	movs	r3, #2
 8004278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	2300      	movs	r3, #0
 8004284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004288:	2305      	movs	r3, #5
 800428a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004292:	4619      	mov	r1, r3
 8004294:	4813      	ldr	r0, [pc, #76]	@ (80042e4 <HAL_SPI_MspInit+0x104>)
 8004296:	f001 ffe3 	bl	8006260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800429a:	2330      	movs	r3, #48	@ 0x30
 800429c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042b2:	2305      	movs	r3, #5
 80042b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80042bc:	4619      	mov	r1, r3
 80042be:	4809      	ldr	r0, [pc, #36]	@ (80042e4 <HAL_SPI_MspInit+0x104>)
 80042c0:	f001 ffce 	bl	8006260 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80042c4:	2200      	movs	r2, #0
 80042c6:	2100      	movs	r1, #0
 80042c8:	2023      	movs	r0, #35	@ 0x23
 80042ca:	f000 fb1a 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80042ce:	2023      	movs	r0, #35	@ 0x23
 80042d0:	f000 fb31 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80042d4:	bf00      	nop
 80042d6:	37e8      	adds	r7, #232	@ 0xe8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40013000 	.word	0x40013000
 80042e0:	58024400 	.word	0x58024400
 80042e4:	58020400 	.word	0x58020400

080042e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <HAL_TIM_Base_MspInit+0x84>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d117      	bne.n	800432a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80042fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004370 <HAL_TIM_Base_MspInit+0x88>)
 80042fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004300:	4a1b      	ldr	r2, [pc, #108]	@ (8004370 <HAL_TIM_Base_MspInit+0x88>)
 8004302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004306:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800430a:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_TIM_Base_MspInit+0x88>)
 800430c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004318:	2200      	movs	r2, #0
 800431a:	2100      	movs	r1, #0
 800431c:	202c      	movs	r0, #44	@ 0x2c
 800431e:	f000 faf0 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004322:	202c      	movs	r0, #44	@ 0x2c
 8004324:	f000 fb07 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004328:	e01b      	b.n	8004362 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM14)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a11      	ldr	r2, [pc, #68]	@ (8004374 <HAL_TIM_Base_MspInit+0x8c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d116      	bne.n	8004362 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004334:	4b0e      	ldr	r3, [pc, #56]	@ (8004370 <HAL_TIM_Base_MspInit+0x88>)
 8004336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800433a:	4a0d      	ldr	r2, [pc, #52]	@ (8004370 <HAL_TIM_Base_MspInit+0x88>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004340:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004344:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <HAL_TIM_Base_MspInit+0x88>)
 8004346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004352:	2200      	movs	r2, #0
 8004354:	2100      	movs	r1, #0
 8004356:	202d      	movs	r0, #45	@ 0x2d
 8004358:	f000 fad3 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800435c:	202d      	movs	r0, #45	@ 0x2d
 800435e:	f000 faea 	bl	8004936 <HAL_NVIC_EnableIRQ>
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40001c00 	.word	0x40001c00
 8004370:	58024400 	.word	0x58024400
 8004374:	40002000 	.word	0x40002000

08004378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <NMI_Handler+0x4>

08004380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <HardFault_Handler+0x4>

08004388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800438c:	bf00      	nop
 800438e:	e7fd      	b.n	800438c <MemManage_Handler+0x4>

08004390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <BusFault_Handler+0x4>

08004398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800439c:	bf00      	nop
 800439e:	e7fd      	b.n	800439c <UsageFault_Handler+0x4>

080043a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043ce:	f000 f96d 	bl	80046ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80043dc:	4802      	ldr	r0, [pc, #8]	@ (80043e8 <FDCAN1_IT0_IRQHandler+0x10>)
 80043de:	f001 fa43 	bl	8005868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	24000518 	.word	0x24000518

080043ec <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80043f0:	4802      	ldr	r0, [pc, #8]	@ (80043fc <FDCAN2_IT0_IRQHandler+0x10>)
 80043f2:	f001 fa39 	bl	8005868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	240005b8 	.word	0x240005b8

08004400 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004404:	4802      	ldr	r0, [pc, #8]	@ (8004410 <FDCAN1_IT1_IRQHandler+0x10>)
 8004406:	f001 fa2f 	bl	8005868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	24000518 	.word	0x24000518

08004414 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004418:	4802      	ldr	r0, [pc, #8]	@ (8004424 <FDCAN2_IT1_IRQHandler+0x10>)
 800441a:	f001 fa25 	bl	8005868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	240005b8 	.word	0x240005b8

08004428 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800442c:	4802      	ldr	r0, [pc, #8]	@ (8004438 <SPI1_IRQHandler+0x10>)
 800442e:	f005 faa7 	bl	8009980 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	24000658 	.word	0x24000658

0800443c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004440:	4802      	ldr	r0, [pc, #8]	@ (800444c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004442:	f005 fe6f 	bl	800a124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	240006e0 	.word	0x240006e0

08004450 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004454:	4802      	ldr	r0, [pc, #8]	@ (8004460 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004456:	f005 fe65 	bl	800a124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	2400072c 	.word	0x2400072c

08004464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004468:	4b37      	ldr	r3, [pc, #220]	@ (8004548 <SystemInit+0xe4>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	4a36      	ldr	r2, [pc, #216]	@ (8004548 <SystemInit+0xe4>)
 8004470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004478:	4b34      	ldr	r3, [pc, #208]	@ (800454c <SystemInit+0xe8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	2b06      	cmp	r3, #6
 8004482:	d807      	bhi.n	8004494 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004484:	4b31      	ldr	r3, [pc, #196]	@ (800454c <SystemInit+0xe8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 030f 	bic.w	r3, r3, #15
 800448c:	4a2f      	ldr	r2, [pc, #188]	@ (800454c <SystemInit+0xe8>)
 800448e:	f043 0307 	orr.w	r3, r3, #7
 8004492:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004494:	4b2e      	ldr	r3, [pc, #184]	@ (8004550 <SystemInit+0xec>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2d      	ldr	r2, [pc, #180]	@ (8004550 <SystemInit+0xec>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80044a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004550 <SystemInit+0xec>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80044a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004550 <SystemInit+0xec>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4929      	ldr	r1, [pc, #164]	@ (8004550 <SystemInit+0xec>)
 80044ac:	4b29      	ldr	r3, [pc, #164]	@ (8004554 <SystemInit+0xf0>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044b2:	4b26      	ldr	r3, [pc, #152]	@ (800454c <SystemInit+0xe8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044be:	4b23      	ldr	r3, [pc, #140]	@ (800454c <SystemInit+0xe8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 030f 	bic.w	r3, r3, #15
 80044c6:	4a21      	ldr	r2, [pc, #132]	@ (800454c <SystemInit+0xe8>)
 80044c8:	f043 0307 	orr.w	r3, r3, #7
 80044cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80044ce:	4b20      	ldr	r3, [pc, #128]	@ (8004550 <SystemInit+0xec>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80044d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004550 <SystemInit+0xec>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80044da:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <SystemInit+0xec>)
 80044dc:	2200      	movs	r2, #0
 80044de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80044e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004550 <SystemInit+0xec>)
 80044e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004558 <SystemInit+0xf4>)
 80044e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80044e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <SystemInit+0xec>)
 80044e8:	4a1c      	ldr	r2, [pc, #112]	@ (800455c <SystemInit+0xf8>)
 80044ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80044ec:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <SystemInit+0xec>)
 80044ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004560 <SystemInit+0xfc>)
 80044f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80044f2:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <SystemInit+0xec>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80044f8:	4b15      	ldr	r3, [pc, #84]	@ (8004550 <SystemInit+0xec>)
 80044fa:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <SystemInit+0xfc>)
 80044fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80044fe:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <SystemInit+0xec>)
 8004500:	2200      	movs	r2, #0
 8004502:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004504:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <SystemInit+0xec>)
 8004506:	4a16      	ldr	r2, [pc, #88]	@ (8004560 <SystemInit+0xfc>)
 8004508:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800450a:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <SystemInit+0xec>)
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004510:	4b0f      	ldr	r3, [pc, #60]	@ (8004550 <SystemInit+0xec>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0e      	ldr	r2, [pc, #56]	@ (8004550 <SystemInit+0xec>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800451c:	4b0c      	ldr	r3, [pc, #48]	@ (8004550 <SystemInit+0xec>)
 800451e:	2200      	movs	r2, #0
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004522:	4b10      	ldr	r3, [pc, #64]	@ (8004564 <SystemInit+0x100>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <SystemInit+0x104>)
 8004528:	4013      	ands	r3, r2
 800452a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800452e:	d202      	bcs.n	8004536 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004530:	4b0e      	ldr	r3, [pc, #56]	@ (800456c <SystemInit+0x108>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004536:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <SystemInit+0x10c>)
 8004538:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800453c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800453e:	bf00      	nop
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000ed00 	.word	0xe000ed00
 800454c:	52002000 	.word	0x52002000
 8004550:	58024400 	.word	0x58024400
 8004554:	eaf6ed7f 	.word	0xeaf6ed7f
 8004558:	02020200 	.word	0x02020200
 800455c:	01ff0000 	.word	0x01ff0000
 8004560:	01010280 	.word	0x01010280
 8004564:	5c001000 	.word	0x5c001000
 8004568:	ffff0000 	.word	0xffff0000
 800456c:	51008108 	.word	0x51008108
 8004570:	52004000 	.word	0x52004000

08004574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004578:	f7ff ff74 	bl	8004464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800457c:	480c      	ldr	r0, [pc, #48]	@ (80045b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800457e:	490d      	ldr	r1, [pc, #52]	@ (80045b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004580:	4a0d      	ldr	r2, [pc, #52]	@ (80045b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004584:	e002      	b.n	800458c <LoopCopyDataInit>

08004586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800458a:	3304      	adds	r3, #4

0800458c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800458c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800458e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004590:	d3f9      	bcc.n	8004586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004592:	4a0a      	ldr	r2, [pc, #40]	@ (80045bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004594:	4c0a      	ldr	r4, [pc, #40]	@ (80045c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004598:	e001      	b.n	800459e <LoopFillZerobss>

0800459a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800459a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800459c:	3204      	adds	r2, #4

0800459e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800459e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045a0:	d3fb      	bcc.n	800459a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045a2:	f005 ffbb 	bl	800a51c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045a6:	f7fe fbf5 	bl	8002d94 <main>
  bx  lr
 80045aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80045b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80045b4:	2400022c 	.word	0x2400022c
  ldr r2, =_sidata
 80045b8:	0800b434 	.word	0x0800b434
  ldr r2, =_sbss
 80045bc:	2400022c 	.word	0x2400022c
  ldr r4, =_ebss
 80045c0:	240018c0 	.word	0x240018c0

080045c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC3_IRQHandler>
	...

080045c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ce:	2003      	movs	r0, #3
 80045d0:	f000 f98c 	bl	80048ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045d4:	f002 fe70 	bl	80072b8 <HAL_RCC_GetSysClockFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <HAL_Init+0x68>)
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	4913      	ldr	r1, [pc, #76]	@ (8004634 <HAL_Init+0x6c>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004630 <HAL_Init+0x68>)
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004634 <HAL_Init+0x6c>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
 8004608:	4a0b      	ldr	r2, [pc, #44]	@ (8004638 <HAL_Init+0x70>)
 800460a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800460c:	4a0b      	ldr	r2, [pc, #44]	@ (800463c <HAL_Init+0x74>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004612:	200f      	movs	r0, #15
 8004614:	f000 f814 	bl	8004640 <HAL_InitTick>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e002      	b.n	8004628 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004622:	f7ff fcd3 	bl	8003fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	58024400 	.word	0x58024400
 8004634:	0800b40c 	.word	0x0800b40c
 8004638:	24000220 	.word	0x24000220
 800463c:	2400021c 	.word	0x2400021c

08004640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004648:	4b15      	ldr	r3, [pc, #84]	@ (80046a0 <HAL_InitTick+0x60>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e021      	b.n	8004698 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004654:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <HAL_InitTick+0x64>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b11      	ldr	r3, [pc, #68]	@ (80046a0 <HAL_InitTick+0x60>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004662:	fbb3 f3f1 	udiv	r3, r3, r1
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f971 	bl	8004952 <HAL_SYSTICK_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e00e      	b.n	8004698 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b0f      	cmp	r3, #15
 800467e:	d80a      	bhi.n	8004696 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004680:	2200      	movs	r2, #0
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	f000 f93b 	bl	8004902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800468c:	4a06      	ldr	r2, [pc, #24]	@ (80046a8 <HAL_InitTick+0x68>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	24000228 	.word	0x24000228
 80046a4:	2400021c 	.word	0x2400021c
 80046a8:	24000224 	.word	0x24000224

080046ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046b0:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <HAL_IncTick+0x20>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_IncTick+0x24>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4413      	add	r3, r2
 80046bc:	4a04      	ldr	r2, [pc, #16]	@ (80046d0 <HAL_IncTick+0x24>)
 80046be:	6013      	str	r3, [r2, #0]
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	24000228 	.word	0x24000228
 80046d0:	240018bc 	.word	0x240018bc

080046d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return uwTick;
 80046d8:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <HAL_GetTick+0x14>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	240018bc 	.word	0x240018bc

080046ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046f4:	f7ff ffee 	bl	80046d4 <HAL_GetTick>
 80046f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d005      	beq.n	8004712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004706:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <HAL_Delay+0x44>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004712:	bf00      	nop
 8004714:	f7ff ffde 	bl	80046d4 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	429a      	cmp	r2, r3
 8004722:	d8f7      	bhi.n	8004714 <HAL_Delay+0x28>
  {
  }
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	24000228 	.word	0x24000228

08004734 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <HAL_GetREVID+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0c1b      	lsrs	r3, r3, #16
}
 800473e:	4618      	mov	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	5c001000 	.word	0x5c001000

0800474c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800475c:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <__NVIC_SetPriorityGrouping+0x40>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004768:	4013      	ands	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004774:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	4313      	orrs	r3, r2
 8004778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800477a:	4a04      	ldr	r2, [pc, #16]	@ (800478c <__NVIC_SetPriorityGrouping+0x40>)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	60d3      	str	r3, [r2, #12]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000ed00 	.word	0xe000ed00
 8004790:	05fa0000 	.word	0x05fa0000

08004794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004798:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <__NVIC_GetPriorityGrouping+0x18>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	f003 0307 	and.w	r3, r3, #7
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	db0b      	blt.n	80047da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	4907      	ldr	r1, [pc, #28]	@ (80047e8 <__NVIC_EnableIRQ+0x38>)
 80047ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2001      	movs	r0, #1
 80047d2:	fa00 f202 	lsl.w	r2, r0, r2
 80047d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	e000e100 	.word	0xe000e100

080047ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db0a      	blt.n	8004816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	490c      	ldr	r1, [pc, #48]	@ (8004838 <__NVIC_SetPriority+0x4c>)
 8004806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	440b      	add	r3, r1
 8004810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004814:	e00a      	b.n	800482c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4908      	ldr	r1, [pc, #32]	@ (800483c <__NVIC_SetPriority+0x50>)
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	3b04      	subs	r3, #4
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	440b      	add	r3, r1
 800482a:	761a      	strb	r2, [r3, #24]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000e100 	.word	0xe000e100
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	@ 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f1c3 0307 	rsb	r3, r3, #7
 800485a:	2b04      	cmp	r3, #4
 800485c:	bf28      	it	cs
 800485e:	2304      	movcs	r3, #4
 8004860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3304      	adds	r3, #4
 8004866:	2b06      	cmp	r3, #6
 8004868:	d902      	bls.n	8004870 <NVIC_EncodePriority+0x30>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3b03      	subs	r3, #3
 800486e:	e000      	b.n	8004872 <NVIC_EncodePriority+0x32>
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	f04f 32ff 	mov.w	r2, #4294967295
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43da      	mvns	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	401a      	ands	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004888:	f04f 31ff 	mov.w	r1, #4294967295
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	43d9      	mvns	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004898:	4313      	orrs	r3, r2
         );
}
 800489a:	4618      	mov	r0, r3
 800489c:	3724      	adds	r7, #36	@ 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048b8:	d301      	bcc.n	80048be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ba:	2301      	movs	r3, #1
 80048bc:	e00f      	b.n	80048de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048be:	4a0a      	ldr	r2, [pc, #40]	@ (80048e8 <SysTick_Config+0x40>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048c6:	210f      	movs	r1, #15
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	f7ff ff8e 	bl	80047ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <SysTick_Config+0x40>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d6:	4b04      	ldr	r3, [pc, #16]	@ (80048e8 <SysTick_Config+0x40>)
 80048d8:	2207      	movs	r2, #7
 80048da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	e000e010 	.word	0xe000e010

080048ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff29 	bl	800474c <__NVIC_SetPriorityGrouping>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	4603      	mov	r3, r0
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004910:	f7ff ff40 	bl	8004794 <__NVIC_GetPriorityGrouping>
 8004914:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	6978      	ldr	r0, [r7, #20]
 800491c:	f7ff ff90 	bl	8004840 <NVIC_EncodePriority>
 8004920:	4602      	mov	r2, r0
 8004922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ff5f 	bl	80047ec <__NVIC_SetPriority>
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff33 	bl	80047b0 <__NVIC_EnableIRQ>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ffa4 	bl	80048a8 <SysTick_Config>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004970:	f3bf 8f5f 	dmb	sy
}
 8004974:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004976:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <HAL_MPU_Disable+0x28>)
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	4a06      	ldr	r2, [pc, #24]	@ (8004994 <HAL_MPU_Disable+0x28>)
 800497c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004980:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_MPU_Disable+0x2c>)
 8004984:	2200      	movs	r2, #0
 8004986:	605a      	str	r2, [r3, #4]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	e000ed00 	.word	0xe000ed00
 8004998:	e000ed90 	.word	0xe000ed90

0800499c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80049a4:	4a0b      	ldr	r2, [pc, #44]	@ (80049d4 <HAL_MPU_Enable+0x38>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80049ae:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <HAL_MPU_Enable+0x3c>)
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	4a09      	ldr	r2, [pc, #36]	@ (80049d8 <HAL_MPU_Enable+0x3c>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80049ba:	f3bf 8f4f 	dsb	sy
}
 80049be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049c0:	f3bf 8f6f 	isb	sy
}
 80049c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000ed90 	.word	0xe000ed90
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	785a      	ldrb	r2, [r3, #1]
 80049e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a58 <HAL_MPU_ConfigRegion+0x7c>)
 80049ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80049ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004a58 <HAL_MPU_ConfigRegion+0x7c>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	4a19      	ldr	r2, [pc, #100]	@ (8004a58 <HAL_MPU_ConfigRegion+0x7c>)
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80049f8:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <HAL_MPU_ConfigRegion+0x7c>)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7b1b      	ldrb	r3, [r3, #12]
 8004a04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7adb      	ldrb	r3, [r3, #11]
 8004a0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7a9b      	ldrb	r3, [r3, #10]
 8004a12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	7b5b      	ldrb	r3, [r3, #13]
 8004a1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004a1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	7b9b      	ldrb	r3, [r3, #14]
 8004a22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004a24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	7bdb      	ldrb	r3, [r3, #15]
 8004a2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004a2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7a5b      	ldrb	r3, [r3, #9]
 8004a32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004a34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	7a1b      	ldrb	r3, [r3, #8]
 8004a3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004a3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a44:	4a04      	ldr	r2, [pc, #16]	@ (8004a58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a48:	6113      	str	r3, [r2, #16]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	e000ed90 	.word	0xe000ed90

08004a5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e237      	b.n	8004ede <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d004      	beq.n	8004a84 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2280      	movs	r2, #128	@ 0x80
 8004a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e22c      	b.n	8004ede <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5c      	ldr	r2, [pc, #368]	@ (8004bfc <HAL_DMA_Abort_IT+0x1a0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a5b      	ldr	r2, [pc, #364]	@ (8004c00 <HAL_DMA_Abort_IT+0x1a4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a59      	ldr	r2, [pc, #356]	@ (8004c04 <HAL_DMA_Abort_IT+0x1a8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a58      	ldr	r2, [pc, #352]	@ (8004c08 <HAL_DMA_Abort_IT+0x1ac>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a56      	ldr	r2, [pc, #344]	@ (8004c0c <HAL_DMA_Abort_IT+0x1b0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a55      	ldr	r2, [pc, #340]	@ (8004c10 <HAL_DMA_Abort_IT+0x1b4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a53      	ldr	r2, [pc, #332]	@ (8004c14 <HAL_DMA_Abort_IT+0x1b8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a52      	ldr	r2, [pc, #328]	@ (8004c18 <HAL_DMA_Abort_IT+0x1bc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a50      	ldr	r2, [pc, #320]	@ (8004c1c <HAL_DMA_Abort_IT+0x1c0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a4f      	ldr	r2, [pc, #316]	@ (8004c20 <HAL_DMA_Abort_IT+0x1c4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4d      	ldr	r2, [pc, #308]	@ (8004c24 <HAL_DMA_Abort_IT+0x1c8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4c      	ldr	r2, [pc, #304]	@ (8004c28 <HAL_DMA_Abort_IT+0x1cc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a4a      	ldr	r2, [pc, #296]	@ (8004c2c <HAL_DMA_Abort_IT+0x1d0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a49      	ldr	r2, [pc, #292]	@ (8004c30 <HAL_DMA_Abort_IT+0x1d4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a47      	ldr	r2, [pc, #284]	@ (8004c34 <HAL_DMA_Abort_IT+0x1d8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a46      	ldr	r2, [pc, #280]	@ (8004c38 <HAL_DMA_Abort_IT+0x1dc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_DMA_Abort_IT+0xcc>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_DMA_Abort_IT+0xce>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8086 	beq.w	8004c3c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2204      	movs	r2, #4
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8004bfc <HAL_DMA_Abort_IT+0x1a0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d04a      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2e      	ldr	r2, [pc, #184]	@ (8004c00 <HAL_DMA_Abort_IT+0x1a4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d045      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2c      	ldr	r2, [pc, #176]	@ (8004c04 <HAL_DMA_Abort_IT+0x1a8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d040      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c08 <HAL_DMA_Abort_IT+0x1ac>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d03b      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a29      	ldr	r2, [pc, #164]	@ (8004c0c <HAL_DMA_Abort_IT+0x1b0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d036      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a28      	ldr	r2, [pc, #160]	@ (8004c10 <HAL_DMA_Abort_IT+0x1b4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d031      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a26      	ldr	r2, [pc, #152]	@ (8004c14 <HAL_DMA_Abort_IT+0x1b8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d02c      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a25      	ldr	r2, [pc, #148]	@ (8004c18 <HAL_DMA_Abort_IT+0x1bc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d027      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a23      	ldr	r2, [pc, #140]	@ (8004c1c <HAL_DMA_Abort_IT+0x1c0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a22      	ldr	r2, [pc, #136]	@ (8004c20 <HAL_DMA_Abort_IT+0x1c4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a20      	ldr	r2, [pc, #128]	@ (8004c24 <HAL_DMA_Abort_IT+0x1c8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1f      	ldr	r2, [pc, #124]	@ (8004c28 <HAL_DMA_Abort_IT+0x1cc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c2c <HAL_DMA_Abort_IT+0x1d0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8004c30 <HAL_DMA_Abort_IT+0x1d4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c34 <HAL_DMA_Abort_IT+0x1d8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x17c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a19      	ldr	r2, [pc, #100]	@ (8004c38 <HAL_DMA_Abort_IT+0x1dc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <HAL_DMA_Abort_IT+0x18e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e178      	b.n	8004edc <HAL_DMA_Abort_IT+0x480>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e16f      	b.n	8004edc <HAL_DMA_Abort_IT+0x480>
 8004bfc:	40020010 	.word	0x40020010
 8004c00:	40020028 	.word	0x40020028
 8004c04:	40020040 	.word	0x40020040
 8004c08:	40020058 	.word	0x40020058
 8004c0c:	40020070 	.word	0x40020070
 8004c10:	40020088 	.word	0x40020088
 8004c14:	400200a0 	.word	0x400200a0
 8004c18:	400200b8 	.word	0x400200b8
 8004c1c:	40020410 	.word	0x40020410
 8004c20:	40020428 	.word	0x40020428
 8004c24:	40020440 	.word	0x40020440
 8004c28:	40020458 	.word	0x40020458
 8004c2c:	40020470 	.word	0x40020470
 8004c30:	40020488 	.word	0x40020488
 8004c34:	400204a0 	.word	0x400204a0
 8004c38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 020e 	bic.w	r2, r2, #14
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a6c      	ldr	r2, [pc, #432]	@ (8004e04 <HAL_DMA_Abort_IT+0x3a8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d04a      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a6b      	ldr	r2, [pc, #428]	@ (8004e08 <HAL_DMA_Abort_IT+0x3ac>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d045      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a69      	ldr	r2, [pc, #420]	@ (8004e0c <HAL_DMA_Abort_IT+0x3b0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d040      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a68      	ldr	r2, [pc, #416]	@ (8004e10 <HAL_DMA_Abort_IT+0x3b4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d03b      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a66      	ldr	r2, [pc, #408]	@ (8004e14 <HAL_DMA_Abort_IT+0x3b8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d036      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a65      	ldr	r2, [pc, #404]	@ (8004e18 <HAL_DMA_Abort_IT+0x3bc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d031      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a63      	ldr	r2, [pc, #396]	@ (8004e1c <HAL_DMA_Abort_IT+0x3c0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d02c      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a62      	ldr	r2, [pc, #392]	@ (8004e20 <HAL_DMA_Abort_IT+0x3c4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d027      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a60      	ldr	r2, [pc, #384]	@ (8004e24 <HAL_DMA_Abort_IT+0x3c8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d022      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5f      	ldr	r2, [pc, #380]	@ (8004e28 <HAL_DMA_Abort_IT+0x3cc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01d      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8004e2c <HAL_DMA_Abort_IT+0x3d0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d018      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8004e30 <HAL_DMA_Abort_IT+0x3d4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e34 <HAL_DMA_Abort_IT+0x3d8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00e      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a59      	ldr	r2, [pc, #356]	@ (8004e38 <HAL_DMA_Abort_IT+0x3dc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d009      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a57      	ldr	r2, [pc, #348]	@ (8004e3c <HAL_DMA_Abort_IT+0x3e0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_DMA_Abort_IT+0x290>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a56      	ldr	r2, [pc, #344]	@ (8004e40 <HAL_DMA_Abort_IT+0x3e4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <HAL_DMA_Abort_IT+0x2a2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e007      	b.n	8004d0e <HAL_DMA_Abort_IT+0x2b2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a3c      	ldr	r2, [pc, #240]	@ (8004e04 <HAL_DMA_Abort_IT+0x3a8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d072      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e08 <HAL_DMA_Abort_IT+0x3ac>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d06d      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a39      	ldr	r2, [pc, #228]	@ (8004e0c <HAL_DMA_Abort_IT+0x3b0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d068      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a37      	ldr	r2, [pc, #220]	@ (8004e10 <HAL_DMA_Abort_IT+0x3b4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d063      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a36      	ldr	r2, [pc, #216]	@ (8004e14 <HAL_DMA_Abort_IT+0x3b8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d05e      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a34      	ldr	r2, [pc, #208]	@ (8004e18 <HAL_DMA_Abort_IT+0x3bc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d059      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a33      	ldr	r2, [pc, #204]	@ (8004e1c <HAL_DMA_Abort_IT+0x3c0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d054      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a31      	ldr	r2, [pc, #196]	@ (8004e20 <HAL_DMA_Abort_IT+0x3c4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d04f      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a30      	ldr	r2, [pc, #192]	@ (8004e24 <HAL_DMA_Abort_IT+0x3c8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d04a      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e28 <HAL_DMA_Abort_IT+0x3cc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d045      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2d      	ldr	r2, [pc, #180]	@ (8004e2c <HAL_DMA_Abort_IT+0x3d0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d040      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2b      	ldr	r2, [pc, #172]	@ (8004e30 <HAL_DMA_Abort_IT+0x3d4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d03b      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004e34 <HAL_DMA_Abort_IT+0x3d8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d036      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a28      	ldr	r2, [pc, #160]	@ (8004e38 <HAL_DMA_Abort_IT+0x3dc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d031      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a27      	ldr	r2, [pc, #156]	@ (8004e3c <HAL_DMA_Abort_IT+0x3e0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d02c      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a25      	ldr	r2, [pc, #148]	@ (8004e40 <HAL_DMA_Abort_IT+0x3e4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d027      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a24      	ldr	r2, [pc, #144]	@ (8004e44 <HAL_DMA_Abort_IT+0x3e8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	@ (8004e48 <HAL_DMA_Abort_IT+0x3ec>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01d      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a21      	ldr	r2, [pc, #132]	@ (8004e4c <HAL_DMA_Abort_IT+0x3f0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e50 <HAL_DMA_Abort_IT+0x3f4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1e      	ldr	r2, [pc, #120]	@ (8004e54 <HAL_DMA_Abort_IT+0x3f8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e58 <HAL_DMA_Abort_IT+0x3fc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1b      	ldr	r2, [pc, #108]	@ (8004e5c <HAL_DMA_Abort_IT+0x400>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_DMA_Abort_IT+0x3a2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a19      	ldr	r2, [pc, #100]	@ (8004e60 <HAL_DMA_Abort_IT+0x404>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d132      	bne.n	8004e64 <HAL_DMA_Abort_IT+0x408>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e031      	b.n	8004e66 <HAL_DMA_Abort_IT+0x40a>
 8004e02:	bf00      	nop
 8004e04:	40020010 	.word	0x40020010
 8004e08:	40020028 	.word	0x40020028
 8004e0c:	40020040 	.word	0x40020040
 8004e10:	40020058 	.word	0x40020058
 8004e14:	40020070 	.word	0x40020070
 8004e18:	40020088 	.word	0x40020088
 8004e1c:	400200a0 	.word	0x400200a0
 8004e20:	400200b8 	.word	0x400200b8
 8004e24:	40020410 	.word	0x40020410
 8004e28:	40020428 	.word	0x40020428
 8004e2c:	40020440 	.word	0x40020440
 8004e30:	40020458 	.word	0x40020458
 8004e34:	40020470 	.word	0x40020470
 8004e38:	40020488 	.word	0x40020488
 8004e3c:	400204a0 	.word	0x400204a0
 8004e40:	400204b8 	.word	0x400204b8
 8004e44:	58025408 	.word	0x58025408
 8004e48:	5802541c 	.word	0x5802541c
 8004e4c:	58025430 	.word	0x58025430
 8004e50:	58025444 	.word	0x58025444
 8004e54:	58025458 	.word	0x58025458
 8004e58:	5802546c 	.word	0x5802546c
 8004e5c:	58025480 	.word	0x58025480
 8004e60:	58025494 	.word	0x58025494
 8004e64:	2300      	movs	r3, #0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d028      	beq.n	8004ebc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	2201      	movs	r2, #1
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eb0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004eba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop

08004ee8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b098      	sub	sp, #96	@ 0x60
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004ef0:	4a84      	ldr	r2, [pc, #528]	@ (8005104 <HAL_FDCAN_Init+0x21c>)
 8004ef2:	f107 030c 	add.w	r3, r7, #12
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	224c      	movs	r2, #76	@ 0x4c
 8004efa:	4618      	mov	r0, r3
 8004efc:	f005 fb32 	bl	800a564 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e1c6      	b.n	8005298 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005108 <HAL_FDCAN_Init+0x220>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d106      	bne.n	8004f22 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff f862 	bl	8004000 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0210 	bic.w	r2, r2, #16
 8004f4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f4c:	f7ff fbc2 	bl	80046d4 <HAL_GetTick>
 8004f50:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f52:	e014      	b.n	8004f7e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f54:	f7ff fbbe 	bl	80046d4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b0a      	cmp	r3, #10
 8004f60:	d90d      	bls.n	8004f7e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2203      	movs	r2, #3
 8004f76:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e18c      	b.n	8005298 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d0e3      	beq.n	8004f54 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f9c:	f7ff fb9a 	bl	80046d4 <HAL_GetTick>
 8004fa0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004fa2:	e014      	b.n	8004fce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004fa4:	f7ff fb96 	bl	80046d4 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b0a      	cmp	r3, #10
 8004fb0:	d90d      	bls.n	8004fce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fb8:	f043 0201 	orr.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e164      	b.n	8005298 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0e3      	beq.n	8004fa4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0202 	orr.w	r2, r2, #2
 8004fea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	7c1b      	ldrb	r3, [r3, #16]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d108      	bne.n	8005006 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005002:	619a      	str	r2, [r3, #24]
 8005004:	e007      	b.n	8005016 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005014:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7c5b      	ldrb	r3, [r3, #17]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d108      	bne.n	8005030 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800502c:	619a      	str	r2, [r3, #24]
 800502e:	e007      	b.n	8005040 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800503e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7c9b      	ldrb	r3, [r3, #18]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d108      	bne.n	800505a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005056:	619a      	str	r2, [r3, #24]
 8005058:	e007      	b.n	800506a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699a      	ldr	r2, [r3, #24]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005068:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800508e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0210 	bic.w	r2, r2, #16
 800509e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d108      	bne.n	80050ba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0204 	orr.w	r2, r2, #4
 80050b6:	619a      	str	r2, [r3, #24]
 80050b8:	e030      	b.n	800511c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02c      	beq.n	800511c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d020      	beq.n	800510c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050d8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0210 	orr.w	r2, r2, #16
 80050e8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d114      	bne.n	800511c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0220 	orr.w	r2, r2, #32
 8005100:	619a      	str	r2, [r3, #24]
 8005102:	e00b      	b.n	800511c <HAL_FDCAN_Init+0x234>
 8005104:	0800b3c0 	.word	0x0800b3c0
 8005108:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0220 	orr.w	r2, r2, #32
 800511a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	3b01      	subs	r3, #1
 8005122:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	3b01      	subs	r3, #1
 800512a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800512c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005134:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	3b01      	subs	r3, #1
 800513e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005144:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005146:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005150:	d115      	bne.n	800517e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	3b01      	subs	r3, #1
 800515e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005160:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	3b01      	subs	r3, #1
 8005168:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800516a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	3b01      	subs	r3, #1
 8005174:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800517a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800517c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a4:	4413      	add	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d011      	beq.n	80051ce <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80051b2:	f023 0107 	bic.w	r1, r3, #7
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	3360      	adds	r3, #96	@ 0x60
 80051be:	443b      	add	r3, r7
 80051c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d011      	beq.n	80051fa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051de:	f023 0107 	bic.w	r1, r3, #7
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	3360      	adds	r3, #96	@ 0x60
 80051ea:	443b      	add	r3, r7
 80051ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d012      	beq.n	8005228 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800520a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	3360      	adds	r3, #96	@ 0x60
 8005216:	443b      	add	r3, r7
 8005218:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005238:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	3360      	adds	r3, #96	@ 0x60
 8005244:	443b      	add	r3, r7
 8005246:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a11      	ldr	r2, [pc, #68]	@ (80052a0 <HAL_FDCAN_Init+0x3b8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d107      	bne.n	8005270 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f022 0203 	bic.w	r2, r2, #3
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fde5 	bl	8005e58 <FDCAN_CalcultateRamBlockAddresses>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005294:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005298:	4618      	mov	r0, r3
 800529a:	3760      	adds	r7, #96	@ 0x60
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	4000a000 	.word	0x4000a000

080052a4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80052b4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d002      	beq.n	80052c2 <HAL_FDCAN_ConfigFilter+0x1e>
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d157      	bne.n	8005372 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d12b      	bne.n	8005322 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b07      	cmp	r3, #7
 80052d0:	d10d      	bne.n	80052ee <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80052de:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80052e4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80052e6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e00e      	b.n	800530c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052fa:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005302:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e025      	b.n	800536e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	075a      	lsls	r2, r3, #29
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b07      	cmp	r3, #7
 8005336:	d103      	bne.n	8005340 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e006      	b.n	800534e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	079a      	lsls	r2, r3, #30
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	3304      	adds	r3, #4
 8005366:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e008      	b.n	8005384 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005378:	f043 0202 	orr.w	r2, r3, #2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d111      	bne.n	80053c8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e008      	b.n	80053da <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053ce:	f043 0204 	orr.w	r2, r3, #4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b086      	sub	sp, #24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d141      	bne.n	8005482 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005406:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005414:	f043 0220 	orr.w	r2, r3, #32
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e038      	b.n	8005494 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800542a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005438:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e026      	b.n	8005494 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800544e:	0c1b      	lsrs	r3, r3, #16
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fe81 	bl	8006164 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2101      	movs	r1, #1
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	fa01 f202 	lsl.w	r2, r1, r2
 800546e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005472:	2201      	movs	r2, #1
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	409a      	lsls	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e008      	b.n	8005494 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005488:	f043 0208 	orr.w	r2, r3, #8
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800549c:	b480      	push	{r7}
 800549e:	b08b      	sub	sp, #44	@ 0x2c
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80054b4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80054b6:	7efb      	ldrb	r3, [r7, #27]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	f040 8149 	bne.w	8005750 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b40      	cmp	r3, #64	@ 0x40
 80054c2:	d14c      	bne.n	800555e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e13c      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e12a      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005514:	0e1b      	lsrs	r3, r3, #24
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d10a      	bne.n	8005534 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005526:	0fdb      	lsrs	r3, r3, #31
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005530:	2301      	movs	r3, #1
 8005532:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005550:	69f9      	ldr	r1, [r7, #28]
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
 800555c:	e068      	b.n	8005630 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b41      	cmp	r3, #65	@ 0x41
 8005562:	d14c      	bne.n	80055fe <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800556c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800557a:	f043 0220 	orr.w	r2, r3, #32
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0ec      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800559e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0da      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055b4:	0e1b      	lsrs	r3, r3, #24
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10a      	bne.n	80055d4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055c6:	0fdb      	lsrs	r3, r3, #31
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fc:	e018      	b.n	8005630 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	429a      	cmp	r2, r3
 8005606:	d309      	bcc.n	800561c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0a2      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0c9b      	lsrs	r3, r3, #18
 800564a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e005      	b.n	8005660 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	3304      	adds	r3, #4
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	0e1b      	lsrs	r3, r3, #24
 80056b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	0fda      	lsrs	r2, r3, #31
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	3304      	adds	r3, #4
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	623b      	str	r3, [r7, #32]
 80056d4:	e00a      	b.n	80056ec <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	441a      	add	r2, r3
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	440b      	add	r3, r1
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	3301      	adds	r3, #1
 80056ea:	623b      	str	r3, [r7, #32]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005770 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
 80056f4:	461a      	mov	r2, r3
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d3ec      	bcc.n	80056d6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b40      	cmp	r3, #64	@ 0x40
 8005700:	d105      	bne.n	800570e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800570c:	e01e      	b.n	800574c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b41      	cmp	r3, #65	@ 0x41
 8005712:	d105      	bne.n	8005720 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800571e:	e015      	b.n	800574c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b1f      	cmp	r3, #31
 8005724:	d808      	bhi.n	8005738 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2101      	movs	r1, #1
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	fa01 f202 	lsl.w	r2, r1, r2
 8005732:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005736:	e009      	b.n	800574c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 021f 	and.w	r2, r3, #31
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2101      	movs	r1, #1
 8005744:	fa01 f202 	lsl.w	r2, r1, r2
 8005748:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e008      	b.n	8005762 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005756:	f043 0208 	orr.w	r2, r3, #8
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	372c      	adds	r7, #44	@ 0x2c
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	0800b41c 	.word	0x0800b41c

08005774 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005786:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d002      	beq.n	8005794 <HAL_FDCAN_ActivateNotification+0x20>
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d155      	bne.n	8005840 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d108      	bne.n	80057b4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057b2:	e014      	b.n	80057de <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4013      	ands	r3, r2
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d108      	bne.n	80057d6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0202 	orr.w	r2, r2, #2
 80057d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057d4:	e003      	b.n	80057de <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2203      	movs	r2, #3
 80057dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	430a      	orrs	r2, r1
 8005816:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	4b0f      	ldr	r3, [pc, #60]	@ (8005860 <HAL_FDCAN_ActivateNotification+0xec>)
 8005824:	4013      	ands	r3, r2
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	430b      	orrs	r3, r1
 800582c:	6553      	str	r3, [r2, #84]	@ 0x54
 800582e:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	0f9b      	lsrs	r3, r3, #30
 8005836:	490b      	ldr	r1, [pc, #44]	@ (8005864 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005838:	4313      	orrs	r3, r2
 800583a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e008      	b.n	8005852 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005846:	f043 0202 	orr.w	r2, r3, #2
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
  }
}
 8005852:	4618      	mov	r0, r3
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	3fcfffff 	.word	0x3fcfffff
 8005864:	4000a800 	.word	0x4000a800

08005868 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b096      	sub	sp, #88	@ 0x58
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005870:	4b95      	ldr	r3, [pc, #596]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	079b      	lsls	r3, r3, #30
 8005876:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005878:	4b93      	ldr	r3, [pc, #588]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	079b      	lsls	r3, r3, #30
 800587e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005880:	4013      	ands	r3, r2
 8005882:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800588e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005898:	4013      	ands	r3, r2
 800589a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058b0:	4013      	ands	r3, r2
 80058b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058c8:	4013      	ands	r3, r2
 80058ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80058d6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058e0:	4013      	ands	r3, r2
 80058e2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ea:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80058ee:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058f8:	4013      	ands	r3, r2
 80058fa:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800590a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800590c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00f      	beq.n	8005936 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005928:	651a      	str	r2, [r3, #80]	@ 0x50
 800592a:	4b67      	ldr	r3, [pc, #412]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 800592c:	2200      	movs	r2, #0
 800592e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fa44 	bl	8005dbe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01c      	beq.n	800597a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005946:	2b00      	cmp	r3, #0
 8005948:	d017      	beq.n	800597a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005952:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800595c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800595e:	4013      	ands	r3, r2
 8005960:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800596a:	651a      	str	r2, [r3, #80]	@ 0x50
 800596c:	4b56      	ldr	r3, [pc, #344]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 800596e:	2200      	movs	r2, #0
 8005970:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005972:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f9f9 	bl	8005d6c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800597a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00d      	beq.n	800599c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005986:	4b51      	ldr	r3, [pc, #324]	@ (8005acc <HAL_FDCAN_IRQHandler+0x264>)
 8005988:	400b      	ands	r3, r1
 800598a:	6513      	str	r3, [r2, #80]	@ 0x50
 800598c:	4a4e      	ldr	r2, [pc, #312]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 800598e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005990:	0f9b      	lsrs	r3, r3, #30
 8005992:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005994:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f9b2 	bl	8005d00 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800599c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059a8:	4b48      	ldr	r3, [pc, #288]	@ (8005acc <HAL_FDCAN_IRQHandler+0x264>)
 80059aa:	400b      	ands	r3, r1
 80059ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80059ae:	4a46      	ldr	r2, [pc, #280]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 80059b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059b2:	0f9b      	lsrs	r3, r3, #30
 80059b4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80059b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f9ac 	bl	8005d16 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80059be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00d      	beq.n	80059e0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80059ca:	4b40      	ldr	r3, [pc, #256]	@ (8005acc <HAL_FDCAN_IRQHandler+0x264>)
 80059cc:	400b      	ands	r3, r1
 80059ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80059d0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 80059d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d4:	0f9b      	lsrs	r3, r3, #30
 80059d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80059d8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fd ffb2 	bl	8003944 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80059e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00d      	beq.n	8005a02 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80059ec:	4b37      	ldr	r3, [pc, #220]	@ (8005acc <HAL_FDCAN_IRQHandler+0x264>)
 80059ee:	400b      	ands	r3, r1
 80059f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80059f2:	4a35      	ldr	r2, [pc, #212]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 80059f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059f6:	0f9b      	lsrs	r3, r3, #30
 80059f8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80059fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f995 	bl	8005d2c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00f      	beq.n	8005a2c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a20:	4b29      	ldr	r3, [pc, #164]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f98b 	bl	8005d42 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01c      	beq.n	8005a70 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d017      	beq.n	8005a70 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a48:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a54:	4013      	ands	r3, r2
 8005a56:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a60:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a62:	4b19      	ldr	r3, [pc, #100]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005a68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f973 	bl	8005d56 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00f      	beq.n	8005a9a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005a8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f974 	bl	8005d82 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d015      	beq.n	8005ad0 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d010      	beq.n	8005ad0 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005ab6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ab8:	4b03      	ldr	r3, [pc, #12]	@ (8005ac8 <HAL_FDCAN_IRQHandler+0x260>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f969 	bl	8005d96 <HAL_FDCAN_TimestampWraparoundCallback>
 8005ac4:	e004      	b.n	8005ad0 <HAL_FDCAN_IRQHandler+0x268>
 8005ac6:	bf00      	nop
 8005ac8:	4000a800 	.word	0x4000a800
 8005acc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00f      	beq.n	8005afa <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005aec:	651a      	str	r2, [r3, #80]	@ 0x50
 8005aee:	4b81      	ldr	r3, [pc, #516]	@ (8005cf4 <HAL_FDCAN_IRQHandler+0x48c>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f958 	bl	8005daa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d014      	beq.n	8005b2e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00f      	beq.n	8005b2e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005b16:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b18:	4b76      	ldr	r3, [pc, #472]	@ (8005cf4 <HAL_FDCAN_IRQHandler+0x48c>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf8 <HAL_FDCAN_IRQHandler+0x490>)
 8005b3c:	400b      	ands	r3, r1
 8005b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b40:	4a6c      	ldr	r2, [pc, #432]	@ (8005cf4 <HAL_FDCAN_IRQHandler+0x48c>)
 8005b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b44:	0f9b      	lsrs	r3, r3, #30
 8005b46:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005b48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f94b 	bl	8005de6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b5c:	4b66      	ldr	r3, [pc, #408]	@ (8005cf8 <HAL_FDCAN_IRQHandler+0x490>)
 8005b5e:	400b      	ands	r3, r1
 8005b60:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b62:	4a64      	ldr	r2, [pc, #400]	@ (8005cf4 <HAL_FDCAN_IRQHandler+0x48c>)
 8005b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b66:	0f9b      	lsrs	r3, r3, #30
 8005b68:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8005cfc <HAL_FDCAN_IRQHandler+0x494>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	f040 80aa 	bne.w	8005cda <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80a2 	beq.w	8005cda <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005baa:	4013      	ands	r3, r2
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bda:	4013      	ands	r3, r2
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005be8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005c00:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c2a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8e4 	bl	8005dfc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c40:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f8e4 	bl	8005e12 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d019      	beq.n	8005c88 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d014      	beq.n	8005c88 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c74:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2240      	movs	r2, #64	@ 0x40
 8005c7c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	6939      	ldr	r1, [r7, #16]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8d0 	bl	8005e28 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c94:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005c96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f8d1 	bl	8005e40 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f874 	bl	8005dd2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005cea:	bf00      	nop
 8005cec:	3758      	adds	r7, #88	@ 0x58
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	4000a800 	.word	0x4000a800
 8005cf8:	3fcfffff 	.word	0x3fcfffff
 8005cfc:	4000a000 	.word	0x4000a000

08005d00 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e64:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e6e:	4ba7      	ldr	r3, [pc, #668]	@ (800610c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	0091      	lsls	r1, r2, #2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e88:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	041a      	lsls	r2, r3, #16
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005eae:	4b97      	ldr	r3, [pc, #604]	@ (800610c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	0091      	lsls	r1, r2, #2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	041a      	lsls	r2, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005ef0:	4b86      	ldr	r3, [pc, #536]	@ (800610c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	0091      	lsls	r1, r2, #2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f0a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	041a      	lsls	r2, r3, #16
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005f38:	4b74      	ldr	r3, [pc, #464]	@ (800610c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	0091      	lsls	r1, r2, #2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	430b      	orrs	r3, r1
 8005f46:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f52:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f5a:	041a      	lsls	r2, r3, #16
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	4413      	add	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005f80:	4b62      	ldr	r3, [pc, #392]	@ (800610c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	0091      	lsls	r1, r2, #2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005fac:	4b57      	ldr	r3, [pc, #348]	@ (800610c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	0091      	lsls	r1, r2, #2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fc6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fce:	041a      	lsls	r2, r3, #16
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005fee:	4b47      	ldr	r3, [pc, #284]	@ (800610c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	0091      	lsls	r1, r2, #2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006008:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006010:	041a      	lsls	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006024:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800602c:	061a      	lsls	r2, r3, #24
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800603c:	4b34      	ldr	r3, [pc, #208]	@ (8006110 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800603e:	4413      	add	r3, r2
 8006040:	009a      	lsls	r2, r3, #2
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	441a      	add	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	441a      	add	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006078:	441a      	add	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800608a:	fb01 f303 	mul.w	r3, r1, r3
 800608e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006090:	441a      	add	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80060a8:	441a      	add	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	4a04      	ldr	r2, [pc, #16]	@ (8006114 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d915      	bls.n	8006134 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006108:	e006      	b.n	8006118 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800610a:	bf00      	nop
 800610c:	ffff0003 	.word	0xffff0003
 8006110:	10002b00 	.word	0x10002b00
 8006114:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800611e:	f043 0220 	orr.w	r2, r3, #32
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2203      	movs	r2, #3
 800612c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e010      	b.n	8006156 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e005      	b.n	8006148 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3304      	adds	r3, #4
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	429a      	cmp	r2, r3
 8006152:	d3f3      	bcc.n	800613c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop

08006164 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006164:	b480      	push	{r7}
 8006166:	b089      	sub	sp, #36	@ 0x24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006182:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800618a:	4313      	orrs	r3, r2
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	e00a      	b.n	80061a6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006198:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800619e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80061a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061a4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80061b0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80061b6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80061bc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	3304      	adds	r3, #4
 80061e8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	3304      	adds	r3, #4
 80061f4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e020      	b.n	800623e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	3303      	adds	r3, #3
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	3302      	adds	r3, #2
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	440b      	add	r3, r1
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006214:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	3301      	adds	r3, #1
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	440b      	add	r3, r1
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006222:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	440a      	add	r2, r1
 800622a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800622c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	3304      	adds	r3, #4
 8006236:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	3304      	adds	r3, #4
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	4a06      	ldr	r2, [pc, #24]	@ (800625c <FDCAN_CopyMessageToRAM+0xf8>)
 8006244:	5cd3      	ldrb	r3, [r2, r3]
 8006246:	461a      	mov	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4293      	cmp	r3, r2
 800624c:	d3d6      	bcc.n	80061fc <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	3724      	adds	r7, #36	@ 0x24
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	0800b41c 	.word	0x0800b41c

08006260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006260:	b480      	push	{r7}
 8006262:	b089      	sub	sp, #36	@ 0x24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800626e:	4b89      	ldr	r3, [pc, #548]	@ (8006494 <HAL_GPIO_Init+0x234>)
 8006270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006272:	e194      	b.n	800659e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2101      	movs	r1, #1
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	fa01 f303 	lsl.w	r3, r1, r3
 8006280:	4013      	ands	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8186 	beq.w	8006598 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d005      	beq.n	80062a4 <HAL_GPIO_Init+0x44>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d130      	bne.n	8006306 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	2203      	movs	r2, #3
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	43db      	mvns	r3, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4013      	ands	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062da:	2201      	movs	r2, #1
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43db      	mvns	r3, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4013      	ands	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	f003 0201 	and.w	r2, r3, #1
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b03      	cmp	r3, #3
 8006310:	d017      	beq.n	8006342 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	2203      	movs	r2, #3
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	43db      	mvns	r3, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4013      	ands	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d123      	bne.n	8006396 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	08da      	lsrs	r2, r3, #3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3208      	adds	r2, #8
 8006356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	220f      	movs	r2, #15
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	43db      	mvns	r3, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4013      	ands	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4313      	orrs	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	08da      	lsrs	r2, r3, #3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3208      	adds	r2, #8
 8006390:	69b9      	ldr	r1, [r7, #24]
 8006392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	2203      	movs	r2, #3
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	43db      	mvns	r3, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4013      	ands	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f003 0203 	and.w	r2, r3, #3
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80e0 	beq.w	8006598 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006498 <HAL_GPIO_Init+0x238>)
 80063da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063de:	4a2e      	ldr	r2, [pc, #184]	@ (8006498 <HAL_GPIO_Init+0x238>)
 80063e0:	f043 0302 	orr.w	r3, r3, #2
 80063e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80063e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006498 <HAL_GPIO_Init+0x238>)
 80063ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063f6:	4a29      	ldr	r2, [pc, #164]	@ (800649c <HAL_GPIO_Init+0x23c>)
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	089b      	lsrs	r3, r3, #2
 80063fc:	3302      	adds	r3, #2
 80063fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	220f      	movs	r2, #15
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	4013      	ands	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a20      	ldr	r2, [pc, #128]	@ (80064a0 <HAL_GPIO_Init+0x240>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d052      	beq.n	80064c8 <HAL_GPIO_Init+0x268>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <HAL_GPIO_Init+0x244>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d031      	beq.n	800648e <HAL_GPIO_Init+0x22e>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <HAL_GPIO_Init+0x248>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02b      	beq.n	800648a <HAL_GPIO_Init+0x22a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <HAL_GPIO_Init+0x24c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d025      	beq.n	8006486 <HAL_GPIO_Init+0x226>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <HAL_GPIO_Init+0x250>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d01f      	beq.n	8006482 <HAL_GPIO_Init+0x222>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1b      	ldr	r2, [pc, #108]	@ (80064b4 <HAL_GPIO_Init+0x254>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d019      	beq.n	800647e <HAL_GPIO_Init+0x21e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1a      	ldr	r2, [pc, #104]	@ (80064b8 <HAL_GPIO_Init+0x258>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_GPIO_Init+0x21a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <HAL_GPIO_Init+0x25c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00d      	beq.n	8006476 <HAL_GPIO_Init+0x216>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <HAL_GPIO_Init+0x260>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d007      	beq.n	8006472 <HAL_GPIO_Init+0x212>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <HAL_GPIO_Init+0x264>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <HAL_GPIO_Init+0x20e>
 800646a:	2309      	movs	r3, #9
 800646c:	e02d      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 800646e:	230a      	movs	r3, #10
 8006470:	e02b      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 8006472:	2308      	movs	r3, #8
 8006474:	e029      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 8006476:	2307      	movs	r3, #7
 8006478:	e027      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 800647a:	2306      	movs	r3, #6
 800647c:	e025      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 800647e:	2305      	movs	r3, #5
 8006480:	e023      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 8006482:	2304      	movs	r3, #4
 8006484:	e021      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 8006486:	2303      	movs	r3, #3
 8006488:	e01f      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 800648a:	2302      	movs	r3, #2
 800648c:	e01d      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 800648e:	2301      	movs	r3, #1
 8006490:	e01b      	b.n	80064ca <HAL_GPIO_Init+0x26a>
 8006492:	bf00      	nop
 8006494:	58000080 	.word	0x58000080
 8006498:	58024400 	.word	0x58024400
 800649c:	58000400 	.word	0x58000400
 80064a0:	58020000 	.word	0x58020000
 80064a4:	58020400 	.word	0x58020400
 80064a8:	58020800 	.word	0x58020800
 80064ac:	58020c00 	.word	0x58020c00
 80064b0:	58021000 	.word	0x58021000
 80064b4:	58021400 	.word	0x58021400
 80064b8:	58021800 	.word	0x58021800
 80064bc:	58021c00 	.word	0x58021c00
 80064c0:	58022000 	.word	0x58022000
 80064c4:	58022400 	.word	0x58022400
 80064c8:	2300      	movs	r3, #0
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	f002 0203 	and.w	r2, r2, #3
 80064d0:	0092      	lsls	r2, r2, #2
 80064d2:	4093      	lsls	r3, r2
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064da:	4938      	ldr	r1, [pc, #224]	@ (80065bc <HAL_GPIO_Init+0x35c>)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	089b      	lsrs	r3, r3, #2
 80064e0:	3302      	adds	r3, #2
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800650e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	43db      	mvns	r3, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4013      	ands	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800653c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	43db      	mvns	r3, r3
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	43db      	mvns	r3, r3
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	4013      	ands	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	3301      	adds	r3, #1
 800659c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f ae63 	bne.w	8006274 <HAL_GPIO_Init+0x14>
  }
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	3724      	adds	r7, #36	@ 0x24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	58000400 	.word	0x58000400

080065c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	887b      	ldrh	r3, [r7, #2]
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	e001      	b.n	80065e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	807b      	strh	r3, [r7, #2]
 80065fc:	4613      	mov	r3, r2
 80065fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006600:	787b      	ldrb	r3, [r7, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006606:	887a      	ldrh	r2, [r7, #2]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800660c:	e003      	b.n	8006616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800660e:	887b      	ldrh	r3, [r7, #2]
 8006610:	041a      	lsls	r2, r3, #16
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	619a      	str	r2, [r3, #24]
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800662c:	4b19      	ldr	r3, [pc, #100]	@ (8006694 <HAL_PWREx_ConfigSupply+0x70>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b04      	cmp	r3, #4
 8006636:	d00a      	beq.n	800664e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006638:	4b16      	ldr	r3, [pc, #88]	@ (8006694 <HAL_PWREx_ConfigSupply+0x70>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	429a      	cmp	r2, r3
 8006644:	d001      	beq.n	800664a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e01f      	b.n	800668a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e01d      	b.n	800668a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800664e:	4b11      	ldr	r3, [pc, #68]	@ (8006694 <HAL_PWREx_ConfigSupply+0x70>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f023 0207 	bic.w	r2, r3, #7
 8006656:	490f      	ldr	r1, [pc, #60]	@ (8006694 <HAL_PWREx_ConfigSupply+0x70>)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4313      	orrs	r3, r2
 800665c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800665e:	f7fe f839 	bl	80046d4 <HAL_GetTick>
 8006662:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006664:	e009      	b.n	800667a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006666:	f7fe f835 	bl	80046d4 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006674:	d901      	bls.n	800667a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e007      	b.n	800668a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800667a:	4b06      	ldr	r3, [pc, #24]	@ (8006694 <HAL_PWREx_ConfigSupply+0x70>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006686:	d1ee      	bne.n	8006666 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	58024800 	.word	0x58024800

08006698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	@ 0x30
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f000 bc48 	b.w	8006f3c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8088 	beq.w	80067ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ba:	4b99      	ldr	r3, [pc, #612]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066c4:	4b96      	ldr	r3, [pc, #600]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d007      	beq.n	80066e0 <HAL_RCC_OscConfig+0x48>
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	2b18      	cmp	r3, #24
 80066d4:	d111      	bne.n	80066fa <HAL_RCC_OscConfig+0x62>
 80066d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d10c      	bne.n	80066fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e0:	4b8f      	ldr	r3, [pc, #572]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d06d      	beq.n	80067c8 <HAL_RCC_OscConfig+0x130>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d169      	bne.n	80067c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f000 bc21 	b.w	8006f3c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006702:	d106      	bne.n	8006712 <HAL_RCC_OscConfig+0x7a>
 8006704:	4b86      	ldr	r3, [pc, #536]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a85      	ldr	r2, [pc, #532]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800670a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e02e      	b.n	8006770 <HAL_RCC_OscConfig+0xd8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10c      	bne.n	8006734 <HAL_RCC_OscConfig+0x9c>
 800671a:	4b81      	ldr	r3, [pc, #516]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a80      	ldr	r2, [pc, #512]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	4b7e      	ldr	r3, [pc, #504]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a7d      	ldr	r2, [pc, #500]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800672c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e01d      	b.n	8006770 <HAL_RCC_OscConfig+0xd8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800673c:	d10c      	bne.n	8006758 <HAL_RCC_OscConfig+0xc0>
 800673e:	4b78      	ldr	r3, [pc, #480]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a77      	ldr	r2, [pc, #476]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4b75      	ldr	r3, [pc, #468]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a74      	ldr	r2, [pc, #464]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e00b      	b.n	8006770 <HAL_RCC_OscConfig+0xd8>
 8006758:	4b71      	ldr	r3, [pc, #452]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a70      	ldr	r2, [pc, #448]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800675e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4b6e      	ldr	r3, [pc, #440]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6d      	ldr	r2, [pc, #436]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800676a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800676e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d013      	beq.n	80067a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fd ffac 	bl	80046d4 <HAL_GetTick>
 800677c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006780:	f7fd ffa8 	bl	80046d4 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b64      	cmp	r3, #100	@ 0x64
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e3d4      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006792:	4b63      	ldr	r3, [pc, #396]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <HAL_RCC_OscConfig+0xe8>
 800679e:	e014      	b.n	80067ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fd ff98 	bl	80046d4 <HAL_GetTick>
 80067a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a8:	f7fd ff94 	bl	80046d4 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	@ 0x64
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e3c0      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067ba:	4b59      	ldr	r3, [pc, #356]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f0      	bne.n	80067a8 <HAL_RCC_OscConfig+0x110>
 80067c6:	e000      	b.n	80067ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 80ca 	beq.w	800696c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d8:	4b51      	ldr	r3, [pc, #324]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <HAL_RCC_OscConfig+0x166>
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b18      	cmp	r3, #24
 80067f2:	d156      	bne.n	80068a2 <HAL_RCC_OscConfig+0x20a>
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d151      	bne.n	80068a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067fe:	4b48      	ldr	r3, [pc, #288]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <HAL_RCC_OscConfig+0x17e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e392      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006816:	4b42      	ldr	r3, [pc, #264]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f023 0219 	bic.w	r2, r3, #25
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	493f      	ldr	r1, [pc, #252]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006824:	4313      	orrs	r3, r2
 8006826:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006828:	f7fd ff54 	bl	80046d4 <HAL_GetTick>
 800682c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006830:	f7fd ff50 	bl	80046d4 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e37c      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006842:	4b37      	ldr	r3, [pc, #220]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f0      	beq.n	8006830 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800684e:	f7fd ff71 	bl	8004734 <HAL_GetREVID>
 8006852:	4603      	mov	r3, r0
 8006854:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006858:	4293      	cmp	r3, r2
 800685a:	d817      	bhi.n	800688c <HAL_RCC_OscConfig+0x1f4>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	d108      	bne.n	8006876 <HAL_RCC_OscConfig+0x1de>
 8006864:	4b2e      	ldr	r3, [pc, #184]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800686c:	4a2c      	ldr	r2, [pc, #176]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006872:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006874:	e07a      	b.n	800696c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006876:	4b2a      	ldr	r3, [pc, #168]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	031b      	lsls	r3, r3, #12
 8006884:	4926      	ldr	r1, [pc, #152]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006886:	4313      	orrs	r3, r2
 8006888:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800688a:	e06f      	b.n	800696c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800688c:	4b24      	ldr	r3, [pc, #144]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	061b      	lsls	r3, r3, #24
 800689a:	4921      	ldr	r1, [pc, #132]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a0:	e064      	b.n	800696c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d047      	beq.n	800693a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f023 0219 	bic.w	r2, r3, #25
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	491a      	ldr	r1, [pc, #104]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fd ff0a 	bl	80046d4 <HAL_GetTick>
 80068c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c4:	f7fd ff06 	bl	80046d4 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e332      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068d6:	4b12      	ldr	r3, [pc, #72]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e2:	f7fd ff27 	bl	8004734 <HAL_GetREVID>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d819      	bhi.n	8006924 <HAL_RCC_OscConfig+0x28c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b40      	cmp	r3, #64	@ 0x40
 80068f6:	d108      	bne.n	800690a <HAL_RCC_OscConfig+0x272>
 80068f8:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006900:	4a07      	ldr	r2, [pc, #28]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 8006902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006906:	6053      	str	r3, [r2, #4]
 8006908:	e030      	b.n	800696c <HAL_RCC_OscConfig+0x2d4>
 800690a:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	031b      	lsls	r3, r3, #12
 8006918:	4901      	ldr	r1, [pc, #4]	@ (8006920 <HAL_RCC_OscConfig+0x288>)
 800691a:	4313      	orrs	r3, r2
 800691c:	604b      	str	r3, [r1, #4]
 800691e:	e025      	b.n	800696c <HAL_RCC_OscConfig+0x2d4>
 8006920:	58024400 	.word	0x58024400
 8006924:	4b9a      	ldr	r3, [pc, #616]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	061b      	lsls	r3, r3, #24
 8006932:	4997      	ldr	r1, [pc, #604]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006934:	4313      	orrs	r3, r2
 8006936:	604b      	str	r3, [r1, #4]
 8006938:	e018      	b.n	800696c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800693a:	4b95      	ldr	r3, [pc, #596]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a94      	ldr	r2, [pc, #592]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006946:	f7fd fec5 	bl	80046d4 <HAL_GetTick>
 800694a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800694e:	f7fd fec1 	bl	80046d4 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e2ed      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006960:	4b8b      	ldr	r3, [pc, #556]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f0      	bne.n	800694e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 80a9 	beq.w	8006acc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800697a:	4b85      	ldr	r3, [pc, #532]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006982:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006984:	4b82      	ldr	r3, [pc, #520]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006988:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d007      	beq.n	80069a0 <HAL_RCC_OscConfig+0x308>
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	2b18      	cmp	r3, #24
 8006994:	d13a      	bne.n	8006a0c <HAL_RCC_OscConfig+0x374>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d135      	bne.n	8006a0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069a0:	4b7b      	ldr	r3, [pc, #492]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_RCC_OscConfig+0x320>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	2b80      	cmp	r3, #128	@ 0x80
 80069b2:	d001      	beq.n	80069b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e2c1      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069b8:	f7fd febc 	bl	8004734 <HAL_GetREVID>
 80069bc:	4603      	mov	r3, r0
 80069be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d817      	bhi.n	80069f6 <HAL_RCC_OscConfig+0x35e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d108      	bne.n	80069e0 <HAL_RCC_OscConfig+0x348>
 80069ce:	4b70      	ldr	r3, [pc, #448]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80069d6:	4a6e      	ldr	r2, [pc, #440]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 80069d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069de:	e075      	b.n	8006acc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069e0:	4b6b      	ldr	r3, [pc, #428]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	069b      	lsls	r3, r3, #26
 80069ee:	4968      	ldr	r1, [pc, #416]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069f4:	e06a      	b.n	8006acc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069f6:	4b66      	ldr	r3, [pc, #408]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	061b      	lsls	r3, r3, #24
 8006a04:	4962      	ldr	r1, [pc, #392]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a0a:	e05f      	b.n	8006acc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d042      	beq.n	8006a9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a14:	4b5e      	ldr	r3, [pc, #376]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5d      	ldr	r2, [pc, #372]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fd fe58 	bl	80046d4 <HAL_GetTick>
 8006a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a28:	f7fd fe54 	bl	80046d4 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e280      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a3a:	4b55      	ldr	r3, [pc, #340]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f0      	beq.n	8006a28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a46:	f7fd fe75 	bl	8004734 <HAL_GetREVID>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d817      	bhi.n	8006a84 <HAL_RCC_OscConfig+0x3ec>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d108      	bne.n	8006a6e <HAL_RCC_OscConfig+0x3d6>
 8006a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006a64:	4a4a      	ldr	r2, [pc, #296]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a6a:	6053      	str	r3, [r2, #4]
 8006a6c:	e02e      	b.n	8006acc <HAL_RCC_OscConfig+0x434>
 8006a6e:	4b48      	ldr	r3, [pc, #288]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	069b      	lsls	r3, r3, #26
 8006a7c:	4944      	ldr	r1, [pc, #272]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	604b      	str	r3, [r1, #4]
 8006a82:	e023      	b.n	8006acc <HAL_RCC_OscConfig+0x434>
 8006a84:	4b42      	ldr	r3, [pc, #264]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	061b      	lsls	r3, r3, #24
 8006a92:	493f      	ldr	r1, [pc, #252]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60cb      	str	r3, [r1, #12]
 8006a98:	e018      	b.n	8006acc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a3c      	ldr	r2, [pc, #240]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa6:	f7fd fe15 	bl	80046d4 <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006aae:	f7fd fe11 	bl	80046d4 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e23d      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ac0:	4b33      	ldr	r3, [pc, #204]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f0      	bne.n	8006aae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d036      	beq.n	8006b46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d019      	beq.n	8006b14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aec:	f7fd fdf2 	bl	80046d4 <HAL_GetTick>
 8006af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af4:	f7fd fdee 	bl	80046d4 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e21a      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b06:	4b22      	ldr	r3, [pc, #136]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x45c>
 8006b12:	e018      	b.n	8006b46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b14:	4b1e      	ldr	r3, [pc, #120]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b18:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b20:	f7fd fdd8 	bl	80046d4 <HAL_GetTick>
 8006b24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b28:	f7fd fdd4 	bl	80046d4 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e200      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b3a:	4b15      	ldr	r3, [pc, #84]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d039      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01c      	beq.n	8006b94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006b60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006b64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b66:	f7fd fdb5 	bl	80046d4 <HAL_GetTick>
 8006b6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b6e:	f7fd fdb1 	bl	80046d4 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e1dd      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b80:	4b03      	ldr	r3, [pc, #12]	@ (8006b90 <HAL_RCC_OscConfig+0x4f8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x4d6>
 8006b8c:	e01b      	b.n	8006bc6 <HAL_RCC_OscConfig+0x52e>
 8006b8e:	bf00      	nop
 8006b90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b94:	4b9b      	ldr	r3, [pc, #620]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a9a      	ldr	r2, [pc, #616]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006b9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ba0:	f7fd fd98 	bl	80046d4 <HAL_GetTick>
 8006ba4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ba8:	f7fd fd94 	bl	80046d4 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e1c0      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bba:	4b92      	ldr	r3, [pc, #584]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8081 	beq.w	8006cd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8006e08 <HAL_RCC_OscConfig+0x770>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a8b      	ldr	r2, [pc, #556]	@ (8006e08 <HAL_RCC_OscConfig+0x770>)
 8006bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006be0:	f7fd fd78 	bl	80046d4 <HAL_GetTick>
 8006be4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be8:	f7fd fd74 	bl	80046d4 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	@ 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e1a0      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bfa:	4b83      	ldr	r3, [pc, #524]	@ (8006e08 <HAL_RCC_OscConfig+0x770>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCC_OscConfig+0x584>
 8006c0e:	4b7d      	ldr	r3, [pc, #500]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c12:	4a7c      	ldr	r2, [pc, #496]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c1a:	e02d      	b.n	8006c78 <HAL_RCC_OscConfig+0x5e0>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10c      	bne.n	8006c3e <HAL_RCC_OscConfig+0x5a6>
 8006c24:	4b77      	ldr	r3, [pc, #476]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c28:	4a76      	ldr	r2, [pc, #472]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c2a:	f023 0301 	bic.w	r3, r3, #1
 8006c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c30:	4b74      	ldr	r3, [pc, #464]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c34:	4a73      	ldr	r2, [pc, #460]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c36:	f023 0304 	bic.w	r3, r3, #4
 8006c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c3c:	e01c      	b.n	8006c78 <HAL_RCC_OscConfig+0x5e0>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x5c8>
 8006c46:	4b6f      	ldr	r3, [pc, #444]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c4c:	f043 0304 	orr.w	r3, r3, #4
 8006c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c52:	4b6c      	ldr	r3, [pc, #432]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c56:	4a6b      	ldr	r2, [pc, #428]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c5e:	e00b      	b.n	8006c78 <HAL_RCC_OscConfig+0x5e0>
 8006c60:	4b68      	ldr	r3, [pc, #416]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c64:	4a67      	ldr	r2, [pc, #412]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c6c:	4b65      	ldr	r3, [pc, #404]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c70:	4a64      	ldr	r2, [pc, #400]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006c72:	f023 0304 	bic.w	r3, r3, #4
 8006c76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d015      	beq.n	8006cac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c80:	f7fd fd28 	bl	80046d4 <HAL_GetTick>
 8006c84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c86:	e00a      	b.n	8006c9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c88:	f7fd fd24 	bl	80046d4 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e14e      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c9e:	4b59      	ldr	r3, [pc, #356]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0ee      	beq.n	8006c88 <HAL_RCC_OscConfig+0x5f0>
 8006caa:	e014      	b.n	8006cd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cac:	f7fd fd12 	bl	80046d4 <HAL_GetTick>
 8006cb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cb2:	e00a      	b.n	8006cca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb4:	f7fd fd0e 	bl	80046d4 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e138      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cca:	4b4e      	ldr	r3, [pc, #312]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1ee      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 812d 	beq.w	8006f3a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ce0:	4b48      	ldr	r3, [pc, #288]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ce8:	2b18      	cmp	r3, #24
 8006cea:	f000 80bd 	beq.w	8006e68 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	f040 809e 	bne.w	8006e34 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf8:	4b42      	ldr	r3, [pc, #264]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a41      	ldr	r2, [pc, #260]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7fd fce6 	bl	80046d4 <HAL_GetTick>
 8006d08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d0c:	f7fd fce2 	bl	80046d4 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e10e      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d1e:	4b39      	ldr	r3, [pc, #228]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d2a:	4b36      	ldr	r3, [pc, #216]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d2e:	4b37      	ldr	r3, [pc, #220]	@ (8006e0c <HAL_RCC_OscConfig+0x774>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006d3a:	0112      	lsls	r2, r2, #4
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	4931      	ldr	r1, [pc, #196]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d52:	3b01      	subs	r3, #1
 8006d54:	025b      	lsls	r3, r3, #9
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	061b      	lsls	r3, r3, #24
 8006d70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d74:	4923      	ldr	r1, [pc, #140]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006d7a:	4b22      	ldr	r3, [pc, #136]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	4a21      	ldr	r2, [pc, #132]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d86:	4b1f      	ldr	r3, [pc, #124]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d8a:	4b21      	ldr	r3, [pc, #132]	@ (8006e10 <HAL_RCC_OscConfig+0x778>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006d92:	00d2      	lsls	r2, r2, #3
 8006d94:	491b      	ldr	r1, [pc, #108]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	f023 020c 	bic.w	r2, r3, #12
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	4917      	ldr	r1, [pc, #92]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006dac:	4b15      	ldr	r3, [pc, #84]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	f023 0202 	bic.w	r2, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db8:	4912      	ldr	r1, [pc, #72]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006dbe:	4b11      	ldr	r3, [pc, #68]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	4a10      	ldr	r2, [pc, #64]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dca:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dce:	4a0d      	ldr	r2, [pc, #52]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	4a0a      	ldr	r2, [pc, #40]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006de2:	4b08      	ldr	r3, [pc, #32]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de6:	4a07      	ldr	r2, [pc, #28]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dee:	4b05      	ldr	r3, [pc, #20]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a04      	ldr	r2, [pc, #16]	@ (8006e04 <HAL_RCC_OscConfig+0x76c>)
 8006df4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfa:	f7fd fc6b 	bl	80046d4 <HAL_GetTick>
 8006dfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e00:	e011      	b.n	8006e26 <HAL_RCC_OscConfig+0x78e>
 8006e02:	bf00      	nop
 8006e04:	58024400 	.word	0x58024400
 8006e08:	58024800 	.word	0x58024800
 8006e0c:	fffffc0c 	.word	0xfffffc0c
 8006e10:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fd fc5e 	bl	80046d4 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e08a      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e26:	4b47      	ldr	r3, [pc, #284]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x77c>
 8006e32:	e082      	b.n	8006f3a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e34:	4b43      	ldr	r3, [pc, #268]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a42      	ldr	r2, [pc, #264]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e40:	f7fd fc48 	bl	80046d4 <HAL_GetTick>
 8006e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e48:	f7fd fc44 	bl	80046d4 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e070      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f0      	bne.n	8006e48 <HAL_RCC_OscConfig+0x7b0>
 8006e66:	e068      	b.n	8006f3a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e68:	4b36      	ldr	r3, [pc, #216]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e6e:	4b35      	ldr	r3, [pc, #212]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d031      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f003 0203 	and.w	r2, r3, #3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d12a      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d122      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d11a      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	0a5b      	lsrs	r3, r3, #9
 8006eae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d111      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d108      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	0e1b      	lsrs	r3, r3, #24
 8006ed2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d001      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e02b      	b.n	8006f3c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ee4:	4b17      	ldr	r3, [pc, #92]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d01f      	beq.n	8006f3a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006efa:	4b12      	ldr	r3, [pc, #72]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	4a11      	ldr	r2, [pc, #68]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f06:	f7fd fbe5 	bl	80046d4 <HAL_GetTick>
 8006f0a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f0c:	bf00      	nop
 8006f0e:	f7fd fbe1 	bl	80046d4 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d0f9      	beq.n	8006f0e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f48 <HAL_RCC_OscConfig+0x8b0>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f26:	00d2      	lsls	r2, r2, #3
 8006f28:	4906      	ldr	r1, [pc, #24]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006f2e:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f32:	4a04      	ldr	r2, [pc, #16]	@ (8006f44 <HAL_RCC_OscConfig+0x8ac>)
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3730      	adds	r7, #48	@ 0x30
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	58024400 	.word	0x58024400
 8006f48:	ffff0007 	.word	0xffff0007

08006f4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e19c      	b.n	800729a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f60:	4b8a      	ldr	r3, [pc, #552]	@ (800718c <HAL_RCC_ClockConfig+0x240>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d910      	bls.n	8006f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6e:	4b87      	ldr	r3, [pc, #540]	@ (800718c <HAL_RCC_ClockConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f023 020f 	bic.w	r2, r3, #15
 8006f76:	4985      	ldr	r1, [pc, #532]	@ (800718c <HAL_RCC_ClockConfig+0x240>)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7e:	4b83      	ldr	r3, [pc, #524]	@ (800718c <HAL_RCC_ClockConfig+0x240>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d001      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e184      	b.n	800729a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	4b7b      	ldr	r3, [pc, #492]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d908      	bls.n	8006fbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fac:	4b78      	ldr	r3, [pc, #480]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	4975      	ldr	r1, [pc, #468]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d010      	beq.n	8006fec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695a      	ldr	r2, [r3, #20]
 8006fce:	4b70      	ldr	r3, [pc, #448]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d908      	bls.n	8006fec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fda:	4b6d      	ldr	r3, [pc, #436]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	496a      	ldr	r1, [pc, #424]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d010      	beq.n	800701a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	4b64      	ldr	r3, [pc, #400]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007004:	429a      	cmp	r2, r3
 8007006:	d908      	bls.n	800701a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007008:	4b61      	ldr	r3, [pc, #388]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	495e      	ldr	r1, [pc, #376]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007016:	4313      	orrs	r3, r2
 8007018:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d010      	beq.n	8007048 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69da      	ldr	r2, [r3, #28]
 800702a:	4b59      	ldr	r3, [pc, #356]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007032:	429a      	cmp	r2, r3
 8007034:	d908      	bls.n	8007048 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007036:	4b56      	ldr	r3, [pc, #344]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	4953      	ldr	r1, [pc, #332]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007044:	4313      	orrs	r3, r2
 8007046:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d010      	beq.n	8007076 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	4b4d      	ldr	r3, [pc, #308]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	429a      	cmp	r2, r3
 8007062:	d908      	bls.n	8007076 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007064:	4b4a      	ldr	r3, [pc, #296]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f023 020f 	bic.w	r2, r3, #15
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4947      	ldr	r1, [pc, #284]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007072:	4313      	orrs	r3, r2
 8007074:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d055      	beq.n	800712e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007082:	4b43      	ldr	r3, [pc, #268]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	4940      	ldr	r1, [pc, #256]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007090:	4313      	orrs	r3, r2
 8007092:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d107      	bne.n	80070ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800709c:	4b3c      	ldr	r3, [pc, #240]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d121      	bne.n	80070ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0f6      	b.n	800729a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d107      	bne.n	80070c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070b4:	4b36      	ldr	r3, [pc, #216]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d115      	bne.n	80070ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0ea      	b.n	800729a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d107      	bne.n	80070dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070cc:	4b30      	ldr	r3, [pc, #192]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e0de      	b.n	800729a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070dc:	4b2c      	ldr	r3, [pc, #176]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0d6      	b.n	800729a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070ec:	4b28      	ldr	r3, [pc, #160]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f023 0207 	bic.w	r2, r3, #7
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4925      	ldr	r1, [pc, #148]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070fe:	f7fd fae9 	bl	80046d4 <HAL_GetTick>
 8007102:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007104:	e00a      	b.n	800711c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007106:	f7fd fae5 	bl	80046d4 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e0be      	b.n	800729a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711c:	4b1c      	ldr	r3, [pc, #112]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	429a      	cmp	r2, r3
 800712c:	d1eb      	bne.n	8007106 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d010      	beq.n	800715c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	4b14      	ldr	r3, [pc, #80]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	429a      	cmp	r2, r3
 8007148:	d208      	bcs.n	800715c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800714a:	4b11      	ldr	r3, [pc, #68]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f023 020f 	bic.w	r2, r3, #15
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	490e      	ldr	r1, [pc, #56]	@ (8007190 <HAL_RCC_ClockConfig+0x244>)
 8007158:	4313      	orrs	r3, r2
 800715a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800715c:	4b0b      	ldr	r3, [pc, #44]	@ (800718c <HAL_RCC_ClockConfig+0x240>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d214      	bcs.n	8007194 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716a:	4b08      	ldr	r3, [pc, #32]	@ (800718c <HAL_RCC_ClockConfig+0x240>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f023 020f 	bic.w	r2, r3, #15
 8007172:	4906      	ldr	r1, [pc, #24]	@ (800718c <HAL_RCC_ClockConfig+0x240>)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	4313      	orrs	r3, r2
 8007178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717a:	4b04      	ldr	r3, [pc, #16]	@ (800718c <HAL_RCC_ClockConfig+0x240>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d005      	beq.n	8007194 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e086      	b.n	800729a <HAL_RCC_ClockConfig+0x34e>
 800718c:	52002000 	.word	0x52002000
 8007190:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d010      	beq.n	80071c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	4b3f      	ldr	r3, [pc, #252]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d208      	bcs.n	80071c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071b0:	4b3c      	ldr	r3, [pc, #240]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	4939      	ldr	r1, [pc, #228]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d010      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695a      	ldr	r2, [r3, #20]
 80071d2:	4b34      	ldr	r3, [pc, #208]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071da:	429a      	cmp	r2, r3
 80071dc:	d208      	bcs.n	80071f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071de:	4b31      	ldr	r3, [pc, #196]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	492e      	ldr	r1, [pc, #184]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d010      	beq.n	800721e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	4b28      	ldr	r3, [pc, #160]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007208:	429a      	cmp	r2, r3
 800720a:	d208      	bcs.n	800721e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800720c:	4b25      	ldr	r3, [pc, #148]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	4922      	ldr	r1, [pc, #136]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 800721a:	4313      	orrs	r3, r2
 800721c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d010      	beq.n	800724c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	4b1d      	ldr	r3, [pc, #116]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007236:	429a      	cmp	r2, r3
 8007238:	d208      	bcs.n	800724c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800723a:	4b1a      	ldr	r3, [pc, #104]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	4917      	ldr	r1, [pc, #92]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 8007248:	4313      	orrs	r3, r2
 800724a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800724c:	f000 f834 	bl	80072b8 <HAL_RCC_GetSysClockFreq>
 8007250:	4602      	mov	r2, r0
 8007252:	4b14      	ldr	r3, [pc, #80]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	4912      	ldr	r1, [pc, #72]	@ (80072a8 <HAL_RCC_ClockConfig+0x35c>)
 800725e:	5ccb      	ldrb	r3, [r1, r3]
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
 8007268:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800726a:	4b0e      	ldr	r3, [pc, #56]	@ (80072a4 <HAL_RCC_ClockConfig+0x358>)
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	4a0d      	ldr	r2, [pc, #52]	@ (80072a8 <HAL_RCC_ClockConfig+0x35c>)
 8007274:	5cd3      	ldrb	r3, [r2, r3]
 8007276:	f003 031f 	and.w	r3, r3, #31
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
 8007280:	4a0a      	ldr	r2, [pc, #40]	@ (80072ac <HAL_RCC_ClockConfig+0x360>)
 8007282:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007284:	4a0a      	ldr	r2, [pc, #40]	@ (80072b0 <HAL_RCC_ClockConfig+0x364>)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800728a:	4b0a      	ldr	r3, [pc, #40]	@ (80072b4 <HAL_RCC_ClockConfig+0x368>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7fd f9d6 	bl	8004640 <HAL_InitTick>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	58024400 	.word	0x58024400
 80072a8:	0800b40c 	.word	0x0800b40c
 80072ac:	24000220 	.word	0x24000220
 80072b0:	2400021c 	.word	0x2400021c
 80072b4:	24000224 	.word	0x24000224

080072b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b089      	sub	sp, #36	@ 0x24
 80072bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072be:	4bb3      	ldr	r3, [pc, #716]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072c6:	2b18      	cmp	r3, #24
 80072c8:	f200 8155 	bhi.w	8007576 <HAL_RCC_GetSysClockFreq+0x2be>
 80072cc:	a201      	add	r2, pc, #4	@ (adr r2, 80072d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80072ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d2:	bf00      	nop
 80072d4:	08007339 	.word	0x08007339
 80072d8:	08007577 	.word	0x08007577
 80072dc:	08007577 	.word	0x08007577
 80072e0:	08007577 	.word	0x08007577
 80072e4:	08007577 	.word	0x08007577
 80072e8:	08007577 	.word	0x08007577
 80072ec:	08007577 	.word	0x08007577
 80072f0:	08007577 	.word	0x08007577
 80072f4:	0800735f 	.word	0x0800735f
 80072f8:	08007577 	.word	0x08007577
 80072fc:	08007577 	.word	0x08007577
 8007300:	08007577 	.word	0x08007577
 8007304:	08007577 	.word	0x08007577
 8007308:	08007577 	.word	0x08007577
 800730c:	08007577 	.word	0x08007577
 8007310:	08007577 	.word	0x08007577
 8007314:	08007365 	.word	0x08007365
 8007318:	08007577 	.word	0x08007577
 800731c:	08007577 	.word	0x08007577
 8007320:	08007577 	.word	0x08007577
 8007324:	08007577 	.word	0x08007577
 8007328:	08007577 	.word	0x08007577
 800732c:	08007577 	.word	0x08007577
 8007330:	08007577 	.word	0x08007577
 8007334:	0800736b 	.word	0x0800736b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007338:	4b94      	ldr	r3, [pc, #592]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007344:	4b91      	ldr	r3, [pc, #580]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	08db      	lsrs	r3, r3, #3
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	4a90      	ldr	r2, [pc, #576]	@ (8007590 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
 8007354:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007356:	e111      	b.n	800757c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007358:	4b8d      	ldr	r3, [pc, #564]	@ (8007590 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800735a:	61bb      	str	r3, [r7, #24]
      break;
 800735c:	e10e      	b.n	800757c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800735e:	4b8d      	ldr	r3, [pc, #564]	@ (8007594 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007360:	61bb      	str	r3, [r7, #24]
      break;
 8007362:	e10b      	b.n	800757c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007364:	4b8c      	ldr	r3, [pc, #560]	@ (8007598 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007366:	61bb      	str	r3, [r7, #24]
      break;
 8007368:	e108      	b.n	800757c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800736a:	4b88      	ldr	r3, [pc, #544]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007374:	4b85      	ldr	r3, [pc, #532]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007378:	091b      	lsrs	r3, r3, #4
 800737a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800737e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007380:	4b82      	ldr	r3, [pc, #520]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800738a:	4b80      	ldr	r3, [pc, #512]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800738c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800738e:	08db      	lsrs	r3, r3, #3
 8007390:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	fb02 f303 	mul.w	r3, r2, r3
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 80e1 	beq.w	8007570 <HAL_RCC_GetSysClockFreq+0x2b8>
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	f000 8083 	beq.w	80074bc <HAL_RCC_GetSysClockFreq+0x204>
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	f200 80a1 	bhi.w	8007500 <HAL_RCC_GetSysClockFreq+0x248>
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_RCC_GetSysClockFreq+0x114>
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d056      	beq.n	8007478 <HAL_RCC_GetSysClockFreq+0x1c0>
 80073ca:	e099      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073cc:	4b6f      	ldr	r3, [pc, #444]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d02d      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d8:	4b6c      	ldr	r3, [pc, #432]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	08db      	lsrs	r3, r3, #3
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	4a6b      	ldr	r2, [pc, #428]	@ (8007590 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
 80073e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007402:	4b62      	ldr	r3, [pc, #392]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007412:	ed97 6a02 	vldr	s12, [r7, #8]
 8007416:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800759c <HAL_RCC_GetSysClockFreq+0x2e4>
 800741a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007432:	e087      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80075a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007446:	4b51      	ldr	r3, [pc, #324]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007456:	ed97 6a02 	vldr	s12, [r7, #8]
 800745a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800759c <HAL_RCC_GetSysClockFreq+0x2e4>
 800745e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800746a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007476:	e065      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80075a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748a:	4b40      	ldr	r3, [pc, #256]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749a:	ed97 6a02 	vldr	s12, [r7, #8]
 800749e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800759c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074ba:	e043      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80075a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ce:	4b2f      	ldr	r3, [pc, #188]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800759c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074fe:	e021      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80075a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b1e      	ldr	r3, [pc, #120]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a02 	vldr	s12, [r7, #8]
 8007526:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800759c <HAL_RCC_GetSysClockFreq+0x2e4>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007542:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007544:	4b11      	ldr	r3, [pc, #68]	@ (800758c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007548:	0a5b      	lsrs	r3, r3, #9
 800754a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754e:	3301      	adds	r3, #1
 8007550:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800755c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007568:	ee17 3a90 	vmov	r3, s15
 800756c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800756e:	e005      	b.n	800757c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
      break;
 8007574:	e002      	b.n	800757c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007576:	4b07      	ldr	r3, [pc, #28]	@ (8007594 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007578:	61bb      	str	r3, [r7, #24]
      break;
 800757a:	bf00      	nop
  }

  return sysclockfreq;
 800757c:	69bb      	ldr	r3, [r7, #24]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3724      	adds	r7, #36	@ 0x24
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	58024400 	.word	0x58024400
 8007590:	03d09000 	.word	0x03d09000
 8007594:	003d0900 	.word	0x003d0900
 8007598:	017d7840 	.word	0x017d7840
 800759c:	46000000 	.word	0x46000000
 80075a0:	4c742400 	.word	0x4c742400
 80075a4:	4a742400 	.word	0x4a742400
 80075a8:	4bbebc20 	.word	0x4bbebc20

080075ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075b2:	f7ff fe81 	bl	80072b8 <HAL_RCC_GetSysClockFreq>
 80075b6:	4602      	mov	r2, r0
 80075b8:	4b10      	ldr	r3, [pc, #64]	@ (80075fc <HAL_RCC_GetHCLKFreq+0x50>)
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	0a1b      	lsrs	r3, r3, #8
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	490f      	ldr	r1, [pc, #60]	@ (8007600 <HAL_RCC_GetHCLKFreq+0x54>)
 80075c4:	5ccb      	ldrb	r3, [r1, r3]
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	fa22 f303 	lsr.w	r3, r2, r3
 80075ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075d0:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <HAL_RCC_GetHCLKFreq+0x50>)
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	4a09      	ldr	r2, [pc, #36]	@ (8007600 <HAL_RCC_GetHCLKFreq+0x54>)
 80075da:	5cd3      	ldrb	r3, [r2, r3]
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	4a07      	ldr	r2, [pc, #28]	@ (8007604 <HAL_RCC_GetHCLKFreq+0x58>)
 80075e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075ea:	4a07      	ldr	r2, [pc, #28]	@ (8007608 <HAL_RCC_GetHCLKFreq+0x5c>)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80075f0:	4b04      	ldr	r3, [pc, #16]	@ (8007604 <HAL_RCC_GetHCLKFreq+0x58>)
 80075f2:	681b      	ldr	r3, [r3, #0]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	58024400 	.word	0x58024400
 8007600:	0800b40c 	.word	0x0800b40c
 8007604:	24000220 	.word	0x24000220
 8007608:	2400021c 	.word	0x2400021c

0800760c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800760c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007610:	b0ca      	sub	sp, #296	@ 0x128
 8007612:	af00      	add	r7, sp, #0
 8007614:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007618:	2300      	movs	r3, #0
 800761a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800761e:	2300      	movs	r3, #0
 8007620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007630:	2500      	movs	r5, #0
 8007632:	ea54 0305 	orrs.w	r3, r4, r5
 8007636:	d049      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800763e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007642:	d02f      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007644:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007648:	d828      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800764a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800764e:	d01a      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007650:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007654:	d822      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800765a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800765e:	d007      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007660:	e01c      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007662:	4bb8      	ldr	r3, [pc, #736]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	4ab7      	ldr	r2, [pc, #732]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800766e:	e01a      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	3308      	adds	r3, #8
 8007676:	2102      	movs	r1, #2
 8007678:	4618      	mov	r0, r3
 800767a:	f001 f9d1 	bl	8008a20 <RCCEx_PLL2_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007684:	e00f      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	3328      	adds	r3, #40	@ 0x28
 800768c:	2102      	movs	r1, #2
 800768e:	4618      	mov	r0, r3
 8007690:	f001 fa78 	bl	8008b84 <RCCEx_PLL3_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800769a:	e004      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10a      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80076ae:	4ba5      	ldr	r3, [pc, #660]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076bc:	4aa1      	ldr	r2, [pc, #644]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076be:	430b      	orrs	r3, r1
 80076c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80076c2:	e003      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	ea58 0309 	orrs.w	r3, r8, r9
 80076e0:	d047      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d82a      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80076ec:	a201      	add	r2, pc, #4	@ (adr r2, 80076f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	08007709 	.word	0x08007709
 80076f8:	08007717 	.word	0x08007717
 80076fc:	0800772d 	.word	0x0800772d
 8007700:	0800774b 	.word	0x0800774b
 8007704:	0800774b 	.word	0x0800774b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007708:	4b8e      	ldr	r3, [pc, #568]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	4a8d      	ldr	r2, [pc, #564]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800770e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007714:	e01a      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	3308      	adds	r3, #8
 800771c:	2100      	movs	r1, #0
 800771e:	4618      	mov	r0, r3
 8007720:	f001 f97e 	bl	8008a20 <RCCEx_PLL2_Config>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800772a:	e00f      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800772c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007730:	3328      	adds	r3, #40	@ 0x28
 8007732:	2100      	movs	r1, #0
 8007734:	4618      	mov	r0, r3
 8007736:	f001 fa25 	bl	8008b84 <RCCEx_PLL3_Config>
 800773a:	4603      	mov	r3, r0
 800773c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007740:	e004      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007748:	e000      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800774a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007754:	4b7b      	ldr	r3, [pc, #492]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007758:	f023 0107 	bic.w	r1, r3, #7
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007762:	4a78      	ldr	r2, [pc, #480]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007764:	430b      	orrs	r3, r1
 8007766:	6513      	str	r3, [r2, #80]	@ 0x50
 8007768:	e003      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800777e:	f04f 0b00 	mov.w	fp, #0
 8007782:	ea5a 030b 	orrs.w	r3, sl, fp
 8007786:	d04c      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800778e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007792:	d030      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007798:	d829      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800779a:	2bc0      	cmp	r3, #192	@ 0xc0
 800779c:	d02d      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800779e:	2bc0      	cmp	r3, #192	@ 0xc0
 80077a0:	d825      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80077a2:	2b80      	cmp	r3, #128	@ 0x80
 80077a4:	d018      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80077a6:	2b80      	cmp	r3, #128	@ 0x80
 80077a8:	d821      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80077ae:	2b40      	cmp	r3, #64	@ 0x40
 80077b0:	d007      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80077b2:	e01c      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b4:	4b63      	ldr	r3, [pc, #396]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	4a62      	ldr	r2, [pc, #392]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077c0:	e01c      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c6:	3308      	adds	r3, #8
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 f928 	bl	8008a20 <RCCEx_PLL2_Config>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077d6:	e011      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077dc:	3328      	adds	r3, #40	@ 0x28
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 f9cf 	bl	8008b84 <RCCEx_PLL3_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077ec:	e006      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077f4:	e002      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80077f6:	bf00      	nop
 80077f8:	e000      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80077fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007804:	4b4f      	ldr	r3, [pc, #316]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007808:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007812:	4a4c      	ldr	r2, [pc, #304]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007814:	430b      	orrs	r3, r1
 8007816:	6513      	str	r3, [r2, #80]	@ 0x50
 8007818:	e003      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800782e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007832:	2300      	movs	r3, #0
 8007834:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007838:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800783c:	460b      	mov	r3, r1
 800783e:	4313      	orrs	r3, r2
 8007840:	d053      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007846:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800784a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800784e:	d035      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007850:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007854:	d82e      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007856:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800785a:	d031      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800785c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007860:	d828      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007866:	d01a      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800786c:	d822      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007876:	d007      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007878:	e01c      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787a:	4b32      	ldr	r3, [pc, #200]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787e:	4a31      	ldr	r2, [pc, #196]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007884:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007886:	e01c      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	3308      	adds	r3, #8
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f8c5 	bl	8008a20 <RCCEx_PLL2_Config>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800789c:	e011      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a2:	3328      	adds	r3, #40	@ 0x28
 80078a4:	2100      	movs	r1, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 f96c 	bl	8008b84 <RCCEx_PLL3_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078b2:	e006      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ba:	e002      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80078bc:	bf00      	nop
 80078be:	e000      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80078c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80078ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078da:	4a1a      	ldr	r2, [pc, #104]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078dc:	430b      	orrs	r3, r1
 80078de:	6593      	str	r3, [r2, #88]	@ 0x58
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80078f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007900:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007904:	460b      	mov	r3, r1
 8007906:	4313      	orrs	r3, r2
 8007908:	d056      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007912:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007916:	d038      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007918:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800791c:	d831      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800791e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007922:	d034      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007924:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007928:	d82b      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800792a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800792e:	d01d      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007934:	d825      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d006      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800793a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800793e:	d00a      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007940:	e01f      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007942:	bf00      	nop
 8007944:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007948:	4ba2      	ldr	r3, [pc, #648]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	4aa1      	ldr	r2, [pc, #644]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800794e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007954:	e01c      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	3308      	adds	r3, #8
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f001 f85e 	bl	8008a20 <RCCEx_PLL2_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800796a:	e011      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	3328      	adds	r3, #40	@ 0x28
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f001 f905 	bl	8008b84 <RCCEx_PLL3_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007980:	e006      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007988:	e002      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800798a:	bf00      	nop
 800798c:	e000      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800798e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10b      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007998:	4b8e      	ldr	r3, [pc, #568]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800799a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80079a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079a8:	4a8a      	ldr	r2, [pc, #552]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079aa:	430b      	orrs	r3, r1
 80079ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80079ae:	e003      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80079c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80079c8:	2300      	movs	r3, #0
 80079ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80079ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80079d2:	460b      	mov	r3, r1
 80079d4:	4313      	orrs	r3, r2
 80079d6:	d03a      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079de:	2b30      	cmp	r3, #48	@ 0x30
 80079e0:	d01f      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80079e2:	2b30      	cmp	r3, #48	@ 0x30
 80079e4:	d819      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d00c      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d815      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d019      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d111      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f6:	4b77      	ldr	r3, [pc, #476]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fa:	4a76      	ldr	r2, [pc, #472]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007a02:	e011      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	3308      	adds	r3, #8
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 f807 	bl	8008a20 <RCCEx_PLL2_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007a18:	e006      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a20:	e002      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007a22:	bf00      	nop
 8007a24:	e000      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10a      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a30:	4b68      	ldr	r3, [pc, #416]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a3e:	4a65      	ldr	r2, [pc, #404]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a40:	430b      	orrs	r3, r1
 8007a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a44:	e003      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007a5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	d051      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a78:	d035      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a7e:	d82e      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a84:	d031      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007a86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a8a:	d828      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a90:	d01a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a96:	d822      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa0:	d007      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007aa2:	e01c      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ab0:	e01c      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 ffb0 	bl	8008a20 <RCCEx_PLL2_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ac6:	e011      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	3328      	adds	r3, #40	@ 0x28
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 f857 	bl	8008b84 <RCCEx_PLL3_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007adc:	e006      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ae4:	e002      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007af4:	4b37      	ldr	r3, [pc, #220]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b02:	4a34      	ldr	r2, [pc, #208]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b04:	430b      	orrs	r3, r1
 8007b06:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b08:	e003      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b22:	2300      	movs	r3, #0
 8007b24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	d056      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b3c:	d033      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b42:	d82c      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b48:	d02f      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007b4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b4e:	d826      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b54:	d02b      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007b56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b5a:	d820      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b60:	d012      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b66:	d81a      	bhi.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d022      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b70:	d115      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	3308      	adds	r3, #8
 8007b78:	2101      	movs	r1, #1
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 ff50 	bl	8008a20 <RCCEx_PLL2_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b86:	e015      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8c:	3328      	adds	r3, #40	@ 0x28
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fff7 	bl	8008b84 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b9c:	e00a      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ba4:	e006      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ba6:	bf00      	nop
 8007ba8:	e004      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007baa:	bf00      	nop
 8007bac:	e002      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10d      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007bbc:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bca:	4a02      	ldr	r2, [pc, #8]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bd0:	e006      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007bd2:	bf00      	nop
 8007bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bf6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	d055      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c0c:	d033      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c12:	d82c      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c18:	d02f      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1e:	d826      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c24:	d02b      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007c26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c2a:	d820      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c30:	d012      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c36:	d81a      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d022      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c40:	d115      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	3308      	adds	r3, #8
 8007c48:	2101      	movs	r1, #1
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fee8 	bl	8008a20 <RCCEx_PLL2_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c56:	e015      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	3328      	adds	r3, #40	@ 0x28
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 ff8f 	bl	8008b84 <RCCEx_PLL3_Config>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c6c:	e00a      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c74:	e006      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c76:	bf00      	nop
 8007c78:	e004      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c7a:	bf00      	nop
 8007c7c:	e002      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c7e:	bf00      	nop
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c8c:	4ba3      	ldr	r3, [pc, #652]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c90:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c9c:	4a9f      	ldr	r2, [pc, #636]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007cc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d037      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cdc:	d816      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d018      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007ce2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ce6:	d111      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cec:	4a8b      	ldr	r2, [pc, #556]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007cf4:	e00f      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fe8e 	bl	8008a20 <RCCEx_PLL2_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007d0a:	e004      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d12:	e000      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2c:	4a7b      	ldr	r2, [pc, #492]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d32:	e003      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	d039      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d81c      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007d66:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007da9 	.word	0x08007da9
 8007d70:	08007d7d 	.word	0x08007d7d
 8007d74:	08007d8b 	.word	0x08007d8b
 8007d78:	08007da9 	.word	0x08007da9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d7c:	4b67      	ldr	r3, [pc, #412]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d80:	4a66      	ldr	r2, [pc, #408]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d88:	e00f      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8e:	3308      	adds	r3, #8
 8007d90:	2102      	movs	r1, #2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fe44 	bl	8008a20 <RCCEx_PLL2_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d9e:	e004      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007da6:	e000      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007db2:	4b5a      	ldr	r3, [pc, #360]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db6:	f023 0103 	bic.w	r1, r3, #3
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dc0:	4a56      	ldr	r2, [pc, #344]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007dc6:	e003      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007de6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007dea:	460b      	mov	r3, r1
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f000 809f 	beq.w	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007df2:	4b4b      	ldr	r3, [pc, #300]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a4a      	ldr	r2, [pc, #296]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dfe:	f7fc fc69 	bl	80046d4 <HAL_GetTick>
 8007e02:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e06:	e00b      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e08:	f7fc fc64 	bl	80046d4 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b64      	cmp	r3, #100	@ 0x64
 8007e16:	d903      	bls.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e1e:	e005      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e20:	4b3f      	ldr	r3, [pc, #252]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0ed      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d179      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e34:	4b39      	ldr	r3, [pc, #228]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e40:	4053      	eors	r3, r2
 8007e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d015      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e4a:	4b34      	ldr	r3, [pc, #208]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e56:	4b31      	ldr	r3, [pc, #196]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e5a:	4a30      	ldr	r2, [pc, #192]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e62:	4b2e      	ldr	r3, [pc, #184]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e66:	4a2d      	ldr	r2, [pc, #180]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007e74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e82:	d118      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7fc fc26 	bl	80046d4 <HAL_GetTick>
 8007e88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e8c:	e00d      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e8e:	f7fc fc21 	bl	80046d4 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007e98:	1ad2      	subs	r2, r2, r3
 8007e9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d903      	bls.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007ea8:	e005      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0eb      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d129      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ece:	d10e      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007ed0:	4b12      	ldr	r3, [pc, #72]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ee0:	091a      	lsrs	r2, r3, #4
 8007ee2:	4b10      	ldr	r3, [pc, #64]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6113      	str	r3, [r2, #16]
 8007eec:	e005      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007eee:	4b0b      	ldr	r3, [pc, #44]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ef8:	6113      	str	r3, [r2, #16]
 8007efa:	4b08      	ldr	r3, [pc, #32]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007efc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f0a:	4a04      	ldr	r2, [pc, #16]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f10:	e00e      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007f1a:	e009      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	58024800 	.word	0x58024800
 8007f24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f002 0301 	and.w	r3, r2, #1
 8007f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f000 8089 	beq.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f58:	2b28      	cmp	r3, #40	@ 0x28
 8007f5a:	d86b      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	0800803d 	.word	0x0800803d
 8007f68:	08008035 	.word	0x08008035
 8007f6c:	08008035 	.word	0x08008035
 8007f70:	08008035 	.word	0x08008035
 8007f74:	08008035 	.word	0x08008035
 8007f78:	08008035 	.word	0x08008035
 8007f7c:	08008035 	.word	0x08008035
 8007f80:	08008035 	.word	0x08008035
 8007f84:	08008009 	.word	0x08008009
 8007f88:	08008035 	.word	0x08008035
 8007f8c:	08008035 	.word	0x08008035
 8007f90:	08008035 	.word	0x08008035
 8007f94:	08008035 	.word	0x08008035
 8007f98:	08008035 	.word	0x08008035
 8007f9c:	08008035 	.word	0x08008035
 8007fa0:	08008035 	.word	0x08008035
 8007fa4:	0800801f 	.word	0x0800801f
 8007fa8:	08008035 	.word	0x08008035
 8007fac:	08008035 	.word	0x08008035
 8007fb0:	08008035 	.word	0x08008035
 8007fb4:	08008035 	.word	0x08008035
 8007fb8:	08008035 	.word	0x08008035
 8007fbc:	08008035 	.word	0x08008035
 8007fc0:	08008035 	.word	0x08008035
 8007fc4:	0800803d 	.word	0x0800803d
 8007fc8:	08008035 	.word	0x08008035
 8007fcc:	08008035 	.word	0x08008035
 8007fd0:	08008035 	.word	0x08008035
 8007fd4:	08008035 	.word	0x08008035
 8007fd8:	08008035 	.word	0x08008035
 8007fdc:	08008035 	.word	0x08008035
 8007fe0:	08008035 	.word	0x08008035
 8007fe4:	0800803d 	.word	0x0800803d
 8007fe8:	08008035 	.word	0x08008035
 8007fec:	08008035 	.word	0x08008035
 8007ff0:	08008035 	.word	0x08008035
 8007ff4:	08008035 	.word	0x08008035
 8007ff8:	08008035 	.word	0x08008035
 8007ffc:	08008035 	.word	0x08008035
 8008000:	08008035 	.word	0x08008035
 8008004:	0800803d 	.word	0x0800803d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800c:	3308      	adds	r3, #8
 800800e:	2101      	movs	r1, #1
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fd05 	bl	8008a20 <RCCEx_PLL2_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800801c:	e00f      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008022:	3328      	adds	r3, #40	@ 0x28
 8008024:	2101      	movs	r1, #1
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fdac 	bl	8008b84 <RCCEx_PLL3_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008032:	e004      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800803c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008046:	4bbf      	ldr	r3, [pc, #764]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008054:	4abb      	ldr	r2, [pc, #748]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008056:	430b      	orrs	r3, r1
 8008058:	6553      	str	r3, [r2, #84]	@ 0x54
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f002 0302 	and.w	r3, r2, #2
 8008070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008074:	2300      	movs	r3, #0
 8008076:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800807a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800807e:	460b      	mov	r3, r1
 8008080:	4313      	orrs	r3, r2
 8008082:	d041      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800808a:	2b05      	cmp	r3, #5
 800808c:	d824      	bhi.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800808e:	a201      	add	r2, pc, #4	@ (adr r2, 8008094 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080e1 	.word	0x080080e1
 8008098:	080080ad 	.word	0x080080ad
 800809c:	080080c3 	.word	0x080080c3
 80080a0:	080080e1 	.word	0x080080e1
 80080a4:	080080e1 	.word	0x080080e1
 80080a8:	080080e1 	.word	0x080080e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b0:	3308      	adds	r3, #8
 80080b2:	2101      	movs	r1, #1
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fcb3 	bl	8008a20 <RCCEx_PLL2_Config>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80080c0:	e00f      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c6:	3328      	adds	r3, #40	@ 0x28
 80080c8:	2101      	movs	r1, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fd5a 	bl	8008b84 <RCCEx_PLL3_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80080d6:	e004      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080de:	e000      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80080e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80080ea:	4b96      	ldr	r3, [pc, #600]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ee:	f023 0107 	bic.w	r1, r3, #7
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080f8:	4a92      	ldr	r2, [pc, #584]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080fa:	430b      	orrs	r3, r1
 80080fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80080fe:	e003      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f002 0304 	and.w	r3, r2, #4
 8008114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008118:	2300      	movs	r3, #0
 800811a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800811e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008122:	460b      	mov	r3, r1
 8008124:	4313      	orrs	r3, r2
 8008126:	d044      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008130:	2b05      	cmp	r3, #5
 8008132:	d825      	bhi.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008134:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	08008189 	.word	0x08008189
 8008140:	08008155 	.word	0x08008155
 8008144:	0800816b 	.word	0x0800816b
 8008148:	08008189 	.word	0x08008189
 800814c:	08008189 	.word	0x08008189
 8008150:	08008189 	.word	0x08008189
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	3308      	adds	r3, #8
 800815a:	2101      	movs	r1, #1
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fc5f 	bl	8008a20 <RCCEx_PLL2_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008168:	e00f      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	3328      	adds	r3, #40	@ 0x28
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fd06 	bl	8008b84 <RCCEx_PLL3_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800817e:	e004      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008186:	e000      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10b      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008192:	4b6c      	ldr	r3, [pc, #432]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008196:	f023 0107 	bic.w	r1, r3, #7
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081a2:	4a68      	ldr	r2, [pc, #416]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80081a8:	e003      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f002 0320 	and.w	r3, r2, #32
 80081be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80081c2:	2300      	movs	r3, #0
 80081c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d055      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081de:	d033      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80081e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081e4:	d82c      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ea:	d02f      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f0:	d826      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081f6:	d02b      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80081f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081fc:	d820      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008202:	d012      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008208:	d81a      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d022      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800820e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008212:	d115      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	3308      	adds	r3, #8
 800821a:	2100      	movs	r1, #0
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fbff 	bl	8008a20 <RCCEx_PLL2_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008228:	e015      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822e:	3328      	adds	r3, #40	@ 0x28
 8008230:	2102      	movs	r1, #2
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fca6 	bl	8008b84 <RCCEx_PLL3_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800823e:	e00a      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008246:	e006      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008248:	bf00      	nop
 800824a:	e004      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800824c:	bf00      	nop
 800824e:	e002      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008250:	bf00      	nop
 8008252:	e000      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800825e:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008262:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800826e:	4a35      	ldr	r2, [pc, #212]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008270:	430b      	orrs	r3, r1
 8008272:	6553      	str	r3, [r2, #84]	@ 0x54
 8008274:	e003      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800827a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800827e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800828a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800828e:	2300      	movs	r3, #0
 8008290:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008294:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008298:	460b      	mov	r3, r1
 800829a:	4313      	orrs	r3, r2
 800829c:	d058      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80082aa:	d033      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80082ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80082b0:	d82c      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b6:	d02f      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80082b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082bc:	d826      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082c2:	d02b      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80082c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082c8:	d820      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082ce:	d012      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80082d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082d4:	d81a      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d022      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80082da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082de:	d115      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e4:	3308      	adds	r3, #8
 80082e6:	2100      	movs	r1, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fb99 	bl	8008a20 <RCCEx_PLL2_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80082f4:	e015      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	3328      	adds	r3, #40	@ 0x28
 80082fc:	2102      	movs	r1, #2
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fc40 	bl	8008b84 <RCCEx_PLL3_Config>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800830a:	e00a      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008312:	e006      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008314:	bf00      	nop
 8008316:	e004      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008318:	bf00      	nop
 800831a:	e002      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800831c:	bf00      	nop
 800831e:	e000      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10e      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800832a:	4b06      	ldr	r3, [pc, #24]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800832c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800832e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008336:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800833a:	4a02      	ldr	r2, [pc, #8]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800833c:	430b      	orrs	r3, r1
 800833e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008340:	e006      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008342:	bf00      	nop
 8008344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800835c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008360:	2300      	movs	r3, #0
 8008362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008366:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800836a:	460b      	mov	r3, r1
 800836c:	4313      	orrs	r3, r2
 800836e:	d055      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008378:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800837c:	d033      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800837e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008382:	d82c      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008388:	d02f      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800838a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800838e:	d826      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008390:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008394:	d02b      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008396:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800839a:	d820      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800839c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083a0:	d012      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80083a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083a6:	d81a      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d022      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80083ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b0:	d115      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b6:	3308      	adds	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fb30 	bl	8008a20 <RCCEx_PLL2_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083c6:	e015      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083cc:	3328      	adds	r3, #40	@ 0x28
 80083ce:	2102      	movs	r1, #2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fbd7 	bl	8008b84 <RCCEx_PLL3_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083dc:	e00a      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083e4:	e006      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083e6:	bf00      	nop
 80083e8:	e004      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083ea:	bf00      	nop
 80083ec:	e002      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083ee:	bf00      	nop
 80083f0:	e000      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80083fc:	4ba1      	ldr	r3, [pc, #644]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008400:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800840c:	4a9d      	ldr	r2, [pc, #628]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800840e:	430b      	orrs	r3, r1
 8008410:	6593      	str	r3, [r2, #88]	@ 0x58
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f002 0308 	and.w	r3, r2, #8
 8008428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800842c:	2300      	movs	r3, #0
 800842e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008432:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008436:	460b      	mov	r3, r1
 8008438:	4313      	orrs	r3, r2
 800843a:	d01e      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008448:	d10c      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800844a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844e:	3328      	adds	r3, #40	@ 0x28
 8008450:	2102      	movs	r1, #2
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fb96 	bl	8008b84 <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008464:	4b87      	ldr	r3, [pc, #540]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008468:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008474:	4a83      	ldr	r2, [pc, #524]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008476:	430b      	orrs	r3, r1
 8008478:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f002 0310 	and.w	r3, r2, #16
 8008486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800848a:	2300      	movs	r3, #0
 800848c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008490:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008494:	460b      	mov	r3, r1
 8008496:	4313      	orrs	r3, r2
 8008498:	d01e      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a6:	d10c      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ac:	3328      	adds	r3, #40	@ 0x28
 80084ae:	2102      	movs	r1, #2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fb67 	bl	8008b84 <RCCEx_PLL3_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084c2:	4b70      	ldr	r3, [pc, #448]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084d2:	4a6c      	ldr	r2, [pc, #432]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084d4:	430b      	orrs	r3, r1
 80084d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80084e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084e8:	2300      	movs	r3, #0
 80084ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80084f2:	460b      	mov	r3, r1
 80084f4:	4313      	orrs	r3, r2
 80084f6:	d03e      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80084f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008504:	d022      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800850a:	d81b      	bhi.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008514:	d00b      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008516:	e015      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851c:	3308      	adds	r3, #8
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fa7d 	bl	8008a20 <RCCEx_PLL2_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800852c:	e00f      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008532:	3328      	adds	r3, #40	@ 0x28
 8008534:	2102      	movs	r1, #2
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fb24 	bl	8008b84 <RCCEx_PLL3_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008542:	e004      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800854a:	e000      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800854c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008556:	4b4b      	ldr	r3, [pc, #300]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008562:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008566:	4a47      	ldr	r2, [pc, #284]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008568:	430b      	orrs	r3, r1
 800856a:	6593      	str	r3, [r2, #88]	@ 0x58
 800856c:	e003      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008582:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008584:	2300      	movs	r3, #0
 8008586:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008588:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800858c:	460b      	mov	r3, r1
 800858e:	4313      	orrs	r3, r2
 8008590:	d03b      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800859a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800859e:	d01f      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80085a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085a4:	d818      	bhi.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80085a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085aa:	d003      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80085ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085b0:	d007      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80085b2:	e011      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b4:	4b33      	ldr	r3, [pc, #204]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	4a32      	ldr	r2, [pc, #200]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80085c0:	e00f      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c6:	3328      	adds	r3, #40	@ 0x28
 80085c8:	2101      	movs	r1, #1
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fada 	bl	8008b84 <RCCEx_PLL3_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80085d6:	e004      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085de:	e000      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80085e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085ea:	4b26      	ldr	r3, [pc, #152]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085fa:	4a22      	ldr	r2, [pc, #136]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085fc:	430b      	orrs	r3, r1
 80085fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008600:	e003      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008616:	673b      	str	r3, [r7, #112]	@ 0x70
 8008618:	2300      	movs	r3, #0
 800861a:	677b      	str	r3, [r7, #116]	@ 0x74
 800861c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008620:	460b      	mov	r3, r1
 8008622:	4313      	orrs	r3, r2
 8008624:	d034      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008634:	d007      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008636:	e011      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008638:	4b12      	ldr	r3, [pc, #72]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800863a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863c:	4a11      	ldr	r2, [pc, #68]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800863e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008644:	e00e      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864a:	3308      	adds	r3, #8
 800864c:	2102      	movs	r1, #2
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f9e6 	bl	8008a20 <RCCEx_PLL2_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800865a:	e003      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10d      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800866c:	4b05      	ldr	r3, [pc, #20]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800866e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008670:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867a:	4a02      	ldr	r2, [pc, #8]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800867c:	430b      	orrs	r3, r1
 800867e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008680:	e006      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008682:	bf00      	nop
 8008684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800869c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800869e:	2300      	movs	r3, #0
 80086a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80086a6:	460b      	mov	r3, r1
 80086a8:	4313      	orrs	r3, r2
 80086aa:	d00c      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b0:	3328      	adds	r3, #40	@ 0x28
 80086b2:	2102      	movs	r1, #2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fa65 	bl	8008b84 <RCCEx_PLL3_Config>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80086d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80086d4:	2300      	movs	r3, #0
 80086d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80086d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80086dc:	460b      	mov	r3, r1
 80086de:	4313      	orrs	r3, r2
 80086e0:	d038      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086ee:	d018      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80086f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086f4:	d811      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80086f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086fa:	d014      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80086fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008700:	d80b      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d011      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870a:	d106      	bne.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800870c:	4bc3      	ldr	r3, [pc, #780]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800870e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008710:	4ac2      	ldr	r2, [pc, #776]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008718:	e008      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008720:	e004      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008722:	bf00      	nop
 8008724:	e002      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008726:	bf00      	nop
 8008728:	e000      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800872a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800872c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10b      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008734:	4bb9      	ldr	r3, [pc, #740]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008738:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008744:	4ab5      	ldr	r2, [pc, #724]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008746:	430b      	orrs	r3, r1
 8008748:	6553      	str	r3, [r2, #84]	@ 0x54
 800874a:	e003      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008762:	2300      	movs	r3, #0
 8008764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008766:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800876a:	460b      	mov	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008770:	4baa      	ldr	r3, [pc, #680]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008774:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800877e:	4aa7      	ldr	r2, [pc, #668]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008780:	430b      	orrs	r3, r1
 8008782:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008790:	653b      	str	r3, [r7, #80]	@ 0x50
 8008792:	2300      	movs	r3, #0
 8008794:	657b      	str	r3, [r7, #84]	@ 0x54
 8008796:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800879a:	460b      	mov	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	d00a      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80087a0:	4b9e      	ldr	r3, [pc, #632]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80087a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087b0:	4a9a      	ldr	r2, [pc, #616]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087b2:	430b      	orrs	r3, r1
 80087b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80087c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c4:	2300      	movs	r3, #0
 80087c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80087cc:	460b      	mov	r3, r1
 80087ce:	4313      	orrs	r3, r2
 80087d0:	d009      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087d2:	4b92      	ldr	r3, [pc, #584]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80087da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087e0:	4a8e      	ldr	r2, [pc, #568]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087e2:	430b      	orrs	r3, r1
 80087e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80087f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80087f4:	2300      	movs	r3, #0
 80087f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80087fc:	460b      	mov	r3, r1
 80087fe:	4313      	orrs	r3, r2
 8008800:	d00e      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008802:	4b86      	ldr	r3, [pc, #536]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	4a85      	ldr	r2, [pc, #532]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008808:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800880c:	6113      	str	r3, [r2, #16]
 800880e:	4b83      	ldr	r3, [pc, #524]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008810:	6919      	ldr	r1, [r3, #16]
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800881a:	4a80      	ldr	r2, [pc, #512]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800881c:	430b      	orrs	r3, r1
 800881e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800882c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800882e:	2300      	movs	r3, #0
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008832:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008836:	460b      	mov	r3, r1
 8008838:	4313      	orrs	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800883c:	4b77      	ldr	r3, [pc, #476]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800883e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008840:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800884a:	4a74      	ldr	r2, [pc, #464]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800884c:	430b      	orrs	r3, r1
 800884e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800885c:	633b      	str	r3, [r7, #48]	@ 0x30
 800885e:	2300      	movs	r3, #0
 8008860:	637b      	str	r3, [r7, #52]	@ 0x34
 8008862:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008866:	460b      	mov	r3, r1
 8008868:	4313      	orrs	r3, r2
 800886a:	d00a      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800886c:	4b6b      	ldr	r3, [pc, #428]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800886e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008870:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800887c:	4a67      	ldr	r2, [pc, #412]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800887e:	430b      	orrs	r3, r1
 8008880:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	2100      	movs	r1, #0
 800888c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008894:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008898:	460b      	mov	r3, r1
 800889a:	4313      	orrs	r3, r2
 800889c:	d011      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a2:	3308      	adds	r3, #8
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f8ba 	bl	8008a20 <RCCEx_PLL2_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	2100      	movs	r1, #0
 80088cc:	6239      	str	r1, [r7, #32]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80088d8:	460b      	mov	r3, r1
 80088da:	4313      	orrs	r3, r2
 80088dc:	d011      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e2:	3308      	adds	r3, #8
 80088e4:	2101      	movs	r1, #1
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f89a 	bl	8008a20 <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	2100      	movs	r1, #0
 800890c:	61b9      	str	r1, [r7, #24]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	61fb      	str	r3, [r7, #28]
 8008914:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008918:	460b      	mov	r3, r1
 800891a:	4313      	orrs	r3, r2
 800891c:	d011      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008922:	3308      	adds	r3, #8
 8008924:	2102      	movs	r1, #2
 8008926:	4618      	mov	r0, r3
 8008928:	f000 f87a 	bl	8008a20 <RCCEx_PLL2_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800893e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	2100      	movs	r1, #0
 800894c:	6139      	str	r1, [r7, #16]
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008958:	460b      	mov	r3, r1
 800895a:	4313      	orrs	r3, r2
 800895c:	d011      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008962:	3328      	adds	r3, #40	@ 0x28
 8008964:	2100      	movs	r1, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f90c 	bl	8008b84 <RCCEx_PLL3_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800897e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	2100      	movs	r1, #0
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	f003 0310 	and.w	r3, r3, #16
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008998:	460b      	mov	r3, r1
 800899a:	4313      	orrs	r3, r2
 800899c:	d011      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a2:	3328      	adds	r3, #40	@ 0x28
 80089a4:	2101      	movs	r1, #1
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 f8ec 	bl	8008b84 <RCCEx_PLL3_Config>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	2100      	movs	r1, #0
 80089cc:	6039      	str	r1, [r7, #0]
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	607b      	str	r3, [r7, #4]
 80089d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80089d8:	460b      	mov	r3, r1
 80089da:	4313      	orrs	r3, r2
 80089dc:	d011      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e2:	3328      	adds	r3, #40	@ 0x28
 80089e4:	2102      	movs	r1, #2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f8cc 	bl	8008b84 <RCCEx_PLL3_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008a02:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e000      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008a16:	46bd      	mov	sp, r7
 8008a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a1c:	58024400 	.word	0x58024400

08008a20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a2e:	4b53      	ldr	r3, [pc, #332]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d101      	bne.n	8008a3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e099      	b.n	8008b72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a4e      	ldr	r2, [pc, #312]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4a:	f7fb fe43 	bl	80046d4 <HAL_GetTick>
 8008a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a50:	e008      	b.n	8008a64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a52:	f7fb fe3f 	bl	80046d4 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e086      	b.n	8008b72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a64:	4b45      	ldr	r3, [pc, #276]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1f0      	bne.n	8008a52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a70:	4b42      	ldr	r3, [pc, #264]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	031b      	lsls	r3, r3, #12
 8008a7e:	493f      	ldr	r1, [pc, #252]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	025b      	lsls	r3, r3, #9
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	061b      	lsls	r3, r3, #24
 8008ab0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ab4:	4931      	ldr	r1, [pc, #196]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008aba:	4b30      	ldr	r3, [pc, #192]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	492d      	ldr	r1, [pc, #180]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008acc:	4b2b      	ldr	r3, [pc, #172]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad0:	f023 0220 	bic.w	r2, r3, #32
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	4928      	ldr	r1, [pc, #160]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ade:	4b27      	ldr	r3, [pc, #156]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae2:	4a26      	ldr	r2, [pc, #152]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ae4:	f023 0310 	bic.w	r3, r3, #16
 8008ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008aea:	4b24      	ldr	r3, [pc, #144]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008aec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008aee:	4b24      	ldr	r3, [pc, #144]	@ (8008b80 <RCCEx_PLL2_Config+0x160>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	69d2      	ldr	r2, [r2, #28]
 8008af6:	00d2      	lsls	r2, r2, #3
 8008af8:	4920      	ldr	r1, [pc, #128]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008afe:	4b1f      	ldr	r3, [pc, #124]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	4a1e      	ldr	r2, [pc, #120]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b04:	f043 0310 	orr.w	r3, r3, #16
 8008b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b10:	4b1a      	ldr	r3, [pc, #104]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b14:	4a19      	ldr	r2, [pc, #100]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b1c:	e00f      	b.n	8008b3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d106      	bne.n	8008b32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b24:	4b15      	ldr	r3, [pc, #84]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	4a14      	ldr	r2, [pc, #80]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b30:	e005      	b.n	8008b3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b32:	4b12      	ldr	r3, [pc, #72]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	4a11      	ldr	r2, [pc, #68]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a0e      	ldr	r2, [pc, #56]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b4a:	f7fb fdc3 	bl	80046d4 <HAL_GetTick>
 8008b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b50:	e008      	b.n	8008b64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b52:	f7fb fdbf 	bl	80046d4 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d901      	bls.n	8008b64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e006      	b.n	8008b72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b64:	4b05      	ldr	r3, [pc, #20]	@ (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0f0      	beq.n	8008b52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	58024400 	.word	0x58024400
 8008b80:	ffff0007 	.word	0xffff0007

08008b84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b92:	4b53      	ldr	r3, [pc, #332]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d101      	bne.n	8008ba2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e099      	b.n	8008cd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a4e      	ldr	r2, [pc, #312]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bae:	f7fb fd91 	bl	80046d4 <HAL_GetTick>
 8008bb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bb4:	e008      	b.n	8008bc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bb6:	f7fb fd8d 	bl	80046d4 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d901      	bls.n	8008bc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e086      	b.n	8008cd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bc8:	4b45      	ldr	r3, [pc, #276]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1f0      	bne.n	8008bb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008bd4:	4b42      	ldr	r3, [pc, #264]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	051b      	lsls	r3, r3, #20
 8008be2:	493f      	ldr	r1, [pc, #252]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	025b      	lsls	r3, r3, #9
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	041b      	lsls	r3, r3, #16
 8008c06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	061b      	lsls	r3, r3, #24
 8008c14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008c18:	4931      	ldr	r1, [pc, #196]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c1e:	4b30      	ldr	r3, [pc, #192]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	492d      	ldr	r1, [pc, #180]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c30:	4b2b      	ldr	r3, [pc, #172]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	4928      	ldr	r1, [pc, #160]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c42:	4b27      	ldr	r3, [pc, #156]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c46:	4a26      	ldr	r2, [pc, #152]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c4e:	4b24      	ldr	r3, [pc, #144]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c52:	4b24      	ldr	r3, [pc, #144]	@ (8008ce4 <RCCEx_PLL3_Config+0x160>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	69d2      	ldr	r2, [r2, #28]
 8008c5a:	00d2      	lsls	r2, r2, #3
 8008c5c:	4920      	ldr	r1, [pc, #128]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c62:	4b1f      	ldr	r3, [pc, #124]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	4a1e      	ldr	r2, [pc, #120]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c74:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c78:	4a19      	ldr	r2, [pc, #100]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c80:	e00f      	b.n	8008ca2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d106      	bne.n	8008c96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c88:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	4a14      	ldr	r2, [pc, #80]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c94:	e005      	b.n	8008ca2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c96:	4b12      	ldr	r3, [pc, #72]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	4a11      	ldr	r2, [pc, #68]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cae:	f7fb fd11 	bl	80046d4 <HAL_GetTick>
 8008cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cb4:	e008      	b.n	8008cc8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cb6:	f7fb fd0d 	bl	80046d4 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e006      	b.n	8008cd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cc8:	4b05      	ldr	r3, [pc, #20]	@ (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f0      	beq.n	8008cb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	ffff0007 	.word	0xffff0007

08008ce8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e10f      	b.n	8008f1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a87      	ldr	r2, [pc, #540]	@ (8008f24 <HAL_SPI_Init+0x23c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <HAL_SPI_Init+0x42>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a86      	ldr	r2, [pc, #536]	@ (8008f28 <HAL_SPI_Init+0x240>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00a      	beq.n	8008d2a <HAL_SPI_Init+0x42>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a84      	ldr	r2, [pc, #528]	@ (8008f2c <HAL_SPI_Init+0x244>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d005      	beq.n	8008d2a <HAL_SPI_Init+0x42>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	2b0f      	cmp	r3, #15
 8008d24:	d901      	bls.n	8008d2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e0f7      	b.n	8008f1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 f910 	bl	8009f50 <SPI_GetPacketSize>
 8008d30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a7b      	ldr	r2, [pc, #492]	@ (8008f24 <HAL_SPI_Init+0x23c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00c      	beq.n	8008d56 <HAL_SPI_Init+0x6e>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a79      	ldr	r2, [pc, #484]	@ (8008f28 <HAL_SPI_Init+0x240>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <HAL_SPI_Init+0x6e>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a78      	ldr	r2, [pc, #480]	@ (8008f2c <HAL_SPI_Init+0x244>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d002      	beq.n	8008d56 <HAL_SPI_Init+0x6e>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d811      	bhi.n	8008d7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d5a:	4a72      	ldr	r2, [pc, #456]	@ (8008f24 <HAL_SPI_Init+0x23c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d009      	beq.n	8008d74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a70      	ldr	r2, [pc, #448]	@ (8008f28 <HAL_SPI_Init+0x240>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d004      	beq.n	8008d74 <HAL_SPI_Init+0x8c>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a6f      	ldr	r2, [pc, #444]	@ (8008f2c <HAL_SPI_Init+0x244>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d104      	bne.n	8008d7e <HAL_SPI_Init+0x96>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d901      	bls.n	8008d7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e0cd      	b.n	8008f1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d106      	bne.n	8008d98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7fb fa24 	bl	80041e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008dba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008dc4:	d119      	bne.n	8008dfa <HAL_SPI_Init+0x112>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008dce:	d103      	bne.n	8008dd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10c      	bne.n	8008dfa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008de8:	d107      	bne.n	8008dfa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008df8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00f      	beq.n	8008e26 <HAL_SPI_Init+0x13e>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b06      	cmp	r3, #6
 8008e0c:	d90b      	bls.n	8008e26 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	e007      	b.n	8008e36 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	69da      	ldr	r2, [r3, #28]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e48:	ea42 0103 	orr.w	r1, r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e66:	431a      	orrs	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e96:	ea42 0103 	orr.w	r1, r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d113      	bne.n	8008ed6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ec0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ed4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0201 	bic.w	r2, r2, #1
 8008ee4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	40013000 	.word	0x40013000
 8008f28:	40003800 	.word	0x40003800
 8008f2c:	40003c00 	.word	0x40003c00

08008f30 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3320      	adds	r3, #32
 8008f46:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f48:	f7fb fbc4 	bl	80046d4 <HAL_GetTick>
 8008f4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d001      	beq.n	8008f5e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e1d1      	b.n	8009302 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <HAL_SPI_Transmit+0x3a>
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e1c9      	b.n	8009302 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_SPI_Transmit+0x4c>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e1c2      	b.n	8009302 <HAL_SPI_Transmit+0x3d2>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2203      	movs	r2, #3
 8008f88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	88fa      	ldrh	r2, [r7, #6]
 8008f9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	88fa      	ldrh	r2, [r7, #6]
 8008fa6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008fd4:	d108      	bne.n	8008fe8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	e009      	b.n	8008ffc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008ffa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	4b96      	ldr	r3, [pc, #600]	@ (800925c <HAL_SPI_Transmit+0x32c>)
 8009004:	4013      	ands	r3, r2
 8009006:	88f9      	ldrh	r1, [r7, #6]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	6812      	ldr	r2, [r2, #0]
 800900c:	430b      	orrs	r3, r1
 800900e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009028:	d107      	bne.n	800903a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009038:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	2b0f      	cmp	r3, #15
 8009040:	d947      	bls.n	80090d2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009042:	e03f      	b.n	80090c4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b02      	cmp	r3, #2
 8009050:	d114      	bne.n	800907c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6812      	ldr	r2, [r2, #0]
 800905c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009062:	1d1a      	adds	r2, r3, #4
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800907a:	e023      	b.n	80090c4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800907c:	f7fb fb2a 	bl	80046d4 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d803      	bhi.n	8009094 <HAL_SPI_Transmit+0x164>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009092:	d102      	bne.n	800909a <HAL_SPI_Transmit+0x16a>
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d114      	bne.n	80090c4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fe8a 	bl	8009db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e11e      	b.n	8009302 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1b9      	bne.n	8009044 <HAL_SPI_Transmit+0x114>
 80090d0:	e0f1      	b.n	80092b6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	2b07      	cmp	r3, #7
 80090d8:	f240 80e6 	bls.w	80092a8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80090dc:	e05d      	b.n	800919a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d132      	bne.n	8009152 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d918      	bls.n	800912a <HAL_SPI_Transmit+0x1fa>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d014      	beq.n	800912a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009110:	1d1a      	adds	r2, r3, #4
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800911c:	b29b      	uxth	r3, r3
 800911e:	3b02      	subs	r3, #2
 8009120:	b29a      	uxth	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009128:	e037      	b.n	800919a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800912e:	881a      	ldrh	r2, [r3, #0]
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009138:	1c9a      	adds	r2, r3, #2
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009144:	b29b      	uxth	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009150:	e023      	b.n	800919a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009152:	f7fb fabf 	bl	80046d4 <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d803      	bhi.n	800916a <HAL_SPI_Transmit+0x23a>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009168:	d102      	bne.n	8009170 <HAL_SPI_Transmit+0x240>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d114      	bne.n	800919a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 fe1f 	bl	8009db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800917c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e0b3      	b.n	8009302 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d19b      	bne.n	80090de <HAL_SPI_Transmit+0x1ae>
 80091a6:	e086      	b.n	80092b6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d154      	bne.n	8009260 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d918      	bls.n	80091f4 <HAL_SPI_Transmit+0x2c4>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c6:	2b40      	cmp	r3, #64	@ 0x40
 80091c8:	d914      	bls.n	80091f4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6812      	ldr	r2, [r2, #0]
 80091d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091da:	1d1a      	adds	r2, r3, #4
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3b04      	subs	r3, #4
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80091f2:	e059      	b.n	80092a8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d917      	bls.n	8009230 <HAL_SPI_Transmit+0x300>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009204:	2b00      	cmp	r3, #0
 8009206:	d013      	beq.n	8009230 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800920c:	881a      	ldrh	r2, [r3, #0]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009216:	1c9a      	adds	r2, r3, #2
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009222:	b29b      	uxth	r3, r3
 8009224:	3b02      	subs	r3, #2
 8009226:	b29a      	uxth	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800922e:	e03b      	b.n	80092a8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3320      	adds	r3, #32
 800923a:	7812      	ldrb	r2, [r2, #0]
 800923c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b01      	subs	r3, #1
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800925a:	e025      	b.n	80092a8 <HAL_SPI_Transmit+0x378>
 800925c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009260:	f7fb fa38 	bl	80046d4 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d803      	bhi.n	8009278 <HAL_SPI_Transmit+0x348>
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009276:	d102      	bne.n	800927e <HAL_SPI_Transmit+0x34e>
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d114      	bne.n	80092a8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fd98 	bl	8009db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800928a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e02c      	b.n	8009302 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f47f af79 	bne.w	80091a8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2200      	movs	r2, #0
 80092be:	2108      	movs	r1, #8
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fe17 	bl	8009ef4 <SPI_WaitOnFlagUntilTimeout>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092d2:	f043 0220 	orr.w	r2, r3, #32
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fd69 	bl	8009db4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e000      	b.n	8009302 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009300:	2300      	movs	r3, #0
  }
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop

0800930c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08e      	sub	sp, #56	@ 0x38
 8009310:	af02      	add	r7, sp, #8
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3320      	adds	r3, #32
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3330      	adds	r3, #48	@ 0x30
 8009328:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932e:	095b      	lsrs	r3, r3, #5
 8009330:	b29b      	uxth	r3, r3
 8009332:	3301      	adds	r3, #1
 8009334:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009336:	f7fb f9cd 	bl	80046d4 <HAL_GetTick>
 800933a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800933c:	887b      	ldrh	r3, [r7, #2]
 800933e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8009340:	887b      	ldrh	r3, [r7, #2]
 8009342:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b01      	cmp	r3, #1
 800934e:	d001      	beq.n	8009354 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8009350:	2302      	movs	r3, #2
 8009352:	e310      	b.n	8009976 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d005      	beq.n	8009366 <HAL_SPI_TransmitReceive+0x5a>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <HAL_SPI_TransmitReceive+0x5a>
 8009360:	887b      	ldrh	r3, [r7, #2]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e305      	b.n	8009976 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_SPI_TransmitReceive+0x6c>
 8009374:	2302      	movs	r3, #2
 8009376:	e2fe      	b.n	8009976 <HAL_SPI_TransmitReceive+0x66a>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2205      	movs	r2, #5
 8009384:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	887a      	ldrh	r2, [r7, #2]
 800939a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	887a      	ldrh	r2, [r7, #2]
 80093a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	887a      	ldrh	r2, [r7, #2]
 80093b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	887a      	ldrh	r2, [r7, #2]
 80093b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68da      	ldr	r2, [r3, #12]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80093d6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a70      	ldr	r2, [pc, #448]	@ (80095a0 <HAL_SPI_TransmitReceive+0x294>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d009      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0xea>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a6f      	ldr	r2, [pc, #444]	@ (80095a4 <HAL_SPI_TransmitReceive+0x298>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d004      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0xea>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a6d      	ldr	r2, [pc, #436]	@ (80095a8 <HAL_SPI_TransmitReceive+0x29c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d102      	bne.n	80093fc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80093f6:	2310      	movs	r3, #16
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093fa:	e001      	b.n	8009400 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80093fc:	2308      	movs	r3, #8
 80093fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	4b69      	ldr	r3, [pc, #420]	@ (80095ac <HAL_SPI_TransmitReceive+0x2a0>)
 8009408:	4013      	ands	r3, r2
 800940a:	8879      	ldrh	r1, [r7, #2]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	430b      	orrs	r3, r1
 8009412:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f042 0201 	orr.w	r2, r2, #1
 8009422:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800942c:	d107      	bne.n	800943e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800943c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2b0f      	cmp	r3, #15
 8009444:	f240 80a2 	bls.w	800958c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	089b      	lsrs	r3, r3, #2
 800944c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800944e:	e094      	b.n	800957a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b02      	cmp	r3, #2
 800945c:	d120      	bne.n	80094a0 <HAL_SPI_TransmitReceive+0x194>
 800945e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01d      	beq.n	80094a0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009464:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009466:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800946c:	429a      	cmp	r2, r3
 800946e:	d217      	bcs.n	80094a0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6812      	ldr	r2, [r2, #0]
 800947a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009480:	1d1a      	adds	r2, r3, #4
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800948c:	b29b      	uxth	r3, r3
 800948e:	3b01      	subs	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800949e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80094a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d065      	beq.n	800957a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d118      	bne.n	80094ee <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80094c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094cc:	1d1a      	adds	r2, r3, #4
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80094ec:	e045      	b.n	800957a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80094ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80094f0:	8bfb      	ldrh	r3, [r7, #30]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d21d      	bcs.n	8009532 <HAL_SPI_TransmitReceive+0x226>
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d018      	beq.n	8009532 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009508:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800950a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009510:	1d1a      	adds	r2, r3, #4
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800952e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009530:	e023      	b.n	800957a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009532:	f7fb f8cf 	bl	80046d4 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800953e:	429a      	cmp	r2, r3
 8009540:	d803      	bhi.n	800954a <HAL_SPI_TransmitReceive+0x23e>
 8009542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d102      	bne.n	8009550 <HAL_SPI_TransmitReceive+0x244>
 800954a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954c:	2b00      	cmp	r3, #0
 800954e:	d114      	bne.n	800957a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 fc2f 	bl	8009db4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800955c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e1fd      	b.n	8009976 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800957a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800957c:	2b00      	cmp	r3, #0
 800957e:	f47f af67 	bne.w	8009450 <HAL_SPI_TransmitReceive+0x144>
 8009582:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009584:	2b00      	cmp	r3, #0
 8009586:	f47f af63 	bne.w	8009450 <HAL_SPI_TransmitReceive+0x144>
 800958a:	e1ce      	b.n	800992a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	2b07      	cmp	r3, #7
 8009592:	f240 81c2 	bls.w	800991a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8009596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009598:	085b      	lsrs	r3, r3, #1
 800959a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800959c:	e0c9      	b.n	8009732 <HAL_SPI_TransmitReceive+0x426>
 800959e:	bf00      	nop
 80095a0:	40013000 	.word	0x40013000
 80095a4:	40003800 	.word	0x40003800
 80095a8:	40003c00 	.word	0x40003c00
 80095ac:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d11f      	bne.n	80095fe <HAL_SPI_TransmitReceive+0x2f2>
 80095be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01c      	beq.n	80095fe <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80095c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095c6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80095c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d216      	bcs.n	80095fe <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095d4:	881a      	ldrh	r2, [r3, #0]
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095de:	1c9a      	adds	r2, r3, #2
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	3b01      	subs	r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009606:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8092 	beq.w	8009732 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b01      	cmp	r3, #1
 800961a:	d118      	bne.n	800964e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009620:	6a3a      	ldr	r2, [r7, #32]
 8009622:	8812      	ldrh	r2, [r2, #0]
 8009624:	b292      	uxth	r2, r2
 8009626:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800962c:	1c9a      	adds	r2, r3, #2
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800964a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800964c:	e071      	b.n	8009732 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800964e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009650:	8bfb      	ldrh	r3, [r7, #30]
 8009652:	429a      	cmp	r2, r3
 8009654:	d228      	bcs.n	80096a8 <HAL_SPI_TransmitReceive+0x39c>
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d023      	beq.n	80096a8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009664:	6a3a      	ldr	r2, [r7, #32]
 8009666:	8812      	ldrh	r2, [r2, #0]
 8009668:	b292      	uxth	r2, r2
 800966a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009670:	1c9a      	adds	r2, r3, #2
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800967a:	6a3a      	ldr	r2, [r7, #32]
 800967c:	8812      	ldrh	r2, [r2, #0]
 800967e:	b292      	uxth	r2, r2
 8009680:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009686:	1c9a      	adds	r2, r3, #2
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009692:	b29b      	uxth	r3, r3
 8009694:	3b02      	subs	r3, #2
 8009696:	b29a      	uxth	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096a4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80096a6:	e044      	b.n	8009732 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80096a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d11d      	bne.n	80096ea <HAL_SPI_TransmitReceive+0x3de>
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d018      	beq.n	80096ea <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096bc:	6a3a      	ldr	r2, [r7, #32]
 80096be:	8812      	ldrh	r2, [r2, #0]
 80096c0:	b292      	uxth	r2, r2
 80096c2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096c8:	1c9a      	adds	r2, r3, #2
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80096e8:	e023      	b.n	8009732 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ea:	f7fa fff3 	bl	80046d4 <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d803      	bhi.n	8009702 <HAL_SPI_TransmitReceive+0x3f6>
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009700:	d102      	bne.n	8009708 <HAL_SPI_TransmitReceive+0x3fc>
 8009702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009704:	2b00      	cmp	r3, #0
 8009706:	d114      	bne.n	8009732 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 fb53 	bl	8009db4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009714:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e121      	b.n	8009976 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009732:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009734:	2b00      	cmp	r3, #0
 8009736:	f47f af3b 	bne.w	80095b0 <HAL_SPI_TransmitReceive+0x2a4>
 800973a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800973c:	2b00      	cmp	r3, #0
 800973e:	f47f af37 	bne.w	80095b0 <HAL_SPI_TransmitReceive+0x2a4>
 8009742:	e0f2      	b.n	800992a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b02      	cmp	r3, #2
 8009750:	d121      	bne.n	8009796 <HAL_SPI_TransmitReceive+0x48a>
 8009752:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01e      	beq.n	8009796 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009758:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800975a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009760:	429a      	cmp	r2, r3
 8009762:	d218      	bcs.n	8009796 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3320      	adds	r3, #32
 800976e:	7812      	ldrb	r2, [r2, #0]
 8009770:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009782:	b29b      	uxth	r3, r3
 8009784:	3b01      	subs	r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009794:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800979e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 80ba 	beq.w	800991a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d11b      	bne.n	80097ec <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097c0:	7812      	ldrb	r2, [r2, #0]
 80097c2:	b2d2      	uxtb	r2, r2
 80097c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80097ea:	e096      	b.n	800991a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80097ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80097ee:	8bfb      	ldrh	r3, [r7, #30]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d24a      	bcs.n	800988a <HAL_SPI_TransmitReceive+0x57e>
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d045      	beq.n	800988a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800980a:	7812      	ldrb	r2, [r2, #0]
 800980c:	b2d2      	uxtb	r2, r2
 800980e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009826:	7812      	ldrb	r2, [r2, #0]
 8009828:	b2d2      	uxtb	r2, r2
 800982a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009842:	7812      	ldrb	r2, [r2, #0]
 8009844:	b2d2      	uxtb	r2, r2
 8009846:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800985e:	7812      	ldrb	r2, [r2, #0]
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009874:	b29b      	uxth	r3, r3
 8009876:	3b04      	subs	r3, #4
 8009878:	b29a      	uxth	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009886:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009888:	e047      	b.n	800991a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800988a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800988c:	2b03      	cmp	r3, #3
 800988e:	d820      	bhi.n	80098d2 <HAL_SPI_TransmitReceive+0x5c6>
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d01b      	beq.n	80098d2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098bc:	b29b      	uxth	r3, r3
 80098be:	3b01      	subs	r3, #1
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80098d0:	e023      	b.n	800991a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098d2:	f7fa feff 	bl	80046d4 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098de:	429a      	cmp	r2, r3
 80098e0:	d803      	bhi.n	80098ea <HAL_SPI_TransmitReceive+0x5de>
 80098e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e8:	d102      	bne.n	80098f0 <HAL_SPI_TransmitReceive+0x5e4>
 80098ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d114      	bne.n	800991a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 fa5f 	bl	8009db4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e02d      	b.n	8009976 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800991a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800991c:	2b00      	cmp	r3, #0
 800991e:	f47f af11 	bne.w	8009744 <HAL_SPI_TransmitReceive+0x438>
 8009922:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009924:	2b00      	cmp	r3, #0
 8009926:	f47f af0d 	bne.w	8009744 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009930:	2200      	movs	r2, #0
 8009932:	2108      	movs	r1, #8
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fadd 	bl	8009ef4 <SPI_WaitOnFlagUntilTimeout>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009946:	f043 0220 	orr.w	r2, r3, #32
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fa2f 	bl	8009db4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8009974:	2300      	movs	r3, #0
  }
}
 8009976:	4618      	mov	r0, r3
 8009978:	3730      	adds	r7, #48	@ 0x30
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop

08009980 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08a      	sub	sp, #40	@ 0x28
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009998:	6a3a      	ldr	r2, [r7, #32]
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	4013      	ands	r3, r2
 800999e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80099a8:	2300      	movs	r3, #0
 80099aa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80099b2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3330      	adds	r3, #48	@ 0x30
 80099ba:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d010      	beq.n	80099e8 <HAL_SPI_IRQHandler+0x68>
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	f003 0308 	and.w	r3, r3, #8
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00b      	beq.n	80099e8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099de:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f9c3 	bl	8009d6c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80099e6:	e192      	b.n	8009d0e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d113      	bne.n	8009a1a <HAL_SPI_IRQHandler+0x9a>
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10e      	bne.n	8009a1a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	4798      	blx	r3
    handled = 1UL;
 8009a16:	2301      	movs	r3, #1
 8009a18:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10f      	bne.n	8009a44 <HAL_SPI_IRQHandler+0xc4>
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d105      	bne.n	8009a44 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	4798      	blx	r3
    handled = 1UL;
 8009a40:	2301      	movs	r3, #1
 8009a42:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10f      	bne.n	8009a6e <HAL_SPI_IRQHandler+0xee>
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00a      	beq.n	8009a6e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d105      	bne.n	8009a6e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
    handled = 1UL;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f040 8147 	bne.w	8009d04 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	f003 0308 	and.w	r3, r3, #8
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 808b 	beq.w	8009b98 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699a      	ldr	r2, [r3, #24]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f042 0208 	orr.w	r2, r2, #8
 8009a90:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699a      	ldr	r2, [r3, #24]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0210 	orr.w	r2, r2, #16
 8009aa0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	699a      	ldr	r2, [r3, #24]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ab0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	691a      	ldr	r2, [r3, #16]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 0208 	bic.w	r2, r2, #8
 8009ac0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d13d      	bne.n	8009b4c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009ad0:	e036      	b.n	8009b40 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	2b0f      	cmp	r3, #15
 8009ad8:	d90b      	bls.n	8009af2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ae2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009ae4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009aea:	1d1a      	adds	r2, r3, #4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	665a      	str	r2, [r3, #100]	@ 0x64
 8009af0:	e01d      	b.n	8009b2e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	2b07      	cmp	r3, #7
 8009af8:	d90b      	bls.n	8009b12 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	8812      	ldrh	r2, [r2, #0]
 8009b02:	b292      	uxth	r2, r2
 8009b04:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b0a:	1c9a      	adds	r2, r3, #2
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009b10:	e00d      	b.n	8009b2e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1c2      	bne.n	8009ad2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f931 	bl	8009db4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f8f7 	bl	8009d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009b6a:	e0d0      	b.n	8009d0e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009b6c:	7cfb      	ldrb	r3, [r7, #19]
 8009b6e:	2b05      	cmp	r3, #5
 8009b70:	d103      	bne.n	8009b7a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f8e6 	bl	8009d44 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009b78:	e0c6      	b.n	8009d08 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009b7a:	7cfb      	ldrb	r3, [r7, #19]
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d103      	bne.n	8009b88 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f8d5 	bl	8009d30 <HAL_SPI_RxCpltCallback>
    return;
 8009b86:	e0bf      	b.n	8009d08 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009b88:	7cfb      	ldrb	r3, [r7, #19]
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	f040 80bc 	bne.w	8009d08 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f8c3 	bl	8009d1c <HAL_SPI_TxCpltCallback>
    return;
 8009b96:	e0b7      	b.n	8009d08 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 80b5 	beq.w	8009d0e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00f      	beq.n	8009bce <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bb4:	f043 0204 	orr.w	r2, r3, #4
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bcc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00f      	beq.n	8009bf8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bde:	f043 0201 	orr.w	r2, r3, #1
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	699a      	ldr	r2, [r3, #24]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bf6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00f      	beq.n	8009c22 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c08:	f043 0208 	orr.w	r2, r3, #8
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	699a      	ldr	r2, [r3, #24]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c20:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00f      	beq.n	8009c4c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	699a      	ldr	r2, [r3, #24]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0220 	orr.w	r2, r2, #32
 8009c4a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d05a      	beq.n	8009d0c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0201 	bic.w	r2, r2, #1
 8009c64:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6919      	ldr	r1, [r3, #16]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	4b28      	ldr	r3, [pc, #160]	@ (8009d14 <HAL_SPI_IRQHandler+0x394>)
 8009c72:	400b      	ands	r3, r1
 8009c74:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009c7c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009c80:	d138      	bne.n	8009cf4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009c90:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d013      	beq.n	8009cc2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8009d18 <HAL_SPI_IRQHandler+0x398>)
 8009ca0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fa fed8 	bl	8004a5c <HAL_DMA_Abort_IT>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d007      	beq.n	8009cc2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d020      	beq.n	8009d0c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cce:	4a12      	ldr	r2, [pc, #72]	@ (8009d18 <HAL_SPI_IRQHandler+0x398>)
 8009cd0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fa fec0 	bl	8004a5c <HAL_DMA_Abort_IT>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d014      	beq.n	8009d0c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009cf2:	e00b      	b.n	8009d0c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f82b 	bl	8009d58 <HAL_SPI_ErrorCallback>
    return;
 8009d02:	e003      	b.n	8009d0c <HAL_SPI_IRQHandler+0x38c>
    return;
 8009d04:	bf00      	nop
 8009d06:	e002      	b.n	8009d0e <HAL_SPI_IRQHandler+0x38e>
    return;
 8009d08:	bf00      	nop
 8009d0a:	e000      	b.n	8009d0e <HAL_SPI_IRQHandler+0x38e>
    return;
 8009d0c:	bf00      	nop
  }
}
 8009d0e:	3728      	adds	r7, #40	@ 0x28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	fffffc94 	.word	0xfffffc94
 8009d18:	08009d81 	.word	0x08009d81

08009d1c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f7ff ffd6 	bl	8009d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009dac:	bf00      	nop
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699a      	ldr	r2, [r3, #24]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f042 0208 	orr.w	r2, r2, #8
 8009dd2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0210 	orr.w	r2, r2, #16
 8009de2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0201 	bic.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6919      	ldr	r1, [r3, #16]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8009ef0 <SPI_CloseTransfer+0x13c>)
 8009e00:	400b      	ands	r3, r1
 8009e02:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689a      	ldr	r2, [r3, #8]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009e12:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d014      	beq.n	8009e4a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00f      	beq.n	8009e4a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699a      	ldr	r2, [r3, #24]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f042 0220 	orr.w	r2, r2, #32
 8009e48:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d014      	beq.n	8009e80 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00f      	beq.n	8009e80 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e66:	f043 0204 	orr.w	r2, r3, #4
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	699a      	ldr	r2, [r3, #24]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e7e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00f      	beq.n	8009eaa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e90:	f043 0201 	orr.w	r2, r3, #1
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	699a      	ldr	r2, [r3, #24]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ea8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00f      	beq.n	8009ed4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eba:	f043 0208 	orr.w	r2, r3, #8
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699a      	ldr	r2, [r3, #24]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ed2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009ee4:	bf00      	nop
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	fffffc90 	.word	0xfffffc90

08009ef4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	4613      	mov	r3, r2
 8009f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f04:	e010      	b.n	8009f28 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f06:	f7fa fbe5 	bl	80046d4 <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d803      	bhi.n	8009f1e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1c:	d102      	bne.n	8009f24 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e00f      	b.n	8009f48 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	695a      	ldr	r2, [r3, #20]
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	4013      	ands	r3, r2
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	bf0c      	ite	eq
 8009f38:	2301      	moveq	r3, #1
 8009f3a:	2300      	movne	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d0df      	beq.n	8009f06 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f5c:	095b      	lsrs	r3, r3, #5
 8009f5e:	3301      	adds	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	3301      	adds	r3, #1
 8009f68:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	3307      	adds	r3, #7
 8009f6e:	08db      	lsrs	r3, r3, #3
 8009f70:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	fb02 f303 	mul.w	r3, r2, r3
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e049      	b.n	800a02c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7fa f99b 	bl	80042e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	f000 f9dd 	bl	800a384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b01      	cmp	r3, #1
 800a046:	d001      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e054      	b.n	800a0f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68da      	ldr	r2, [r3, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0201 	orr.w	r2, r2, #1
 800a062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a26      	ldr	r2, [pc, #152]	@ (800a104 <HAL_TIM_Base_Start_IT+0xd0>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d022      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0x80>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a076:	d01d      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0x80>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a22      	ldr	r2, [pc, #136]	@ (800a108 <HAL_TIM_Base_Start_IT+0xd4>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d018      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0x80>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a21      	ldr	r2, [pc, #132]	@ (800a10c <HAL_TIM_Base_Start_IT+0xd8>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d013      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0x80>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a1f      	ldr	r2, [pc, #124]	@ (800a110 <HAL_TIM_Base_Start_IT+0xdc>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d00e      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0x80>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a1e      	ldr	r2, [pc, #120]	@ (800a114 <HAL_TIM_Base_Start_IT+0xe0>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d009      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0x80>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a118 <HAL_TIM_Base_Start_IT+0xe4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d004      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0x80>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a11c <HAL_TIM_Base_Start_IT+0xe8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d115      	bne.n	800a0e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	4b19      	ldr	r3, [pc, #100]	@ (800a120 <HAL_TIM_Base_Start_IT+0xec>)
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b06      	cmp	r3, #6
 800a0c4:	d015      	beq.n	800a0f2 <HAL_TIM_Base_Start_IT+0xbe>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0cc:	d011      	beq.n	800a0f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f042 0201 	orr.w	r2, r2, #1
 800a0dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0de:	e008      	b.n	800a0f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f042 0201 	orr.w	r2, r2, #1
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	e000      	b.n	800a0f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	40010000 	.word	0x40010000
 800a108:	40000400 	.word	0x40000400
 800a10c:	40000800 	.word	0x40000800
 800a110:	40000c00 	.word	0x40000c00
 800a114:	40010400 	.word	0x40010400
 800a118:	40001800 	.word	0x40001800
 800a11c:	40014000 	.word	0x40014000
 800a120:	00010007 	.word	0x00010007

0800a124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d020      	beq.n	800a188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d01b      	beq.n	800a188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f06f 0202 	mvn.w	r2, #2
 800a158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	f003 0303 	and.w	r3, r3, #3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f8e9 	bl	800a346 <HAL_TIM_IC_CaptureCallback>
 800a174:	e005      	b.n	800a182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f8db 	bl	800a332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f8ec 	bl	800a35a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f003 0304 	and.w	r3, r3, #4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d020      	beq.n	800a1d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01b      	beq.n	800a1d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f06f 0204 	mvn.w	r2, #4
 800a1a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f8c3 	bl	800a346 <HAL_TIM_IC_CaptureCallback>
 800a1c0:	e005      	b.n	800a1ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f8b5 	bl	800a332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f8c6 	bl	800a35a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f003 0308 	and.w	r3, r3, #8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d020      	beq.n	800a220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f003 0308 	and.w	r3, r3, #8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01b      	beq.n	800a220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f06f 0208 	mvn.w	r2, #8
 800a1f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2204      	movs	r2, #4
 800a1f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f003 0303 	and.w	r3, r3, #3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f89d 	bl	800a346 <HAL_TIM_IC_CaptureCallback>
 800a20c:	e005      	b.n	800a21a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f88f 	bl	800a332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f8a0 	bl	800a35a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f003 0310 	and.w	r3, r3, #16
 800a226:	2b00      	cmp	r3, #0
 800a228:	d020      	beq.n	800a26c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f003 0310 	and.w	r3, r3, #16
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01b      	beq.n	800a26c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f06f 0210 	mvn.w	r2, #16
 800a23c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2208      	movs	r2, #8
 800a242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f877 	bl	800a346 <HAL_TIM_IC_CaptureCallback>
 800a258:	e005      	b.n	800a266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f869 	bl	800a332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f87a 	bl	800a35a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00c      	beq.n	800a290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f06f 0201 	mvn.w	r2, #1
 800a288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7f9 fbcc 	bl	8003a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a296:	2b00      	cmp	r3, #0
 800a298:	d104      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00c      	beq.n	800a2be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d007      	beq.n	800a2be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a2b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f913 	bl	800a4e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00c      	beq.n	800a2e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d007      	beq.n	800a2e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a2da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f90b 	bl	800a4f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00c      	beq.n	800a306 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d007      	beq.n	800a306 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f834 	bl	800a36e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	f003 0320 	and.w	r3, r3, #32
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00c      	beq.n	800a32a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d007      	beq.n	800a32a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f06f 0220 	mvn.w	r2, #32
 800a322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f8d3 	bl	800a4d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a32a:	bf00      	nop
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a34e:	bf00      	nop
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a362:	bf00      	nop
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a36e:	b480      	push	{r7}
 800a370:	b083      	sub	sp, #12
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
	...

0800a384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a46      	ldr	r2, [pc, #280]	@ (800a4b0 <TIM_Base_SetConfig+0x12c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d013      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3a2:	d00f      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a43      	ldr	r2, [pc, #268]	@ (800a4b4 <TIM_Base_SetConfig+0x130>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00b      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a42      	ldr	r2, [pc, #264]	@ (800a4b8 <TIM_Base_SetConfig+0x134>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d007      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a41      	ldr	r2, [pc, #260]	@ (800a4bc <TIM_Base_SetConfig+0x138>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d003      	beq.n	800a3c4 <TIM_Base_SetConfig+0x40>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a40      	ldr	r2, [pc, #256]	@ (800a4c0 <TIM_Base_SetConfig+0x13c>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d108      	bne.n	800a3d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a35      	ldr	r2, [pc, #212]	@ (800a4b0 <TIM_Base_SetConfig+0x12c>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d01f      	beq.n	800a41e <TIM_Base_SetConfig+0x9a>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3e4:	d01b      	beq.n	800a41e <TIM_Base_SetConfig+0x9a>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a32      	ldr	r2, [pc, #200]	@ (800a4b4 <TIM_Base_SetConfig+0x130>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d017      	beq.n	800a41e <TIM_Base_SetConfig+0x9a>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a31      	ldr	r2, [pc, #196]	@ (800a4b8 <TIM_Base_SetConfig+0x134>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d013      	beq.n	800a41e <TIM_Base_SetConfig+0x9a>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a30      	ldr	r2, [pc, #192]	@ (800a4bc <TIM_Base_SetConfig+0x138>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d00f      	beq.n	800a41e <TIM_Base_SetConfig+0x9a>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2f      	ldr	r2, [pc, #188]	@ (800a4c0 <TIM_Base_SetConfig+0x13c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d00b      	beq.n	800a41e <TIM_Base_SetConfig+0x9a>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a2e      	ldr	r2, [pc, #184]	@ (800a4c4 <TIM_Base_SetConfig+0x140>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d007      	beq.n	800a41e <TIM_Base_SetConfig+0x9a>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a2d      	ldr	r2, [pc, #180]	@ (800a4c8 <TIM_Base_SetConfig+0x144>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d003      	beq.n	800a41e <TIM_Base_SetConfig+0x9a>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a2c      	ldr	r2, [pc, #176]	@ (800a4cc <TIM_Base_SetConfig+0x148>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d108      	bne.n	800a430 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a16      	ldr	r2, [pc, #88]	@ (800a4b0 <TIM_Base_SetConfig+0x12c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d00f      	beq.n	800a47c <TIM_Base_SetConfig+0xf8>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a18      	ldr	r2, [pc, #96]	@ (800a4c0 <TIM_Base_SetConfig+0x13c>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d00b      	beq.n	800a47c <TIM_Base_SetConfig+0xf8>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a17      	ldr	r2, [pc, #92]	@ (800a4c4 <TIM_Base_SetConfig+0x140>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d007      	beq.n	800a47c <TIM_Base_SetConfig+0xf8>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a16      	ldr	r2, [pc, #88]	@ (800a4c8 <TIM_Base_SetConfig+0x144>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d003      	beq.n	800a47c <TIM_Base_SetConfig+0xf8>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a15      	ldr	r2, [pc, #84]	@ (800a4cc <TIM_Base_SetConfig+0x148>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d103      	bne.n	800a484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	691a      	ldr	r2, [r3, #16]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b01      	cmp	r3, #1
 800a494:	d105      	bne.n	800a4a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	f023 0201 	bic.w	r2, r3, #1
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	611a      	str	r2, [r3, #16]
  }
}
 800a4a2:	bf00      	nop
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	40010000 	.word	0x40010000
 800a4b4:	40000400 	.word	0x40000400
 800a4b8:	40000800 	.word	0x40000800
 800a4bc:	40000c00 	.word	0x40000c00
 800a4c0:	40010400 	.word	0x40010400
 800a4c4:	40014000 	.word	0x40014000
 800a4c8:	40014400 	.word	0x40014400
 800a4cc:	40014800 	.word	0x40014800

0800a4d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <memset>:
 800a50c:	4402      	add	r2, r0
 800a50e:	4603      	mov	r3, r0
 800a510:	4293      	cmp	r3, r2
 800a512:	d100      	bne.n	800a516 <memset+0xa>
 800a514:	4770      	bx	lr
 800a516:	f803 1b01 	strb.w	r1, [r3], #1
 800a51a:	e7f9      	b.n	800a510 <memset+0x4>

0800a51c <__libc_init_array>:
 800a51c:	b570      	push	{r4, r5, r6, lr}
 800a51e:	4d0d      	ldr	r5, [pc, #52]	@ (800a554 <__libc_init_array+0x38>)
 800a520:	4c0d      	ldr	r4, [pc, #52]	@ (800a558 <__libc_init_array+0x3c>)
 800a522:	1b64      	subs	r4, r4, r5
 800a524:	10a4      	asrs	r4, r4, #2
 800a526:	2600      	movs	r6, #0
 800a528:	42a6      	cmp	r6, r4
 800a52a:	d109      	bne.n	800a540 <__libc_init_array+0x24>
 800a52c:	4d0b      	ldr	r5, [pc, #44]	@ (800a55c <__libc_init_array+0x40>)
 800a52e:	4c0c      	ldr	r4, [pc, #48]	@ (800a560 <__libc_init_array+0x44>)
 800a530:	f000 f826 	bl	800a580 <_init>
 800a534:	1b64      	subs	r4, r4, r5
 800a536:	10a4      	asrs	r4, r4, #2
 800a538:	2600      	movs	r6, #0
 800a53a:	42a6      	cmp	r6, r4
 800a53c:	d105      	bne.n	800a54a <__libc_init_array+0x2e>
 800a53e:	bd70      	pop	{r4, r5, r6, pc}
 800a540:	f855 3b04 	ldr.w	r3, [r5], #4
 800a544:	4798      	blx	r3
 800a546:	3601      	adds	r6, #1
 800a548:	e7ee      	b.n	800a528 <__libc_init_array+0xc>
 800a54a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54e:	4798      	blx	r3
 800a550:	3601      	adds	r6, #1
 800a552:	e7f2      	b.n	800a53a <__libc_init_array+0x1e>
 800a554:	0800b42c 	.word	0x0800b42c
 800a558:	0800b42c 	.word	0x0800b42c
 800a55c:	0800b42c 	.word	0x0800b42c
 800a560:	0800b430 	.word	0x0800b430

0800a564 <memcpy>:
 800a564:	440a      	add	r2, r1
 800a566:	4291      	cmp	r1, r2
 800a568:	f100 33ff 	add.w	r3, r0, #4294967295
 800a56c:	d100      	bne.n	800a570 <memcpy+0xc>
 800a56e:	4770      	bx	lr
 800a570:	b510      	push	{r4, lr}
 800a572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a57a:	4291      	cmp	r1, r2
 800a57c:	d1f9      	bne.n	800a572 <memcpy+0xe>
 800a57e:	bd10      	pop	{r4, pc}

0800a580 <_init>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	bf00      	nop
 800a584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a586:	bc08      	pop	{r3}
 800a588:	469e      	mov	lr, r3
 800a58a:	4770      	bx	lr

0800a58c <_fini>:
 800a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58e:	bf00      	nop
 800a590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a592:	bc08      	pop	{r3}
 800a594:	469e      	mov	lr, r3
 800a596:	4770      	bx	lr
