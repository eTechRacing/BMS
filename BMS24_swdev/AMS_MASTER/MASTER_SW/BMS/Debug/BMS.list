
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063ac  080063ac  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063b4  080063b4  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  080063bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  2000026c  08006628  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e64  08006628  00024e64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002029a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018549  00000000  00000000  000202dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000355d  00000000  00000000  00038826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0003bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108a  00000000  00000000  0003d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a525  00000000  00000000  0003e36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b96  00000000  00000000  0006888f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010916f  00000000  00000000  00081425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e54  00000000  00000000  0018a594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001903e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000026c 	.word	0x2000026c
 800021c:	00000000 	.word	0x00000000
 8000220:	080061d0 	.word	0x080061d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000270 	.word	0x20000270
 800023c:	080061d0 	.word	0x080061d0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <Balancing>:
		uint16_t VCELL_MIN, 									// Variable of the less charged cell
		uint16_t *VOLTAGES,										// Array of the read voltages
		uint16_t V_BALANCING,									// Constant of the limit voltage to start balancing, it has no other conditions for balancing
		uint8_t DIFF_MAX,										// Constant of the Maximum difference between the evaluated voltage and the minimum voltage
		uint8_t TOTAL_IC)										// Constant of the number of ICs that are being used
		{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	60ba      	str	r2, [r7, #8]
 8000544:	461a      	mov	r2, r3
 8000546:	4603      	mov	r3, r0
 8000548:	81fb      	strh	r3, [r7, #14]
 800054a:	460b      	mov	r3, r1
 800054c:	81bb      	strh	r3, [r7, #12]
 800054e:	4613      	mov	r3, r2
 8000550:	80fb      	strh	r3, [r7, #6]
			int *DCC;											// Declaration of the DCC array
			DCC = malloc(sizeof(int *) * TOTAL_IC);				// Definition of the DCC array with a TOTAL_IC length
 8000552:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4618      	mov	r0, r3
 800055a:	f005 fcdf 	bl	8005f1c <malloc>
 800055e:	4603      	mov	r3, r0
 8000560:	613b      	str	r3, [r7, #16]
			for(int j = 0; TOTAL_IC; j++)						// Loops for each voltage in the evaluated IC
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
 8000566:	e039      	b.n	80005dc <Balancing+0xa0>
			{
				uint16_t BALANCING = 0b00000000000000;			// Variable 0 or 1 that sets if the evaluated cell should (1) or not (0) start balancing, has a 16 bits dimension
 8000568:	2300      	movs	r3, #0
 800056a:	837b      	strh	r3, [r7, #26]
				for(int i = 0; i < 12; i++)						// A for function that evaluates each cell of the IC
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	e028      	b.n	80005c4 <Balancing+0x88>
				{
					if(VOLTAGES[i]>V_MIN && (VOLTAGES[i] > V_BALANCING || (VOLTAGES[i]-VCELL_MIN)>DIFF_MAX))	//If the evaluated voltage is over V_MIN && (the evaluated voltage is over V_BALANCING || the difference between the evaluated voltage and VCELL_MIN is bigger than DIFF_MAX
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	4413      	add	r3, r2
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	89fa      	ldrh	r2, [r7, #14]
 800057e:	429a      	cmp	r2, r3
 8000580:	d21d      	bcs.n	80005be <Balancing+0x82>
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	4413      	add	r3, r2
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	88fa      	ldrh	r2, [r7, #6]
 800058e:	429a      	cmp	r2, r3
 8000590:	d30b      	bcc.n	80005aa <Balancing+0x6e>
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	4413      	add	r3, r2
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	89bb      	ldrh	r3, [r7, #12]
 80005a0:	1ad2      	subs	r2, r2, r3
 80005a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005a6:	429a      	cmp	r2, r3
 80005a8:	dd09      	ble.n	80005be <Balancing+0x82>
					{
						BALANCING = (BALANCING|(1<<i));			//Set a 1 in the position of the evaluated cell in the BALANCING variable
 80005aa:	2201      	movs	r2, #1
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	b21a      	sxth	r2, r3
 80005b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	837b      	strh	r3, [r7, #26]
				for(int i = 0; i < 12; i++)						// A for function that evaluates each cell of the IC
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b0b      	cmp	r3, #11
 80005c8:	ddd3      	ble.n	8000572 <Balancing+0x36>
					}
				}
				DCC[j] = BALANCING;								//Set the DCC array in the evaluated IC position to the value of the BALANCING variable
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4413      	add	r3, r2
 80005d2:	8b7a      	ldrh	r2, [r7, #26]
 80005d4:	601a      	str	r2, [r3, #0]
			for(int j = 0; TOTAL_IC; j++)						// Loops for each voltage in the evaluated IC
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	3301      	adds	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
 80005dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1c1      	bne.n	8000568 <Balancing+0x2c>
			}
			return DCC;
 80005e4:	693b      	ldr	r3, [r7, #16]
		}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3720      	adds	r7, #32
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <outputCS>:
/*
 * Function: outputCS
 * Purpose: The outputCs is a function that sets the CS pin to high or low depending on the entering value input (1) or (0)
 */
void outputCS(uint8_t CS_INPUT){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	if(CS_INPUT == 1){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d105      	bne.n	800060c <outputCS+0x1c>
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_SET);					//The High state of the chip select pin is set
 8000600:	2201      	movs	r2, #1
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <outputCS+0x30>)
 8000606:	f001 fbaf 	bl	8001d68 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_RESET);				//The Low state of the chip select pin is set
	}
}
 800060a:	e004      	b.n	8000616 <outputCS+0x26>
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_RESET);				//The Low state of the chip select pin is set
 800060c:	2200      	movs	r2, #0
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <outputCS+0x30>)
 8000612:	f001 fba9 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020400 	.word	0x40020400

08000624 <wakeup_idle>:
 * Function: wakeup_idle
 * Purpose: The wakeup_idle function sends a byte thought SPI with no specific purpose, it just wakes up the ICs.
 * Inputs: The spi_channel which wants to be used
 */
void wakeup_idle(SPI_HandleTypeDef SPI_CHANNEL)
{
 8000624:	b084      	sub	sp, #16
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	f107 0c10 	add.w	ip, r7, #16
 8000630:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t idle_message = 0xFF;
 8000634:	23ff      	movs	r3, #255	; 0xff
 8000636:	71fb      	strb	r3, [r7, #7]
	outputCS(0);																// The Low state of the chip select pin is set
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ffd9 	bl	80005f0 <outputCS>
	HAL_SPI_Transmit(&SPI_CHANNEL, (uint8_t*)&idle_message, 1, HAL_MAX_DELAY);	// Sends a byte through SPI
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2201      	movs	r2, #1
 8000646:	f107 0010 	add.w	r0, r7, #16
 800064a:	f002 f8b2 	bl	80027b2 <HAL_SPI_Transmit>
	outputCS(1);																// The High state of the chip select pin is set
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ffce 	bl	80005f0 <outputCS>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800065e:	b004      	add	sp, #16
 8000660:	4770      	bx	lr

08000662 <wakeup_sleep>:
 * Function: wakeup_sleep
 * Purpose:Generic wakeup command to wake the ltc6811 from sleep
 * Inputs: The spi_channel where the data should be sent, the timer to have a delay of 1 us, the number of ICs, the delay between sending each message in us
*/
void wakeup_sleep(SPI_HandleTypeDef SPI_CHANNEL, TIM_HandleTypeDef TIMER_CHANNEL, int TOTAL_IC, int WAKEUP_DELAY)
{
 8000662:	b084      	sub	sp, #16
 8000664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000666:	b093      	sub	sp, #76	; 0x4c
 8000668:	af10      	add	r7, sp, #64	; 0x40
 800066a:	f107 0420 	add.w	r4, r7, #32
 800066e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t idle_message = 0xFF;				// Declare the dummy message  sent
 8000672:	23ff      	movs	r3, #255	; 0xff
 8000674:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i<TOTAL_IC; i++)				// Loops for each IC
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	e010      	b.n	800069e <wakeup_sleep+0x3c>
	{
		outputCS(0);							// The Low state of the chip select pin is set
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ffb7 	bl	80005f0 <outputCS>
		HAL_SPI_Transmit(&SPI_CHANNEL, (uint8_t*)&idle_message, 1, HAL_MAX_DELAY); // Sends a byte through SPI
 8000682:	1cf9      	adds	r1, r7, #3
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	2201      	movs	r2, #1
 800068a:	f107 0020 	add.w	r0, r7, #32
 800068e:	f002 f890 	bl	80027b2 <HAL_SPI_Transmit>
		outputCS(1);							// The High state of the chip select pin is set
 8000692:	2001      	movs	r0, #1
 8000694:	f7ff ffac 	bl	80005f0 <outputCS>
	for(int i = 0; i<TOTAL_IC; i++)				// Loops for each IC
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbe9      	blt.n	800067c <wakeup_sleep+0x1a>
	}
	delay_us(WAKEUP_DELAY, TIMER_CHANNEL);		// Waits WAKEUP_DELAY to send again
 80006a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80006ac:	b29e      	uxth	r6, r3
 80006ae:	466d      	mov	r5, sp
 80006b0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80006b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80006c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80006cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006ce:	4630      	mov	r0, r6
 80006d0:	f000 fa1e 	bl	8000b10 <delay_us>
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80006de:	b004      	add	sp, #16
 80006e0:	4770      	bx	lr
	...

080006e4 <pec15_calc>:
 * Inputs: The length of the data calculated and the data which has to be evaluated to calculate the PEC
*/
uint16_t pec15_calc(uint8_t DATA_LENGTH, 		// Number of bytes that will be used to calculate a PEC
                    uint8_t *DATA 				// Array of data that will be used to calculate  a PEC
                   )
{
 80006e4:	b480      	push	{r7}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder;
  uint16_t addr;
  remainder = 16;								// Initialize the PEC
 80006f0:	2310      	movs	r3, #16
 80006f2:	82fb      	strh	r3, [r7, #22]
  for (uint8_t i = 0; i<DATA_LENGTH; i++) 		// Loops for each byte in data array
 80006f4:	2300      	movs	r3, #0
 80006f6:	757b      	strb	r3, [r7, #21]
 80006f8:	e01c      	b.n	8000734 <pec15_calc+0x50>
  {
    addr = ((remainder>>7)^DATA[i])&0xff;		// Calculate PEC table address
 80006fa:	8afb      	ldrh	r3, [r7, #22]
 80006fc:	09db      	lsrs	r3, r3, #7
 80006fe:	b29a      	uxth	r2, r3
 8000700:	7d7b      	ldrb	r3, [r7, #21]
 8000702:	6839      	ldr	r1, [r7, #0]
 8000704:	440b      	add	r3, r1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b29b      	uxth	r3, r3
 800070a:	4053      	eors	r3, r2
 800070c:	b29b      	uxth	r3, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	827b      	strh	r3, [r7, #18]
    remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
 8000712:	8afb      	ldrh	r3, [r7, #22]
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	b21a      	sxth	r2, r3
 8000718:	8a7b      	ldrh	r3, [r7, #18]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <pec15_calc+0x6c>)
 800071e:	440b      	add	r3, r1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b21b      	sxth	r3, r3
 8000728:	4053      	eors	r3, r2
 800072a:	b21b      	sxth	r3, r3
 800072c:	82fb      	strh	r3, [r7, #22]
  for (uint8_t i = 0; i<DATA_LENGTH; i++) 		// Loops for each byte in data array
 800072e:	7d7b      	ldrb	r3, [r7, #21]
 8000730:	3301      	adds	r3, #1
 8000732:	757b      	strb	r3, [r7, #21]
 8000734:	7d7a      	ldrb	r2, [r7, #21]
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	429a      	cmp	r2, r3
 800073a:	d3de      	bcc.n	80006fa <pec15_calc+0x16>
  }
  return(remainder*2);							// The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800073c:	8afb      	ldrh	r3, [r7, #22]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	b29b      	uxth	r3, r3
}
 8000742:	4618      	mov	r0, r3
 8000744:	371c      	adds	r7, #28
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <set_pwm>:
/*
 * Function: set_pwm
 * Purpose:
 * Inputs:
 */
int **set_pwm(int TOTAL_IC){
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
		int **pwm_set;
		int pwm_IClenght = 4+4;
 800075c:	2308      	movs	r3, #8
 800075e:	617b      	str	r3, [r7, #20]
		int cell_pwm = 0b00001010;
 8000760:	230a      	movs	r3, #10
 8000762:	613b      	str	r3, [r7, #16]
		pwm_set = malloc(sizeof(int *) * TOTAL_IC);				// Declaration of the number of vectors in the config_set matrix
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4618      	mov	r0, r3
 800076a:	f005 fbd7 	bl	8005f1c <malloc>
 800076e:	4603      	mov	r3, r0
 8000770:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < TOTAL_IC; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	e00d      	b.n	8000794 <set_pwm+0x40>
		{
			pwm_set[i] = malloc(sizeof(int) * pwm_IClenght);	// Declaration of the size of each position in the config_set array
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	0099      	lsls	r1, r3, #2
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	18d4      	adds	r4, r2, r3
 8000784:	4608      	mov	r0, r1
 8000786:	f005 fbc9 	bl	8005f1c <malloc>
 800078a:	4603      	mov	r3, r0
 800078c:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < TOTAL_IC; i++)
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3301      	adds	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	69fa      	ldr	r2, [r7, #28]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbed      	blt.n	8000778 <set_pwm+0x24>
		}

		for(int i = 0; i < TOTAL_IC; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	e061      	b.n	8000866 <set_pwm+0x112>
		{
			pwm_set[i][0] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2d9      	uxtb	r1, r3
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	460a      	mov	r2, r1
 80007be:	601a      	str	r2, [r3, #0]
			/*							0b10100000 & 0b00001010
			 * 								0b10101010 */
			pwm_set[i][1] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	4013      	ands	r3, r2
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	b2d9      	uxtb	r1, r3
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3304      	adds	r3, #4
 80007dc:	460a      	mov	r2, r1
 80007de:	601a      	str	r2, [r3, #0]
			pwm_set[i][2] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	b25a      	sxtb	r2, r3
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	4013      	ands	r3, r2
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3308      	adds	r3, #8
 80007fc:	460a      	mov	r2, r1
 80007fe:	601a      	str	r2, [r3, #0]
			pwm_set[i][3] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	b25a      	sxtb	r2, r3
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	b25b      	sxtb	r3, r3
 800080a:	4013      	ands	r3, r2
 800080c:	b25b      	sxtb	r3, r3
 800080e:	b2d9      	uxtb	r1, r3
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	4413      	add	r3, r2
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	330c      	adds	r3, #12
 800081c:	460a      	mov	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
			pwm_set[i][4] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	b25a      	sxtb	r2, r3
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	b25b      	sxtb	r3, r3
 800082a:	4013      	ands	r3, r2
 800082c:	b25b      	sxtb	r3, r3
 800082e:	b2d9      	uxtb	r1, r3
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3310      	adds	r3, #16
 800083c:	460a      	mov	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
			pwm_set[i][5] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	b25a      	sxtb	r2, r3
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	4013      	ands	r3, r2
 800084c:	b25b      	sxtb	r3, r3
 800084e:	b2d9      	uxtb	r1, r3
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3314      	adds	r3, #20
 800085c:	460a      	mov	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < TOTAL_IC; i++)
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	3301      	adds	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	db99      	blt.n	80007a2 <set_pwm+0x4e>
		}
	return pwm_set;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3724      	adds	r7, #36	; 0x24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <ltc6811_wrpwm>:
 * Inputs: The number of ICs, the PWM array of set_pwm, the spi_channel used, the timer channel
 */
void ltc6811_wrpwm(uint8_t TOTAL_IC, //The number of ICs being written to
                   uint8_t **PWM[ICn][6], //A two dimensional array of the configuration data that will be written
                  SPI_HandleTypeDef spi_channel,
				  TIM_HandleTypeDef TIMER_CHANNEL){
 8000878:	b082      	sub	sp, #8
 800087a:	b5b0      	push	{r4, r5, r7, lr}
 800087c:	b09c      	sub	sp, #112	; 0x70
 800087e:	af16      	add	r7, sp, #88	; 0x58
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000886:	e881 000c 	stmia.w	r1, {r2, r3}
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  const uint8_t BYTES_IN_REG = 6;
 800088e:	2306      	movs	r3, #6
 8000890:	753b      	strb	r3, [r7, #20]
  const uint8_t CMD_LEN = 4+(8*TOTAL_IC); //4 bits (cmd + PEC(cmd)) + (8 bits(Nºbits in a register)*TOTAL_IC
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3304      	adds	r3, #4
 800089a:	74fb      	strb	r3, [r7, #19]
  uint8_t *cmd;			// CMD array
  uint16_t cfg_pec;		// PEC
  uint8_t cmd_pec;
  uint8_t cmd_index; 	// Command counter

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t)); // Declaration of the CMD with the length
 800089c:	7cfb      	ldrb	r3, [r7, #19]
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fb3c 	bl	8005f1c <malloc>
 80008a4:	4603      	mov	r3, r0
 80008a6:	60fb      	str	r3, [r7, #12]


  cmd[0] = 0x00;					// Command format 0
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x20;					// Command format 1
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	2220      	movs	r2, #32
 80008b4:	701a      	strb	r2, [r3, #0]
  cmd_pec = pec15_calc(2, cmd);		// Calculation of the PEC of the cmd
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4619      	mov	r1, r3
 80008ba:	2002      	movs	r0, #2
 80008bc:	f7ff ff12 	bl	80006e4 <pec15_calc>
 80008c0:	4603      	mov	r3, r0
 80008c2:	74bb      	strb	r3, [r7, #18]
  cmd[2] = (uint8_t)(cmd_pec >> 8);	// Calculated PEC of Command format 0
 80008c4:	7cbb      	ldrb	r3, [r7, #18]
 80008c6:	121a      	asrs	r2, r3, #8
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3302      	adds	r3, #2
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);		// Calculated PEC of Command format 1
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3303      	adds	r3, #3
 80008d4:	7cba      	ldrb	r2, [r7, #18]
 80008d6:	701a      	strb	r2, [r3, #0]



  cmd_index = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	75fb      	strb	r3, [r7, #23]
  for (uint8_t CURRENT_IC = TOTAL_IC; CURRENT_IC > 0; CURRENT_IC--)    			// Executes for each ltc6811 in daisy chain, this loops starts with
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	75bb      	strb	r3, [r7, #22]
 80008e0:	e042      	b.n	8000968 <ltc6811_wrpwm+0xf0>
  {
    // The last IC on the stack. The first configuration written is
    // Received by the last IC in the daisy chain

    for (uint8_t CURRENT_BYTE = 0; CURRENT_BYTE < BYTES_IN_REG; CURRENT_BYTE++) // Executes for each of the 6 bytes in the CFGR register
 80008e2:	2300      	movs	r3, #0
 80008e4:	757b      	strb	r3, [r7, #21]
 80008e6:	e016      	b.n	8000916 <ltc6811_wrpwm+0x9e>
    {
    // Current_byte is the byte counter

      cmd[cmd_index] = &PWM[CURRENT_IC-1][CURRENT_BYTE];           			// Adding the config data to the array to be sent
 80008e8:	7dba      	ldrb	r2, [r7, #22]
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	3b18      	subs	r3, #24
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	441a      	add	r2, r3
 80008f8:	7d7b      	ldrb	r3, [r7, #21]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	4619      	mov	r1, r3
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	4413      	add	r3, r2
 8000906:	b2ca      	uxtb	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 800090a:	7dfb      	ldrb	r3, [r7, #23]
 800090c:	3301      	adds	r3, #1
 800090e:	75fb      	strb	r3, [r7, #23]
    for (uint8_t CURRENT_BYTE = 0; CURRENT_BYTE < BYTES_IN_REG; CURRENT_BYTE++) // Executes for each of the 6 bytes in the CFGR register
 8000910:	7d7b      	ldrb	r3, [r7, #21]
 8000912:	3301      	adds	r3, #1
 8000914:	757b      	strb	r3, [r7, #21]
 8000916:	7d7a      	ldrb	r2, [r7, #21]
 8000918:	7d3b      	ldrb	r3, [r7, #20]
 800091a:	429a      	cmp	r2, r3
 800091c:	d3e4      	bcc.n	80008e8 <ltc6811_wrpwm+0x70>
    }

    cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &PWM[CURRENT_IC-1][0]);   	// Calculating the PEC for each ICs configuration register data
 800091e:	7dba      	ldrb	r2, [r7, #22]
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	3b18      	subs	r3, #24
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	4413      	add	r3, r2
 800092e:	461a      	mov	r2, r3
 8000930:	7d3b      	ldrb	r3, [r7, #20]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fed5 	bl	80006e4 <pec15_calc>
 800093a:	4603      	mov	r3, r0
 800093c:	823b      	strh	r3, [r7, #16]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 800093e:	8a3b      	ldrh	r3, [r7, #16]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	b299      	uxth	r1, r3
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	7dfb      	ldrb	r3, [r7, #23]
 8000948:	4413      	add	r3, r2
 800094a:	b2ca      	uxtb	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	3301      	adds	r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	8a3a      	ldrh	r2, [r7, #16]
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 800095c:	7dfb      	ldrb	r3, [r7, #23]
 800095e:	3302      	adds	r3, #2
 8000960:	75fb      	strb	r3, [r7, #23]
  for (uint8_t CURRENT_IC = TOTAL_IC; CURRENT_IC > 0; CURRENT_IC--)    			// Executes for each ltc6811 in daisy chain, this loops starts with
 8000962:	7dbb      	ldrb	r3, [r7, #22]
 8000964:	3b01      	subs	r3, #1
 8000966:	75bb      	strb	r3, [r7, #22]
 8000968:	7dbb      	ldrb	r3, [r7, #22]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1b9      	bne.n	80008e2 <ltc6811_wrpwm+0x6a>
  }


  wakeup_idle (spi_channel);                // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800096e:	4668      	mov	r0, sp
 8000970:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000974:	2254      	movs	r2, #84	; 0x54
 8000976:	4619      	mov	r1, r3
 8000978:	f005 fbd0 	bl	800611c <memcpy>
 800097c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000982:	f7ff fe4f 	bl	8000624 <wakeup_idle>

  outputCS(0);								// Set the  CS to low and then to high to ensure the CS is low
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fe32 	bl	80005f0 <outputCS>
  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 800098c:	466d      	mov	r5, sp
 800098e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ac:	200a      	movs	r0, #10
 80009ae:	f000 f8af 	bl	8000b10 <delay_us>
  outputCS(1);								// Set the  CS to high
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fe1c 	bl	80005f0 <outputCS>
  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 80009b8:	466d      	mov	r5, sp
 80009ba:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d8:	200a      	movs	r0, #10
 80009da:	f000 f899 	bl	8000b10 <delay_us>
  outputCS(0);								// Set the CS to low to send data
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff fe06 	bl	80005f0 <outputCS>
  HAL_SPI_Transmit(&spi_channel, (uint8_t*)&cmd, CMD_LEN, HAL_MAX_DELAY); // Sends the CMD trough SPI
 80009e4:	7cfb      	ldrb	r3, [r7, #19]
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f107 010c 	add.w	r1, r7, #12
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80009f4:	f001 fedd 	bl	80027b2 <HAL_SPI_Transmit>
  outputCS(1);								// Set the CS to high
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff fdf9 	bl	80005f0 <outputCS>
  free(cmd);								// Empties the CMD array
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 fa93 	bl	8005f2c <free>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a10:	b002      	add	sp, #8
 8000a12:	4770      	bx	lr

08000a14 <set_cfgr>:
/*
 * Function: set_cfgr
 * Purpose: This function returns the matrix set_cfgr with configuration of the GPIOS, the under and over voltage and the DCC info
 * Inputs: The number of ICs, the number of voltages in each cell, the DCC array
 */
	int **set_cfgr(int TOTAL_IC, int TOTAL_VOLTAGES, int *DCC){
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
		int **config_set;
		config_set = malloc(sizeof(int *) * TOTAL_IC);				// Declaration of the number of the config_set matrix
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f005 fa79 	bl	8005f1c <malloc>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < TOTAL_IC; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
 8000a32:	e00d      	b.n	8000a50 <set_cfgr+0x3c>
		{
			config_set[i] = malloc(sizeof(int) * TOTAL_VOLTAGES);	// Declaration of the size of each position in the config_set array
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	0099      	lsls	r1, r3, #2
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	18d4      	adds	r4, r2, r3
 8000a40:	4608      	mov	r0, r1
 8000a42:	f005 fa6b 	bl	8005f1c <malloc>
 8000a46:	4603      	mov	r3, r0
 8000a48:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < TOTAL_IC; i++)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbed      	blt.n	8000a34 <set_cfgr+0x20>
		}

		for(int i= 0; i < TOTAL_IC; i++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	e04c      	b.n	8000af8 <set_cfgr+0xe4>
		{	config_set[i][0] = (uint8_t)((GPIOx<<3)&0xF8)|((REFON<<2)&0x04)|((DTEN<<1)&0x02)|(ADCOPT&0x01);
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <set_cfgr+0xf8>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f043 0307 	orr.w	r3, r3, #7
 8000a6a:	b2d9      	uxtb	r1, r3
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	4413      	add	r3, r2
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	460a      	mov	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
	    /*				0b01011000 & 0b11111000 | 0b00000100 & 0b0100 | 0b00000010 & 0b0010 | 0b00000001 & 0b00000001
		    	  		   0b0101 1000		  |     0b0000 0100	    |	 0b0000 0010	      | 		  0b0000 0001
		    		CFGR0 -> 0b0101 1111*/
			config_set[i][1] = (uint8_t)(UNDERVOLTAGE_TH&(0x00FF));
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	4413      	add	r3, r2
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3304      	adds	r3, #4
 8000a86:	22ba      	movs	r2, #186	; 0xba
 8000a88:	601a      	str	r2, [r3, #0]
			config_set[i][2] = (uint8_t)(((OVERVOLTAGE_TH&(0x000F))<<4) | ((UNDERVOLTAGE_TH&(0x0F00))>>8));
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	4413      	add	r3, r2
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3308      	adds	r3, #8
 8000a96:	22a0      	movs	r2, #160	; 0xa0
 8000a98:	601a      	str	r2, [r3, #0]
			config_set[i][3] = (uint8_t)((OVERVOLTAGE_TH&(0x0FF0))>>4);
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	330c      	adds	r3, #12
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	601a      	str	r2, [r3, #0]
			config_set[i][4] = (uint8_t)(DCC[i]&0x00FF); //DCC[total_ic-i-1]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	b2d9      	uxtb	r1, r3
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4413      	add	r3, r2
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3310      	adds	r3, #16
 8000ac2:	460a      	mov	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]
		    				/*0b00001111 11111111 & 0b00000000 11111111
		    							0b00000000 11111111
		     							CFGR4 -> 0b11111111*/
			config_set[i][5] = (uint8_t)(((DCTO)<<4) | (((DCC[i]&0x0F00))>>8));
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	121b      	asrs	r3, r3, #8
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	b2d9      	uxtb	r1, r3
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	4413      	add	r3, r2
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3314      	adds	r3, #20
 8000aee:	460a      	mov	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < TOTAL_IC; i++)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbae      	blt.n	8000a5e <set_cfgr+0x4a>
		    /* 0b11000000 	 | (0b00001111 11111111 & 0b00001111 00000000)>>8
		       0b11000000 	 | (0b00001111 00000000)>>8
		       0b11000000 	 | 0b00000000 00001111
		     		CFGR5 =	0b11001111*/
		}
	return config_set;
 8000b00:	697b      	ldr	r3, [r7, #20]
	}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000200 	.word	0x20000200

08000b10 <delay_us>:
/* Function: delay_us
 * Purpose: Generate a delay in microseconds
 * Inputs: The amount of microseconds of the loop, the timer which has to be used
 */
void delay_us (uint16_t us, TIM_HandleTypeDef timer)
{
 8000b10:	b084      	sub	sp, #16
 8000b12:	b490      	push	{r4, r7}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4604      	mov	r4, r0
 8000b1a:	f107 0014 	add.w	r0, r7, #20
 8000b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000b22:	4623      	mov	r3, r4
 8000b24:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer,0);  					// Set the counter of the timer to 0
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);  		// Wait for the counter to reach the us input in the parameter
 8000b2c:	bf00      	nop
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d3fa      	bcc.n	8000b2e <delay_us+0x1e>
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc90      	pop	{r4, r7}
 8000b42:	b004      	add	sp, #16
 8000b44:	4770      	bx	lr
	...

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b5b0      	push	{r4, r5, r7, lr}
 8000b4a:	b0ac      	sub	sp, #176	; 0xb0
 8000b4c:	af2a      	add	r7, sp, #168	; 0xa8
  /* USER CODE BEGIN 1 */
	wakeup_sleep(hspi1, htim1, ICn, DELAY_SLEEP);
 8000b4e:	4b51      	ldr	r3, [pc, #324]	; (8000c94 <main+0x14c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	4c51      	ldr	r4, [pc, #324]	; (8000c98 <main+0x150>)
 8000b54:	9329      	str	r3, [sp, #164]	; 0xa4
 8000b56:	2301      	movs	r3, #1
 8000b58:	9328      	str	r3, [sp, #160]	; 0xa0
 8000b5a:	4a50      	ldr	r2, [pc, #320]	; (8000c9c <main+0x154>)
 8000b5c:	ab15      	add	r3, sp, #84	; 0x54
 8000b5e:	4611      	mov	r1, r2
 8000b60:	224c      	movs	r2, #76	; 0x4c
 8000b62:	4618      	mov	r0, r3
 8000b64:	f005 fada 	bl	800611c <memcpy>
 8000b68:	4668      	mov	r0, sp
 8000b6a:	f104 0310 	add.w	r3, r4, #16
 8000b6e:	2254      	movs	r2, #84	; 0x54
 8000b70:	4619      	mov	r1, r3
 8000b72:	f005 fad3 	bl	800611c <memcpy>
 8000b76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b7a:	f7ff fd72 	bl	8000662 <wakeup_sleep>
	PWM = set_pwm(ICn);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fde8 	bl	8000754 <set_pwm>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4a46      	ldr	r2, [pc, #280]	; (8000ca0 <main+0x158>)
 8000b88:	6013      	str	r3, [r2, #0]
	ltc6811_wrpwm(ICn, PWM, hspi1, htim1);
 8000b8a:	4b45      	ldr	r3, [pc, #276]	; (8000ca0 <main+0x158>)
 8000b8c:	681d      	ldr	r5, [r3, #0]
 8000b8e:	4c42      	ldr	r4, [pc, #264]	; (8000c98 <main+0x150>)
 8000b90:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <main+0x154>)
 8000b92:	ab17      	add	r3, sp, #92	; 0x5c
 8000b94:	4611      	mov	r1, r2
 8000b96:	224c      	movs	r2, #76	; 0x4c
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f005 fabf 	bl	800611c <memcpy>
 8000b9e:	4668      	mov	r0, sp
 8000ba0:	f104 0308 	add.w	r3, r4, #8
 8000ba4:	225c      	movs	r2, #92	; 0x5c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f005 fab8 	bl	800611c <memcpy>
 8000bac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff fe60 	bl	8000878 <ltc6811_wrpwm>
	int *DCC = Balancing(V_MIN, VCELL_MIN, cell_codes, V_BALANCING, DIFF_MAX, ICn);
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <main+0x15c>)
 8000bba:	8818      	ldrh	r0, [r3, #0]
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <main+0x160>)
 8000bbe:	8819      	ldrh	r1, [r3, #0]
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <main+0x164>)
 8000bc2:	881a      	ldrh	r2, [r3, #0]
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <main+0x168>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2401      	movs	r4, #1
 8000bca:	9401      	str	r4, [sp, #4]
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <main+0x16c>)
 8000bd2:	f7ff fcb3 	bl	800053c <Balancing>
 8000bd6:	6078      	str	r0, [r7, #4]
	config = set_cfgr(ICn, BYTES_IN_REG, DCC);
 8000bd8:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <main+0x170>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4619      	mov	r1, r3
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff ff17 	bl	8000a14 <set_cfgr>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a34      	ldr	r2, [pc, #208]	; (8000cbc <main+0x174>)
 8000bea:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 fcd1 	bl	8001592 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f896 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f000 f9f8 	bl	8000fe8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000bf8:	f000 f8fc 	bl	8000df4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000bfc:	f000 f92e 	bl	8000e5c <MX_CAN2_Init>
  MX_SPI1_Init();
 8000c00:	f000 f960 	bl	8000ec4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c04:	f000 f99c 	bl	8000f40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c08:	f002 fbbc 	bl	8003384 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Lectures_Task */
  Lectures_TaskHandle = osThreadNew(Lectures, NULL, &Lectures_Task_attributes);
 8000c0c:	4a2c      	ldr	r2, [pc, #176]	; (8000cc0 <main+0x178>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	482c      	ldr	r0, [pc, #176]	; (8000cc4 <main+0x17c>)
 8000c12:	f002 fc21 	bl	8003458 <osThreadNew>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <main+0x180>)
 8000c1a:	6013      	str	r3, [r2, #0]

  /* creation of SOC_Task */
  SOC_TaskHandle = osThreadNew(SOC, NULL, &SOC_Task_attributes);
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <main+0x184>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	482b      	ldr	r0, [pc, #172]	; (8000cd0 <main+0x188>)
 8000c22:	f002 fc19 	bl	8003458 <osThreadNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <main+0x18c>)
 8000c2a:	6013      	str	r3, [r2, #0]

  /* creation of CalcVolt_Task */
  CalcVolt_TaskHandle = osThreadNew(CalcVolt, NULL, &CalcVolt_Task_attributes);
 8000c2c:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <main+0x190>)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	482a      	ldr	r0, [pc, #168]	; (8000cdc <main+0x194>)
 8000c32:	f002 fc11 	bl	8003458 <osThreadNew>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a29      	ldr	r2, [pc, #164]	; (8000ce0 <main+0x198>)
 8000c3a:	6013      	str	r3, [r2, #0]

  /* creation of CalcTemp_Task */
  CalcTemp_TaskHandle = osThreadNew(CalcTemp, NULL, &CalcTemp_Task_attributes);
 8000c3c:	4a29      	ldr	r2, [pc, #164]	; (8000ce4 <main+0x19c>)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <main+0x1a0>)
 8000c42:	f002 fc09 	bl	8003458 <osThreadNew>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a28      	ldr	r2, [pc, #160]	; (8000cec <main+0x1a4>)
 8000c4a:	6013      	str	r3, [r2, #0]

  /* creation of ErrorVolt_Task */
  ErrorVolt_TaskHandle = osThreadNew(ErrorVolt, NULL, &ErrorVolt_Task_attributes);
 8000c4c:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <main+0x1a8>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4828      	ldr	r0, [pc, #160]	; (8000cf4 <main+0x1ac>)
 8000c52:	f002 fc01 	bl	8003458 <osThreadNew>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <main+0x1b0>)
 8000c5a:	6013      	str	r3, [r2, #0]

  /* creation of ErrorTemp_Task */
  ErrorTemp_TaskHandle = osThreadNew(ErrorTemp, NULL, &ErrorTemp_Task_attributes);
 8000c5c:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <main+0x1b4>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4827      	ldr	r0, [pc, #156]	; (8000d00 <main+0x1b8>)
 8000c62:	f002 fbf9 	bl	8003458 <osThreadNew>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a26      	ldr	r2, [pc, #152]	; (8000d04 <main+0x1bc>)
 8000c6a:	6013      	str	r3, [r2, #0]

  /* creation of ErrorCurrent_Ta */
  ErrorCurrent_TaHandle = osThreadNew(ErrorCurrent, NULL, &ErrorCurrent_Ta_attributes);
 8000c6c:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <main+0x1c0>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4826      	ldr	r0, [pc, #152]	; (8000d0c <main+0x1c4>)
 8000c72:	f002 fbf1 	bl	8003458 <osThreadNew>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <main+0x1c8>)
 8000c7a:	6013      	str	r3, [r2, #0]

  /* creation of ErrorSlaves_Tas */
  ErrorSlaves_TasHandle = osThreadNew(ErrorSlaves, NULL, &ErrorSlaves_Tas_attributes);
 8000c7c:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <main+0x1cc>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4825      	ldr	r0, [pc, #148]	; (8000d18 <main+0x1d0>)
 8000c82:	f002 fbe9 	bl	8003458 <osThreadNew>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <main+0x1d4>)
 8000c8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c8c:	f002 fbae 	bl	80033ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <main+0x148>
 8000c92:	bf00      	nop
 8000c94:	20000202 	.word	0x20000202
 8000c98:	200002d8 	.word	0x200002d8
 8000c9c:	2000033c 	.word	0x2000033c
 8000ca0:	200003ac 	.word	0x200003ac
 8000ca4:	20000206 	.word	0x20000206
 8000ca8:	20000204 	.word	0x20000204
 8000cac:	20000208 	.word	0x20000208
 8000cb0:	2000020a 	.word	0x2000020a
 8000cb4:	200003b0 	.word	0x200003b0
 8000cb8:	20000201 	.word	0x20000201
 8000cbc:	200003a8 	.word	0x200003a8
 8000cc0:	0800627c 	.word	0x0800627c
 8000cc4:	08001199 	.word	0x08001199
 8000cc8:	20000388 	.word	0x20000388
 8000ccc:	080062a0 	.word	0x080062a0
 8000cd0:	080011a9 	.word	0x080011a9
 8000cd4:	2000038c 	.word	0x2000038c
 8000cd8:	080062c4 	.word	0x080062c4
 8000cdc:	080011b9 	.word	0x080011b9
 8000ce0:	20000390 	.word	0x20000390
 8000ce4:	080062e8 	.word	0x080062e8
 8000ce8:	080011c9 	.word	0x080011c9
 8000cec:	20000394 	.word	0x20000394
 8000cf0:	0800630c 	.word	0x0800630c
 8000cf4:	080011d9 	.word	0x080011d9
 8000cf8:	20000398 	.word	0x20000398
 8000cfc:	08006330 	.word	0x08006330
 8000d00:	080011e9 	.word	0x080011e9
 8000d04:	2000039c 	.word	0x2000039c
 8000d08:	08006354 	.word	0x08006354
 8000d0c:	080011f9 	.word	0x080011f9
 8000d10:	200003a0 	.word	0x200003a0
 8000d14:	08006378 	.word	0x08006378
 8000d18:	08001209 	.word	0x08001209
 8000d1c:	200003a4 	.word	0x200003a4

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	2234      	movs	r2, #52	; 0x34
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 f9b0 	bl	8006094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <SystemClock_Config+0xcc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a28      	ldr	r2, [pc, #160]	; (8000dec <SystemClock_Config+0xcc>)
 8000d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <SystemClock_Config+0xcc>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d64:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000d90:	23a0      	movs	r3, #160	; 0xa0
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fff9 	bl	8001d9c <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db0:	f000 fa32 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db4:	230f      	movs	r3, #15
 8000db6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db8:	2302      	movs	r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fa90 	bl	80022f8 <HAL_RCC_ClockConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dde:	f000 fa1b 	bl	8001218 <Error_Handler>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3750      	adds	r7, #80	; 0x50
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <MX_CAN1_Init+0x64>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e00:	2210      	movs	r2, #16
 8000e02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_CAN1_Init+0x60>)
 8000e42:	f000 fc03 	bl	800164c <HAL_CAN_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000e4c:	f000 f9e4 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000288 	.word	0x20000288
 8000e58:	40006400 	.word	0x40006400

08000e5c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <MX_CAN2_Init+0x64>)
 8000e64:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e68:	2210      	movs	r2, #16
 8000e6a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_CAN2_Init+0x60>)
 8000eaa:	f000 fbcf 	bl	800164c <HAL_CAN_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000eb4:	f000 f9b0 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200002b0 	.word	0x200002b0
 8000ec0:	40006800 	.word	0x40006800

08000ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <MX_SPI1_Init+0x78>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ede:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ee2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f12:	2207      	movs	r2, #7
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f1e:	2208      	movs	r2, #8
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f24:	f001 fb9a 	bl	800265c <HAL_SPI_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 f973 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200002d8 	.word	0x200002d8
 8000f3c:	40013000 	.word	0x40013000

08000f40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f60:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <MX_TIM1_Init+0xa4>)
 8000f62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f66:	22a0      	movs	r2, #160	; 0xa0
 8000f68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f8c:	f001 ff08 	bl	8002da0 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f96:	f000 f93f 	bl	8001218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000fa8:	f001 ff52 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fb2:	f000 f931 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000fc8:	f002 f946 	bl	8003258 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fd2:	f000 f921 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000033c 	.word	0x2000033c
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffe:	4b61      	ldr	r3, [pc, #388]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a60      	ldr	r2, [pc, #384]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b5e      	ldr	r3, [pc, #376]	; (8001184 <MX_GPIO_Init+0x19c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a5a      	ldr	r2, [pc, #360]	; (8001184 <MX_GPIO_Init+0x19c>)
 800101c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b55      	ldr	r3, [pc, #340]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a54      	ldr	r2, [pc, #336]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <MX_GPIO_Init+0x19c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a4e      	ldr	r2, [pc, #312]	; (8001184 <MX_GPIO_Init+0x19c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b49      	ldr	r3, [pc, #292]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a48      	ldr	r2, [pc, #288]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <MX_GPIO_Init+0x19c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	4b43      	ldr	r3, [pc, #268]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a42      	ldr	r2, [pc, #264]	; (8001184 <MX_GPIO_Init+0x19c>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b40      	ldr	r3, [pc, #256]	; (8001184 <MX_GPIO_Init+0x19c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PE2_GPIO_Port, LED_PE2_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2104      	movs	r1, #4
 8001092:	483d      	ldr	r0, [pc, #244]	; (8001188 <MX_GPIO_Init+0x1a0>)
 8001094:	f000 fe68 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPlus_Control_GPIO_Port, AIRPlus_Control_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	483b      	ldr	r0, [pc, #236]	; (800118c <MX_GPIO_Init+0x1a4>)
 800109e:	f000 fe63 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIRMinus_Control_Pin|Precharge_Control_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2109      	movs	r1, #9
 80010a6:	483a      	ldr	r0, [pc, #232]	; (8001190 <MX_GPIO_Init+0x1a8>)
 80010a8:	f000 fe5e 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC6820_CS_GPIO_Port, LTC6820_CS_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	4838      	ldr	r0, [pc, #224]	; (8001194 <MX_GPIO_Init+0x1ac>)
 80010b2:	f000 fe59 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PE2_Pin */
  GPIO_InitStruct.Pin = LED_PE2_Pin;
 80010b6:	2304      	movs	r3, #4
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_PE2_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <MX_GPIO_Init+0x1a0>)
 80010ce:	f000 fc9f 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : AIRPlus_Control_Pin */
  GPIO_InitStruct.Pin = AIRPlus_Control_Pin;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AIRPlus_Control_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	4828      	ldr	r0, [pc, #160]	; (800118c <MX_GPIO_Init+0x1a4>)
 80010ea:	f000 fc91 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIRMinus_Control_Pin Precharge_Control_Pin */
  GPIO_InitStruct.Pin = AIRMinus_Control_Pin|Precharge_Control_Pin;
 80010ee:	2309      	movs	r3, #9
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	4822      	ldr	r0, [pc, #136]	; (8001190 <MX_GPIO_Init+0x1a8>)
 8001106:	f000 fc83 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDC_End_Monitoring_Pin IMD_Monitoring_Pin */
  GPIO_InitStruct.Pin = SDC_End_Monitoring_Pin|IMD_Monitoring_Pin;
 800110a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	481c      	ldr	r0, [pc, #112]	; (8001190 <MX_GPIO_Init+0x1a8>)
 8001120:	f000 fc76 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4815      	ldr	r0, [pc, #84]	; (8001190 <MX_GPIO_Init+0x1a8>)
 800113a:	f000 fc69 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800113e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001150:	230a      	movs	r3, #10
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_GPIO_Init+0x1a8>)
 800115c:	f000 fc58 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTC6820_CS_Pin */
  GPIO_InitStruct.Pin = LTC6820_CS_Pin;
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTC6820_CS_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <MX_GPIO_Init+0x1ac>)
 8001178:	f000 fc4a 	bl	8001a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117c:	bf00      	nop
 800117e:	3730      	adds	r7, #48	; 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	40021000 	.word	0x40021000
 800118c:	40020800 	.word	0x40020800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400

08001198 <Lectures>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Lectures */
void Lectures(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f002 f9ff 	bl	80035a4 <osDelay>
 80011a6:	e7fb      	b.n	80011a0 <Lectures+0x8>

080011a8 <SOC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SOC */
void SOC(void *argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SOC */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f002 f9f7 	bl	80035a4 <osDelay>
 80011b6:	e7fb      	b.n	80011b0 <SOC+0x8>

080011b8 <CalcVolt>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CalcVolt */
void CalcVolt(void *argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CalcVolt */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f002 f9ef 	bl	80035a4 <osDelay>
 80011c6:	e7fb      	b.n	80011c0 <CalcVolt+0x8>

080011c8 <CalcTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CalcTemp */
void CalcTemp(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CalcTemp */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f002 f9e7 	bl	80035a4 <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <CalcTemp+0x8>

080011d8 <ErrorVolt>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ErrorVolt */
void ErrorVolt(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ErrorVolt */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f002 f9df 	bl	80035a4 <osDelay>
 80011e6:	e7fb      	b.n	80011e0 <ErrorVolt+0x8>

080011e8 <ErrorTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ErrorTemp */
void ErrorTemp(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ErrorTemp */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f002 f9d7 	bl	80035a4 <osDelay>
 80011f6:	e7fb      	b.n	80011f0 <ErrorTemp+0x8>

080011f8 <ErrorCurrent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ErrorCurrent */
void ErrorCurrent(void *argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ErrorCurrent */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f002 f9cf 	bl	80035a4 <osDelay>
 8001206:	e7fb      	b.n	8001200 <ErrorCurrent+0x8>

08001208 <ErrorSlaves>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ErrorSlaves */
void ErrorSlaves(void *argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ErrorSlaves */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f002 f9c7 	bl	80035a4 <osDelay>
 8001216:	e7fb      	b.n	8001210 <ErrorSlaves+0x8>

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	e7fe      	b.n	8001220 <Error_Handler+0x8>
	...

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_MspInit+0x4c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	210f      	movs	r1, #15
 800125e:	f06f 0001 	mvn.w	r0, #1
 8001262:	f000 fbac 	bl	80019be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <HAL_CAN_MspInit+0x114>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d131      	bne.n	80012fa <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <HAL_CAN_MspInit+0x118>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a3b      	ldr	r2, [pc, #236]	; (800138c <HAL_CAN_MspInit+0x118>)
 800129e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012a0:	4b3a      	ldr	r3, [pc, #232]	; (800138c <HAL_CAN_MspInit+0x118>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10b      	bne.n	80012c0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012a8:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a38      	ldr	r2, [pc, #224]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 80012ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d8:	2303      	movs	r3, #3
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012e8:	2309      	movs	r3, #9
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4828      	ldr	r0, [pc, #160]	; (8001394 <HAL_CAN_MspInit+0x120>)
 80012f4:	f000 fb8c 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80012f8:	e042      	b.n	8001380 <HAL_CAN_MspInit+0x10c>
  else if(hcan->Instance==CAN2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_CAN_MspInit+0x124>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d13d      	bne.n	8001380 <HAL_CAN_MspInit+0x10c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 800130a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_CAN_MspInit+0x118>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a1a      	ldr	r2, [pc, #104]	; (800138c <HAL_CAN_MspInit+0x118>)
 8001324:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_CAN_MspInit+0x118>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d10b      	bne.n	8001346 <HAL_CAN_MspInit+0xd2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 8001334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_CAN_MspInit+0x11c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800135e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001370:	2309      	movs	r3, #9
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <HAL_CAN_MspInit+0x128>)
 800137c:	f000 fb48 	bl	8001a10 <HAL_GPIO_Init>
}
 8001380:	bf00      	nop
 8001382:	3730      	adds	r7, #48	; 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40006400 	.word	0x40006400
 800138c:	200003c8 	.word	0x200003c8
 8001390:	40023800 	.word	0x40023800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40006800 	.word	0x40006800
 800139c:	40020400 	.word	0x40020400

080013a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_SPI_MspInit+0x7c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d127      	bne.n	8001412 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <HAL_SPI_MspInit+0x80>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a16      	ldr	r2, [pc, #88]	; (8001420 <HAL_SPI_MspInit+0x80>)
 80013c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_SPI_MspInit+0x80>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_SPI_MspInit+0x80>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_SPI_MspInit+0x80>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_SPI_MspInit+0x80>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013f2:	2338      	movs	r3, #56	; 0x38
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001402:	2305      	movs	r3, #5
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <HAL_SPI_MspInit+0x84>)
 800140e:	f000 faff 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40013000 	.word	0x40013000
 8001420:	40023800 	.word	0x40023800
 8001424:	40020400 	.word	0x40020400

08001428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_TIM_Base_MspInit+0x38>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10b      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_TIM_Base_MspInit+0x3c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_TIM_Base_MspInit+0x3c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_TIM_Base_MspInit+0x3c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40010000 	.word	0x40010000
 8001464:	40023800 	.word	0x40023800

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001498:	f000 f8b8 	bl	800160c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800149c:	f003 fce0 	bl	8004e60 <xTaskGetSchedulerState>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014a6:	f004 fabf 	bl	8005a28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f004 fdf0 	bl	80060c4 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20080000 	.word	0x20080000
 8001510:	00000400 	.word	0x00000400
 8001514:	200003cc 	.word	0x200003cc
 8001518:	20004e68 	.word	0x20004e68

0800151c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopFillZerobss+0x26>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800156a:	f7ff ffd7 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f004 fdaf 	bl	80060d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff fae9 	bl	8000b48 <main>
  bx  lr    
 8001576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8001584:	080063bc 	.word	0x080063bc
  ldr r2, =_sbss
 8001588:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 800158c:	20004e64 	.word	0x20004e64

08001590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>

08001592 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f000 fa06 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159c:	200f      	movs	r0, #15
 800159e:	f000 f805 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a2:	f7ff fe3f 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fa13 	bl	80019f6 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f9e9 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000020c 	.word	0x2000020c
 8001604:	20000214 	.word	0x20000214
 8001608:	20000210 	.word	0x20000210

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000214 	.word	0x20000214
 8001630:	200003d0 	.word	0x200003d0

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200003d0 	.word	0x200003d0

0800164c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0ed      	b.n	800183a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fe02 	bl	8001274 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff ffd8 	bl	8001634 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001686:	e012      	b.n	80016ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001688:	f7ff ffd4 	bl	8001634 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0c5      	b.n	800183a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0e5      	beq.n	8001688 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0202 	bic.w	r2, r2, #2
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016cc:	f7ff ffb2 	bl	8001634 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016d2:	e012      	b.n	80016fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d4:	f7ff ffae 	bl	8001634 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b0a      	cmp	r3, #10
 80016e0:	d90b      	bls.n	80016fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2205      	movs	r2, #5
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e09f      	b.n	800183a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e5      	bne.n	80016d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e007      	b.n	8001732 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7e5b      	ldrb	r3, [r3, #25]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e007      	b.n	800175c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800175a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7e9b      	ldrb	r3, [r3, #26]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d108      	bne.n	8001776 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0220 	orr.w	r2, r2, #32
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e007      	b.n	8001786 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0220 	bic.w	r2, r2, #32
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7edb      	ldrb	r3, [r3, #27]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0210 	bic.w	r2, r2, #16
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e007      	b.n	80017b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0210 	orr.w	r2, r2, #16
 80017ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7f1b      	ldrb	r3, [r3, #28]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d108      	bne.n	80017ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0208 	orr.w	r2, r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e007      	b.n	80017da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0208 	bic.w	r2, r2, #8
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7f5b      	ldrb	r3, [r3, #29]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d108      	bne.n	80017f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0204 	orr.w	r2, r2, #4
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e007      	b.n	8001804 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	ea42 0103 	orr.w	r1, r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	4313      	orrs	r3, r2
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	05fa0000 	.word	0x05fa0000

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff47 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff5c 	bl	800188c <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffb0 	bl	8001964 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e175      	b.n	8001d1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 8164 	bne.w	8001d16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d005      	beq.n	8001a66 <HAL_GPIO_Init+0x56>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d130      	bne.n	8001ac8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 0201 	and.w	r2, r3, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d017      	beq.n	8001b04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80be 	beq.w	8001d16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <HAL_GPIO_Init+0x324>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a65      	ldr	r2, [pc, #404]	; (8001d34 <HAL_GPIO_Init+0x324>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <HAL_GPIO_Init+0x324>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bb2:	4a61      	ldr	r2, [pc, #388]	; (8001d38 <HAL_GPIO_Init+0x328>)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_GPIO_Init+0x32c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d037      	beq.n	8001c4e <HAL_GPIO_Init+0x23e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a57      	ldr	r2, [pc, #348]	; (8001d40 <HAL_GPIO_Init+0x330>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d031      	beq.n	8001c4a <HAL_GPIO_Init+0x23a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a56      	ldr	r2, [pc, #344]	; (8001d44 <HAL_GPIO_Init+0x334>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d02b      	beq.n	8001c46 <HAL_GPIO_Init+0x236>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a55      	ldr	r2, [pc, #340]	; (8001d48 <HAL_GPIO_Init+0x338>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d025      	beq.n	8001c42 <HAL_GPIO_Init+0x232>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a54      	ldr	r2, [pc, #336]	; (8001d4c <HAL_GPIO_Init+0x33c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d01f      	beq.n	8001c3e <HAL_GPIO_Init+0x22e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a53      	ldr	r2, [pc, #332]	; (8001d50 <HAL_GPIO_Init+0x340>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x22a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_GPIO_Init+0x344>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x226>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x348>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x222>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a50      	ldr	r2, [pc, #320]	; (8001d5c <HAL_GPIO_Init+0x34c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x21e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4f      	ldr	r2, [pc, #316]	; (8001d60 <HAL_GPIO_Init+0x350>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x21a>
 8001c26:	2309      	movs	r3, #9
 8001c28:	e012      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c2a:	230a      	movs	r3, #10
 8001c2c:	e010      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c2e:	2308      	movs	r3, #8
 8001c30:	e00e      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c32:	2307      	movs	r3, #7
 8001c34:	e00c      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c36:	2306      	movs	r3, #6
 8001c38:	e00a      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	e008      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x240>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f002 0203 	and.w	r2, r2, #3
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c60:	4935      	ldr	r1, [pc, #212]	; (8001d38 <HAL_GPIO_Init+0x328>)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_GPIO_Init+0x354>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c92:	4a34      	ldr	r2, [pc, #208]	; (8001d64 <HAL_GPIO_Init+0x354>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_GPIO_Init+0x354>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cbc:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <HAL_GPIO_Init+0x354>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc2:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <HAL_GPIO_Init+0x354>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce6:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_GPIO_Init+0x354>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_GPIO_Init+0x354>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <HAL_GPIO_Init+0x354>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	f67f ae86 	bls.w	8001a30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40021400 	.word	0x40021400
 8001d54:	40021800 	.word	0x40021800
 8001d58:	40021c00 	.word	0x40021c00
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40022400 	.word	0x40022400
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e29b      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8087 	beq.w	8001ece <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc0:	4b96      	ldr	r3, [pc, #600]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d00c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dcc:	4b93      	ldr	r3, [pc, #588]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d112      	bne.n	8001dfe <HAL_RCC_OscConfig+0x62>
 8001dd8:	4b90      	ldr	r3, [pc, #576]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de4:	d10b      	bne.n	8001dfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	4b8d      	ldr	r3, [pc, #564]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d06c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x130>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d168      	bne.n	8001ecc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e275      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7a>
 8001e08:	4b84      	ldr	r3, [pc, #528]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a83      	ldr	r2, [pc, #524]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e02e      	b.n	8001e74 <HAL_RCC_OscConfig+0xd8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x9c>
 8001e1e:	4b7f      	ldr	r3, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a7e      	ldr	r2, [pc, #504]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b7c      	ldr	r3, [pc, #496]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7b      	ldr	r2, [pc, #492]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xd8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0xc0>
 8001e42:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a75      	ldr	r2, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b73      	ldr	r3, [pc, #460]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a72      	ldr	r2, [pc, #456]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xd8>
 8001e5c:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b6c      	ldr	r3, [pc, #432]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6b      	ldr	r2, [pc, #428]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fbda 	bl	8001634 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fbd6 	bl	8001634 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e229      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b61      	ldr	r3, [pc, #388]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xe8>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fbc6 	bl	8001634 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff fbc2 	bl	8001634 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e215      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	4b57      	ldr	r3, [pc, #348]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x110>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d069      	beq.n	8001fae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eda:	4b50      	ldr	r3, [pc, #320]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x190>
 8001ef2:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x17a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1e9      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	493d      	ldr	r1, [pc, #244]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e040      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d023      	beq.n	8001f7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a38      	ldr	r2, [pc, #224]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff fb78 	bl	8001634 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff fb74 	bl	8001634 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1c7      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4929      	ldr	r1, [pc, #164]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff fb54 	bl	8001634 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f90:	f7ff fb50 	bl	8001634 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1a3      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d038      	beq.n	800202c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc6:	4a15      	ldr	r2, [pc, #84]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7ff fb31 	bl	8001634 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fb2d 	bl	8001634 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e180      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x23a>
 8001ff4:	e01a      	b.n	800202c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7ff fb17 	bl	8001634 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200a:	f7ff fb13 	bl	8001634 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d903      	bls.n	8002020 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e166      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
 800201c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002020:	4b92      	ldr	r3, [pc, #584]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1ee      	bne.n	800200a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a4 	beq.w	8002182 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b8c      	ldr	r3, [pc, #560]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b89      	ldr	r3, [pc, #548]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a88      	ldr	r2, [pc, #544]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b86      	ldr	r3, [pc, #536]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002062:	4b83      	ldr	r3, [pc, #524]	; (8002270 <HAL_RCC_OscConfig+0x4d4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800206e:	4b80      	ldr	r3, [pc, #512]	; (8002270 <HAL_RCC_OscConfig+0x4d4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7f      	ldr	r2, [pc, #508]	; (8002270 <HAL_RCC_OscConfig+0x4d4>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff fadb 	bl	8001634 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff fad7 	bl	8001634 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e12a      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002094:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x4d4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x31a>
 80020a8:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a6f      	ldr	r2, [pc, #444]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e02d      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x33c>
 80020be:	4b6b      	ldr	r3, [pc, #428]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a6a      	ldr	r2, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a67      	ldr	r2, [pc, #412]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	e01c      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d10c      	bne.n	80020fa <HAL_RCC_OscConfig+0x35e>
 80020e0:	4b62      	ldr	r3, [pc, #392]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a61      	ldr	r2, [pc, #388]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	4a5e      	ldr	r2, [pc, #376]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	; 0x70
 80020f8:	e00b      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a5b      	ldr	r2, [pc, #364]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
 8002106:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d015      	beq.n	8002146 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7ff fa8b 	bl	8001634 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff fa87 	bl	8001634 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0d8      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	4b4c      	ldr	r3, [pc, #304]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ee      	beq.n	8002122 <HAL_RCC_OscConfig+0x386>
 8002144:	e014      	b.n	8002170 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7ff fa75 	bl	8001634 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff fa71 	bl	8001634 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0c2      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800217c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80ae 	beq.w	80022e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218c:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d06d      	beq.n	8002274 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d14b      	bne.n	8002238 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a0:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a31      	ldr	r2, [pc, #196]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fa42 	bl	8001634 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff fa3e 	bl	8001634 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e091      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	041b      	lsls	r3, r3, #16
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	071b      	lsls	r3, r3, #28
 80021fe:	491b      	ldr	r1, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff fa10 	bl	8001634 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7ff fa0c 	bl	8001634 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e05f      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x47c>
 8002236:	e057      	b.n	80022e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800223e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff f9f6 	bl	8001634 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff f9f2 	bl	8001634 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e045      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x4b0>
 800226a:	e03d      	b.n	80022e8 <HAL_RCC_OscConfig+0x54c>
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_RCC_OscConfig+0x558>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d030      	beq.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d129      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d122      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d119      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d10f      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 020f 	bic.w	r2, r3, #15
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002362:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800237a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7ff f922 	bl	8001634 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7ff f91e 	bl	8001634 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 020f 	bic.w	r2, r3, #15
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1cc>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1d0>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1d4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f87e 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00
 80024c0:	40023800 	.word	0x40023800
 80024c4:	0800639c 	.word	0x0800639c
 80024c8:	2000020c 	.word	0x2000020c
 80024cc:	20000210 	.word	0x20000210

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b090      	sub	sp, #64	; 0x40
 80024d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
 80024dc:	2300      	movs	r3, #0
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e0:	2300      	movs	r3, #0
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d00d      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x40>
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	f200 80a1 	bhi.w	800263c <HAL_RCC_GetSysClockFreq+0x16c>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x34>
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x3a>
 8002502:	e09b      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_GetSysClockFreq+0x184>)
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002508:	e09b      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_GetSysClockFreq+0x188>)
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800250e:	e098      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002510:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800251a:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d028      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002526:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	2200      	movs	r2, #0
 800252e:	623b      	str	r3, [r7, #32]
 8002530:	627a      	str	r2, [r7, #36]	; 0x24
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002538:	2100      	movs	r1, #0
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_GetSysClockFreq+0x188>)
 800253c:	fb03 f201 	mul.w	r2, r3, r1
 8002540:	2300      	movs	r3, #0
 8002542:	fb00 f303 	mul.w	r3, r0, r3
 8002546:	4413      	add	r3, r2
 8002548:	4a43      	ldr	r2, [pc, #268]	; (8002658 <HAL_RCC_GetSysClockFreq+0x188>)
 800254a:	fba0 1202 	umull	r1, r2, r0, r2
 800254e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002550:	460a      	mov	r2, r1
 8002552:	62ba      	str	r2, [r7, #40]	; 0x28
 8002554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002556:	4413      	add	r3, r2
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	2200      	movs	r2, #0
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	61fa      	str	r2, [r7, #28]
 8002562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002566:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800256a:	f7fd fe69 	bl	8000240 <__aeabi_uldivmod>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4613      	mov	r3, r2
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002576:	e053      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	2200      	movs	r2, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	617a      	str	r2, [r7, #20]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800258a:	f04f 0b00 	mov.w	fp, #0
 800258e:	4652      	mov	r2, sl
 8002590:	465b      	mov	r3, fp
 8002592:	f04f 0000 	mov.w	r0, #0
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	0159      	lsls	r1, r3, #5
 800259c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a0:	0150      	lsls	r0, r2, #5
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	ebb2 080a 	subs.w	r8, r2, sl
 80025aa:	eb63 090b 	sbc.w	r9, r3, fp
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025c2:	ebb2 0408 	subs.w	r4, r2, r8
 80025c6:	eb63 0509 	sbc.w	r5, r3, r9
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	00eb      	lsls	r3, r5, #3
 80025d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d8:	00e2      	lsls	r2, r4, #3
 80025da:	4614      	mov	r4, r2
 80025dc:	461d      	mov	r5, r3
 80025de:	eb14 030a 	adds.w	r3, r4, sl
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	eb45 030b 	adc.w	r3, r5, fp
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025f6:	4629      	mov	r1, r5
 80025f8:	028b      	lsls	r3, r1, #10
 80025fa:	4621      	mov	r1, r4
 80025fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002600:	4621      	mov	r1, r4
 8002602:	028a      	lsls	r2, r1, #10
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260a:	2200      	movs	r2, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	60fa      	str	r2, [r7, #12]
 8002610:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002614:	f7fd fe14 	bl	8000240 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_GetSysClockFreq+0x180>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetSysClockFreq+0x184>)
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002644:	4618      	mov	r0, r3
 8002646:	3740      	adds	r7, #64	; 0x40
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	00f42400 	.word	0x00f42400
 8002658:	017d7840 	.word	0x017d7840

0800265c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e09d      	b.n	80027aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800267e:	d009      	beq.n	8002694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
 8002686:	e005      	b.n	8002694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fe76 	bl	80013a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026d4:	d902      	bls.n	80026dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e002      	b.n	80026e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80026ea:	d007      	beq.n	80026fc <HAL_SPI_Init+0xa0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026f4:	d002      	beq.n	80026fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273e:	ea42 0103 	orr.w	r1, r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	f003 0204 	and.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002778:	ea42 0103 	orr.w	r1, r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002798:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b088      	sub	sp, #32
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_SPI_Transmit+0x22>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e158      	b.n	8002a86 <HAL_SPI_Transmit+0x2d4>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027dc:	f7fe ff2a 	bl	8001634 <HAL_GetTick>
 80027e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d002      	beq.n	80027f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
 80027f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f6:	e13d      	b.n	8002a74 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_SPI_Transmit+0x52>
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002808:	e134      	b.n	8002a74 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2203      	movs	r2, #3
 800280e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002854:	d10f      	bne.n	8002876 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002864:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002874:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d007      	beq.n	8002894 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800289c:	d94b      	bls.n	8002936 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_SPI_Transmit+0xfa>
 80028a6:	8afb      	ldrh	r3, [r7, #22]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d13e      	bne.n	800292a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028d0:	e02b      	b.n	800292a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d112      	bne.n	8002906 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	1c9a      	adds	r2, r3, #2
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002904:	e011      	b.n	800292a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002906:	f7fe fe95 	bl	8001634 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d803      	bhi.n	800291e <HAL_SPI_Transmit+0x16c>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d102      	bne.n	8002924 <HAL_SPI_Transmit+0x172>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002928:	e0a4      	b.n	8002a74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ce      	bne.n	80028d2 <HAL_SPI_Transmit+0x120>
 8002934:	e07c      	b.n	8002a30 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_SPI_Transmit+0x192>
 800293e:	8afb      	ldrh	r3, [r7, #22]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d170      	bne.n	8002a26 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d912      	bls.n	8002974 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	1c9a      	adds	r2, r3, #2
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b02      	subs	r3, #2
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002972:	e058      	b.n	8002a26 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800299a:	e044      	b.n	8002a26 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d12b      	bne.n	8002a02 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d912      	bls.n	80029da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	1c9a      	adds	r2, r3, #2
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b02      	subs	r3, #2
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029d8:	e025      	b.n	8002a26 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	330c      	adds	r3, #12
 80029e4:	7812      	ldrb	r2, [r2, #0]
 80029e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a00:	e011      	b.n	8002a26 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a02:	f7fe fe17 	bl	8001634 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d803      	bhi.n	8002a1a <HAL_SPI_Transmit+0x268>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d102      	bne.n	8002a20 <HAL_SPI_Transmit+0x26e>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a24:	e026      	b.n	8002a74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1b5      	bne.n	800299c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f949 	bl	8002ccc <SPI_EndRxTxTransaction>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	e000      	b.n	8002a74 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002a72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002aa0:	f7fe fdc8 	bl	8001634 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ab0:	f7fe fdc0 	bl	8001634 <HAL_GetTick>
 8002ab4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	015b      	lsls	r3, r3, #5
 8002abc:	0d1b      	lsrs	r3, r3, #20
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac6:	e054      	b.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d050      	beq.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ad0:	f7fe fdb0 	bl	8001634 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d902      	bls.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d13d      	bne.n	8002b62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afe:	d111      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b08:	d004      	beq.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d107      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d10f      	bne.n	8002b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e017      	b.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d19b      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2000020c 	.word	0x2000020c

08002ba0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bb2:	f7fe fd3f 	bl	8001634 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002bc2:	f7fe fd37 	bl	8001634 <HAL_GetTick>
 8002bc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002bd0:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00da      	lsls	r2, r3, #3
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	0d1b      	lsrs	r3, r3, #20
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002be8:	e060      	b.n	8002cac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bf0:	d107      	bne.n	8002c02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d050      	beq.n	8002cac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c0a:	f7fe fd13 	bl	8001634 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d902      	bls.n	8002c20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d13d      	bne.n	8002c9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c38:	d111      	bne.n	8002c5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c42:	d004      	beq.n	8002c4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d107      	bne.n	8002c5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c66:	d10f      	bne.n	8002c88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e010      	b.n	8002cbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d196      	bne.n	8002bea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3728      	adds	r7, #40	; 0x28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000020c 	.word	0x2000020c

08002ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff ff5b 	bl	8002ba0 <SPI_WaitFifoStateUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e046      	b.n	8002d8e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d00:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <SPI_EndRxTxTransaction+0xcc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <SPI_EndRxTxTransaction+0xd0>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0d5b      	lsrs	r3, r3, #21
 8002d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1e:	d112      	bne.n	8002d46 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2200      	movs	r2, #0
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff feb0 	bl	8002a90 <SPI_WaitFlagStateUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e023      	b.n	8002d8e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	2b80      	cmp	r3, #128	; 0x80
 8002d5e:	d0f2      	beq.n	8002d46 <SPI_EndRxTxTransaction+0x7a>
 8002d60:	e000      	b.n	8002d64 <SPI_EndRxTxTransaction+0x98>
        break;
 8002d62:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff ff15 	bl	8002ba0 <SPI_WaitFifoStateUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	2000020c 	.word	0x2000020c
 8002d9c:	165e9f81 	.word	0x165e9f81

08002da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e049      	b.n	8002e46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe fb2e 	bl	8001428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f000 f900 	bl	8002fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0b4      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x186>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	4b56      	ldr	r3, [pc, #344]	; (8002fe0 <HAL_TIM_ConfigClockSource+0x190>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea4:	d03e      	beq.n	8002f24 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eaa:	f200 8087 	bhi.w	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb2:	f000 8086 	beq.w	8002fc2 <HAL_TIM_ConfigClockSource+0x172>
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	d87f      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d01a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ec0:	2b70      	cmp	r3, #112	; 0x70
 8002ec2:	d87b      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d050      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x11a>
 8002ec8:	2b60      	cmp	r3, #96	; 0x60
 8002eca:	d877      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d03c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0xfa>
 8002ed0:	2b50      	cmp	r3, #80	; 0x50
 8002ed2:	d873      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d058      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x13a>
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d86f      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d064      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ee0:	2b30      	cmp	r3, #48	; 0x30
 8002ee2:	d86b      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d060      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d867      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d05c      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d05a      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ef4:	e062      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f06:	f000 f987 	bl	8003218 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
      break;
 8002f22:	e04f      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f34:	f000 f970 	bl	8003218 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f46:	609a      	str	r2, [r3, #8]
      break;
 8002f48:	e03c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 f8e4 	bl	8003124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2150      	movs	r1, #80	; 0x50
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f93d 	bl	80031e2 <TIM_ITRx_SetConfig>
      break;
 8002f68:	e02c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f903 	bl	8003182 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2160      	movs	r1, #96	; 0x60
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f92d 	bl	80031e2 <TIM_ITRx_SetConfig>
      break;
 8002f88:	e01c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 f8c4 	bl	8003124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2140      	movs	r1, #64	; 0x40
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f91d 	bl	80031e2 <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e00c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f000 f914 	bl	80031e2 <TIM_ITRx_SetConfig>
      break;
 8002fba:	e003      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	fffeff88 	.word	0xfffeff88

08002fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <TIM_Base_SetConfig+0x114>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <TIM_Base_SetConfig+0x40>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003002:	d00f      	beq.n	8003024 <TIM_Base_SetConfig+0x40>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a3d      	ldr	r2, [pc, #244]	; (80030fc <TIM_Base_SetConfig+0x118>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00b      	beq.n	8003024 <TIM_Base_SetConfig+0x40>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3c      	ldr	r2, [pc, #240]	; (8003100 <TIM_Base_SetConfig+0x11c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a3b      	ldr	r2, [pc, #236]	; (8003104 <TIM_Base_SetConfig+0x120>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3a      	ldr	r2, [pc, #232]	; (8003108 <TIM_Base_SetConfig+0x124>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d108      	bne.n	8003036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <TIM_Base_SetConfig+0x114>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d02b      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003044:	d027      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <TIM_Base_SetConfig+0x118>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d023      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <TIM_Base_SetConfig+0x11c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01f      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <TIM_Base_SetConfig+0x120>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01b      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a29      	ldr	r2, [pc, #164]	; (8003108 <TIM_Base_SetConfig+0x124>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d017      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a28      	ldr	r2, [pc, #160]	; (800310c <TIM_Base_SetConfig+0x128>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a27      	ldr	r2, [pc, #156]	; (8003110 <TIM_Base_SetConfig+0x12c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00f      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a26      	ldr	r2, [pc, #152]	; (8003114 <TIM_Base_SetConfig+0x130>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a25      	ldr	r2, [pc, #148]	; (8003118 <TIM_Base_SetConfig+0x134>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a24      	ldr	r2, [pc, #144]	; (800311c <TIM_Base_SetConfig+0x138>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a23      	ldr	r2, [pc, #140]	; (8003120 <TIM_Base_SetConfig+0x13c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <TIM_Base_SetConfig+0x114>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_Base_SetConfig+0xf8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <TIM_Base_SetConfig+0x124>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d103      	bne.n	80030e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	615a      	str	r2, [r3, #20]
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40010000 	.word	0x40010000
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800
 8003104:	40000c00 	.word	0x40000c00
 8003108:	40010400 	.word	0x40010400
 800310c:	40014000 	.word	0x40014000
 8003110:	40014400 	.word	0x40014400
 8003114:	40014800 	.word	0x40014800
 8003118:	40001800 	.word	0x40001800
 800311c:	40001c00 	.word	0x40001c00
 8003120:	40002000 	.word	0x40002000

08003124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800314e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f023 030a 	bic.w	r3, r3, #10
 8003160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	621a      	str	r2, [r3, #32]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003182:	b480      	push	{r7}
 8003184:	b087      	sub	sp, #28
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0210 	bic.w	r2, r3, #16
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	031b      	lsls	r3, r3, #12
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b085      	sub	sp, #20
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	f043 0307 	orr.w	r3, r3, #7
 8003204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003232:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	021a      	lsls	r2, r3, #8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	431a      	orrs	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800326c:	2302      	movs	r3, #2
 800326e:	e06d      	b.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a30      	ldr	r2, [pc, #192]	; (8003358 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2f      	ldr	r2, [pc, #188]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d108      	bne.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d01d      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1a      	ldr	r2, [pc, #104]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a16      	ldr	r2, [pc, #88]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10c      	bne.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003326:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	4313      	orrs	r3, r2
 8003330:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40010000 	.word	0x40010000
 800335c:	40010400 	.word	0x40010400
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40014000 	.word	0x40014000
 8003370:	40001800 	.word	0x40001800

08003374 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800338a:	f3ef 8305 	mrs	r3, IPSR
 800338e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003390:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003396:	f3ef 8310 	mrs	r3, PRIMASK
 800339a:	607b      	str	r3, [r7, #4]
  return(result);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033a2:	f3ef 8311 	mrs	r3, BASEPRI
 80033a6:	603b      	str	r3, [r7, #0]
  return(result);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <osKernelInitialize+0x3a>
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <osKernelInitialize+0x64>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d103      	bne.n	80033be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80033b6:	f06f 0305 	mvn.w	r3, #5
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e00c      	b.n	80033d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <osKernelInitialize+0x64>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <osKernelInitialize+0x64>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e002      	b.n	80033d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033d8:	68fb      	ldr	r3, [r7, #12]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	200003d4 	.word	0x200003d4

080033ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033f2:	f3ef 8305 	mrs	r3, IPSR
 80033f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003402:	607b      	str	r3, [r7, #4]
  return(result);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800340a:	f3ef 8311 	mrs	r3, BASEPRI
 800340e:	603b      	str	r3, [r7, #0]
  return(result);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <osKernelStart+0x3a>
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <osKernelStart+0x68>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d103      	bne.n	8003426 <osKernelStart+0x3a>
    stat = osErrorISR;
 800341e:	f06f 0305 	mvn.w	r3, #5
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e010      	b.n	8003448 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <osKernelStart+0x68>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d109      	bne.n	8003442 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800342e:	f7ff ffa1 	bl	8003374 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <osKernelStart+0x68>)
 8003434:	2202      	movs	r2, #2
 8003436:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003438:	f001 f8b4 	bl	80045a4 <vTaskStartScheduler>
      stat = osOK;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e002      	b.n	8003448 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200003d4 	.word	0x200003d4

08003458 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b090      	sub	sp, #64	; 0x40
 800345c:	af04      	add	r7, sp, #16
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003468:	f3ef 8305 	mrs	r3, IPSR
 800346c:	61fb      	str	r3, [r7, #28]
  return(result);
 800346e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 808f 	bne.w	8003594 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003476:	f3ef 8310 	mrs	r3, PRIMASK
 800347a:	61bb      	str	r3, [r7, #24]
  return(result);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003482:	f3ef 8311 	mrs	r3, BASEPRI
 8003486:	617b      	str	r3, [r7, #20]
  return(result);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <osThreadNew+0x3e>
 800348e:	4b44      	ldr	r3, [pc, #272]	; (80035a0 <osThreadNew+0x148>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d07e      	beq.n	8003594 <osThreadNew+0x13c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d07b      	beq.n	8003594 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80034a0:	2318      	movs	r3, #24
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d045      	beq.n	8003540 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <osThreadNew+0x6a>
        name = attr->name;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <osThreadNew+0x90>
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	2b38      	cmp	r3, #56	; 0x38
 80034da:	d805      	bhi.n	80034e8 <osThreadNew+0x90>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <osThreadNew+0x94>
        return (NULL);
 80034e8:	2300      	movs	r3, #0
 80034ea:	e054      	b.n	8003596 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <osThreadNew+0xca>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b5b      	cmp	r3, #91	; 0x5b
 800350a:	d90a      	bls.n	8003522 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <osThreadNew+0xca>
        mem = 1;
 800351c:	2301      	movs	r3, #1
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	e010      	b.n	8003544 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <osThreadNew+0xec>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <osThreadNew+0xec>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <osThreadNew+0xec>
          mem = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	623b      	str	r3, [r7, #32]
 800353e:	e001      	b.n	8003544 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d110      	bne.n	800356c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003552:	9202      	str	r2, [sp, #8]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fe3f 	bl	80041e4 <xTaskCreateStatic>
 8003566:	4603      	mov	r3, r0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	e013      	b.n	8003594 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d110      	bne.n	8003594 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	b29a      	uxth	r2, r3
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fe90 	bl	80042aa <xTaskCreate>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d001      	beq.n	8003594 <osThreadNew+0x13c>
          hTask = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003594:	693b      	ldr	r3, [r7, #16]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3730      	adds	r7, #48	; 0x30
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200003d4 	.word	0x200003d4

080035a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ac:	f3ef 8305 	mrs	r3, IPSR
 80035b0:	613b      	str	r3, [r7, #16]
  return(result);
 80035b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10f      	bne.n	80035d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b8:	f3ef 8310 	mrs	r3, PRIMASK
 80035bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035c4:	f3ef 8311 	mrs	r3, BASEPRI
 80035c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <osDelay+0x3c>
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <osDelay+0x58>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d103      	bne.n	80035e0 <osDelay+0x3c>
    stat = osErrorISR;
 80035d8:	f06f 0305 	mvn.w	r3, #5
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e007      	b.n	80035f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 ffa4 	bl	8004538 <vTaskDelay>
    }
  }

  return (stat);
 80035f0:	697b      	ldr	r3, [r7, #20]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200003d4 	.word	0x200003d4

08003600 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <vApplicationGetIdleTaskMemory+0x2c>)
 8003610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <vApplicationGetIdleTaskMemory+0x30>)
 8003616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200003d8 	.word	0x200003d8
 8003630:	20000434 	.word	0x20000434

08003634 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <vApplicationGetTimerTaskMemory+0x2c>)
 8003644:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4a06      	ldr	r2, [pc, #24]	; (8003664 <vApplicationGetTimerTaskMemory+0x30>)
 800364a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003652:	601a      	str	r2, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	20000634 	.word	0x20000634
 8003664:	20000690 	.word	0x20000690

08003668 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f103 0208 	add.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f103 0208 	add.w	r2, r3, #8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f103 0208 	add.w	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d103      	bne.n	800372a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e00c      	b.n	8003744 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3308      	adds	r3, #8
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e002      	b.n	8003738 <vListInsert+0x2e>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	d2f6      	bcs.n	8003732 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6852      	ldr	r2, [r2, #4]
 800379c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d103      	bne.n	80037b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1e5a      	subs	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10c      	bne.n	80037fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	b672      	cpsid	i
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	b662      	cpsie	i
 80037f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037fa:	bf00      	nop
 80037fc:	e7fe      	b.n	80037fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80037fe:	f002 f87d 	bl	80058fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	68f9      	ldr	r1, [r7, #12]
 800380c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	441a      	add	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	3b01      	subs	r3, #1
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	441a      	add	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d114      	bne.n	800387e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01a      	beq.n	8003892 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3310      	adds	r3, #16
 8003860:	4618      	mov	r0, r3
 8003862:	f001 f937 	bl	8004ad4 <xTaskRemoveFromEventList>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <xQueueGenericReset+0xd0>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	e009      	b.n	8003892 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3310      	adds	r3, #16
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fef0 	bl	8003668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3324      	adds	r3, #36	; 0x24
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff feeb 	bl	8003668 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003892:	f002 f867 	bl	8005964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10c      	bne.n	80038d2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	b672      	cpsid	i
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	b662      	cpsie	i
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10c      	bne.n	80038f2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	b672      	cpsid	i
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	b662      	cpsie	i
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <xQueueGenericCreateStatic+0x5a>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <xQueueGenericCreateStatic+0x5e>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <xQueueGenericCreateStatic+0x60>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10c      	bne.n	8003922 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	b672      	cpsid	i
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	b662      	cpsie	i
 800391c:	623b      	str	r3, [r7, #32]
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <xQueueGenericCreateStatic+0x8a>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <xQueueGenericCreateStatic+0x8e>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <xQueueGenericCreateStatic+0x90>
 8003932:	2300      	movs	r3, #0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10c      	bne.n	8003952 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	b672      	cpsid	i
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	b662      	cpsie	i
 800394c:	61fb      	str	r3, [r7, #28]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003952:	2350      	movs	r3, #80	; 0x50
 8003954:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b50      	cmp	r3, #80	; 0x50
 800395a:	d00c      	beq.n	8003976 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	b672      	cpsid	i
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	b662      	cpsie	i
 8003970:	61bb      	str	r3, [r7, #24]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003976:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800398a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f805 	bl	80039a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3730      	adds	r7, #48	; 0x30
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e002      	b.n	80039ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039d6:	2101      	movs	r1, #1
 80039d8:	69b8      	ldr	r0, [r7, #24]
 80039da:	f7ff fef9 	bl	80037d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	; 0x38
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039fe:	2300      	movs	r3, #0
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10c      	bne.n	8003a26 <xQueueGenericSend+0x36>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	b672      	cpsid	i
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	b662      	cpsie	i
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <xQueueGenericSend+0x44>
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <xQueueGenericSend+0x48>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <xQueueGenericSend+0x4a>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <xQueueGenericSend+0x68>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	b672      	cpsid	i
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	b662      	cpsie	i
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d103      	bne.n	8003a66 <xQueueGenericSend+0x76>
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <xQueueGenericSend+0x7a>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <xQueueGenericSend+0x7c>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10c      	bne.n	8003a8a <xQueueGenericSend+0x9a>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	b672      	cpsid	i
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	b662      	cpsie	i
 8003a84:	623b      	str	r3, [r7, #32]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a8a:	f001 f9e9 	bl	8004e60 <xTaskGetSchedulerState>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <xQueueGenericSend+0xaa>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <xQueueGenericSend+0xae>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <xQueueGenericSend+0xb0>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10c      	bne.n	8003abe <xQueueGenericSend+0xce>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	b672      	cpsid	i
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	b662      	cpsie	i
 8003ab8:	61fb      	str	r3, [r7, #28]
}
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003abe:	f001 ff1d 	bl	80058fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <xQueueGenericSend+0xe4>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d129      	bne.n	8003b28 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ada:	f000 fa15 	bl	8003f08 <prvCopyDataToQueue>
 8003ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fff1 	bl	8004ad4 <xTaskRemoveFromEventList>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d013      	beq.n	8003b20 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003af8:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <xQueueGenericSend+0x208>)
 8003afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	e00a      	b.n	8003b20 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b10:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <xQueueGenericSend+0x208>)
 8003b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b20:	f001 ff20 	bl	8005964 <vPortExitCritical>
				return pdPASS;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e063      	b.n	8003bf0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b2e:	f001 ff19 	bl	8005964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e05c      	b.n	8003bf0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 f82d 	bl	8004ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b46:	2301      	movs	r3, #1
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b4a:	f001 ff0b 	bl	8005964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b4e:	f000 fd93 	bl	8004678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b52:	f001 fed3 	bl	80058fc <vPortEnterCritical>
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d103      	bne.n	8003b6c <xQueueGenericSend+0x17c>
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d103      	bne.n	8003b82 <xQueueGenericSend+0x192>
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b82:	f001 feef 	bl	8005964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b86:	1d3a      	adds	r2, r7, #4
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 f81c 	bl	8004bcc <xTaskCheckForTimeOut>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d124      	bne.n	8003be4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b9c:	f000 faac 	bl	80040f8 <prvIsQueueFull>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d018      	beq.n	8003bd8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	3310      	adds	r3, #16
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 ff3c 	bl	8004a2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb6:	f000 fa37 	bl	8004028 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bba:	f000 fd6b 	bl	8004694 <xTaskResumeAll>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f47f af7c 	bne.w	8003abe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <xQueueGenericSend+0x208>)
 8003bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	e772      	b.n	8003abe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bda:	f000 fa25 	bl	8004028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bde:	f000 fd59 	bl	8004694 <xTaskResumeAll>
 8003be2:	e76c      	b.n	8003abe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be6:	f000 fa1f 	bl	8004028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bea:	f000 fd53 	bl	8004694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3738      	adds	r7, #56	; 0x38
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08e      	sub	sp, #56	; 0x38
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10c      	bne.n	8003c2e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	b672      	cpsid	i
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	b662      	cpsie	i
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <xQueueGenericSendFromISR+0x40>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <xQueueGenericSendFromISR+0x44>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <xQueueGenericSendFromISR+0x46>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10c      	bne.n	8003c60 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	b672      	cpsid	i
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	b662      	cpsie	i
 8003c5a:	623b      	str	r3, [r7, #32]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d103      	bne.n	8003c6e <xQueueGenericSendFromISR+0x72>
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <xQueueGenericSendFromISR+0x76>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <xQueueGenericSendFromISR+0x78>
 8003c72:	2300      	movs	r3, #0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10c      	bne.n	8003c92 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	b672      	cpsid	i
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	b662      	cpsie	i
 8003c8c:	61fb      	str	r3, [r7, #28]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c92:	f001 ff1b 	bl	8005acc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c96:	f3ef 8211 	mrs	r2, BASEPRI
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	b672      	cpsid	i
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	b662      	cpsie	i
 8003cae:	61ba      	str	r2, [r7, #24]
 8003cb0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <xQueueGenericSendFromISR+0xcc>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d12c      	bne.n	8003d22 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd8:	f000 f916 	bl	8003f08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cdc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d112      	bne.n	8003d0c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	3324      	adds	r3, #36	; 0x24
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 feee 	bl	8004ad4 <xTaskRemoveFromEventList>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00e      	beq.n	8003d1c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e007      	b.n	8003d1c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d10:	3301      	adds	r3, #1
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	b25a      	sxtb	r2, r3
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d20:	e001      	b.n	8003d26 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3738      	adds	r7, #56	; 0x38
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <xQueueReceive+0x34>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	b672      	cpsid	i
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	b662      	cpsie	i
 8003d6a:	623b      	str	r3, [r7, #32]
}
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <xQueueReceive+0x42>
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <xQueueReceive+0x46>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <xQueueReceive+0x48>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10c      	bne.n	8003da2 <xQueueReceive+0x66>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	b672      	cpsid	i
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	b662      	cpsie	i
 8003d9c:	61fb      	str	r3, [r7, #28]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003da2:	f001 f85d 	bl	8004e60 <xTaskGetSchedulerState>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <xQueueReceive+0x76>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <xQueueReceive+0x7a>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <xQueueReceive+0x7c>
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10c      	bne.n	8003dd6 <xQueueReceive+0x9a>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	b672      	cpsid	i
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	b662      	cpsie	i
 8003dd0:	61bb      	str	r3, [r7, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dd6:	f001 fd91 	bl	80058fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01f      	beq.n	8003e26 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dea:	f000 f8f7 	bl	8003fdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	1e5a      	subs	r2, r3, #1
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00f      	beq.n	8003e1e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	3310      	adds	r3, #16
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fe66 	bl	8004ad4 <xTaskRemoveFromEventList>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <xQueueReceive+0x1c8>)
 8003e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e1e:	f001 fda1 	bl	8005964 <vPortExitCritical>
				return pdPASS;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e069      	b.n	8003efa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e2c:	f001 fd9a 	bl	8005964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e062      	b.n	8003efa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e3a:	f107 0310 	add.w	r3, r7, #16
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 feae 	bl	8004ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e48:	f001 fd8c 	bl	8005964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e4c:	f000 fc14 	bl	8004678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e50:	f001 fd54 	bl	80058fc <vPortEnterCritical>
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e5a:	b25b      	sxtb	r3, r3
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d103      	bne.n	8003e6a <xQueueReceive+0x12e>
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d103      	bne.n	8003e80 <xQueueReceive+0x144>
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e80:	f001 fd70 	bl	8005964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e84:	1d3a      	adds	r2, r7, #4
 8003e86:	f107 0310 	add.w	r3, r7, #16
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fe9d 	bl	8004bcc <xTaskCheckForTimeOut>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d123      	bne.n	8003ee0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e9a:	f000 f917 	bl	80040cc <prvIsQueueEmpty>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	3324      	adds	r3, #36	; 0x24
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fdbd 	bl	8004a2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb4:	f000 f8b8 	bl	8004028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003eb8:	f000 fbec 	bl	8004694 <xTaskResumeAll>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d189      	bne.n	8003dd6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <xQueueReceive+0x1c8>)
 8003ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	e780      	b.n	8003dd6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed6:	f000 f8a7 	bl	8004028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eda:	f000 fbdb 	bl	8004694 <xTaskResumeAll>
 8003ede:	e77a      	b.n	8003dd6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee2:	f000 f8a1 	bl	8004028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ee6:	f000 fbd5 	bl	8004694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eec:	f000 f8ee 	bl	80040cc <prvIsQueueEmpty>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f43f af6f 	beq.w	8003dd6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ef8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3730      	adds	r7, #48	; 0x30
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d14d      	bne.n	8003fca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 ffb2 	bl	8004e9c <xTaskPriorityDisinherit>
 8003f38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e043      	b.n	8003fca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d119      	bne.n	8003f7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6858      	ldr	r0, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	461a      	mov	r2, r3
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	f002 f8e2 	bl	800611c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	441a      	add	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d32b      	bcc.n	8003fca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	e026      	b.n	8003fca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68d8      	ldr	r0, [r3, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	461a      	mov	r2, r3
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	f002 f8c8 	bl	800611c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	425b      	negs	r3, r3
 8003f96:	441a      	add	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d207      	bcs.n	8003fb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d105      	bne.n	8003fca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fd2:	697b      	ldr	r3, [r7, #20]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d018      	beq.n	8004020 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	429a      	cmp	r2, r3
 8004006:	d303      	bcc.n	8004010 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68d9      	ldr	r1, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	461a      	mov	r2, r3
 800401a:	6838      	ldr	r0, [r7, #0]
 800401c:	f002 f87e 	bl	800611c <memcpy>
	}
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004030:	f001 fc64 	bl	80058fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800403a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800403c:	e011      	b.n	8004062 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fd42 	bl	8004ad4 <xTaskRemoveFromEventList>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004056:	f000 fe1f 	bl	8004c98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	3b01      	subs	r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	dce9      	bgt.n	800403e <prvUnlockQueue+0x16>
 800406a:	e000      	b.n	800406e <prvUnlockQueue+0x46>
					break;
 800406c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	22ff      	movs	r2, #255	; 0xff
 8004072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004076:	f001 fc75 	bl	8005964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800407a:	f001 fc3f 	bl	80058fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004084:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004086:	e011      	b.n	80040ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d012      	beq.n	80040b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3310      	adds	r3, #16
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fd1d 	bl	8004ad4 <xTaskRemoveFromEventList>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040a0:	f000 fdfa 	bl	8004c98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040a4:	7bbb      	ldrb	r3, [r7, #14]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	dce9      	bgt.n	8004088 <prvUnlockQueue+0x60>
 80040b4:	e000      	b.n	80040b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	22ff      	movs	r2, #255	; 0xff
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040c0:	f001 fc50 	bl	8005964 <vPortExitCritical>
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040d4:	f001 fc12 	bl	80058fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e001      	b.n	80040ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ea:	f001 fc3b 	bl	8005964 <vPortExitCritical>

	return xReturn;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004100:	f001 fbfc 	bl	80058fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	429a      	cmp	r2, r3
 800410e:	d102      	bne.n	8004116 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004110:	2301      	movs	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e001      	b.n	800411a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800411a:	f001 fc23 	bl	8005964 <vPortExitCritical>

	return xReturn;
 800411e:	68fb      	ldr	r3, [r7, #12]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e014      	b.n	8004162 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004138:	4a0f      	ldr	r2, [pc, #60]	; (8004178 <vQueueAddToRegistry+0x50>)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004144:	490c      	ldr	r1, [pc, #48]	; (8004178 <vQueueAddToRegistry+0x50>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800414e:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <vQueueAddToRegistry+0x50>)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800415a:	e006      	b.n	800416a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b07      	cmp	r3, #7
 8004166:	d9e7      	bls.n	8004138 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000a90 	.word	0x20000a90

0800417c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800418c:	f001 fbb6 	bl	80058fc <vPortEnterCritical>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d103      	bne.n	80041a6 <vQueueWaitForMessageRestricted+0x2a>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d103      	bne.n	80041bc <vQueueWaitForMessageRestricted+0x40>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041bc:	f001 fbd2 	bl	8005964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3324      	adds	r3, #36	; 0x24
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fc51 	bl	8004a78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7ff ff26 	bl	8004028 <prvUnlockQueue>
	}
 80041dc:	bf00      	nop
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08e      	sub	sp, #56	; 0x38
 80041e8:	af04      	add	r7, sp, #16
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10c      	bne.n	8004212 <xTaskCreateStatic+0x2e>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	b672      	cpsid	i
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	b662      	cpsie	i
 800420c:	623b      	str	r3, [r7, #32]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10c      	bne.n	8004232 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	b672      	cpsid	i
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	b662      	cpsie	i
 800422c:	61fb      	str	r3, [r7, #28]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004232:	235c      	movs	r3, #92	; 0x5c
 8004234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b5c      	cmp	r3, #92	; 0x5c
 800423a:	d00c      	beq.n	8004256 <xTaskCreateStatic+0x72>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	b672      	cpsid	i
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	b662      	cpsie	i
 8004250:	61bb      	str	r3, [r7, #24]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01e      	beq.n	800429c <xTaskCreateStatic+0xb8>
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01b      	beq.n	800429c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800426c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	2202      	movs	r2, #2
 8004272:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004276:	2300      	movs	r3, #0
 8004278:	9303      	str	r3, [sp, #12]
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	9302      	str	r3, [sp, #8]
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f850 	bl	8004334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004296:	f000 f8df 	bl	8004458 <prvAddNewTaskToReadyList>
 800429a:	e001      	b.n	80042a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042a0:	697b      	ldr	r3, [r7, #20]
	}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b08c      	sub	sp, #48	; 0x30
 80042ae:	af04      	add	r7, sp, #16
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	4613      	mov	r3, r2
 80042b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 fc48 	bl	8005b54 <pvPortMalloc>
 80042c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00e      	beq.n	80042ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042cc:	205c      	movs	r0, #92	; 0x5c
 80042ce:	f001 fc41 	bl	8005b54 <pvPortMalloc>
 80042d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
 80042e0:	e005      	b.n	80042ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f001 fd00 	bl	8005ce8 <vPortFree>
 80042e8:	e001      	b.n	80042ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d017      	beq.n	8004324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	2300      	movs	r3, #0
 8004300:	9303      	str	r3, [sp, #12]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	9302      	str	r3, [sp, #8]
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f80e 	bl	8004334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004318:	69f8      	ldr	r0, [r7, #28]
 800431a:	f000 f89d 	bl	8004458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800431e:	2301      	movs	r3, #1
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e002      	b.n	800432a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004324:	f04f 33ff 	mov.w	r3, #4294967295
 8004328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800432a:	69bb      	ldr	r3, [r7, #24]
	}
 800432c:	4618      	mov	r0, r3
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	461a      	mov	r2, r3
 800434c:	21a5      	movs	r1, #165	; 0xa5
 800434e:	f001 fea1 	bl	8006094 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800435c:	440b      	add	r3, r1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f023 0307 	bic.w	r3, r3, #7
 800436a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00c      	beq.n	8004390 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	b672      	cpsid	i
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	b662      	cpsie	i
 800438a:	617b      	str	r3, [r7, #20]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01f      	beq.n	80043d6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e012      	b.n	80043c2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	7819      	ldrb	r1, [r3, #0]
 80043a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	3334      	adds	r3, #52	; 0x34
 80043ac:	460a      	mov	r2, r1
 80043ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d006      	beq.n	80043ca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	3301      	adds	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d9e9      	bls.n	800439c <prvInitialiseNewTask+0x68>
 80043c8:	e000      	b.n	80043cc <prvInitialiseNewTask+0x98>
			{
				break;
 80043ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d4:	e003      	b.n	80043de <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2b37      	cmp	r3, #55	; 0x37
 80043e2:	d901      	bls.n	80043e8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043e4:	2337      	movs	r3, #55	; 0x37
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	2200      	movs	r2, #0
 80043f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	3304      	adds	r3, #4
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f952 	bl	80036a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	3318      	adds	r3, #24
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff f94d 	bl	80036a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	2200      	movs	r2, #0
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	69b8      	ldr	r0, [r7, #24]
 8004438:	f001 f952 	bl	80056e0 <pxPortInitialiseStack>
 800443c:	4602      	mov	r2, r0
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800444e:	bf00      	nop
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004460:	f001 fa4c 	bl	80058fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004464:	4b2d      	ldr	r3, [pc, #180]	; (800451c <prvAddNewTaskToReadyList+0xc4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	4a2c      	ldr	r2, [pc, #176]	; (800451c <prvAddNewTaskToReadyList+0xc4>)
 800446c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800446e:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <prvAddNewTaskToReadyList+0xc8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004476:	4a2a      	ldr	r2, [pc, #168]	; (8004520 <prvAddNewTaskToReadyList+0xc8>)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800447c:	4b27      	ldr	r3, [pc, #156]	; (800451c <prvAddNewTaskToReadyList+0xc4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d110      	bne.n	80044a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004484:	f000 fc2c 	bl	8004ce0 <prvInitialiseTaskLists>
 8004488:	e00d      	b.n	80044a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <prvAddNewTaskToReadyList+0xcc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004492:	4b23      	ldr	r3, [pc, #140]	; (8004520 <prvAddNewTaskToReadyList+0xc8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	429a      	cmp	r2, r3
 800449e:	d802      	bhi.n	80044a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <prvAddNewTaskToReadyList+0xc8>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044a6:	4b20      	ldr	r3, [pc, #128]	; (8004528 <prvAddNewTaskToReadyList+0xd0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <prvAddNewTaskToReadyList+0xd0>)
 80044ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <prvAddNewTaskToReadyList+0xd0>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044bc:	4b1b      	ldr	r3, [pc, #108]	; (800452c <prvAddNewTaskToReadyList+0xd4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d903      	bls.n	80044cc <prvAddNewTaskToReadyList+0x74>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4a18      	ldr	r2, [pc, #96]	; (800452c <prvAddNewTaskToReadyList+0xd4>)
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4a15      	ldr	r2, [pc, #84]	; (8004530 <prvAddNewTaskToReadyList+0xd8>)
 80044da:	441a      	add	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f7ff f8ed 	bl	80036c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044e8:	f001 fa3c 	bl	8005964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <prvAddNewTaskToReadyList+0xcc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00e      	beq.n	8004512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <prvAddNewTaskToReadyList+0xc8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d207      	bcs.n	8004512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <prvAddNewTaskToReadyList+0xdc>)
 8004504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000fa4 	.word	0x20000fa4
 8004520:	20000ad0 	.word	0x20000ad0
 8004524:	20000fb0 	.word	0x20000fb0
 8004528:	20000fc0 	.word	0x20000fc0
 800452c:	20000fac 	.word	0x20000fac
 8004530:	20000ad4 	.word	0x20000ad4
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d019      	beq.n	800457e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <vTaskDelay+0x64>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <vTaskDelay+0x34>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	b672      	cpsid	i
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	b662      	cpsie	i
 8004566:	60bb      	str	r3, [r7, #8]
}
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800456c:	f000 f884 	bl	8004678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004570:	2100      	movs	r1, #0
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fd04 	bl	8004f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004578:	f000 f88c 	bl	8004694 <xTaskResumeAll>
 800457c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d107      	bne.n	8004594 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <vTaskDelay+0x68>)
 8004586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000fcc 	.word	0x20000fcc
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045b2:	463a      	mov	r2, r7
 80045b4:	1d39      	adds	r1, r7, #4
 80045b6:	f107 0308 	add.w	r3, r7, #8
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff f820 	bl	8003600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	9202      	str	r2, [sp, #8]
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	2300      	movs	r3, #0
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	2300      	movs	r3, #0
 80045d0:	460a      	mov	r2, r1
 80045d2:	4923      	ldr	r1, [pc, #140]	; (8004660 <vTaskStartScheduler+0xbc>)
 80045d4:	4823      	ldr	r0, [pc, #140]	; (8004664 <vTaskStartScheduler+0xc0>)
 80045d6:	f7ff fe05 	bl	80041e4 <xTaskCreateStatic>
 80045da:	4603      	mov	r3, r0
 80045dc:	4a22      	ldr	r2, [pc, #136]	; (8004668 <vTaskStartScheduler+0xc4>)
 80045de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045e0:	4b21      	ldr	r3, [pc, #132]	; (8004668 <vTaskStartScheduler+0xc4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e001      	b.n	80045f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d102      	bne.n	80045fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045f8:	f000 fd16 	bl	8005028 <xTimerCreateTimerTask>
 80045fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d118      	bne.n	8004636 <vTaskStartScheduler+0x92>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	b672      	cpsid	i
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	b662      	cpsie	i
 8004618:	613b      	str	r3, [r7, #16]
}
 800461a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800461c:	4b13      	ldr	r3, [pc, #76]	; (800466c <vTaskStartScheduler+0xc8>)
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <vTaskStartScheduler+0xcc>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <vTaskStartScheduler+0xd0>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004630:	f001 f8e6 	bl	8005800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004634:	e010      	b.n	8004658 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d10c      	bne.n	8004658 <vTaskStartScheduler+0xb4>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	b672      	cpsid	i
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	b662      	cpsie	i
 8004652:	60fb      	str	r3, [r7, #12]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <vTaskStartScheduler+0xb2>
}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	08006264 	.word	0x08006264
 8004664:	08004cb1 	.word	0x08004cb1
 8004668:	20000fc8 	.word	0x20000fc8
 800466c:	20000fc4 	.word	0x20000fc4
 8004670:	20000fb0 	.word	0x20000fb0
 8004674:	20000fa8 	.word	0x20000fa8

08004678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <vTaskSuspendAll+0x18>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3301      	adds	r3, #1
 8004682:	4a03      	ldr	r2, [pc, #12]	; (8004690 <vTaskSuspendAll+0x18>)
 8004684:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000fcc 	.word	0x20000fcc

08004694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046a2:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <xTaskResumeAll+0x11c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <xTaskResumeAll+0x30>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	b672      	cpsid	i
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	b662      	cpsie	i
 80046be:	603b      	str	r3, [r7, #0]
}
 80046c0:	bf00      	nop
 80046c2:	e7fe      	b.n	80046c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046c4:	f001 f91a 	bl	80058fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <xTaskResumeAll+0x11c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	4a38      	ldr	r2, [pc, #224]	; (80047b0 <xTaskResumeAll+0x11c>)
 80046d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <xTaskResumeAll+0x11c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d162      	bne.n	80047a0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046da:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <xTaskResumeAll+0x120>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d05e      	beq.n	80047a0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e2:	e02f      	b.n	8004744 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e4:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <xTaskResumeAll+0x124>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3318      	adds	r3, #24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff f843 	bl	800377c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff f83e 	bl	800377c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <xTaskResumeAll+0x128>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <xTaskResumeAll+0x80>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <xTaskResumeAll+0x128>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a27      	ldr	r2, [pc, #156]	; (80047c0 <xTaskResumeAll+0x12c>)
 8004722:	441a      	add	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fe ffc9 	bl	80036c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <xTaskResumeAll+0x130>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <xTaskResumeAll+0x134>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004744:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <xTaskResumeAll+0x124>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1cb      	bne.n	80046e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004752:	f000 fb65 	bl	8004e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <xTaskResumeAll+0x138>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d010      	beq.n	8004784 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004762:	f000 f847 	bl	80047f4 <xTaskIncrementTick>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800476c:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <xTaskResumeAll+0x134>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3b01      	subs	r3, #1
 8004776:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f1      	bne.n	8004762 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <xTaskResumeAll+0x138>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <xTaskResumeAll+0x134>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <xTaskResumeAll+0x13c>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047a0:	f001 f8e0 	bl	8005964 <vPortExitCritical>

	return xAlreadyYielded;
 80047a4:	68bb      	ldr	r3, [r7, #8]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000fcc 	.word	0x20000fcc
 80047b4:	20000fa4 	.word	0x20000fa4
 80047b8:	20000f64 	.word	0x20000f64
 80047bc:	20000fac 	.word	0x20000fac
 80047c0:	20000ad4 	.word	0x20000ad4
 80047c4:	20000ad0 	.word	0x20000ad0
 80047c8:	20000fb8 	.word	0x20000fb8
 80047cc:	20000fb4 	.word	0x20000fb4
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <xTaskGetTickCount+0x1c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047e0:	687b      	ldr	r3, [r7, #4]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000fa8 	.word	0x20000fa8

080047f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fe:	4b50      	ldr	r3, [pc, #320]	; (8004940 <xTaskIncrementTick+0x14c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 808b 	bne.w	800491e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004808:	4b4e      	ldr	r3, [pc, #312]	; (8004944 <xTaskIncrementTick+0x150>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004810:	4a4c      	ldr	r2, [pc, #304]	; (8004944 <xTaskIncrementTick+0x150>)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d122      	bne.n	8004862 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800481c:	4b4a      	ldr	r3, [pc, #296]	; (8004948 <xTaskIncrementTick+0x154>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00c      	beq.n	8004840 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	b672      	cpsid	i
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	b662      	cpsie	i
 800483a:	603b      	str	r3, [r7, #0]
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <xTaskIncrementTick+0x4a>
 8004840:	4b41      	ldr	r3, [pc, #260]	; (8004948 <xTaskIncrementTick+0x154>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4b41      	ldr	r3, [pc, #260]	; (800494c <xTaskIncrementTick+0x158>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3f      	ldr	r2, [pc, #252]	; (8004948 <xTaskIncrementTick+0x154>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4a3f      	ldr	r2, [pc, #252]	; (800494c <xTaskIncrementTick+0x158>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <xTaskIncrementTick+0x15c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <xTaskIncrementTick+0x15c>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	f000 fadf 	bl	8004e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004862:	4b3c      	ldr	r3, [pc, #240]	; (8004954 <xTaskIncrementTick+0x160>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	429a      	cmp	r2, r3
 800486a:	d349      	bcc.n	8004900 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486c:	4b36      	ldr	r3, [pc, #216]	; (8004948 <xTaskIncrementTick+0x154>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <xTaskIncrementTick+0x160>)
 8004878:	f04f 32ff 	mov.w	r2, #4294967295
 800487c:	601a      	str	r2, [r3, #0]
					break;
 800487e:	e03f      	b.n	8004900 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004880:	4b31      	ldr	r3, [pc, #196]	; (8004948 <xTaskIncrementTick+0x154>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d203      	bcs.n	80048a0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004898:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <xTaskIncrementTick+0x160>)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800489e:	e02f      	b.n	8004900 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe ff69 	bl	800377c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3318      	adds	r3, #24
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe ff60 	bl	800377c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <xTaskIncrementTick+0x164>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d903      	bls.n	80048d0 <xTaskIncrementTick+0xdc>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4a22      	ldr	r2, [pc, #136]	; (8004958 <xTaskIncrementTick+0x164>)
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <xTaskIncrementTick+0x168>)
 80048de:	441a      	add	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f7fe feeb 	bl	80036c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <xTaskIncrementTick+0x16c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d3b8      	bcc.n	800486c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80048fa:	2301      	movs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048fe:	e7b5      	b.n	800486c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004900:	4b17      	ldr	r3, [pc, #92]	; (8004960 <xTaskIncrementTick+0x16c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004906:	4915      	ldr	r1, [pc, #84]	; (800495c <xTaskIncrementTick+0x168>)
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d907      	bls.n	8004928 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e004      	b.n	8004928 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <xTaskIncrementTick+0x170>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <xTaskIncrementTick+0x170>)
 8004926:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <xTaskIncrementTick+0x174>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004934:	697b      	ldr	r3, [r7, #20]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000fcc 	.word	0x20000fcc
 8004944:	20000fa8 	.word	0x20000fa8
 8004948:	20000f5c 	.word	0x20000f5c
 800494c:	20000f60 	.word	0x20000f60
 8004950:	20000fbc 	.word	0x20000fbc
 8004954:	20000fc4 	.word	0x20000fc4
 8004958:	20000fac 	.word	0x20000fac
 800495c:	20000ad4 	.word	0x20000ad4
 8004960:	20000ad0 	.word	0x20000ad0
 8004964:	20000fb4 	.word	0x20000fb4
 8004968:	20000fb8 	.word	0x20000fb8

0800496c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <vTaskSwitchContext+0xac>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800497a:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <vTaskSwitchContext+0xb0>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004980:	e043      	b.n	8004a0a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8004982:	4b26      	ldr	r3, [pc, #152]	; (8004a1c <vTaskSwitchContext+0xb0>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <vTaskSwitchContext+0xb4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e012      	b.n	80049b6 <vTaskSwitchContext+0x4a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <vTaskSwitchContext+0x44>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	b672      	cpsid	i
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	b662      	cpsie	i
 80049aa:	607b      	str	r3, [r7, #4]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <vTaskSwitchContext+0x42>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	491b      	ldr	r1, [pc, #108]	; (8004a24 <vTaskSwitchContext+0xb8>)
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0e2      	beq.n	8004990 <vTaskSwitchContext+0x24>
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <vTaskSwitchContext+0xb8>)
 80049d6:	4413      	add	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	605a      	str	r2, [r3, #4]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	3308      	adds	r3, #8
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d104      	bne.n	80049fa <vTaskSwitchContext+0x8e>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <vTaskSwitchContext+0xbc>)
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4a06      	ldr	r2, [pc, #24]	; (8004a20 <vTaskSwitchContext+0xb4>)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6013      	str	r3, [r2, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000fcc 	.word	0x20000fcc
 8004a1c:	20000fb8 	.word	0x20000fb8
 8004a20:	20000fac 	.word	0x20000fac
 8004a24:	20000ad4 	.word	0x20000ad4
 8004a28:	20000ad0 	.word	0x20000ad0

08004a2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10c      	bne.n	8004a56 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	b672      	cpsid	i
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	b662      	cpsie	i
 8004a50:	60fb      	str	r3, [r7, #12]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <vTaskPlaceOnEventList+0x48>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3318      	adds	r3, #24
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fe fe53 	bl	800370a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a64:	2101      	movs	r1, #1
 8004a66:	6838      	ldr	r0, [r7, #0]
 8004a68:	f000 fa8a 	bl	8004f80 <prvAddCurrentTaskToDelayedList>
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000ad0 	.word	0x20000ad0

08004a78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10c      	bne.n	8004aa4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	b672      	cpsid	i
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	b662      	cpsie	i
 8004a9e:	617b      	str	r3, [r7, #20]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <vTaskPlaceOnEventListRestricted+0x58>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3318      	adds	r3, #24
 8004aaa:	4619      	mov	r1, r3
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7fe fe08 	bl	80036c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8004abc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	68b8      	ldr	r0, [r7, #8]
 8004ac2:	f000 fa5d 	bl	8004f80 <prvAddCurrentTaskToDelayedList>
	}
 8004ac6:	bf00      	nop
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000ad0 	.word	0x20000ad0

08004ad4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	b672      	cpsid	i
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	b662      	cpsie	i
 8004afe:	60fb      	str	r3, [r7, #12]
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	3318      	adds	r3, #24
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fe37 	bl	800377c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <xTaskRemoveFromEventList+0xb4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11d      	bne.n	8004b52 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe fe2e 	bl	800377c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <xTaskRemoveFromEventList+0xb8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d903      	bls.n	8004b34 <xTaskRemoveFromEventList+0x60>
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <xTaskRemoveFromEventList+0xb8>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <xTaskRemoveFromEventList+0xbc>)
 8004b42:	441a      	add	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fe fdb9 	bl	80036c2 <vListInsertEnd>
 8004b50:	e005      	b.n	8004b5e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3318      	adds	r3, #24
 8004b56:	4619      	mov	r1, r3
 8004b58:	480e      	ldr	r0, [pc, #56]	; (8004b94 <xTaskRemoveFromEventList+0xc0>)
 8004b5a:	f7fe fdb2 	bl	80036c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <xTaskRemoveFromEventList+0xc4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d905      	bls.n	8004b78 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <xTaskRemoveFromEventList+0xc8>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e001      	b.n	8004b7c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b7c:	697b      	ldr	r3, [r7, #20]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000fcc 	.word	0x20000fcc
 8004b8c:	20000fac 	.word	0x20000fac
 8004b90:	20000ad4 	.word	0x20000ad4
 8004b94:	20000f64 	.word	0x20000f64
 8004b98:	20000ad0 	.word	0x20000ad0
 8004b9c:	20000fb8 	.word	0x20000fb8

08004ba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <vTaskInternalSetTimeOutState+0x24>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <vTaskInternalSetTimeOutState+0x28>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	605a      	str	r2, [r3, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	20000fbc 	.word	0x20000fbc
 8004bc8:	20000fa8 	.word	0x20000fa8

08004bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10c      	bne.n	8004bf6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	b672      	cpsid	i
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	b662      	cpsie	i
 8004bf0:	613b      	str	r3, [r7, #16]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10c      	bne.n	8004c16 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	b672      	cpsid	i
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	b662      	cpsie	i
 8004c10:	60fb      	str	r3, [r7, #12]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004c16:	f000 fe71 	bl	80058fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <xTaskCheckForTimeOut+0xc4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d102      	bne.n	8004c3a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	e023      	b.n	8004c82 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <xTaskCheckForTimeOut+0xc8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d007      	beq.n	8004c56 <xTaskCheckForTimeOut+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d302      	bcc.n	8004c56 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e015      	b.n	8004c82 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d20b      	bcs.n	8004c78 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ff97 	bl	8004ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	e004      	b.n	8004c82 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c82:	f000 fe6f 	bl	8005964 <vPortExitCritical>

	return xReturn;
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000fa8 	.word	0x20000fa8
 8004c94:	20000fbc 	.word	0x20000fbc

08004c98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <vTaskMissedYield+0x14>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000fb8 	.word	0x20000fb8

08004cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cb8:	f000 f852 	bl	8004d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <prvIdleTask+0x28>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d9f9      	bls.n	8004cb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <prvIdleTask+0x2c>)
 8004cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cd4:	e7f0      	b.n	8004cb8 <prvIdleTask+0x8>
 8004cd6:	bf00      	nop
 8004cd8:	20000ad4 	.word	0x20000ad4
 8004cdc:	e000ed04 	.word	0xe000ed04

08004ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	e00c      	b.n	8004d06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <prvInitialiseTaskLists+0x60>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fcb4 	bl	8003668 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3301      	adds	r3, #1
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b37      	cmp	r3, #55	; 0x37
 8004d0a:	d9ef      	bls.n	8004cec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d0c:	480d      	ldr	r0, [pc, #52]	; (8004d44 <prvInitialiseTaskLists+0x64>)
 8004d0e:	f7fe fcab 	bl	8003668 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d12:	480d      	ldr	r0, [pc, #52]	; (8004d48 <prvInitialiseTaskLists+0x68>)
 8004d14:	f7fe fca8 	bl	8003668 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d18:	480c      	ldr	r0, [pc, #48]	; (8004d4c <prvInitialiseTaskLists+0x6c>)
 8004d1a:	f7fe fca5 	bl	8003668 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d1e:	480c      	ldr	r0, [pc, #48]	; (8004d50 <prvInitialiseTaskLists+0x70>)
 8004d20:	f7fe fca2 	bl	8003668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d24:	480b      	ldr	r0, [pc, #44]	; (8004d54 <prvInitialiseTaskLists+0x74>)
 8004d26:	f7fe fc9f 	bl	8003668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <prvInitialiseTaskLists+0x78>)
 8004d2c:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <prvInitialiseTaskLists+0x64>)
 8004d2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <prvInitialiseTaskLists+0x7c>)
 8004d32:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <prvInitialiseTaskLists+0x68>)
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000ad4 	.word	0x20000ad4
 8004d44:	20000f34 	.word	0x20000f34
 8004d48:	20000f48 	.word	0x20000f48
 8004d4c:	20000f64 	.word	0x20000f64
 8004d50:	20000f78 	.word	0x20000f78
 8004d54:	20000f90 	.word	0x20000f90
 8004d58:	20000f5c 	.word	0x20000f5c
 8004d5c:	20000f60 	.word	0x20000f60

08004d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d66:	e019      	b.n	8004d9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d68:	f000 fdc8 	bl	80058fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <prvCheckTasksWaitingTermination+0x50>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fcff 	bl	800377c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <prvCheckTasksWaitingTermination+0x54>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <prvCheckTasksWaitingTermination+0x54>)
 8004d86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004d90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d92:	f000 fde7 	bl	8005964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f810 	bl	8004dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e1      	bne.n	8004d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000f78 	.word	0x20000f78
 8004db4:	20000fa4 	.word	0x20000fa4
 8004db8:	20000f8c 	.word	0x20000f8c

08004dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d108      	bne.n	8004de0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 ff88 	bl	8005ce8 <vPortFree>
				vPortFree( pxTCB );
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 ff85 	bl	8005ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dde:	e01a      	b.n	8004e16 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d103      	bne.n	8004df2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 ff7c 	bl	8005ce8 <vPortFree>
	}
 8004df0:	e011      	b.n	8004e16 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d00c      	beq.n	8004e16 <prvDeleteTCB+0x5a>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	b672      	cpsid	i
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	b662      	cpsie	i
 8004e10:	60fb      	str	r3, [r7, #12]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <prvDeleteTCB+0x58>
	}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <prvResetNextTaskUnblockTime+0x38>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <prvResetNextTaskUnblockTime+0x3c>)
 8004e32:	f04f 32ff 	mov.w	r2, #4294967295
 8004e36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e38:	e008      	b.n	8004e4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <prvResetNextTaskUnblockTime+0x38>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4a04      	ldr	r2, [pc, #16]	; (8004e5c <prvResetNextTaskUnblockTime+0x3c>)
 8004e4a:	6013      	str	r3, [r2, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	20000f5c 	.word	0x20000f5c
 8004e5c:	20000fc4 	.word	0x20000fc4

08004e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <xTaskGetSchedulerState+0x34>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	e008      	b.n	8004e86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e74:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <xTaskGetSchedulerState+0x38>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	e001      	b.n	8004e86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e82:	2300      	movs	r3, #0
 8004e84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e86:	687b      	ldr	r3, [r7, #4]
	}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20000fb0 	.word	0x20000fb0
 8004e98:	20000fcc 	.word	0x20000fcc

08004e9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d05a      	beq.n	8004f68 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004eb2:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <xTaskPriorityDisinherit+0xd8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d00c      	beq.n	8004ed6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	b672      	cpsid	i
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	b662      	cpsie	i
 8004ed0:	60fb      	str	r3, [r7, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10c      	bne.n	8004ef8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	b672      	cpsid	i
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	b662      	cpsie	i
 8004ef2:	60bb      	str	r3, [r7, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efc:	1e5a      	subs	r2, r3, #1
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d02c      	beq.n	8004f68 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d128      	bne.n	8004f68 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fc2e 	bl	800377c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <xTaskPriorityDisinherit+0xdc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d903      	bls.n	8004f48 <xTaskPriorityDisinherit+0xac>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <xTaskPriorityDisinherit+0xdc>)
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <xTaskPriorityDisinherit+0xe0>)
 8004f56:	441a      	add	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7fe fbaf 	bl	80036c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f64:	2301      	movs	r3, #1
 8004f66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f68:	697b      	ldr	r3, [r7, #20]
	}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000ad0 	.word	0x20000ad0
 8004f78:	20000fac 	.word	0x20000fac
 8004f7c:	20000ad4 	.word	0x20000ad4

08004f80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f8a:	4b21      	ldr	r3, [pc, #132]	; (8005010 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f90:	4b20      	ldr	r3, [pc, #128]	; (8005014 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fbf0 	bl	800377c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d10a      	bne.n	8004fba <prvAddCurrentTaskToDelayedList+0x3a>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004faa:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4819      	ldr	r0, [pc, #100]	; (8005018 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fb4:	f7fe fb85 	bl	80036c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fb8:	e026      	b.n	8005008 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fc2:	4b14      	ldr	r3, [pc, #80]	; (8005014 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d209      	bcs.n	8004fe6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7fe fb93 	bl	800370a <vListInsert>
}
 8004fe4:	e010      	b.n	8005008 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fe fb89 	bl	800370a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d202      	bcs.n	8005008 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005002:	4a08      	ldr	r2, [pc, #32]	; (8005024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6013      	str	r3, [r2, #0]
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20000fa8 	.word	0x20000fa8
 8005014:	20000ad0 	.word	0x20000ad0
 8005018:	20000f90 	.word	0x20000f90
 800501c:	20000f60 	.word	0x20000f60
 8005020:	20000f5c 	.word	0x20000f5c
 8005024:	20000fc4 	.word	0x20000fc4

08005028 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005032:	f000 fb15 	bl	8005660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <xTimerCreateTimerTask+0x84>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d021      	beq.n	8005082 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005046:	1d3a      	adds	r2, r7, #4
 8005048:	f107 0108 	add.w	r1, r7, #8
 800504c:	f107 030c 	add.w	r3, r7, #12
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe faef 	bl	8003634 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	9202      	str	r2, [sp, #8]
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	2302      	movs	r3, #2
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	460a      	mov	r2, r1
 8005068:	4911      	ldr	r1, [pc, #68]	; (80050b0 <xTimerCreateTimerTask+0x88>)
 800506a:	4812      	ldr	r0, [pc, #72]	; (80050b4 <xTimerCreateTimerTask+0x8c>)
 800506c:	f7ff f8ba 	bl	80041e4 <xTaskCreateStatic>
 8005070:	4603      	mov	r3, r0
 8005072:	4a11      	ldr	r2, [pc, #68]	; (80050b8 <xTimerCreateTimerTask+0x90>)
 8005074:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <xTimerCreateTimerTask+0x90>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800507e:	2301      	movs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10c      	bne.n	80050a2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	b672      	cpsid	i
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	b662      	cpsie	i
 800509c:	613b      	str	r3, [r7, #16]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80050a2:	697b      	ldr	r3, [r7, #20]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20001000 	.word	0x20001000
 80050b0:	0800626c 	.word	0x0800626c
 80050b4:	080051f9 	.word	0x080051f9
 80050b8:	20001004 	.word	0x20001004

080050bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10c      	bne.n	80050ee <xTimerGenericCommand+0x32>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	b672      	cpsid	i
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	b662      	cpsie	i
 80050e8:	623b      	str	r3, [r7, #32]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050ee:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <xTimerGenericCommand+0x9c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d02a      	beq.n	800514c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b05      	cmp	r3, #5
 8005106:	dc18      	bgt.n	800513a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005108:	f7ff feaa 	bl	8004e60 <xTaskGetSchedulerState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b02      	cmp	r3, #2
 8005110:	d109      	bne.n	8005126 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <xTimerGenericCommand+0x9c>)
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	f107 0110 	add.w	r1, r7, #16
 800511a:	2300      	movs	r3, #0
 800511c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511e:	f7fe fc67 	bl	80039f0 <xQueueGenericSend>
 8005122:	6278      	str	r0, [r7, #36]	; 0x24
 8005124:	e012      	b.n	800514c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <xTimerGenericCommand+0x9c>)
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	f107 0110 	add.w	r1, r7, #16
 800512e:	2300      	movs	r3, #0
 8005130:	2200      	movs	r2, #0
 8005132:	f7fe fc5d 	bl	80039f0 <xQueueGenericSend>
 8005136:	6278      	str	r0, [r7, #36]	; 0x24
 8005138:	e008      	b.n	800514c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800513a:	4b07      	ldr	r3, [pc, #28]	; (8005158 <xTimerGenericCommand+0x9c>)
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	f107 0110 	add.w	r1, r7, #16
 8005142:	2300      	movs	r3, #0
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	f7fe fd59 	bl	8003bfc <xQueueGenericSendFromISR>
 800514a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800514e:	4618      	mov	r0, r3
 8005150:	3728      	adds	r7, #40	; 0x28
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20001000 	.word	0x20001000

0800515c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af02      	add	r7, sp, #8
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005166:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <prvProcessExpiredTimer+0x98>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe fb01 	bl	800377c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d024      	beq.n	80051d2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	18d1      	adds	r1, r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	6978      	ldr	r0, [r7, #20]
 8005196:	f000 f8d3 	bl	8005340 <prvInsertTimerInActiveList>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d021      	beq.n	80051e4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051a0:	2300      	movs	r3, #0
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	2100      	movs	r1, #0
 80051aa:	6978      	ldr	r0, [r7, #20]
 80051ac:	f7ff ff86 	bl	80050bc <xTimerGenericCommand>
 80051b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d115      	bne.n	80051e4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	b672      	cpsid	i
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	b662      	cpsie	i
 80051cc:	60fb      	str	r3, [r7, #12]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	6978      	ldr	r0, [r7, #20]
 80051ea:	4798      	blx	r3
}
 80051ec:	bf00      	nop
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20000ff8 	.word	0x20000ff8

080051f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f857 	bl	80052b8 <prvGetNextExpireTime>
 800520a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4619      	mov	r1, r3
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f803 	bl	800521c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005216:	f000 f8d5 	bl	80053c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800521a:	e7f1      	b.n	8005200 <prvTimerTask+0x8>

0800521c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005226:	f7ff fa27 	bl	8004678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f866 	bl	8005300 <prvSampleTimeNow>
 8005234:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d130      	bne.n	800529e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <prvProcessTimerOrBlockTask+0x3c>
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	429a      	cmp	r2, r3
 8005248:	d806      	bhi.n	8005258 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800524a:	f7ff fa23 	bl	8004694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ff83 	bl	800515c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005256:	e024      	b.n	80052a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <prvProcessTimerOrBlockTask+0x90>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <prvProcessTimerOrBlockTask+0x50>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <prvProcessTimerOrBlockTask+0x52>
 800526c:	2300      	movs	r3, #0
 800526e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <prvProcessTimerOrBlockTask+0x94>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4619      	mov	r1, r3
 800527e:	f7fe ff7d 	bl	800417c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005282:	f7ff fa07 	bl	8004694 <xTaskResumeAll>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <prvProcessTimerOrBlockTask+0x98>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	f3bf 8f6f 	isb	sy
}
 800529c:	e001      	b.n	80052a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800529e:	f7ff f9f9 	bl	8004694 <xTaskResumeAll>
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000ffc 	.word	0x20000ffc
 80052b0:	20001000 	.word	0x20001000
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <prvGetNextExpireTime+0x44>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <prvGetNextExpireTime+0x16>
 80052ca:	2201      	movs	r2, #1
 80052cc:	e000      	b.n	80052d0 <prvGetNextExpireTime+0x18>
 80052ce:	2200      	movs	r2, #0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <prvGetNextExpireTime+0x44>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e001      	b.n	80052ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20000ff8 	.word	0x20000ff8

08005300 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005308:	f7ff fa64 	bl	80047d4 <xTaskGetTickCount>
 800530c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800530e:	4b0b      	ldr	r3, [pc, #44]	; (800533c <prvSampleTimeNow+0x3c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	429a      	cmp	r2, r3
 8005316:	d205      	bcs.n	8005324 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005318:	f000 f93c 	bl	8005594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e002      	b.n	800532a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800532a:	4a04      	ldr	r2, [pc, #16]	; (800533c <prvSampleTimeNow+0x3c>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20001008 	.word	0x20001008

08005340 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d812      	bhi.n	800538c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	1ad2      	subs	r2, r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	429a      	cmp	r2, r3
 8005372:	d302      	bcc.n	800537a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e01b      	b.n	80053b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <prvInsertTimerInActiveList+0x7c>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f7fe f9c0 	bl	800370a <vListInsert>
 800538a:	e012      	b.n	80053b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d206      	bcs.n	80053a2 <prvInsertTimerInActiveList+0x62>
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d302      	bcc.n	80053a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800539c:	2301      	movs	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e007      	b.n	80053b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <prvInsertTimerInActiveList+0x80>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7fe f9ac 	bl	800370a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053b2:	697b      	ldr	r3, [r7, #20]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000ffc 	.word	0x20000ffc
 80053c0:	20000ff8 	.word	0x20000ff8

080053c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08e      	sub	sp, #56	; 0x38
 80053c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ca:	e0d0      	b.n	800556e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da1a      	bge.n	8005408 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	3304      	adds	r3, #4
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10c      	bne.n	80053f8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	b672      	cpsid	i
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	b662      	cpsie	i
 80053f2:	61fb      	str	r3, [r7, #28]
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fe:	6850      	ldr	r0, [r2, #4]
 8005400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005402:	6892      	ldr	r2, [r2, #8]
 8005404:	4611      	mov	r1, r2
 8005406:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f2c0 80af 	blt.w	800556e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	3304      	adds	r3, #4
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe f9ab 	bl	800377c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005426:	463b      	mov	r3, r7
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff69 	bl	8005300 <prvSampleTimeNow>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b09      	cmp	r3, #9
 8005434:	f200 809a 	bhi.w	800556c <prvProcessReceivedCommands+0x1a8>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <prvProcessReceivedCommands+0x7c>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005469 	.word	0x08005469
 8005444:	08005469 	.word	0x08005469
 8005448:	08005469 	.word	0x08005469
 800544c:	080054e1 	.word	0x080054e1
 8005450:	080054f5 	.word	0x080054f5
 8005454:	08005543 	.word	0x08005543
 8005458:	08005469 	.word	0x08005469
 800545c:	08005469 	.word	0x08005469
 8005460:	080054e1 	.word	0x080054e1
 8005464:	080054f5 	.word	0x080054f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	b2da      	uxtb	r2, r3
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	18d1      	adds	r1, r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005488:	f7ff ff5a 	bl	8005340 <prvInsertTimerInActiveList>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d06d      	beq.n	800556e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005498:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d062      	beq.n	800556e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	441a      	add	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	2100      	movs	r1, #0
 80054b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ba:	f7ff fdff 	bl	80050bc <xTimerGenericCommand>
 80054be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d153      	bne.n	800556e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	b672      	cpsid	i
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	b662      	cpsie	i
 80054da:	61bb      	str	r3, [r7, #24]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054f2:	e03c      	b.n	800556e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10c      	bne.n	800552e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	b672      	cpsid	i
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	b662      	cpsie	i
 8005528:	617b      	str	r3, [r7, #20]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	18d1      	adds	r1, r2, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553c:	f7ff ff00 	bl	8005340 <prvInsertTimerInActiveList>
					break;
 8005540:	e015      	b.n	800556e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d103      	bne.n	8005558 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8005550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005552:	f000 fbc9 	bl	8005ce8 <vPortFree>
 8005556:	e00a      	b.n	800556e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800556a:	e000      	b.n	800556e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800556c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <prvProcessReceivedCommands+0x1cc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1d39      	adds	r1, r7, #4
 8005574:	2200      	movs	r2, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fbe0 	bl	8003d3c <xQueueReceive>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	f47f af24 	bne.w	80053cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3730      	adds	r7, #48	; 0x30
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20001000 	.word	0x20001000

08005594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800559a:	e04a      	b.n	8005632 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800559c:	4b2e      	ldr	r3, [pc, #184]	; (8005658 <prvSwitchTimerLists+0xc4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a6:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <prvSwitchTimerLists+0xc4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe f8e1 	bl	800377c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d030      	beq.n	8005632 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4413      	add	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d90e      	bls.n	8005600 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ee:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <prvSwitchTimerLists+0xc4>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fe f886 	bl	800370a <vListInsert>
 80055fe:	e018      	b.n	8005632 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005600:	2300      	movs	r3, #0
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	2100      	movs	r1, #0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff fd56 	bl	80050bc <xTimerGenericCommand>
 8005610:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10c      	bne.n	8005632 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	b672      	cpsid	i
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	b662      	cpsie	i
 800562c:	603b      	str	r3, [r7, #0]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <prvSwitchTimerLists+0xc4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1af      	bne.n	800559c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <prvSwitchTimerLists+0xc4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <prvSwitchTimerLists+0xc8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a04      	ldr	r2, [pc, #16]	; (8005658 <prvSwitchTimerLists+0xc4>)
 8005648:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800564a:	4a04      	ldr	r2, [pc, #16]	; (800565c <prvSwitchTimerLists+0xc8>)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6013      	str	r3, [r2, #0]
}
 8005650:	bf00      	nop
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000ff8 	.word	0x20000ff8
 800565c:	20000ffc 	.word	0x20000ffc

08005660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005666:	f000 f949 	bl	80058fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800566a:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <prvCheckForValidListAndQueue+0x60>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d120      	bne.n	80056b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005672:	4814      	ldr	r0, [pc, #80]	; (80056c4 <prvCheckForValidListAndQueue+0x64>)
 8005674:	f7fd fff8 	bl	8003668 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005678:	4813      	ldr	r0, [pc, #76]	; (80056c8 <prvCheckForValidListAndQueue+0x68>)
 800567a:	f7fd fff5 	bl	8003668 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <prvCheckForValidListAndQueue+0x6c>)
 8005680:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <prvCheckForValidListAndQueue+0x64>)
 8005682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <prvCheckForValidListAndQueue+0x70>)
 8005686:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <prvCheckForValidListAndQueue+0x68>)
 8005688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800568a:	2300      	movs	r3, #0
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <prvCheckForValidListAndQueue+0x74>)
 8005690:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <prvCheckForValidListAndQueue+0x78>)
 8005692:	2110      	movs	r1, #16
 8005694:	200a      	movs	r0, #10
 8005696:	f7fe f905 	bl	80038a4 <xQueueGenericCreateStatic>
 800569a:	4603      	mov	r3, r0
 800569c:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <prvCheckForValidListAndQueue+0x60>)
 800569e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <prvCheckForValidListAndQueue+0x60>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <prvCheckForValidListAndQueue+0x60>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	490b      	ldr	r1, [pc, #44]	; (80056dc <prvCheckForValidListAndQueue+0x7c>)
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fd3a 	bl	8004128 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b4:	f000 f956 	bl	8005964 <vPortExitCritical>
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20001000 	.word	0x20001000
 80056c4:	20000fd0 	.word	0x20000fd0
 80056c8:	20000fe4 	.word	0x20000fe4
 80056cc:	20000ff8 	.word	0x20000ff8
 80056d0:	20000ffc 	.word	0x20000ffc
 80056d4:	200010ac 	.word	0x200010ac
 80056d8:	2000100c 	.word	0x2000100c
 80056dc:	08006274 	.word	0x08006274

080056e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3b04      	subs	r3, #4
 80056f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3b04      	subs	r3, #4
 80056fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3b04      	subs	r3, #4
 800570e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005710:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <pxPortInitialiseStack+0x64>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3b14      	subs	r3, #20
 800571a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3b04      	subs	r3, #4
 8005726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f06f 0202 	mvn.w	r2, #2
 800572e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3b20      	subs	r3, #32
 8005734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	08005749 	.word	0x08005749

08005748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <prvTaskExitError+0x5c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d00c      	beq.n	8005776 <prvTaskExitError+0x2e>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	b672      	cpsid	i
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	b662      	cpsie	i
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <prvTaskExitError+0x2c>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	b672      	cpsid	i
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	b662      	cpsie	i
 800578a:	60bb      	str	r3, [r7, #8]
}
 800578c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800578e:	bf00      	nop
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0fc      	beq.n	8005790 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	20000218 	.word	0x20000218
	...

080057b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <pxCurrentTCBConst2>)
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	6808      	ldr	r0, [r1, #0]
 80057b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ba:	f380 8809 	msr	PSP, r0
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f380 8811 	msr	BASEPRI, r0
 80057ca:	4770      	bx	lr
 80057cc:	f3af 8000 	nop.w

080057d0 <pxCurrentTCBConst2>:
 80057d0:	20000ad0 	.word	0x20000ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop

080057d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057d8:	4808      	ldr	r0, [pc, #32]	; (80057fc <prvPortStartFirstTask+0x24>)
 80057da:	6800      	ldr	r0, [r0, #0]
 80057dc:	6800      	ldr	r0, [r0, #0]
 80057de:	f380 8808 	msr	MSP, r0
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8814 	msr	CONTROL, r0
 80057ea:	b662      	cpsie	i
 80057ec:	b661      	cpsie	f
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	df00      	svc	0
 80057f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057fa:	bf00      	nop
 80057fc:	e000ed08 	.word	0xe000ed08

08005800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005806:	4b37      	ldr	r3, [pc, #220]	; (80058e4 <xPortStartScheduler+0xe4>)
 8005808:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	22ff      	movs	r2, #255	; 0xff
 8005816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b2f      	ldr	r3, [pc, #188]	; (80058e8 <xPortStartScheduler+0xe8>)
 800582c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800582e:	4b2f      	ldr	r3, [pc, #188]	; (80058ec <xPortStartScheduler+0xec>)
 8005830:	2207      	movs	r2, #7
 8005832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005834:	e009      	b.n	800584a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005836:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <xPortStartScheduler+0xec>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	4a2b      	ldr	r2, [pc, #172]	; (80058ec <xPortStartScheduler+0xec>)
 800583e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	b2db      	uxtb	r3, r3
 8005848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b80      	cmp	r3, #128	; 0x80
 8005854:	d0ef      	beq.n	8005836 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005856:	4b25      	ldr	r3, [pc, #148]	; (80058ec <xPortStartScheduler+0xec>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f1c3 0307 	rsb	r3, r3, #7
 800585e:	2b04      	cmp	r3, #4
 8005860:	d00c      	beq.n	800587c <xPortStartScheduler+0x7c>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	b672      	cpsid	i
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	b662      	cpsie	i
 8005876:	60bb      	str	r3, [r7, #8]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800587c:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <xPortStartScheduler+0xec>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	4a1a      	ldr	r2, [pc, #104]	; (80058ec <xPortStartScheduler+0xec>)
 8005884:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005886:	4b19      	ldr	r3, [pc, #100]	; (80058ec <xPortStartScheduler+0xec>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800588e:	4a17      	ldr	r2, [pc, #92]	; (80058ec <xPortStartScheduler+0xec>)
 8005890:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	b2da      	uxtb	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <xPortStartScheduler+0xf0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a14      	ldr	r2, [pc, #80]	; (80058f0 <xPortStartScheduler+0xf0>)
 80058a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <xPortStartScheduler+0xf0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <xPortStartScheduler+0xf0>)
 80058ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058b2:	f000 f8dd 	bl	8005a70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058b6:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <xPortStartScheduler+0xf4>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058bc:	f000 f8fc 	bl	8005ab8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058c0:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <xPortStartScheduler+0xf8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <xPortStartScheduler+0xf8>)
 80058c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058cc:	f7ff ff84 	bl	80057d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058d0:	f7ff f84c 	bl	800496c <vTaskSwitchContext>
	prvTaskExitError();
 80058d4:	f7ff ff38 	bl	8005748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	e000e400 	.word	0xe000e400
 80058e8:	200010fc 	.word	0x200010fc
 80058ec:	20001100 	.word	0x20001100
 80058f0:	e000ed20 	.word	0xe000ed20
 80058f4:	20000218 	.word	0x20000218
 80058f8:	e000ef34 	.word	0xe000ef34

080058fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	b672      	cpsid	i
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	b662      	cpsie	i
 8005916:	607b      	str	r3, [r7, #4]
}
 8005918:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <vPortEnterCritical+0x60>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3301      	adds	r3, #1
 8005920:	4a0e      	ldr	r2, [pc, #56]	; (800595c <vPortEnterCritical+0x60>)
 8005922:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005924:	4b0d      	ldr	r3, [pc, #52]	; (800595c <vPortEnterCritical+0x60>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d111      	bne.n	8005950 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <vPortEnterCritical+0x64>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <vPortEnterCritical+0x54>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	b672      	cpsid	i
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	b662      	cpsie	i
 800594a:	603b      	str	r3, [r7, #0]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <vPortEnterCritical+0x52>
	}
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	20000218 	.word	0x20000218
 8005960:	e000ed04 	.word	0xe000ed04

08005964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <vPortExitCritical+0x54>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10c      	bne.n	800598c <vPortExitCritical+0x28>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	b672      	cpsid	i
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	b662      	cpsie	i
 8005986:	607b      	str	r3, [r7, #4]
}
 8005988:	bf00      	nop
 800598a:	e7fe      	b.n	800598a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <vPortExitCritical+0x54>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3b01      	subs	r3, #1
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <vPortExitCritical+0x54>)
 8005994:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005996:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <vPortExitCritical+0x54>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <vPortExitCritical+0x46>
 800599e:	2300      	movs	r3, #0
 80059a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f383 8811 	msr	BASEPRI, r3
}
 80059a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000218 	.word	0x20000218
 80059bc:	00000000 	.word	0x00000000

080059c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059c0:	f3ef 8009 	mrs	r0, PSP
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <pxCurrentTCBConst>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f01e 0f10 	tst.w	lr, #16
 80059d0:	bf08      	it	eq
 80059d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	6010      	str	r0, [r2, #0]
 80059dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059e4:	b672      	cpsid	i
 80059e6:	f380 8811 	msr	BASEPRI, r0
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	b662      	cpsie	i
 80059f4:	f7fe ffba 	bl	800496c <vTaskSwitchContext>
 80059f8:	f04f 0000 	mov.w	r0, #0
 80059fc:	f380 8811 	msr	BASEPRI, r0
 8005a00:	bc09      	pop	{r0, r3}
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	6808      	ldr	r0, [r1, #0]
 8005a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	f01e 0f10 	tst.w	lr, #16
 8005a0e:	bf08      	it	eq
 8005a10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a14:	f380 8809 	msr	PSP, r0
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop

08005a20 <pxCurrentTCBConst>:
 8005a20:	20000ad0 	.word	0x20000ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	b672      	cpsid	i
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	b662      	cpsie	i
 8005a42:	607b      	str	r3, [r7, #4]
}
 8005a44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a46:	f7fe fed5 	bl	80047f4 <xTaskIncrementTick>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <xPortSysTickHandler+0x44>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	f383 8811 	msr	BASEPRI, r3
}
 8005a62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	e000ed04 	.word	0xe000ed04

08005a70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <vPortSetupTimerInterrupt+0x34>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <vPortSetupTimerInterrupt+0x38>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <vPortSetupTimerInterrupt+0x3c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <vPortSetupTimerInterrupt+0x40>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <vPortSetupTimerInterrupt+0x44>)
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <vPortSetupTimerInterrupt+0x34>)
 8005a94:	2207      	movs	r2, #7
 8005a96:	601a      	str	r2, [r3, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	e000e010 	.word	0xe000e010
 8005aa8:	e000e018 	.word	0xe000e018
 8005aac:	2000020c 	.word	0x2000020c
 8005ab0:	10624dd3 	.word	0x10624dd3
 8005ab4:	e000e014 	.word	0xe000e014

08005ab8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ab8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ac8 <vPortEnableVFP+0x10>
 8005abc:	6801      	ldr	r1, [r0, #0]
 8005abe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ac2:	6001      	str	r1, [r0, #0]
 8005ac4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ac6:	bf00      	nop
 8005ac8:	e000ed88 	.word	0xe000ed88

08005acc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ad2:	f3ef 8305 	mrs	r3, IPSR
 8005ad6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b0f      	cmp	r3, #15
 8005adc:	d916      	bls.n	8005b0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ade:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <vPortValidateInterruptPriority+0x78>)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ae8:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <vPortValidateInterruptPriority+0x7c>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	7afa      	ldrb	r2, [r7, #11]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d20c      	bcs.n	8005b0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	b672      	cpsid	i
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	b662      	cpsie	i
 8005b06:	607b      	str	r3, [r7, #4]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <vPortValidateInterruptPriority+0x80>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b14:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <vPortValidateInterruptPriority+0x84>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d90c      	bls.n	8005b36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	b672      	cpsid	i
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	b662      	cpsie	i
 8005b30:	603b      	str	r3, [r7, #0]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <vPortValidateInterruptPriority+0x68>
	}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	e000e3f0 	.word	0xe000e3f0
 8005b48:	200010fc 	.word	0x200010fc
 8005b4c:	e000ed0c 	.word	0xe000ed0c
 8005b50:	20001100 	.word	0x20001100

08005b54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b60:	f7fe fd8a 	bl	8004678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b64:	4b5b      	ldr	r3, [pc, #364]	; (8005cd4 <pvPortMalloc+0x180>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b6c:	f000 f91a 	bl	8005da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b70:	4b59      	ldr	r3, [pc, #356]	; (8005cd8 <pvPortMalloc+0x184>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 8092 	bne.w	8005ca2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01f      	beq.n	8005bc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005b84:	2208      	movs	r2, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f023 0307 	bic.w	r3, r3, #7
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <pvPortMalloc+0x70>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	b672      	cpsid	i
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	b662      	cpsie	i
 8005bbe:	617b      	str	r3, [r7, #20]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d06b      	beq.n	8005ca2 <pvPortMalloc+0x14e>
 8005bca:	4b44      	ldr	r3, [pc, #272]	; (8005cdc <pvPortMalloc+0x188>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d866      	bhi.n	8005ca2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bd4:	4b42      	ldr	r3, [pc, #264]	; (8005ce0 <pvPortMalloc+0x18c>)
 8005bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bd8:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <pvPortMalloc+0x18c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bde:	e004      	b.n	8005bea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d903      	bls.n	8005bfc <pvPortMalloc+0xa8>
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1f1      	bne.n	8005be0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bfc:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <pvPortMalloc+0x180>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d04d      	beq.n	8005ca2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	4413      	add	r3, r2
 8005c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	1ad2      	subs	r2, r2, r3
 8005c20:	2308      	movs	r3, #8
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d921      	bls.n	8005c6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00c      	beq.n	8005c54 <pvPortMalloc+0x100>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	b672      	cpsid	i
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	b662      	cpsie	i
 8005c4e:	613b      	str	r3, [r7, #16]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	1ad2      	subs	r2, r2, r3
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c66:	69b8      	ldr	r0, [r7, #24]
 8005c68:	f000 f8fe 	bl	8005e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <pvPortMalloc+0x188>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <pvPortMalloc+0x188>)
 8005c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c7a:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <pvPortMalloc+0x188>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <pvPortMalloc+0x190>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d203      	bcs.n	8005c8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c86:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <pvPortMalloc+0x188>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <pvPortMalloc+0x190>)
 8005c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <pvPortMalloc+0x184>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ca2:	f7fe fcf7 	bl	8004694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <pvPortMalloc+0x176>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	b672      	cpsid	i
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	b662      	cpsie	i
 8005cc4:	60fb      	str	r3, [r7, #12]
}
 8005cc6:	bf00      	nop
 8005cc8:	e7fe      	b.n	8005cc8 <pvPortMalloc+0x174>
	return pvReturn;
 8005cca:	69fb      	ldr	r3, [r7, #28]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3728      	adds	r7, #40	; 0x28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20004d0c 	.word	0x20004d0c
 8005cd8:	20004d18 	.word	0x20004d18
 8005cdc:	20004d10 	.word	0x20004d10
 8005ce0:	20004d04 	.word	0x20004d04
 8005ce4:	20004d14 	.word	0x20004d14

08005ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04c      	beq.n	8005d94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	425b      	negs	r3, r3
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <vPortFree+0xb4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10c      	bne.n	8005d30 <vPortFree+0x48>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	b672      	cpsid	i
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	b662      	cpsie	i
 8005d2a:	60fb      	str	r3, [r7, #12]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00c      	beq.n	8005d52 <vPortFree+0x6a>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	b672      	cpsid	i
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	b662      	cpsie	i
 8005d4c:	60bb      	str	r3, [r7, #8]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <vPortFree+0xb4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d019      	beq.n	8005d94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d115      	bne.n	8005d94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <vPortFree+0xb4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	401a      	ands	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d78:	f7fe fc7e 	bl	8004678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <vPortFree+0xb8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	4a06      	ldr	r2, [pc, #24]	; (8005da0 <vPortFree+0xb8>)
 8005d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d8a:	6938      	ldr	r0, [r7, #16]
 8005d8c:	f000 f86c 	bl	8005e68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d90:	f7fe fc80 	bl	8004694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d94:	bf00      	nop
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20004d18 	.word	0x20004d18
 8005da0:	20004d10 	.word	0x20004d10

08005da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005daa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005db0:	4b27      	ldr	r3, [pc, #156]	; (8005e50 <prvHeapInit+0xac>)
 8005db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3307      	adds	r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0307 	bic.w	r3, r3, #7
 8005dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <prvHeapInit+0xac>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <prvHeapInit+0xb0>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005de2:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <prvHeapInit+0xb0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4413      	add	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005df0:	2208      	movs	r2, #8
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <prvHeapInit+0xb4>)
 8005e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <prvHeapInit+0xb4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e0e:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <prvHeapInit+0xb4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	1ad2      	subs	r2, r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <prvHeapInit+0xb4>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <prvHeapInit+0xb8>)
 8005e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <prvHeapInit+0xbc>)
 8005e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <prvHeapInit+0xc0>)
 8005e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e42:	601a      	str	r2, [r3, #0]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	20001104 	.word	0x20001104
 8005e54:	20004d04 	.word	0x20004d04
 8005e58:	20004d0c 	.word	0x20004d0c
 8005e5c:	20004d14 	.word	0x20004d14
 8005e60:	20004d10 	.word	0x20004d10
 8005e64:	20004d18 	.word	0x20004d18

08005e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e70:	4b28      	ldr	r3, [pc, #160]	; (8005f14 <prvInsertBlockIntoFreeList+0xac>)
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e002      	b.n	8005e7c <prvInsertBlockIntoFreeList+0x14>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d8f7      	bhi.n	8005e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4413      	add	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d108      	bne.n	8005eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d118      	bne.n	8005ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d00d      	beq.n	8005ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	441a      	add	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e008      	b.n	8005ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e003      	b.n	8005ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d002      	beq.n	8005f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20004d04 	.word	0x20004d04
 8005f18:	20004d0c 	.word	0x20004d0c

08005f1c <malloc>:
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <malloc+0xc>)
 8005f1e:	4601      	mov	r1, r0
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	f000 b82b 	b.w	8005f7c <_malloc_r>
 8005f26:	bf00      	nop
 8005f28:	20000268 	.word	0x20000268

08005f2c <free>:
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <free+0xc>)
 8005f2e:	4601      	mov	r1, r0
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f000 b901 	b.w	8006138 <_free_r>
 8005f36:	bf00      	nop
 8005f38:	20000268 	.word	0x20000268

08005f3c <sbrk_aligned>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4e0e      	ldr	r6, [pc, #56]	; (8005f78 <sbrk_aligned+0x3c>)
 8005f40:	460c      	mov	r4, r1
 8005f42:	6831      	ldr	r1, [r6, #0]
 8005f44:	4605      	mov	r5, r0
 8005f46:	b911      	cbnz	r1, 8005f4e <sbrk_aligned+0x12>
 8005f48:	f000 f8ac 	bl	80060a4 <_sbrk_r>
 8005f4c:	6030      	str	r0, [r6, #0]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 f8a7 	bl	80060a4 <_sbrk_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d00a      	beq.n	8005f70 <sbrk_aligned+0x34>
 8005f5a:	1cc4      	adds	r4, r0, #3
 8005f5c:	f024 0403 	bic.w	r4, r4, #3
 8005f60:	42a0      	cmp	r0, r4
 8005f62:	d007      	beq.n	8005f74 <sbrk_aligned+0x38>
 8005f64:	1a21      	subs	r1, r4, r0
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 f89c 	bl	80060a4 <_sbrk_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d101      	bne.n	8005f74 <sbrk_aligned+0x38>
 8005f70:	f04f 34ff 	mov.w	r4, #4294967295
 8005f74:	4620      	mov	r0, r4
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	20004d20 	.word	0x20004d20

08005f7c <_malloc_r>:
 8005f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f80:	1ccd      	adds	r5, r1, #3
 8005f82:	f025 0503 	bic.w	r5, r5, #3
 8005f86:	3508      	adds	r5, #8
 8005f88:	2d0c      	cmp	r5, #12
 8005f8a:	bf38      	it	cc
 8005f8c:	250c      	movcc	r5, #12
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	4607      	mov	r7, r0
 8005f92:	db01      	blt.n	8005f98 <_malloc_r+0x1c>
 8005f94:	42a9      	cmp	r1, r5
 8005f96:	d905      	bls.n	8005fa4 <_malloc_r+0x28>
 8005f98:	230c      	movs	r3, #12
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006078 <_malloc_r+0xfc>
 8005fa8:	f000 f868 	bl	800607c <__malloc_lock>
 8005fac:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb0:	461c      	mov	r4, r3
 8005fb2:	bb5c      	cbnz	r4, 800600c <_malloc_r+0x90>
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f7ff ffc0 	bl	8005f3c <sbrk_aligned>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	d155      	bne.n	800606e <_malloc_r+0xf2>
 8005fc2:	f8d8 4000 	ldr.w	r4, [r8]
 8005fc6:	4626      	mov	r6, r4
 8005fc8:	2e00      	cmp	r6, #0
 8005fca:	d145      	bne.n	8006058 <_malloc_r+0xdc>
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	d048      	beq.n	8006062 <_malloc_r+0xe6>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	eb04 0903 	add.w	r9, r4, r3
 8005fda:	f000 f863 	bl	80060a4 <_sbrk_r>
 8005fde:	4581      	cmp	r9, r0
 8005fe0:	d13f      	bne.n	8006062 <_malloc_r+0xe6>
 8005fe2:	6821      	ldr	r1, [r4, #0]
 8005fe4:	1a6d      	subs	r5, r5, r1
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7ff ffa7 	bl	8005f3c <sbrk_aligned>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d037      	beq.n	8006062 <_malloc_r+0xe6>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	442b      	add	r3, r5
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d038      	beq.n	8006072 <_malloc_r+0xf6>
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	42a2      	cmp	r2, r4
 8006004:	d12b      	bne.n	800605e <_malloc_r+0xe2>
 8006006:	2200      	movs	r2, #0
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	e00f      	b.n	800602c <_malloc_r+0xb0>
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	1b52      	subs	r2, r2, r5
 8006010:	d41f      	bmi.n	8006052 <_malloc_r+0xd6>
 8006012:	2a0b      	cmp	r2, #11
 8006014:	d917      	bls.n	8006046 <_malloc_r+0xca>
 8006016:	1961      	adds	r1, r4, r5
 8006018:	42a3      	cmp	r3, r4
 800601a:	6025      	str	r5, [r4, #0]
 800601c:	bf18      	it	ne
 800601e:	6059      	strne	r1, [r3, #4]
 8006020:	6863      	ldr	r3, [r4, #4]
 8006022:	bf08      	it	eq
 8006024:	f8c8 1000 	streq.w	r1, [r8]
 8006028:	5162      	str	r2, [r4, r5]
 800602a:	604b      	str	r3, [r1, #4]
 800602c:	4638      	mov	r0, r7
 800602e:	f104 060b 	add.w	r6, r4, #11
 8006032:	f000 f829 	bl	8006088 <__malloc_unlock>
 8006036:	f026 0607 	bic.w	r6, r6, #7
 800603a:	1d23      	adds	r3, r4, #4
 800603c:	1af2      	subs	r2, r6, r3
 800603e:	d0ae      	beq.n	8005f9e <_malloc_r+0x22>
 8006040:	1b9b      	subs	r3, r3, r6
 8006042:	50a3      	str	r3, [r4, r2]
 8006044:	e7ab      	b.n	8005f9e <_malloc_r+0x22>
 8006046:	42a3      	cmp	r3, r4
 8006048:	6862      	ldr	r2, [r4, #4]
 800604a:	d1dd      	bne.n	8006008 <_malloc_r+0x8c>
 800604c:	f8c8 2000 	str.w	r2, [r8]
 8006050:	e7ec      	b.n	800602c <_malloc_r+0xb0>
 8006052:	4623      	mov	r3, r4
 8006054:	6864      	ldr	r4, [r4, #4]
 8006056:	e7ac      	b.n	8005fb2 <_malloc_r+0x36>
 8006058:	4634      	mov	r4, r6
 800605a:	6876      	ldr	r6, [r6, #4]
 800605c:	e7b4      	b.n	8005fc8 <_malloc_r+0x4c>
 800605e:	4613      	mov	r3, r2
 8006060:	e7cc      	b.n	8005ffc <_malloc_r+0x80>
 8006062:	230c      	movs	r3, #12
 8006064:	603b      	str	r3, [r7, #0]
 8006066:	4638      	mov	r0, r7
 8006068:	f000 f80e 	bl	8006088 <__malloc_unlock>
 800606c:	e797      	b.n	8005f9e <_malloc_r+0x22>
 800606e:	6025      	str	r5, [r4, #0]
 8006070:	e7dc      	b.n	800602c <_malloc_r+0xb0>
 8006072:	605b      	str	r3, [r3, #4]
 8006074:	deff      	udf	#255	; 0xff
 8006076:	bf00      	nop
 8006078:	20004d1c 	.word	0x20004d1c

0800607c <__malloc_lock>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__malloc_lock+0x8>)
 800607e:	f000 b84b 	b.w	8006118 <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	20004e60 	.word	0x20004e60

08006088 <__malloc_unlock>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__malloc_unlock+0x8>)
 800608a:	f000 b846 	b.w	800611a <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	20004e60 	.word	0x20004e60

08006094 <memset>:
 8006094:	4402      	add	r2, r0
 8006096:	4603      	mov	r3, r0
 8006098:	4293      	cmp	r3, r2
 800609a:	d100      	bne.n	800609e <memset+0xa>
 800609c:	4770      	bx	lr
 800609e:	f803 1b01 	strb.w	r1, [r3], #1
 80060a2:	e7f9      	b.n	8006098 <memset+0x4>

080060a4 <_sbrk_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d06      	ldr	r5, [pc, #24]	; (80060c0 <_sbrk_r+0x1c>)
 80060a8:	2300      	movs	r3, #0
 80060aa:	4604      	mov	r4, r0
 80060ac:	4608      	mov	r0, r1
 80060ae:	602b      	str	r3, [r5, #0]
 80060b0:	f7fb f9fe 	bl	80014b0 <_sbrk>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	d102      	bne.n	80060be <_sbrk_r+0x1a>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	b103      	cbz	r3, 80060be <_sbrk_r+0x1a>
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	20004e5c 	.word	0x20004e5c

080060c4 <__errno>:
 80060c4:	4b01      	ldr	r3, [pc, #4]	; (80060cc <__errno+0x8>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	20000268 	.word	0x20000268

080060d0 <__libc_init_array>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	4d0d      	ldr	r5, [pc, #52]	; (8006108 <__libc_init_array+0x38>)
 80060d4:	4c0d      	ldr	r4, [pc, #52]	; (800610c <__libc_init_array+0x3c>)
 80060d6:	1b64      	subs	r4, r4, r5
 80060d8:	10a4      	asrs	r4, r4, #2
 80060da:	2600      	movs	r6, #0
 80060dc:	42a6      	cmp	r6, r4
 80060de:	d109      	bne.n	80060f4 <__libc_init_array+0x24>
 80060e0:	4d0b      	ldr	r5, [pc, #44]	; (8006110 <__libc_init_array+0x40>)
 80060e2:	4c0c      	ldr	r4, [pc, #48]	; (8006114 <__libc_init_array+0x44>)
 80060e4:	f000 f874 	bl	80061d0 <_init>
 80060e8:	1b64      	subs	r4, r4, r5
 80060ea:	10a4      	asrs	r4, r4, #2
 80060ec:	2600      	movs	r6, #0
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	d105      	bne.n	80060fe <__libc_init_array+0x2e>
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f8:	4798      	blx	r3
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7ee      	b.n	80060dc <__libc_init_array+0xc>
 80060fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006102:	4798      	blx	r3
 8006104:	3601      	adds	r6, #1
 8006106:	e7f2      	b.n	80060ee <__libc_init_array+0x1e>
 8006108:	080063b4 	.word	0x080063b4
 800610c:	080063b4 	.word	0x080063b4
 8006110:	080063b4 	.word	0x080063b4
 8006114:	080063b8 	.word	0x080063b8

08006118 <__retarget_lock_acquire_recursive>:
 8006118:	4770      	bx	lr

0800611a <__retarget_lock_release_recursive>:
 800611a:	4770      	bx	lr

0800611c <memcpy>:
 800611c:	440a      	add	r2, r1
 800611e:	4291      	cmp	r1, r2
 8006120:	f100 33ff 	add.w	r3, r0, #4294967295
 8006124:	d100      	bne.n	8006128 <memcpy+0xc>
 8006126:	4770      	bx	lr
 8006128:	b510      	push	{r4, lr}
 800612a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800612e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006132:	4291      	cmp	r1, r2
 8006134:	d1f9      	bne.n	800612a <memcpy+0xe>
 8006136:	bd10      	pop	{r4, pc}

08006138 <_free_r>:
 8006138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800613a:	2900      	cmp	r1, #0
 800613c:	d044      	beq.n	80061c8 <_free_r+0x90>
 800613e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006142:	9001      	str	r0, [sp, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f1a1 0404 	sub.w	r4, r1, #4
 800614a:	bfb8      	it	lt
 800614c:	18e4      	addlt	r4, r4, r3
 800614e:	f7ff ff95 	bl	800607c <__malloc_lock>
 8006152:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <_free_r+0x94>)
 8006154:	9801      	ldr	r0, [sp, #4]
 8006156:	6813      	ldr	r3, [r2, #0]
 8006158:	b933      	cbnz	r3, 8006168 <_free_r+0x30>
 800615a:	6063      	str	r3, [r4, #4]
 800615c:	6014      	str	r4, [r2, #0]
 800615e:	b003      	add	sp, #12
 8006160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006164:	f7ff bf90 	b.w	8006088 <__malloc_unlock>
 8006168:	42a3      	cmp	r3, r4
 800616a:	d908      	bls.n	800617e <_free_r+0x46>
 800616c:	6825      	ldr	r5, [r4, #0]
 800616e:	1961      	adds	r1, r4, r5
 8006170:	428b      	cmp	r3, r1
 8006172:	bf01      	itttt	eq
 8006174:	6819      	ldreq	r1, [r3, #0]
 8006176:	685b      	ldreq	r3, [r3, #4]
 8006178:	1949      	addeq	r1, r1, r5
 800617a:	6021      	streq	r1, [r4, #0]
 800617c:	e7ed      	b.n	800615a <_free_r+0x22>
 800617e:	461a      	mov	r2, r3
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	b10b      	cbz	r3, 8006188 <_free_r+0x50>
 8006184:	42a3      	cmp	r3, r4
 8006186:	d9fa      	bls.n	800617e <_free_r+0x46>
 8006188:	6811      	ldr	r1, [r2, #0]
 800618a:	1855      	adds	r5, r2, r1
 800618c:	42a5      	cmp	r5, r4
 800618e:	d10b      	bne.n	80061a8 <_free_r+0x70>
 8006190:	6824      	ldr	r4, [r4, #0]
 8006192:	4421      	add	r1, r4
 8006194:	1854      	adds	r4, r2, r1
 8006196:	42a3      	cmp	r3, r4
 8006198:	6011      	str	r1, [r2, #0]
 800619a:	d1e0      	bne.n	800615e <_free_r+0x26>
 800619c:	681c      	ldr	r4, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	6053      	str	r3, [r2, #4]
 80061a2:	440c      	add	r4, r1
 80061a4:	6014      	str	r4, [r2, #0]
 80061a6:	e7da      	b.n	800615e <_free_r+0x26>
 80061a8:	d902      	bls.n	80061b0 <_free_r+0x78>
 80061aa:	230c      	movs	r3, #12
 80061ac:	6003      	str	r3, [r0, #0]
 80061ae:	e7d6      	b.n	800615e <_free_r+0x26>
 80061b0:	6825      	ldr	r5, [r4, #0]
 80061b2:	1961      	adds	r1, r4, r5
 80061b4:	428b      	cmp	r3, r1
 80061b6:	bf04      	itt	eq
 80061b8:	6819      	ldreq	r1, [r3, #0]
 80061ba:	685b      	ldreq	r3, [r3, #4]
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	bf04      	itt	eq
 80061c0:	1949      	addeq	r1, r1, r5
 80061c2:	6021      	streq	r1, [r4, #0]
 80061c4:	6054      	str	r4, [r2, #4]
 80061c6:	e7ca      	b.n	800615e <_free_r+0x26>
 80061c8:	b003      	add	sp, #12
 80061ca:	bd30      	pop	{r4, r5, pc}
 80061cc:	20004d1c 	.word	0x20004d1c

080061d0 <_init>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	bf00      	nop
 80061d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d6:	bc08      	pop	{r3}
 80061d8:	469e      	mov	lr, r3
 80061da:	4770      	bx	lr

080061dc <_fini>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr
