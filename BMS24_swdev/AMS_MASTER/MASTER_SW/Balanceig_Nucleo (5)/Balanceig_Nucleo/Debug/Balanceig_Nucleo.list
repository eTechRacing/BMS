
Balanceig_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000531c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005508  08005508  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  08005508  08005508  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005508  08005508  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08005510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  2000026c  0800577c  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  0800577c  000209c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013844  00000000  00000000  000202df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d34  00000000  00000000  00033b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00036858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e78  00000000  00000000  00037b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a846  00000000  00000000  00038998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d2e  00000000  00000000  000631de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010216a  00000000  00000000  00078f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000531c  00000000  00000000  0017b078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00180394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000026c 	.word	0x2000026c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080054b0 	.word	0x080054b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000270 	.word	0x20000270
 80001e8:	080054b0 	.word	0x080054b0

080001ec <Balancing>:
		uint16_t VCELL_MIN, 									// Variable of the less charged cell
		uint16_t *VOLTAGES,										// Array of the read voltages
		uint16_t V_BALANCING,									// Constant of the limit voltage to start balancing, it has no other conditions for balancing
		uint8_t DIFF_MAX,										// Constant of the Maximum difference between the evaluated voltage and the minimum voltage
		uint8_t TOTAL_IC)										// Constant of the number of ICs that are being used
		{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60ba      	str	r2, [r7, #8]
 80001f4:	461a      	mov	r2, r3
 80001f6:	4603      	mov	r3, r0
 80001f8:	81fb      	strh	r3, [r7, #14]
 80001fa:	460b      	mov	r3, r1
 80001fc:	81bb      	strh	r3, [r7, #12]
 80001fe:	4613      	mov	r3, r2
 8000200:	80fb      	strh	r3, [r7, #6]
			int *DCC;											// Declaration of the DCC array
			DCC = malloc(sizeof(int *) * TOTAL_IC);				// Definition of the DCC array with a TOTAL_IC length
 8000202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	4618      	mov	r0, r3
 800020a:	f004 fff7 	bl	80051fc <malloc>
 800020e:	4603      	mov	r3, r0
 8000210:	613b      	str	r3, [r7, #16]
			for(int j = 0; TOTAL_IC; j++)						// Loops for each voltage in the evaluated IC
 8000212:	2300      	movs	r3, #0
 8000214:	61fb      	str	r3, [r7, #28]
 8000216:	e039      	b.n	800028c <Balancing+0xa0>
			{
				uint16_t BALANCING = 0b00000000000000;			// Variable 0 or 1 that sets if the evaluated cell should (1) or not (0) start balancing, has a 16 bits dimension
 8000218:	2300      	movs	r3, #0
 800021a:	837b      	strh	r3, [r7, #26]
				for(int i = 0; i < 12; i++)						// A for function that evaluates each cell of the IC
 800021c:	2300      	movs	r3, #0
 800021e:	617b      	str	r3, [r7, #20]
 8000220:	e028      	b.n	8000274 <Balancing+0x88>
				{
					if(VOLTAGES[i]>V_MIN && (VOLTAGES[i] > V_BALANCING || (VOLTAGES[i]-VCELL_MIN)>DIFF_MAX))	//If the evaluated voltage is over V_MIN && (the evaluated voltage is over V_BALANCING || the difference between the evaluated voltage and VCELL_MIN is bigger than DIFF_MAX
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	4413      	add	r3, r2
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	89fa      	ldrh	r2, [r7, #14]
 800022e:	429a      	cmp	r2, r3
 8000230:	d21d      	bcs.n	800026e <Balancing+0x82>
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	4413      	add	r3, r2
 800023a:	881b      	ldrh	r3, [r3, #0]
 800023c:	88fa      	ldrh	r2, [r7, #6]
 800023e:	429a      	cmp	r2, r3
 8000240:	d30b      	bcc.n	800025a <Balancing+0x6e>
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	68ba      	ldr	r2, [r7, #8]
 8000248:	4413      	add	r3, r2
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	461a      	mov	r2, r3
 800024e:	89bb      	ldrh	r3, [r7, #12]
 8000250:	1ad2      	subs	r2, r2, r3
 8000252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000256:	429a      	cmp	r2, r3
 8000258:	dd09      	ble.n	800026e <Balancing+0x82>
					{
						BALANCING = (BALANCING|(1<<i));			//Set a 1 in the position of the evaluated cell in the BALANCING variable
 800025a:	2201      	movs	r2, #1
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	fa02 f303 	lsl.w	r3, r2, r3
 8000262:	b21a      	sxth	r2, r3
 8000264:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000268:	4313      	orrs	r3, r2
 800026a:	b21b      	sxth	r3, r3
 800026c:	837b      	strh	r3, [r7, #26]
				for(int i = 0; i < 12; i++)						// A for function that evaluates each cell of the IC
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	3301      	adds	r3, #1
 8000272:	617b      	str	r3, [r7, #20]
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	2b0b      	cmp	r3, #11
 8000278:	ddd3      	ble.n	8000222 <Balancing+0x36>
					}
				}
				DCC[j] = BALANCING;								//Set the DCC array in the evaluated IC position to the value of the BALANCING variable
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	693a      	ldr	r2, [r7, #16]
 8000280:	4413      	add	r3, r2
 8000282:	8b7a      	ldrh	r2, [r7, #26]
 8000284:	601a      	str	r2, [r3, #0]
			for(int j = 0; TOTAL_IC; j++)						// Loops for each voltage in the evaluated IC
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	3301      	adds	r3, #1
 800028a:	61fb      	str	r3, [r7, #28]
 800028c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c1      	bne.n	8000218 <Balancing+0x2c>
			}
			return DCC;
 8000294:	693b      	ldr	r3, [r7, #16]
		}
 8000296:	4618      	mov	r0, r3
 8000298:	3720      	adds	r7, #32
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <outputCS>:
/*
 * Function: outputCS
 * Purpose: The outputCs is a function that sets the CS pin to high or low depending on the entering value input (1) or (0)
 */
void outputCS(uint8_t CS_INPUT){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	if(CS_INPUT == 1){
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d105      	bne.n	80002bc <outputCS+0x1c>
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_SET);					//The High state of the chip select pin is set
 80002b0:	2201      	movs	r2, #1
 80002b2:	2140      	movs	r1, #64	; 0x40
 80002b4:	4806      	ldr	r0, [pc, #24]	; (80002d0 <outputCS+0x30>)
 80002b6:	f001 ffa7 	bl	8002208 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_RESET);				//The Low state of the chip select pin is set
	}
}
 80002ba:	e004      	b.n	80002c6 <outputCS+0x26>
		HAL_GPIO_WritePin(CSPORT, CSPIN, GPIO_PIN_RESET);				//The Low state of the chip select pin is set
 80002bc:	2200      	movs	r2, #0
 80002be:	2140      	movs	r1, #64	; 0x40
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <outputCS+0x30>)
 80002c2:	f001 ffa1 	bl	8002208 <HAL_GPIO_WritePin>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	48000400 	.word	0x48000400

080002d4 <wakeup_idle>:
 * Function: wakeup_idle
 * Purpose: The wakeup_idle function sends a byte thought SPI with no specific purpose, it just wakes up the ICs.
 * Inputs: The spi_channel which wants to be used
 */
void wakeup_idle(SPI_HandleTypeDef SPI_CHANNEL)
{
 80002d4:	b084      	sub	sp, #16
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	f107 0c10 	add.w	ip, r7, #16
 80002e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t idle_message = 0xFF;
 80002e4:	23ff      	movs	r3, #255	; 0xff
 80002e6:	71fb      	strb	r3, [r7, #7]
	outputCS(0);																// The Low state of the chip select pin is set
 80002e8:	2000      	movs	r0, #0
 80002ea:	f7ff ffd9 	bl	80002a0 <outputCS>
	HAL_SPI_Transmit(&SPI_CHANNEL, (uint8_t*)&idle_message, 1, HAL_MAX_DELAY);	// Sends a byte through SPI
 80002ee:	1df9      	adds	r1, r7, #7
 80002f0:	f04f 33ff 	mov.w	r3, #4294967295
 80002f4:	2201      	movs	r2, #1
 80002f6:	f107 0010 	add.w	r0, r7, #16
 80002fa:	f003 fcfc 	bl	8003cf6 <HAL_SPI_Transmit>
	outputCS(1);																// The High state of the chip select pin is set
 80002fe:	2001      	movs	r0, #1
 8000300:	f7ff ffce 	bl	80002a0 <outputCS>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800030e:	b004      	add	sp, #16
 8000310:	4770      	bx	lr

08000312 <wakeup_sleep>:
 * Function: wakeup_sleep
 * Purpose:Generic wakeup command to wake the ltc6811 from sleep
 * Inputs: The spi_channel where the data should be sent, the timer to have a delay of 1 us, the number of ICs, the delay between sending each message in us
*/
void wakeup_sleep(SPI_HandleTypeDef SPI_CHANNEL, TIM_HandleTypeDef TIMER_CHANNEL, int TOTAL_IC, int WAKEUP_DELAY)
{
 8000312:	b084      	sub	sp, #16
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	b093      	sub	sp, #76	; 0x4c
 8000318:	af10      	add	r7, sp, #64	; 0x40
 800031a:	f107 0420 	add.w	r4, r7, #32
 800031e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t idle_message = 0xFF;				// Declare the dummy message  sent
 8000322:	23ff      	movs	r3, #255	; 0xff
 8000324:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i<TOTAL_IC; i++)				// Loops for each IC
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	e010      	b.n	800034e <wakeup_sleep+0x3c>
	{
		outputCS(0);							// The Low state of the chip select pin is set
 800032c:	2000      	movs	r0, #0
 800032e:	f7ff ffb7 	bl	80002a0 <outputCS>
		HAL_SPI_Transmit(&SPI_CHANNEL, (uint8_t*)&idle_message, 1, HAL_MAX_DELAY); // Sends a byte through SPI
 8000332:	1cf9      	adds	r1, r7, #3
 8000334:	f04f 33ff 	mov.w	r3, #4294967295
 8000338:	2201      	movs	r2, #1
 800033a:	f107 0020 	add.w	r0, r7, #32
 800033e:	f003 fcda 	bl	8003cf6 <HAL_SPI_Transmit>
		outputCS(1);							// The High state of the chip select pin is set
 8000342:	2001      	movs	r0, #1
 8000344:	f7ff ffac 	bl	80002a0 <outputCS>
	for(int i = 0; i<TOTAL_IC; i++)				// Loops for each IC
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3301      	adds	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000354:	429a      	cmp	r2, r3
 8000356:	dbe9      	blt.n	800032c <wakeup_sleep+0x1a>
	}
	delay_us(WAKEUP_DELAY, TIMER_CHANNEL);		// Waits WAKEUP_DELAY to send again
 8000358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800035c:	b29e      	uxth	r6, r3
 800035e:	466d      	mov	r5, sp
 8000360:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800036a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800036c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800036e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000370:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000374:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000378:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800037c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800037e:	4630      	mov	r0, r6
 8000380:	f000 ff39 	bl	80011f6 <delay_us>
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800038e:	b004      	add	sp, #16
 8000390:	4770      	bx	lr
	...

08000394 <pec15_calc>:
 * Inputs: The length of the data calculated and the data which has to be evaluated to calculate the PEC
*/
uint16_t pec15_calc(uint8_t DATA_LENGTH, 		// Number of bytes that will be used to calculate a PEC
                    uint8_t *DATA 				// Array of data that will be used to calculate  a PEC
                   )
{
 8000394:	b480      	push	{r7}
 8000396:	b087      	sub	sp, #28
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder;
  uint16_t addr;
  remainder = 16;								// Initialize the PEC
 80003a0:	2310      	movs	r3, #16
 80003a2:	82fb      	strh	r3, [r7, #22]
  for (uint8_t i = 0; i<DATA_LENGTH; i++) 		// Loops for each byte in data array
 80003a4:	2300      	movs	r3, #0
 80003a6:	757b      	strb	r3, [r7, #21]
 80003a8:	e01c      	b.n	80003e4 <pec15_calc+0x50>
  {
    addr = ((remainder>>7)^DATA[i])&0xff;		// Calculate PEC table address
 80003aa:	8afb      	ldrh	r3, [r7, #22]
 80003ac:	09db      	lsrs	r3, r3, #7
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	7d7b      	ldrb	r3, [r7, #21]
 80003b2:	6839      	ldr	r1, [r7, #0]
 80003b4:	440b      	add	r3, r1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	4053      	eors	r3, r2
 80003bc:	b29b      	uxth	r3, r3
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	827b      	strh	r3, [r7, #18]
    remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
 80003c2:	8afb      	ldrh	r3, [r7, #22]
 80003c4:	021b      	lsls	r3, r3, #8
 80003c6:	b21a      	sxth	r2, r3
 80003c8:	8a7b      	ldrh	r3, [r7, #18]
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	490c      	ldr	r1, [pc, #48]	; (8000400 <pec15_calc+0x6c>)
 80003ce:	440b      	add	r3, r1
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	881b      	ldrh	r3, [r3, #0]
 80003d6:	b21b      	sxth	r3, r3
 80003d8:	4053      	eors	r3, r2
 80003da:	b21b      	sxth	r3, r3
 80003dc:	82fb      	strh	r3, [r7, #22]
  for (uint8_t i = 0; i<DATA_LENGTH; i++) 		// Loops for each byte in data array
 80003de:	7d7b      	ldrb	r3, [r7, #21]
 80003e0:	3301      	adds	r3, #1
 80003e2:	757b      	strb	r3, [r7, #21]
 80003e4:	7d7a      	ldrb	r2, [r7, #21]
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d3de      	bcc.n	80003aa <pec15_calc+0x16>
  }
  return(remainder*2);							// The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80003ec:	8afb      	ldrh	r3, [r7, #22]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	b29b      	uxth	r3, r3
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	371c      	adds	r7, #28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000000 	.word	0x20000000

08000404 <set_pwm>:
/*
 * Function: set_pwm
 * Purpose:
 * Inputs:
 */
int **set_pwm(int TOTAL_IC){
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b089      	sub	sp, #36	; 0x24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
		int **pwm_set;
		int pwm_IClenght = 4+4;
 800040c:	2308      	movs	r3, #8
 800040e:	617b      	str	r3, [r7, #20]
		int cell_pwm = 0b00001010;
 8000410:	230a      	movs	r3, #10
 8000412:	613b      	str	r3, [r7, #16]
		pwm_set = malloc(sizeof(int *) * TOTAL_IC);				// Declaration of the number of vectors in the config_set matrix
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4618      	mov	r0, r3
 800041a:	f004 feef 	bl	80051fc <malloc>
 800041e:	4603      	mov	r3, r0
 8000420:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < TOTAL_IC; i++)
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
 8000426:	e00d      	b.n	8000444 <set_pwm+0x40>
		{
			pwm_set[i] = malloc(sizeof(int) * pwm_IClenght);	// Declaration of the size of each position in the config_set array
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	0099      	lsls	r1, r3, #2
 800042c:	69fb      	ldr	r3, [r7, #28]
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	18d4      	adds	r4, r2, r3
 8000434:	4608      	mov	r0, r1
 8000436:	f004 fee1 	bl	80051fc <malloc>
 800043a:	4603      	mov	r3, r0
 800043c:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < TOTAL_IC; i++)
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3301      	adds	r3, #1
 8000442:	61fb      	str	r3, [r7, #28]
 8000444:	69fa      	ldr	r2, [r7, #28]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	429a      	cmp	r2, r3
 800044a:	dbed      	blt.n	8000428 <set_pwm+0x24>
		}

		for(int i = 0; i < TOTAL_IC; i++)
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
 8000450:	e061      	b.n	8000516 <set_pwm+0x112>
		{
			pwm_set[i][0] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	011b      	lsls	r3, r3, #4
 8000456:	b25a      	sxtb	r2, r3
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	b25b      	sxtb	r3, r3
 800045c:	4013      	ands	r3, r2
 800045e:	b25b      	sxtb	r3, r3
 8000460:	b2d9      	uxtb	r1, r3
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	4413      	add	r3, r2
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	460a      	mov	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
			/*							0b10100000 & 0b00001010
			 * 								0b10101010 */
			pwm_set[i][1] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	011b      	lsls	r3, r3, #4
 8000474:	b25a      	sxtb	r2, r3
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	b25b      	sxtb	r3, r3
 800047a:	4013      	ands	r3, r2
 800047c:	b25b      	sxtb	r3, r3
 800047e:	b2d9      	uxtb	r1, r3
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	4413      	add	r3, r2
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3304      	adds	r3, #4
 800048c:	460a      	mov	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
			pwm_set[i][2] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	011b      	lsls	r3, r3, #4
 8000494:	b25a      	sxtb	r2, r3
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	b25b      	sxtb	r3, r3
 800049a:	4013      	ands	r3, r2
 800049c:	b25b      	sxtb	r3, r3
 800049e:	b2d9      	uxtb	r1, r3
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	4413      	add	r3, r2
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	3308      	adds	r3, #8
 80004ac:	460a      	mov	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
			pwm_set[i][3] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	011b      	lsls	r3, r3, #4
 80004b4:	b25a      	sxtb	r2, r3
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	b25b      	sxtb	r3, r3
 80004ba:	4013      	ands	r3, r2
 80004bc:	b25b      	sxtb	r3, r3
 80004be:	b2d9      	uxtb	r1, r3
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	4413      	add	r3, r2
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	330c      	adds	r3, #12
 80004cc:	460a      	mov	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
			pwm_set[i][4] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	b25a      	sxtb	r2, r3
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	4013      	ands	r3, r2
 80004dc:	b25b      	sxtb	r3, r3
 80004de:	b2d9      	uxtb	r1, r3
 80004e0:	69bb      	ldr	r3, [r7, #24]
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	4413      	add	r3, r2
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3310      	adds	r3, #16
 80004ec:	460a      	mov	r2, r1
 80004ee:	601a      	str	r2, [r3, #0]
			pwm_set[i][5] = (uint8_t)((cell_pwm<<4)&(cell_pwm));
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	b25a      	sxtb	r2, r3
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	4013      	ands	r3, r2
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2d9      	uxtb	r1, r3
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	4413      	add	r3, r2
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3314      	adds	r3, #20
 800050c:	460a      	mov	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < TOTAL_IC; i++)
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	3301      	adds	r3, #1
 8000514:	61bb      	str	r3, [r7, #24]
 8000516:	69ba      	ldr	r2, [r7, #24]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	db99      	blt.n	8000452 <set_pwm+0x4e>
		}
	return pwm_set;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3724      	adds	r7, #36	; 0x24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd90      	pop	{r4, r7, pc}

08000528 <ltc6811_wrpwm>:
 * Inputs: The number of ICs, the PWM array of set_pwm, the spi_channel used, the timer channel
 */
void ltc6811_wrpwm(uint8_t TOTAL_IC, //The number of ICs being written to
                   uint8_t **PWM[ICn][6], //A two dimensional array of the configuration data that will be written
                  SPI_HandleTypeDef spi_channel,
				  TIM_HandleTypeDef TIMER_CHANNEL){
 8000528:	b082      	sub	sp, #8
 800052a:	b5b0      	push	{r4, r5, r7, lr}
 800052c:	b09c      	sub	sp, #112	; 0x70
 800052e:	af16      	add	r7, sp, #88	; 0x58
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000536:	e881 000c 	stmia.w	r1, {r2, r3}
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  const uint8_t BYTES_IN_REG = 6;
 800053e:	2306      	movs	r3, #6
 8000540:	753b      	strb	r3, [r7, #20]
  const uint8_t CMD_LEN = 4+(8*TOTAL_IC); //4 bits (cmd + PEC(cmd)) + (8 bits(Nºbits in a register)*TOTAL_IC
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	3304      	adds	r3, #4
 800054a:	74fb      	strb	r3, [r7, #19]
  uint8_t *cmd;			// CMD array
  uint16_t cfg_pec;		// PEC
  uint8_t cmd_pec;
  uint8_t cmd_index; 	// Command counter

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t)); // Declaration of the CMD with the length
 800054c:	7cfb      	ldrb	r3, [r7, #19]
 800054e:	4618      	mov	r0, r3
 8000550:	f004 fe54 	bl	80051fc <malloc>
 8000554:	4603      	mov	r3, r0
 8000556:	60fb      	str	r3, [r7, #12]


  cmd[0] = 0x00;					// Command format 0
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x20;					// Command format 1
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3301      	adds	r3, #1
 8000562:	2220      	movs	r2, #32
 8000564:	701a      	strb	r2, [r3, #0]
  cmd_pec = pec15_calc(2, cmd);		// Calculation of the PEC of the cmd
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	4619      	mov	r1, r3
 800056a:	2002      	movs	r0, #2
 800056c:	f7ff ff12 	bl	8000394 <pec15_calc>
 8000570:	4603      	mov	r3, r0
 8000572:	74bb      	strb	r3, [r7, #18]
  cmd[2] = (uint8_t)(cmd_pec >> 8);	// Calculated PEC of Command format 0
 8000574:	7cbb      	ldrb	r3, [r7, #18]
 8000576:	121a      	asrs	r2, r3, #8
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3302      	adds	r3, #2
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);		// Calculated PEC of Command format 1
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3303      	adds	r3, #3
 8000584:	7cba      	ldrb	r2, [r7, #18]
 8000586:	701a      	strb	r2, [r3, #0]



  cmd_index = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	75fb      	strb	r3, [r7, #23]
  for (uint8_t CURRENT_IC = TOTAL_IC; CURRENT_IC > 0; CURRENT_IC--)    			// Executes for each ltc6811 in daisy chain, this loops starts with
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	75bb      	strb	r3, [r7, #22]
 8000590:	e042      	b.n	8000618 <ltc6811_wrpwm+0xf0>
  {
    // The last IC on the stack. The first configuration written is
    // Received by the last IC in the daisy chain

    for (uint8_t CURRENT_BYTE = 0; CURRENT_BYTE < BYTES_IN_REG; CURRENT_BYTE++) // Executes for each of the 6 bytes in the CFGR register
 8000592:	2300      	movs	r3, #0
 8000594:	757b      	strb	r3, [r7, #21]
 8000596:	e016      	b.n	80005c6 <ltc6811_wrpwm+0x9e>
    {
    // Current_byte is the byte counter

      cmd[cmd_index] = &PWM[CURRENT_IC-1][CURRENT_BYTE];           			// Adding the config data to the array to be sent
 8000598:	7dba      	ldrb	r2, [r7, #22]
 800059a:	4613      	mov	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	4413      	add	r3, r2
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	3b18      	subs	r3, #24
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	441a      	add	r2, r3
 80005a8:	7d7b      	ldrb	r3, [r7, #21]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	4619      	mov	r1, r3
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	7dfb      	ldrb	r3, [r7, #23]
 80005b4:	4413      	add	r3, r2
 80005b6:	b2ca      	uxtb	r2, r1
 80005b8:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	3301      	adds	r3, #1
 80005be:	75fb      	strb	r3, [r7, #23]
    for (uint8_t CURRENT_BYTE = 0; CURRENT_BYTE < BYTES_IN_REG; CURRENT_BYTE++) // Executes for each of the 6 bytes in the CFGR register
 80005c0:	7d7b      	ldrb	r3, [r7, #21]
 80005c2:	3301      	adds	r3, #1
 80005c4:	757b      	strb	r3, [r7, #21]
 80005c6:	7d7a      	ldrb	r2, [r7, #21]
 80005c8:	7d3b      	ldrb	r3, [r7, #20]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d3e4      	bcc.n	8000598 <ltc6811_wrpwm+0x70>
    }

    cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &PWM[CURRENT_IC-1][0]);   	// Calculating the PEC for each ICs configuration register data
 80005ce:	7dba      	ldrb	r2, [r7, #22]
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	3b18      	subs	r3, #24
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	461a      	mov	r2, r3
 80005e0:	7d3b      	ldrb	r3, [r7, #20]
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fed5 	bl	8000394 <pec15_calc>
 80005ea:	4603      	mov	r3, r0
 80005ec:	823b      	strh	r3, [r7, #16]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 80005ee:	8a3b      	ldrh	r3, [r7, #16]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b299      	uxth	r1, r3
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	7dfb      	ldrb	r3, [r7, #23]
 80005f8:	4413      	add	r3, r2
 80005fa:	b2ca      	uxtb	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	3301      	adds	r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	8a3a      	ldrh	r2, [r7, #16]
 8000608:	b2d2      	uxtb	r2, r2
 800060a:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 800060c:	7dfb      	ldrb	r3, [r7, #23]
 800060e:	3302      	adds	r3, #2
 8000610:	75fb      	strb	r3, [r7, #23]
  for (uint8_t CURRENT_IC = TOTAL_IC; CURRENT_IC > 0; CURRENT_IC--)    			// Executes for each ltc6811 in daisy chain, this loops starts with
 8000612:	7dbb      	ldrb	r3, [r7, #22]
 8000614:	3b01      	subs	r3, #1
 8000616:	75bb      	strb	r3, [r7, #22]
 8000618:	7dbb      	ldrb	r3, [r7, #22]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1b9      	bne.n	8000592 <ltc6811_wrpwm+0x6a>
  }


  wakeup_idle (spi_channel);                // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800061e:	4668      	mov	r0, sp
 8000620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000624:	2254      	movs	r2, #84	; 0x54
 8000626:	4619      	mov	r1, r3
 8000628:	f004 fee8 	bl	80053fc <memcpy>
 800062c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000632:	f7ff fe4f 	bl	80002d4 <wakeup_idle>

  outputCS(0);								// Set the  CS to low and then to high to ensure the CS is low
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe32 	bl	80002a0 <outputCS>
  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 800063c:	466d      	mov	r5, sp
 800063e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800064a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800064c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800064e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000652:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000656:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800065a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fdca 	bl	80011f6 <delay_us>
  outputCS(1);								// Set the  CS to high
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff fe1c 	bl	80002a0 <outputCS>
  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 8000668:	466d      	mov	r5, sp
 800066a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800066e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800067e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000682:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000688:	200a      	movs	r0, #10
 800068a:	f000 fdb4 	bl	80011f6 <delay_us>
  outputCS(0);								// Set the CS to low to send data
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff fe06 	bl	80002a0 <outputCS>
  HAL_SPI_Transmit(&spi_channel, (uint8_t*)&cmd, CMD_LEN, HAL_MAX_DELAY); // Sends the CMD trough SPI
 8000694:	7cfb      	ldrb	r3, [r7, #19]
 8000696:	b29a      	uxth	r2, r3
 8000698:	f107 010c 	add.w	r1, r7, #12
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006a4:	f003 fb27 	bl	8003cf6 <HAL_SPI_Transmit>
  outputCS(1);								// Set the CS to high
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fdf9 	bl	80002a0 <outputCS>
  free(cmd);								// Empties the CMD array
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fdab 	bl	800520c <free>
}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80006c0:	b002      	add	sp, #8
 80006c2:	4770      	bx	lr

080006c4 <set_cfgr>:
/*
 * Function: set_cfgr
 * Purpose: This function returns the matrix set_cfgr with configuration of the GPIOS, the under and over voltage and the DCC info
 * Inputs: The number of ICs, the number of voltages in each cell, the DCC array
 */
	int **set_cfgr(int TOTAL_IC, int TOTAL_VOLTAGES, int *DCC){
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
		int **config_set;
		config_set = malloc(sizeof(int *) * TOTAL_IC);				// Declaration of the number of the config_set matrix
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fd91 	bl	80051fc <malloc>
 80006da:	4603      	mov	r3, r0
 80006dc:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < TOTAL_IC; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	e00d      	b.n	8000700 <set_cfgr+0x3c>
		{
			config_set[i] = malloc(sizeof(int) * TOTAL_VOLTAGES);	// Declaration of the size of each position in the config_set array
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	0099      	lsls	r1, r3, #2
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	18d4      	adds	r4, r2, r3
 80006f0:	4608      	mov	r0, r1
 80006f2:	f004 fd83 	bl	80051fc <malloc>
 80006f6:	4603      	mov	r3, r0
 80006f8:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < TOTAL_IC; i++)
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
 8000700:	69fa      	ldr	r2, [r7, #28]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbed      	blt.n	80006e4 <set_cfgr+0x20>
		}

		for(int i= 0; i < TOTAL_IC; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	e04c      	b.n	80007a8 <set_cfgr+0xe4>
		{	config_set[i][0] = (uint8_t)((GPIOx<<3)&0xF8)|((REFON<<2)&0x04)|((DTEN<<1)&0x02)|(ADCOPT&0x01);
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <set_cfgr+0xf8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	f043 0307 	orr.w	r3, r3, #7
 800071a:	b2d9      	uxtb	r1, r3
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	460a      	mov	r2, r1
 8000728:	601a      	str	r2, [r3, #0]
	    /*				0b01011000 & 0b11111000 | 0b00000100 & 0b0100 | 0b00000010 & 0b0010 | 0b00000001 & 0b00000001
		    	  		   0b0101 1000		  |     0b0000 0100	    |	 0b0000 0010	      | 		  0b0000 0001
		    		CFGR0 -> 0b0101 1111*/
			config_set[i][1] = (uint8_t)(UNDERVOLTAGE_TH&(0x00FF));
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	697a      	ldr	r2, [r7, #20]
 8000730:	4413      	add	r3, r2
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3304      	adds	r3, #4
 8000736:	22ba      	movs	r2, #186	; 0xba
 8000738:	601a      	str	r2, [r3, #0]
			config_set[i][2] = (uint8_t)(((OVERVOLTAGE_TH&(0x000F))<<4) | ((UNDERVOLTAGE_TH&(0x0F00))>>8));
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	4413      	add	r3, r2
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3308      	adds	r3, #8
 8000746:	22a0      	movs	r2, #160	; 0xa0
 8000748:	601a      	str	r2, [r3, #0]
			config_set[i][3] = (uint8_t)((OVERVOLTAGE_TH&(0x0FF0))>>4);
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	4413      	add	r3, r2
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	330c      	adds	r3, #12
 8000756:	220f      	movs	r2, #15
 8000758:	601a      	str	r2, [r3, #0]
			config_set[i][4] = (uint8_t)(DCC[i]&0x00FF); //DCC[total_ic-i-1]
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	b2d9      	uxtb	r1, r3
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	4413      	add	r3, r2
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3310      	adds	r3, #16
 8000772:	460a      	mov	r2, r1
 8000774:	601a      	str	r2, [r3, #0]
		    				/*0b00001111 11111111 & 0b00000000 11111111
		    							0b00000000 11111111
		     							CFGR4 -> 0b11111111*/
			config_set[i][5] = (uint8_t)(((DCTO)<<4) | (((DCC[i]&0x0F00))>>8));
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	121b      	asrs	r3, r3, #8
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 030f 	and.w	r3, r3, #15
 8000788:	b25b      	sxtb	r3, r3
 800078a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800078e:	b25b      	sxtb	r3, r3
 8000790:	b2d9      	uxtb	r1, r3
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	4413      	add	r3, r2
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3314      	adds	r3, #20
 800079e:	460a      	mov	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < TOTAL_IC; i++)
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	3301      	adds	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69ba      	ldr	r2, [r7, #24]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbae      	blt.n	800070e <set_cfgr+0x4a>
		    /* 0b11000000 	 | (0b00001111 11111111 & 0b00001111 00000000)>>8
		       0b11000000 	 | (0b00001111 00000000)>>8
		       0b11000000 	 | 0b00000000 00001111
		     		CFGR5 =	0b11001111*/
		}
	return config_set;
 80007b0:	697b      	ldr	r3, [r7, #20]
	}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd90      	pop	{r4, r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000200 	.word	0x20000200

080007c0 <ltc6811_wrcfg>:
 * Inputs: The number of ICs, the configuration from the function set_cfgr, the SPI channel used
*/
void ltc6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   uint8_t **config[ICn][6], //A two dimensional array of the configuration data that will be written
                  SPI_HandleTypeDef spi_channel,
				  TIM_HandleTypeDef TIMER_CHANNEL){
 80007c0:	b082      	sub	sp, #8
 80007c2:	b5b0      	push	{r4, r5, r7, lr}
 80007c4:	b09c      	sub	sp, #112	; 0x70
 80007c6:	af16      	add	r7, sp, #88	; 0x58
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80007ce:	e881 000c 	stmia.w	r1, {r2, r3}
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  const uint8_t BYTES_IN_REG = 6;
 80007d6:	2306      	movs	r3, #6
 80007d8:	753b      	strb	r3, [r7, #20]
  const uint8_t CMD_LEN = 4+(8*total_ic);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	3304      	adds	r3, #4
 80007e2:	74fb      	strb	r3, [r7, #19]
  uint8_t *cmd;			// CMD array
  uint16_t cfg_pec;		// PEC
  uint8_t cmd_index; 	// Command counter

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t)); // Declaration of the CMD with the length
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fd08 	bl	80051fc <malloc>
 80007ec:	4603      	mov	r3, r0
 80007ee:	60fb      	str	r3, [r7, #12]


  cmd[0] = 0x00;		// Command format 0
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
  cmd[1] = 0x01;		// Command format 1
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3301      	adds	r3, #1
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
  cmd[2] = 0x3d;		// Calculated PEC of Command format 0
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	3302      	adds	r3, #2
 8000802:	223d      	movs	r2, #61	; 0x3d
 8000804:	701a      	strb	r2, [r3, #0]
  cmd[3] = 0x6e;		// Calculated PEC of Command format 1
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3303      	adds	r3, #3
 800080a:	226e      	movs	r2, #110	; 0x6e
 800080c:	701a      	strb	r2, [r3, #0]


  cmd_index = 4;
 800080e:	2304      	movs	r3, #4
 8000810:	75fb      	strb	r3, [r7, #23]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)    	// executes for each ltc6811 in daisy chain, this loops starts with
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	75bb      	strb	r3, [r7, #22]
 8000816:	e042      	b.n	800089e <ltc6811_wrcfg+0xde>
  {
    // the last IC on the stack. The first configuration written is
    // received by the last IC in the daisy chain

    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000818:	2300      	movs	r3, #0
 800081a:	757b      	strb	r3, [r7, #21]
 800081c:	e016      	b.n	800084c <ltc6811_wrcfg+0x8c>
    {
      // current_byte is the byte counter

      cmd[cmd_index] = &config[current_ic-1][current_byte];           	 //adding the config data to the array to be sent
 800081e:	7dba      	ldrb	r2, [r7, #22]
 8000820:	4613      	mov	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	3b18      	subs	r3, #24
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	441a      	add	r2, r3
 800082e:	7d7b      	ldrb	r3, [r7, #21]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	4619      	mov	r1, r3
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	4413      	add	r3, r2
 800083c:	b2ca      	uxtb	r2, r1
 800083e:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	3301      	adds	r3, #1
 8000844:	75fb      	strb	r3, [r7, #23]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 8000846:	7d7b      	ldrb	r3, [r7, #21]
 8000848:	3301      	adds	r3, #1
 800084a:	757b      	strb	r3, [r7, #21]
 800084c:	7d7a      	ldrb	r2, [r7, #21]
 800084e:	7d3b      	ldrb	r3, [r7, #20]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3e4      	bcc.n	800081e <ltc6811_wrcfg+0x5e>
    }

    cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);   // calculating the PEC for each ICs configuration register data
 8000854:	7dba      	ldrb	r2, [r7, #22]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	3b18      	subs	r3, #24
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	461a      	mov	r2, r3
 8000866:	7d3b      	ldrb	r3, [r7, #20]
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fd92 	bl	8000394 <pec15_calc>
 8000870:	4603      	mov	r3, r0
 8000872:	823b      	strh	r3, [r7, #16]
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8000874:	8a3b      	ldrh	r3, [r7, #16]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b299      	uxth	r1, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	4413      	add	r3, r2
 8000880:	b2ca      	uxtb	r2, r1
 8000882:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	3301      	adds	r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	8a3a      	ldrh	r2, [r7, #16]
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8000892:	7dfb      	ldrb	r3, [r7, #23]
 8000894:	3302      	adds	r3, #2
 8000896:	75fb      	strb	r3, [r7, #23]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)    	// executes for each ltc6811 in daisy chain, this loops starts with
 8000898:	7dbb      	ldrb	r3, [r7, #22]
 800089a:	3b01      	subs	r3, #1
 800089c:	75bb      	strb	r3, [r7, #22]
 800089e:	7dbb      	ldrb	r3, [r7, #22]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1b9      	bne.n	8000818 <ltc6811_wrcfg+0x58>
  }


  wakeup_idle (spi_channel);                // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 80008a4:	4668      	mov	r0, sp
 80008a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008aa:	2254      	movs	r2, #84	; 0x54
 80008ac:	4619      	mov	r1, r3
 80008ae:	f004 fda5 	bl	80053fc <memcpy>
 80008b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b8:	f7ff fd0c 	bl	80002d4 <wakeup_idle>

  outputCS(0);								// Set the  CS to low and then to high to ensure the CS is low
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fcef 	bl	80002a0 <outputCS>
  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 80008c2:	466d      	mov	r5, sp
 80008c4:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80008c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e2:	200a      	movs	r0, #10
 80008e4:	f000 fc87 	bl	80011f6 <delay_us>
  outputCS(1);								// Set the  CS to high
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fcd9 	bl	80002a0 <outputCS>
  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 80008ee:	466d      	mov	r5, sp
 80008f0:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80008f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000900:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000904:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000908:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800090c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800090e:	200a      	movs	r0, #10
 8000910:	f000 fc71 	bl	80011f6 <delay_us>
  outputCS(0);								// Set the CS to low to send data
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fcc3 	bl	80002a0 <outputCS>
  HAL_SPI_Transmit(&spi_channel, (uint8_t*)&cmd, CMD_LEN, HAL_MAX_DELAY); // Sends the CMD trough SPI
 800091a:	7cfb      	ldrb	r3, [r7, #19]
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 010c 	add.w	r1, r7, #12
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800092a:	f003 f9e4 	bl	8003cf6 <HAL_SPI_Transmit>
  outputCS(1);								// Set the CS to high
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fcb6 	bl	80002a0 <outputCS>
  free(cmd);								// Empties the CMD array
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fc68 	bl	800520c <free>
}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000946:	b002      	add	sp, #8
 8000948:	4770      	bx	lr

0800094a <ltc6811_adcv>:
	|CMD[0:1] |  15   |  14   |  13   |  12   |  11   |  10   |   9   |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
	|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
	|ADCV:      |   0   |   0   |   0   |   0   |   0   |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
	* Inputs: The Conversion Mode (MD), discharge permitted (DCP), the cell selection for ADC conversion (CH) and the SPI channel used
	*/
void ltc6811_adcv(uint8_t MD, uint8_t DCP, uint8_t CH,SPI_HandleTypeDef spi_channel){
 800094a:	b082      	sub	sp, #8
 800094c:	b580      	push	{r7, lr}
 800094e:	b09a      	sub	sp, #104	; 0x68
 8000950:	af16      	add	r7, sp, #88	; 0x58
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	460b      	mov	r3, r1
 800095a:	71bb      	strb	r3, [r7, #6]
 800095c:	4613      	mov	r3, r2
 800095e:	717b      	strb	r3, [r7, #5]
	  uint8_t cmd[4];
	  uint16_t cmd_pec;
	  uint8_t md_bits;

	  md_bits = (MD & 0x02) >> 1;
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	105b      	asrs	r3, r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
	  cmd[0] = md_bits + 0x02;
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	3302      	adds	r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	723b      	strb	r3, [r7, #8]
	  md_bits = (MD & 0x01) << 7;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	01db      	lsls	r3, r3, #7
 8000978:	73fb      	strb	r3, [r7, #15]
	  cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	b2da      	uxtb	r2, r3
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	4413      	add	r3, r2
 8000984:	b2da      	uxtb	r2, r3
 8000986:	797b      	ldrb	r3, [r7, #5]
 8000988:	4413      	add	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	3360      	adds	r3, #96	; 0x60
 800098e:	b2db      	uxtb	r3, r3
 8000990:	727b      	strb	r3, [r7, #9]
	  cmd_pec = pec15_calc(2, cmd);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	2002      	movs	r0, #2
 800099a:	f7ff fcfb 	bl	8000394 <pec15_calc>
 800099e:	4603      	mov	r3, r0
 80009a0:	81bb      	strh	r3, [r7, #12]
	  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80009a2:	89bb      	ldrh	r3, [r7, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	72bb      	strb	r3, [r7, #10]
	  cmd[3] = (uint8_t)(cmd_pec);
 80009ac:	89bb      	ldrh	r3, [r7, #12]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	72fb      	strb	r3, [r7, #11]


	  wakeup_idle (spi_channel); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80009b2:	4668      	mov	r0, sp
 80009b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b8:	2254      	movs	r2, #84	; 0x54
 80009ba:	4619      	mov	r1, r3
 80009bc:	f004 fd1e 	bl	80053fc <memcpy>
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c6:	f7ff fc85 	bl	80002d4 <wakeup_idle>
	  outputCS(0);															//The Low state of the chip select pin is set
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fc68 	bl	80002a0 <outputCS>
	  HAL_SPI_Transmit(&spi_channel, (uint8_t*)&cmd, 4, HAL_MAX_DELAY);
 80009d0:	f107 0108 	add.w	r1, r7, #8
 80009d4:	f107 001c 	add.w	r0, r7, #28
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	2204      	movs	r2, #4
 80009de:	f003 f98a 	bl	8003cf6 <HAL_SPI_Transmit>
	  outputCS(1);															//The High state of the chip select pin is set
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fc5c 	bl	80002a0 <outputCS>
	}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009f2:	b002      	add	sp, #8
 80009f4:	4770      	bx	lr

080009f6 <ltc6811_rdcv>:

	  	    -1: PEC error detected, retry read
	  	* Inputs: The register read, the number of ICs, the voltage of the cells array and the SPI channel used
	  	*/

	uint16_t ltc6811_rdcv(uint8_t reg,uint8_t total_ic,uint16_t cell_codes[][CELL_CHANNELS], SPI_HandleTypeDef spi_channel, TIM_HandleTypeDef TIMER_CHANNEL){
 80009f6:	b082      	sub	sp, #8
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b0b4      	sub	sp, #208	; 0xd0
 80009fc:	af2c      	add	r7, sp, #176	; 0xb0
 80009fe:	603a      	str	r2, [r7, #0]
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
 8000a06:	460b      	mov	r3, r1
 8000a08:	71bb      	strb	r3, [r7, #6]
	  	  const uint8_t NUM_RX_BYT = 8;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	763b      	strb	r3, [r7, #24]
	  	  const uint8_t BYT_IN_REG = 6;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	75fb      	strb	r3, [r7, #23]
	  	  const uint8_t CELL_IN_REG = 3;
 8000a12:	2303      	movs	r3, #3
 8000a14:	75bb      	strb	r3, [r7, #22]
	  	  const uint8_t NUM_CV_REG = 4;
 8000a16:	2304      	movs	r3, #4
 8000a18:	757b      	strb	r3, [r7, #21]


	  	  uint8_t *cell_data;
	  	  uint8_t pec_error = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	77fb      	strb	r3, [r7, #31]
	  	  uint16_t parsed_cell;
	  	  uint16_t received_pec;
	  	  uint16_t data_pec;
	  	  uint8_t data_counter=0; //data counter
 8000a1e:	2300      	movs	r3, #0
 8000a20:	77bb      	strb	r3, [r7, #30]
	  	  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8000a22:	7e3b      	ldrb	r3, [r7, #24]
 8000a24:	79ba      	ldrb	r2, [r7, #6]
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f004 fbe6 	bl	80051fc <malloc>
 8000a30:	4603      	mov	r3, r0
 8000a32:	613b      	str	r3, [r7, #16]

	  	  if (reg == 0)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8081 	bne.w	8000b3e <ltc6811_rdcv+0x148>
	  	  {

	  	    for (uint8_t cell_reg = 1; cell_reg<NUM_CV_REG+1; cell_reg++)                   //executes once for each of the ltc6811 cell voltage registers
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	777b      	strb	r3, [r7, #29]
 8000a40:	e078      	b.n	8000b34 <ltc6811_rdcv+0x13e>
	  	    {
	  	      data_counter = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	77bb      	strb	r3, [r7, #30]
	  	      ltc6811_rdcv_reg(cell_reg, total_ic, cell_data,spi_channel, TIMER_CHANNEL);                //Reads a single Cell voltage register
 8000a46:	79bd      	ldrb	r5, [r7, #6]
 8000a48:	7f7c      	ldrb	r4, [r7, #29]
 8000a4a:	a818      	add	r0, sp, #96	; 0x60
 8000a4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a50:	224c      	movs	r2, #76	; 0x4c
 8000a52:	4619      	mov	r1, r3
 8000a54:	f004 fcd2 	bl	80053fc <memcpy>
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a5e:	2260      	movs	r2, #96	; 0x60
 8000a60:	4619      	mov	r1, r3
 8000a62:	f004 fccb 	bl	80053fc <memcpy>
 8000a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f000 f8e6 	bl	8000c3e <ltc6811_rdcv_reg>

	  	      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every ltc6811 in the daisy chain
 8000a72:	2300      	movs	r3, #0
 8000a74:	773b      	strb	r3, [r7, #28]
 8000a76:	e056      	b.n	8000b26 <ltc6811_rdcv+0x130>
	  	      {
	  	        // current_ic is used as the IC counter

	  	        for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8000a78:	2300      	movs	r3, #0
 8000a7a:	76fb      	strb	r3, [r7, #27]
 8000a7c:	e026      	b.n	8000acc <ltc6811_rdcv+0xd6>
	  	        {
	  	          // loops once for each of the 3 cell voltage codes in the register

	  	          parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 8000a7e:	7fbb      	ldrb	r3, [r7, #30]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	7fbb      	ldrb	r3, [r7, #30]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	6939      	ldr	r1, [r7, #16]
 8000a8e:	440b      	add	r3, r1
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	817b      	strh	r3, [r7, #10]
	  	          //Array a bytes
	  	          // create the parsed cell voltage code

	  	          cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8000a9c:	7f3a      	ldrb	r2, [r7, #28]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	7ef9      	ldrb	r1, [r7, #27]
 8000aae:	7f7a      	ldrb	r2, [r7, #29]
 8000ab0:	3a01      	subs	r2, #1
 8000ab2:	7db8      	ldrb	r0, [r7, #22]
 8000ab4:	fb00 f202 	mul.w	r2, r0, r2
 8000ab8:	440a      	add	r2, r1
 8000aba:	8979      	ldrh	r1, [r7, #10]
 8000abc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	          //cell_codes[		0  ][		1		+    ((4	- 1 ) * 3	)] = cell_codes[0][10]
	  	          //cell_codes[		0  ][		2		+    ((4	- 1 ) * 3	)] = cell_codes[0][11]
	  	          //cell_codes[		1  ][		0		+    ((4	- 1 ) * 3	)] = cell_codes[1][9]
	  	          //cell_codes[		1  ][		1		+    ((4	- 1 ) * 3	)] = cell_codes[1][10]
	  	          //cell_codes[		1  ][		2		+    ((4	- 1 ) * 3	)] = cell_codes[1][11]
	  	          data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8000ac0:	7fbb      	ldrb	r3, [r7, #30]
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	77bb      	strb	r3, [r7, #30]
	  	        for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8000ac6:	7efb      	ldrb	r3, [r7, #27]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	76fb      	strb	r3, [r7, #27]
 8000acc:	7efa      	ldrb	r2, [r7, #27]
 8000ace:	7dbb      	ldrb	r3, [r7, #22]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d3d4      	bcc.n	8000a7e <ltc6811_rdcv+0x88>
	  	          //must increment by two for each parsed cell code
	  	        }

	  	        received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8000ad4:	7fbb      	ldrb	r3, [r7, #30]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	7fbb      	ldrb	r3, [r7, #30]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	6939      	ldr	r1, [r7, #16]
 8000ae8:	440b      	add	r3, r1
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4413      	add	r3, r2
 8000af0:	81fb      	strh	r3, [r7, #14]
	  	        //after the 6 cell voltage data bytes
	  	        data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8000af2:	7f3b      	ldrb	r3, [r7, #28]
 8000af4:	7e3a      	ldrb	r2, [r7, #24]
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	441a      	add	r2, r3
 8000b00:	7dfb      	ldrb	r3, [r7, #23]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc45 	bl	8000394 <pec15_calc>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	81bb      	strh	r3, [r7, #12]
	  	        if (received_pec != data_pec)
 8000b0e:	89fa      	ldrh	r2, [r7, #14]
 8000b10:	89bb      	ldrh	r3, [r7, #12]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d001      	beq.n	8000b1a <ltc6811_rdcv+0x124>
	  	        {
	  	          pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8000b16:	23ff      	movs	r3, #255	; 0xff
 8000b18:	77fb      	strb	r3, [r7, #31]
	  	          //are detected in the serial data
	  	        }
	  	        data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8000b1a:	7fbb      	ldrb	r3, [r7, #30]
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	77bb      	strb	r3, [r7, #30]
	  	      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every ltc6811 in the daisy chain
 8000b20:	7f3b      	ldrb	r3, [r7, #28]
 8000b22:	3301      	adds	r3, #1
 8000b24:	773b      	strb	r3, [r7, #28]
 8000b26:	7f3a      	ldrb	r2, [r7, #28]
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3a4      	bcc.n	8000a78 <ltc6811_rdcv+0x82>
	  	    for (uint8_t cell_reg = 1; cell_reg<NUM_CV_REG+1; cell_reg++)                   //executes once for each of the ltc6811 cell voltage registers
 8000b2e:	7f7b      	ldrb	r3, [r7, #29]
 8000b30:	3301      	adds	r3, #1
 8000b32:	777b      	strb	r3, [r7, #29]
 8000b34:	7d7a      	ldrb	r2, [r7, #21]
 8000b36:	7f7b      	ldrb	r3, [r7, #29]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d282      	bcs.n	8000a42 <ltc6811_rdcv+0x4c>
 8000b3c:	e073      	b.n	8000c26 <ltc6811_rdcv+0x230>
	  	  }

	  	  else
	  	  {

	  	    ltc6811_rdcv_reg(reg, total_ic,cell_data,spi_channel, TIMER_CHANNEL);
 8000b3e:	79bd      	ldrb	r5, [r7, #6]
 8000b40:	79fc      	ldrb	r4, [r7, #7]
 8000b42:	a818      	add	r0, sp, #96	; 0x60
 8000b44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b48:	224c      	movs	r2, #76	; 0x4c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f004 fc56 	bl	80053fc <memcpy>
 8000b50:	4668      	mov	r0, sp
 8000b52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b56:	2260      	movs	r2, #96	; 0x60
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f004 fc4f 	bl	80053fc <memcpy>
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4629      	mov	r1, r5
 8000b64:	4620      	mov	r0, r4
 8000b66:	f000 f86a 	bl	8000c3e <ltc6811_rdcv_reg>
	  	    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every ltc6811 in the daisy chain
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	76bb      	strb	r3, [r7, #26]
 8000b6e:	e056      	b.n	8000c1e <ltc6811_rdcv+0x228>
	  	    {
	  	      // current_ic is used as the IC counter

	  	      for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8000b70:	2300      	movs	r3, #0
 8000b72:	767b      	strb	r3, [r7, #25]
 8000b74:	e026      	b.n	8000bc4 <ltc6811_rdcv+0x1ce>
	  	      {
	  	        // Loops once for each of the 3 cell voltage codes in the register

	  	        parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 8000b76:	7fbb      	ldrb	r3, [r7, #30]
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	7fbb      	ldrb	r3, [r7, #30]
 8000b82:	3301      	adds	r3, #1
 8000b84:	6939      	ldr	r1, [r7, #16]
 8000b86:	440b      	add	r3, r1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	817b      	strh	r3, [r7, #10]
	  	        // Create the parsed cell voltage code

	  	        cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 8000b94:	7eba      	ldrb	r2, [r7, #26]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	7e79      	ldrb	r1, [r7, #25]
 8000ba6:	79fa      	ldrb	r2, [r7, #7]
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	7db8      	ldrb	r0, [r7, #22]
 8000bac:	fb00 f202 	mul.w	r2, r0, r2
 8000bb0:	440a      	add	r2, r1
 8000bb2:	8979      	ldrh	r1, [r7, #10]
 8000bb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	        data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8000bb8:	7fbb      	ldrb	r3, [r7, #30]
 8000bba:	3302      	adds	r3, #2
 8000bbc:	77bb      	strb	r3, [r7, #30]
	  	      for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8000bbe:	7e7b      	ldrb	r3, [r7, #25]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	767b      	strb	r3, [r7, #25]
 8000bc4:	7e7a      	ldrb	r2, [r7, #25]
 8000bc6:	7dbb      	ldrb	r3, [r7, #22]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d3d4      	bcc.n	8000b76 <ltc6811_rdcv+0x180>
	  	        // Must increment by two for each parsed cell code
	  	      }

	  	      received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8000bcc:	7fbb      	ldrb	r3, [r7, #30]
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	7fbb      	ldrb	r3, [r7, #30]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	6939      	ldr	r1, [r7, #16]
 8000be0:	440b      	add	r3, r1
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	81fb      	strh	r3, [r7, #14]
	  	      //after the 6 cell voltage data bytes
	  	      data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8000bea:	7ebb      	ldrb	r3, [r7, #26]
 8000bec:	7e3a      	ldrb	r2, [r7, #24]
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	441a      	add	r2, r3
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fbc9 	bl	8000394 <pec15_calc>
 8000c02:	4603      	mov	r3, r0
 8000c04:	81bb      	strh	r3, [r7, #12]
	  	      if (received_pec != data_pec)
 8000c06:	89fa      	ldrh	r2, [r7, #14]
 8000c08:	89bb      	ldrh	r3, [r7, #12]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d001      	beq.n	8000c12 <ltc6811_rdcv+0x21c>
	  	      {
	  	        pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8000c0e:	23ff      	movs	r3, #255	; 0xff
 8000c10:	77fb      	strb	r3, [r7, #31]
	  	        // Are detected in the serial data
	  	      }
	  	      data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 8000c12:	7fbb      	ldrb	r3, [r7, #30]
 8000c14:	3302      	adds	r3, #2
 8000c16:	77bb      	strb	r3, [r7, #30]
	  	    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every ltc6811 in the daisy chain
 8000c18:	7ebb      	ldrb	r3, [r7, #26]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	76bb      	strb	r3, [r7, #26]
 8000c1e:	7eba      	ldrb	r2, [r7, #26]
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d3a4      	bcc.n	8000b70 <ltc6811_rdcv+0x17a>
	  	      // Must be incremented by 2 bytes to point to the next ICs cell voltage data
	  	    }
	  	  }


	  	  free(cell_data);
 8000c26:	6938      	ldr	r0, [r7, #16]
 8000c28:	f004 faf0 	bl	800520c <free>
	  	  return(pec_error);
 8000c2c:	7ffb      	ldrb	r3, [r7, #31]
 8000c2e:	b29b      	uxth	r3, r3
	  	}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000c3a:	b002      	add	sp, #8
 8000c3c:	4770      	bx	lr

08000c3e <ltc6811_rdcv_reg>:
	  	void ltc6811_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
	  	                      uint8_t total_ic, //the number of ICs in the
	  	                      uint8_t *data, //An array of the unparsed cell codes
							  SPI_HandleTypeDef spi_channel,
							  TIM_HandleTypeDef TIMER_CHANNEL)
	  	{
 8000c3e:	b082      	sub	sp, #8
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b09c      	sub	sp, #112	; 0x70
 8000c44:	af18      	add	r7, sp, #96	; 0x60
 8000c46:	603a      	str	r2, [r7, #0]
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	71bb      	strb	r3, [r7, #6]
	  	  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 8000c52:	2308      	movs	r3, #8
 8000c54:	73fb      	strb	r3, [r7, #15]
	  	  uint8_t REG_LEN_TOTAL_IC = (REG_LEN*total_ic);
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	fb12 f303 	smulbb	r3, r2, r3
 8000c5e:	73bb      	strb	r3, [r7, #14]
	  	  uint8_t cmd[4];
	  	  uint16_t cmd_pec;

	  	  if (reg == 1)     //1: RDCVA
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d104      	bne.n	8000c70 <ltc6811_rdcv_reg+0x32>
	  	  {
	  	    cmd[1] = 0x04;
 8000c66:	2304      	movs	r3, #4
 8000c68:	727b      	strb	r3, [r7, #9]
	  	    cmd[0] = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	723b      	strb	r3, [r7, #8]
 8000c6e:	e026      	b.n	8000cbe <ltc6811_rdcv_reg+0x80>
	  	  }
	  	  else if (reg == 2) //2: RDCVB
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d104      	bne.n	8000c80 <ltc6811_rdcv_reg+0x42>
	  	  {
	  	    cmd[1] = 0x06;
 8000c76:	2306      	movs	r3, #6
 8000c78:	727b      	strb	r3, [r7, #9]
	  	    cmd[0] = 0x00;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	723b      	strb	r3, [r7, #8]
 8000c7e:	e01e      	b.n	8000cbe <ltc6811_rdcv_reg+0x80>
	  	  }
	  	  else if (reg == 3) //3: RDCVC
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d104      	bne.n	8000c90 <ltc6811_rdcv_reg+0x52>
	  	  {
	  	    cmd[1] = 0x08;
 8000c86:	2308      	movs	r3, #8
 8000c88:	727b      	strb	r3, [r7, #9]
	  	    cmd[0] = 0x00;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	723b      	strb	r3, [r7, #8]
 8000c8e:	e016      	b.n	8000cbe <ltc6811_rdcv_reg+0x80>
	  	  }
	  	  else if (reg == 4) //4: RDCVD
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d104      	bne.n	8000ca0 <ltc6811_rdcv_reg+0x62>
	  	  {
	  	    cmd[1] = 0x0A;
 8000c96:	230a      	movs	r3, #10
 8000c98:	727b      	strb	r3, [r7, #9]
	  	    cmd[0] = 0x00;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	723b      	strb	r3, [r7, #8]
 8000c9e:	e00e      	b.n	8000cbe <ltc6811_rdcv_reg+0x80>
	  	  }
	  	  else if (reg == 5) //4: RDCVE
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d104      	bne.n	8000cb0 <ltc6811_rdcv_reg+0x72>
	  	  {
	  	    cmd[1] = 0x09;
 8000ca6:	2309      	movs	r3, #9
 8000ca8:	727b      	strb	r3, [r7, #9]
	  	    cmd[0] = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	723b      	strb	r3, [r7, #8]
 8000cae:	e006      	b.n	8000cbe <ltc6811_rdcv_reg+0x80>
	  	  }
	  	  else if (reg == 6) //4: RDCVF
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d103      	bne.n	8000cbe <ltc6811_rdcv_reg+0x80>
	  	  {
	  	    cmd[1] = 0x0B;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	727b      	strb	r3, [r7, #9]
	  	    cmd[0] = 0x00;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	723b      	strb	r3, [r7, #8]
	  	  }


	  	  cmd_pec = pec15_calc(2, cmd);
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff fb65 	bl	8000394 <pec15_calc>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	81bb      	strh	r3, [r7, #12]
	  	  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000cce:	89bb      	ldrh	r3, [r7, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	72bb      	strb	r3, [r7, #10]
	  	  cmd[3] = (uint8_t)(cmd_pec);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	72fb      	strb	r3, [r7, #11]

	  	  wakeup_idle (spi_channel); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000cde:	4668      	mov	r0, sp
 8000ce0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ce4:	2254      	movs	r2, #84	; 0x54
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f004 fb88 	bl	80053fc <memcpy>
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf2:	f7ff faef 	bl	80002d4 <wakeup_idle>

	  	  outputCS(0);								// Set the  CS to low and then to high to ensure the CS is low
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fad2 	bl	80002a0 <outputCS>
	  	  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 8000cfc:	466d      	mov	r5, sp
 8000cfe:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000d16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f000 fa6a 	bl	80011f6 <delay_us>
	  	  outputCS(1);								// Set the  CS to high
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff fabc 	bl	80002a0 <outputCS>
	  	  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 8000d28:	466d      	mov	r5, sp
 8000d2a:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000d42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f000 fa54 	bl	80011f6 <delay_us>
	  	  outputCS(0);								// Set the CS to low to send data
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff faa6 	bl	80002a0 <outputCS>
	  	  //HAL_SPI_TransmitReceive(&spi_channel, cmd, data, REG_LEN_TOTAL_IC,HAL_MAX_DELAY);
	  	  spi_transmit_recieve(spi_channel, cmd, data, REG_LEN_TOTAL_IC); // Sends the CMD trough SPI
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	7bba      	ldrb	r2, [r7, #14]
 8000d5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	9216      	str	r2, [sp, #88]	; 0x58
 8000d62:	9315      	str	r3, [sp, #84]	; 0x54
 8000d64:	4668      	mov	r0, sp
 8000d66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d6a:	2254      	movs	r2, #84	; 0x54
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f004 fb45 	bl	80053fc <memcpy>
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d78:	f000 fa58 	bl	800122c <spi_transmit_recieve>
	  	  outputCS(1);					//The Low state of the chip select pin is set
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff fa8f 	bl	80002a0 <outputCS>
	  	}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000d8c:	b002      	add	sp, #8
 8000d8e:	4770      	bx	lr

08000d90 <ltc6811_adax>:
	  		  	|CMD[0:1] |  15   |  14   |  13   |  12   |  11   |  10   |   9   |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
	  		  	|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
	  		  	|ADAX:      |   0   |   0   |   0   |   0   |   0   |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  0    |   0   | CHG[2]| CHG[1]| CHG[0]|
	  	  * Inputs: The Conversion Mode (MD), GPIO Selection for ADC and the SPI channel which has to be used
	  		  	*/
void ltc6811_adax(uint8_t MD,uint8_t CHG,SPI_HandleTypeDef spi_channel){
 8000d90:	b082      	sub	sp, #8
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b09a      	sub	sp, #104	; 0x68
 8000d96:	af16      	add	r7, sp, #88	; 0x58
 8000d98:	f107 0c18 	add.w	ip, r7, #24
 8000d9c:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	460b      	mov	r3, r1
 8000da6:	71bb      	strb	r3, [r7, #6]
	  		    uint8_t cmd[4];
	  		    uint16_t cmd_pec;
	  		    uint8_t md_bits;

	  		    md_bits = (MD & 0x02) >> 1;
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	105b      	asrs	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
	  		    cmd[0] = md_bits + 0x04;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	3304      	adds	r3, #4
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	723b      	strb	r3, [r7, #8]
	  		    md_bits = (MD & 0x01) << 7;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	01db      	lsls	r3, r3, #7
 8000dc0:	73fb      	strb	r3, [r7, #15]
	  		    cmd[1] = md_bits + 0x60 + CHG ;
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	3360      	adds	r3, #96	; 0x60
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	727b      	strb	r3, [r7, #9]

	  		    cmd_pec = pec15_calc(2, cmd);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f7ff fadc 	bl	8000394 <pec15_calc>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	81bb      	strh	r3, [r7, #12]
	  		    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000de0:	89bb      	ldrh	r3, [r7, #12]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	72bb      	strb	r3, [r7, #10]
	  		    cmd[3] = (uint8_t)(cmd_pec);
 8000dea:	89bb      	ldrh	r3, [r7, #12]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	72fb      	strb	r3, [r7, #11]

	  		    wakeup_idle (spi_channel); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000df0:	4668      	mov	r0, sp
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	2254      	movs	r2, #84	; 0x54
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f004 faff 	bl	80053fc <memcpy>
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e04:	f7ff fa66 	bl	80002d4 <wakeup_idle>
	  		    outputCS(0);					//The Low state of the chip select pin is set
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fa49 	bl	80002a0 <outputCS>
	  		    HAL_SPI_Transmit(&spi_channel, cmd, 4, HAL_MAX_DELAY);
 8000e0e:	f107 0108 	add.w	r1, r7, #8
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	2204      	movs	r2, #4
 8000e18:	f107 0018 	add.w	r0, r7, #24
 8000e1c:	f002 ff6b 	bl	8003cf6 <HAL_SPI_Transmit>
	  		    outputCS(0);					//The Low state of the chip select pin is set
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fa3d 	bl	80002a0 <outputCS>

	  		  }
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e30:	b002      	add	sp, #8
 8000e32:	4770      	bx	lr

08000e34 <ltc6811_rdaux>:
int8_t ltc6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     uint16_t aux_codes[][AUX_CHANNELS],//A two dimensional array of the gpio voltage codes.
					 SPI_HandleTypeDef spi_channel,
					 TIM_HandleTypeDef TIMER_CHANNEL)
{
 8000e34:	b082      	sub	sp, #8
 8000e36:	b5b0      	push	{r4, r5, r7, lr}
 8000e38:	b0b6      	sub	sp, #216	; 0xd8
 8000e3a:	af2c      	add	r7, sp, #176	; 0xb0
 8000e3c:	603a      	str	r2, [r7, #0]
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	460b      	mov	r3, r1
 8000e46:	71bb      	strb	r3, [r7, #6]
  const uint8_t NUM_RX_BYT = 8;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	75fb      	strb	r3, [r7, #23]
  const uint8_t BYT_IN_REG = 6;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	75bb      	strb	r3, [r7, #22]
  const uint8_t GPIO_IN_REG = 3;
 8000e50:	2303      	movs	r3, #3
 8000e52:	757b      	strb	r3, [r7, #21]
  const uint8_t NUM_GPIO_REG = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	753b      	strb	r3, [r7, #20]
  uint8_t *data;
  uint8_t data_counter = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int8_t pec_error = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint16_t parsed_aux;
  uint16_t received_pec;
  uint16_t data_pec;
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	79ba      	ldrb	r2, [r7, #6]
 8000e68:	fb02 f303 	mul.w	r3, r2, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 f9c5 	bl	80051fc <malloc>
 8000e72:	4603      	mov	r3, r0
 8000e74:	613b      	str	r3, [r7, #16]

  if (reg == 0)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 809d 	bne.w	8000fb8 <ltc6811_rdaux+0x184>
  {

    for (uint8_t gpio_reg = 1; gpio_reg<NUM_GPIO_REG+1; gpio_reg++)                 //executes once for each of the ltc6811 aux voltage registers
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000e84:	e091      	b.n	8000faa <ltc6811_rdaux+0x176>
    {
      data_counter = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      ltc6811_rdaux_reg(gpio_reg, total_ic,data, spi_channel, TIMER_CHANNEL);                 //Reads the raw auxiliary register data into the data[] array
 8000e8c:	79bd      	ldrb	r5, [r7, #6]
 8000e8e:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8000e92:	a818      	add	r0, sp, #96	; 0x60
 8000e94:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e98:	224c      	movs	r2, #76	; 0x4c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f004 faae 	bl	80053fc <memcpy>
 8000ea0:	4668      	mov	r0, sp
 8000ea2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ea6:	2260      	movs	r2, #96	; 0x60
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f004 faa7 	bl	80053fc <memcpy>
 8000eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f000 f908 	bl	80010ca <ltc6811_rdaux_reg>

      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every ltc6811 in the daisy chain
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000ec0:	e069      	b.n	8000f96 <ltc6811_rdaux+0x162>
      {
        // current_ic is used as the IC counter


        for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000ec8:	e02f      	b.n	8000f2a <ltc6811_rdaux+0xf6>
        {
          // loops once for each of the 3 gpio voltage codes in the register

          parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 8000eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eda:	3301      	adds	r3, #1
 8000edc:	6939      	ldr	r1, [r7, #16]
 8000ede:	440b      	add	r3, r1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	4413      	add	r3, r2
 8000eea:	817b      	strh	r3, [r7, #10]
          // create the parsed gpio voltage code

          aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
 8000eec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000f02:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000f06:	3a01      	subs	r2, #1
 8000f08:	7d78      	ldrb	r0, [r7, #21]
 8000f0a:	fb00 f202 	mul.w	r2, r0, r2
 8000f0e:	440a      	add	r2, r1
 8000f10:	8979      	ldrh	r1, [r7, #10]
 8000f12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
          data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 8000f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8000f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f24:	3301      	adds	r3, #1
 8000f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000f2a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f2e:	7d7b      	ldrb	r3, [r7, #21]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3ca      	bcc.n	8000eca <ltc6811_rdaux+0x96>
          //must increment by two for each parsed gpio voltage code

        }

        received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 8000f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f48:	3301      	adds	r3, #1
 8000f4a:	6939      	ldr	r1, [r7, #16]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	81fb      	strh	r3, [r7, #14]
        //after the 6 gpio voltage data bytes
        data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8000f56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f5a:	7dfa      	ldrb	r2, [r7, #23]
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	441a      	add	r2, r3
 8000f66:	7dbb      	ldrb	r3, [r7, #22]
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fa12 	bl	8000394 <pec15_calc>
 8000f70:	4603      	mov	r3, r0
 8000f72:	81bb      	strh	r3, [r7, #12]
        if (received_pec != data_pec)
 8000f74:	89fa      	ldrh	r2, [r7, #14]
 8000f76:	89bb      	ldrh	r3, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d002      	beq.n	8000f82 <ltc6811_rdaux+0x14e>
        {
          pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8000f7c:	23ff      	movs	r3, #255	; 0xff
 8000f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          //are detected in the received serial data
        }

        data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8000f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f86:	3302      	adds	r3, #2
 8000f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every ltc6811 in the daisy chain
 8000f8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f90:	3301      	adds	r3, #1
 8000f92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000f96:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d390      	bcc.n	8000ec2 <ltc6811_rdaux+0x8e>
    for (uint8_t gpio_reg = 1; gpio_reg<NUM_GPIO_REG+1; gpio_reg++)                 //executes once for each of the ltc6811 aux voltage registers
 8000fa0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000faa:	7d3a      	ldrb	r2, [r7, #20]
 8000fac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f4bf af68 	bcs.w	8000e86 <ltc6811_rdaux+0x52>
 8000fb6:	e07c      	b.n	80010b2 <ltc6811_rdaux+0x27e>

  }
  else
  {

    ltc6811_rdaux_reg(reg, total_ic, data, spi_channel, TIMER_CHANNEL);
 8000fb8:	79bd      	ldrb	r5, [r7, #6]
 8000fba:	79fc      	ldrb	r4, [r7, #7]
 8000fbc:	a818      	add	r0, sp, #96	; 0x60
 8000fbe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fc2:	224c      	movs	r2, #76	; 0x4c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f004 fa19 	bl	80053fc <memcpy>
 8000fca:	4668      	mov	r0, sp
 8000fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fd0:	2260      	movs	r2, #96	; 0x60
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f004 fa12 	bl	80053fc <memcpy>
 8000fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4629      	mov	r1, r5
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f000 f873 	bl	80010ca <ltc6811_rdaux_reg>
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every ltc6811 in the daisy chain
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	e05f      	b.n	80010aa <ltc6811_rdaux+0x276>
    {
      // current_ic is used as an IC counter


      for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	e02a      	b.n	8001046 <ltc6811_rdaux+0x212>
      {
        // once for each aux voltage in the register

        parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 8000ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001000:	3301      	adds	r3, #1
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	440b      	add	r3, r1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b29b      	uxth	r3, r3
 800100e:	4413      	add	r3, r2
 8001010:	817b      	strh	r3, [r7, #10]
        // create the parsed gpio voltage code
        aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	461a      	mov	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	3a01      	subs	r2, #1
 8001026:	7d79      	ldrb	r1, [r7, #21]
 8001028:	fb02 f101 	mul.w	r1, r2, r1
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	440a      	add	r2, r1
 8001030:	8979      	ldrh	r1, [r7, #10]
 8001032:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        //aux_codes[0][ 0 + ((1 - 1) * 3)] = aux_codes[0][0] = parsed_aux
        //aux_codes[0][ 1 + ((1 - 1) * 3)] = aux_codes[0][1] = parsed_aux
        //aux_codes[0][ 2 + ((1 - 1) * 3)] = aux_codes[0][2] = parsed_aux
        data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 8001036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800103a:	3302      	adds	r3, #2
 800103c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	3301      	adds	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	7d7b      	ldrb	r3, [r7, #21]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	429a      	cmp	r2, r3
 800104c:	dbd0      	blt.n	8000ff0 <ltc6811_rdaux+0x1bc>
        //must increment by two for each parsed gpio voltage code
      }

      received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 800104e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b29b      	uxth	r3, r3
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b29a      	uxth	r2, r3
 800105e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001062:	3301      	adds	r3, #1
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	440b      	add	r3, r1
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	81fb      	strh	r3, [r7, #14]
      //after the 6 gpio voltage data bytes
      data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	461a      	mov	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	441a      	add	r2, r3
 800107e:	7dbb      	ldrb	r3, [r7, #22]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f986 	bl	8000394 <pec15_calc>
 8001088:	4603      	mov	r3, r0
 800108a:	81bb      	strh	r3, [r7, #12]
      if (received_pec != data_pec)
 800108c:	89fa      	ldrh	r2, [r7, #14]
 800108e:	89bb      	ldrh	r3, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d002      	beq.n	800109a <ltc6811_rdaux+0x266>
      {
        pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 8001094:	23ff      	movs	r3, #255	; 0xff
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        //are detected in the received serial data
      }

      data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 800109a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109e:	3302      	adds	r3, #2
 80010a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every ltc6811 in the daisy chain
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	3301      	adds	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	db9b      	blt.n	8000fea <ltc6811_rdaux+0x1b6>
      //must be incremented by 2 bytes to point to the next ICs gpio voltage data
    }
  }
  free(data);
 80010b2:	6938      	ldr	r0, [r7, #16]
 80010b4:	f004 f8aa 	bl	800520c <free>
  return (pec_error);
 80010b8:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80010c6:	b002      	add	sp, #8
 80010c8:	4770      	bx	lr

080010ca <ltc6811_rdaux_reg>:
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data, //Array of the unparsed auxiliary codes
					   SPI_HandleTypeDef spi_channel,
					   TIM_HandleTypeDef TIMER_CHANNEL
					   )
{
 80010ca:	b082      	sub	sp, #8
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b09a      	sub	sp, #104	; 0x68
 80010d0:	af16      	add	r7, sp, #88	; 0x58
 80010d2:	603a      	str	r2, [r7, #0]
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	460b      	mov	r3, r1
 80010dc:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 80010de:	2308      	movs	r3, #8
 80010e0:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;


  if (reg == 1)     //Read back auxiliary group A
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d104      	bne.n	80010f2 <ltc6811_rdaux_reg+0x28>
  {
    cmd[1] = 0x0C;
 80010e8:	230c      	movs	r3, #12
 80010ea:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80010ec:	2300      	movs	r3, #0
 80010ee:	723b      	strb	r3, [r7, #8]
 80010f0:	e01b      	b.n	800112a <ltc6811_rdaux_reg+0x60>
  }
  else if (reg == 2)  //Read back auxiliary group B
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d104      	bne.n	8001102 <ltc6811_rdaux_reg+0x38>
  {
    cmd[1] = 0x0e;
 80010f8:	230e      	movs	r3, #14
 80010fa:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80010fc:	2300      	movs	r3, #0
 80010fe:	723b      	strb	r3, [r7, #8]
 8001100:	e013      	b.n	800112a <ltc6811_rdaux_reg+0x60>
  }
  else if (reg == 3)  //Read back auxiliary group B
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d104      	bne.n	8001112 <ltc6811_rdaux_reg+0x48>
  {
    cmd[1] = 0x0D;
 8001108:	230d      	movs	r3, #13
 800110a:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800110c:	2300      	movs	r3, #0
 800110e:	723b      	strb	r3, [r7, #8]
 8001110:	e00b      	b.n	800112a <ltc6811_rdaux_reg+0x60>
  }
  else if (reg == 4)  //Read back auxiliary group B
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b04      	cmp	r3, #4
 8001116:	d104      	bne.n	8001122 <ltc6811_rdaux_reg+0x58>
  {
    cmd[1] = 0x0F;
 8001118:	230f      	movs	r3, #15
 800111a:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800111c:	2300      	movs	r3, #0
 800111e:	723b      	strb	r3, [r7, #8]
 8001120:	e003      	b.n	800112a <ltc6811_rdaux_reg+0x60>
  }
  else          //Read back auxiliary group A
  {
    cmd[1] = 0x0C;
 8001122:	230c      	movs	r3, #12
 8001124:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = pec15_calc(2, cmd);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff f92f 	bl	8000394 <pec15_calc>
 8001136:	4603      	mov	r3, r0
 8001138:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800113a:	89bb      	ldrh	r3, [r7, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001144:	89bb      	ldrh	r3, [r7, #12]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	72fb      	strb	r3, [r7, #11]

	  wakeup_idle (spi_channel); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800114a:	4668      	mov	r0, sp
 800114c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001150:	2254      	movs	r2, #84	; 0x54
 8001152:	4619      	mov	r1, r3
 8001154:	f004 f952 	bl	80053fc <memcpy>
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115e:	f7ff f8b9 	bl	80002d4 <wakeup_idle>

	  outputCS(0);								// Set the  CS to low and then to high to ensure the CS is low
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff f89c 	bl	80002a0 <outputCS>
	  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 8001168:	466d      	mov	r5, sp
 800116a:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800117e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001182:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001188:	200a      	movs	r0, #10
 800118a:	f000 f834 	bl	80011f6 <delay_us>
	  outputCS(1);								// Set the  CS to high
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff f886 	bl	80002a0 <outputCS>
	  delay_us(10, TIMER_CHANNEL);				// Waits 10 us
 8001194:	466d      	mov	r5, sp
 8001196:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b4:	200a      	movs	r0, #10
 80011b6:	f000 f81e 	bl	80011f6 <delay_us>
	  outputCS(0);								// Set the CS to low to send datat
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff f870 	bl	80002a0 <outputCS>
	  HAL_SPI_TransmitReceive(&spi_channel, cmd, data, (REG_LEN*total_ic),HAL_MAX_DELAY); // Sends the CMD trough SPI
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	fb12 f303 	smulbb	r3, r2, r3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f107 0108 	add.w	r1, r7, #8
 80011d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80011d6:	f04f 32ff 	mov.w	r2, #4294967295
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	f002 feff 	bl	8003fe0 <HAL_SPI_TransmitReceive>
	  outputCS(1);								// Set the  CS to high
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff f85c 	bl	80002a0 <outputCS>

}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80011f2:	b002      	add	sp, #8
 80011f4:	4770      	bx	lr

080011f6 <delay_us>:
/* Function: delay_us
 * Purpose: Generate a delay in microseconds
 * Inputs: The amount of microseconds of the loop, the timer which has to be used
 */
void delay_us (uint16_t us, TIM_HandleTypeDef timer)
{
 80011f6:	b084      	sub	sp, #16
 80011f8:	b490      	push	{r4, r7}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4604      	mov	r4, r0
 8001200:	f107 0014 	add.w	r0, r7, #20
 8001204:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001208:	4623      	mov	r3, r4
 800120a:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer,0);  					// Set the counter of the timer to 0
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);  		// Wait for the counter to reach the us input in the parameter
 8001212:	bf00      	nop
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3fa      	bcc.n	8001214 <delay_us+0x1e>
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bc90      	pop	{r4, r7}
 8001228:	b004      	add	sp, #16
 800122a:	4770      	bx	lr

0800122c <spi_transmit_recieve>:
    ITM_SendChar((*ptr++));
  return len;
}

void spi_transmit_recieve(SPI_HandleTypeDef spi_channel, uint8_t cmd_input, uint8_t *data, uint8_t REG_LEN_TOTAL_IC)
{
 800122c:	b084      	sub	sp, #16
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af02      	add	r7, sp, #8
 8001234:	f107 0c10 	add.w	ip, r7, #16
 8001238:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t MSG = 0XFF;
 800123c:	23ff      	movs	r3, #255	; 0xff
 800123e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&spi_channel, cmd_input, 4, HAL_MAX_DELAY);
 8001240:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	2204      	movs	r2, #4
 800124c:	f107 0010 	add.w	r0, r7, #16
 8001250:	f002 fd51 	bl	8003cf6 <HAL_SPI_Transmit>
	for(int i = 0; i < REG_LEN_TOTAL_IC; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	e011      	b.n	800127e <spi_transmit_recieve+0x52>
	{
		HAL_SPI_TransmitReceive(&spi_channel, MSG, data[i], 1, HAL_MAX_DELAY);
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	4619      	mov	r1, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	f107 0010 	add.w	r0, r7, #16
 8001274:	f002 feb4 	bl	8003fe0 <HAL_SPI_TransmitReceive>
	for(int i = 0; i < REG_LEN_TOTAL_IC; i++)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbe8      	blt.n	800125a <spi_transmit_recieve+0x2e>
	}
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001294:	b004      	add	sp, #16
 8001296:	4770      	bx	lr

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b0ae      	sub	sp, #184	; 0xb8
 800129c:	af2c      	add	r7, sp, #176	; 0xb0
  /* USER CODE BEGIN 1 */
	wakeup_sleep(hspi1, htim1, ICn, DELAY_SLEEP);
 800129e:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <main+0x1f0>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4c7a      	ldr	r4, [pc, #488]	; (800148c <main+0x1f4>)
 80012a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80012a6:	2301      	movs	r3, #1
 80012a8:	9328      	str	r3, [sp, #160]	; 0xa0
 80012aa:	4a79      	ldr	r2, [pc, #484]	; (8001490 <main+0x1f8>)
 80012ac:	ab15      	add	r3, sp, #84	; 0x54
 80012ae:	4611      	mov	r1, r2
 80012b0:	224c      	movs	r2, #76	; 0x4c
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f8a2 	bl	80053fc <memcpy>
 80012b8:	4668      	mov	r0, sp
 80012ba:	f104 0310 	add.w	r3, r4, #16
 80012be:	2254      	movs	r2, #84	; 0x54
 80012c0:	4619      	mov	r1, r3
 80012c2:	f004 f89b 	bl	80053fc <memcpy>
 80012c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ca:	f7ff f822 	bl	8000312 <wakeup_sleep>
	PWM = set_pwm(ICn);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff f898 	bl	8000404 <set_pwm>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <main+0x1fc>)
 80012d8:	6013      	str	r3, [r2, #0]
	ltc6811_wrpwm(ICn, PWM, hspi1, htim1);
 80012da:	4b6e      	ldr	r3, [pc, #440]	; (8001494 <main+0x1fc>)
 80012dc:	681d      	ldr	r5, [r3, #0]
 80012de:	4c6b      	ldr	r4, [pc, #428]	; (800148c <main+0x1f4>)
 80012e0:	4a6b      	ldr	r2, [pc, #428]	; (8001490 <main+0x1f8>)
 80012e2:	ab17      	add	r3, sp, #92	; 0x5c
 80012e4:	4611      	mov	r1, r2
 80012e6:	224c      	movs	r2, #76	; 0x4c
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 f887 	bl	80053fc <memcpy>
 80012ee:	4668      	mov	r0, sp
 80012f0:	f104 0308 	add.w	r3, r4, #8
 80012f4:	225c      	movs	r2, #92	; 0x5c
 80012f6:	4619      	mov	r1, r3
 80012f8:	f004 f880 	bl	80053fc <memcpy>
 80012fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001300:	4629      	mov	r1, r5
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff f910 	bl	8000528 <ltc6811_wrpwm>
	int *DCC = Balancing(V_MIN, VCELL_MIN, cell_codes, V_BALANCING, DIFF_MAX, ICn);
 8001308:	4b63      	ldr	r3, [pc, #396]	; (8001498 <main+0x200>)
 800130a:	8818      	ldrh	r0, [r3, #0]
 800130c:	4b63      	ldr	r3, [pc, #396]	; (800149c <main+0x204>)
 800130e:	8819      	ldrh	r1, [r3, #0]
 8001310:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <main+0x208>)
 8001312:	881a      	ldrh	r2, [r3, #0]
 8001314:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <main+0x20c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2401      	movs	r4, #1
 800131a:	9401      	str	r4, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4613      	mov	r3, r2
 8001320:	4a61      	ldr	r2, [pc, #388]	; (80014a8 <main+0x210>)
 8001322:	f7fe ff63 	bl	80001ec <Balancing>
 8001326:	6078      	str	r0, [r7, #4]
	config = set_cfgr(ICn, BYTES_IN_REG, DCC);
 8001328:	4b60      	ldr	r3, [pc, #384]	; (80014ac <main+0x214>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4619      	mov	r1, r3
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff f9c7 	bl	80006c4 <set_cfgr>
 8001336:	4603      	mov	r3, r0
 8001338:	4a5d      	ldr	r2, [pc, #372]	; (80014b0 <main+0x218>)
 800133a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f000 fc53 	bl	8001be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f8c2 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001344:	f000 f9e4 	bl	8001710 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001348:	f000 f9b4 	bl	80016b4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800134c:	f000 f920 	bl	8001590 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001350:	f000 f95c 	bl	800160c <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while (1)
  {
		int *DCC = Balancing(V_MIN, VCELL_MIN, cell_codes, V_BALANCING, DIFF_MAX, ICn);
 8001354:	4b50      	ldr	r3, [pc, #320]	; (8001498 <main+0x200>)
 8001356:	8818      	ldrh	r0, [r3, #0]
 8001358:	4b50      	ldr	r3, [pc, #320]	; (800149c <main+0x204>)
 800135a:	8819      	ldrh	r1, [r3, #0]
 800135c:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <main+0x208>)
 800135e:	881a      	ldrh	r2, [r3, #0]
 8001360:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <main+0x20c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2401      	movs	r4, #1
 8001366:	9401      	str	r4, [sp, #4]
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4613      	mov	r3, r2
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <main+0x210>)
 800136e:	f7fe ff3d 	bl	80001ec <Balancing>
 8001372:	6038      	str	r0, [r7, #0]
		config = set_cfgr(ICn, BYTES_IN_REG, DCC);
 8001374:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <main+0x214>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff f9a1 	bl	80006c4 <set_cfgr>
 8001382:	4603      	mov	r3, r0
 8001384:	4a4a      	ldr	r2, [pc, #296]	; (80014b0 <main+0x218>)
 8001386:	6013      	str	r3, [r2, #0]
		ltc6811_wrcfg(ICn, config, hspi1, htim1);
 8001388:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <main+0x218>)
 800138a:	681d      	ldr	r5, [r3, #0]
 800138c:	4c3f      	ldr	r4, [pc, #252]	; (800148c <main+0x1f4>)
 800138e:	4a40      	ldr	r2, [pc, #256]	; (8001490 <main+0x1f8>)
 8001390:	ab17      	add	r3, sp, #92	; 0x5c
 8001392:	4611      	mov	r1, r2
 8001394:	224c      	movs	r2, #76	; 0x4c
 8001396:	4618      	mov	r0, r3
 8001398:	f004 f830 	bl	80053fc <memcpy>
 800139c:	4668      	mov	r0, sp
 800139e:	f104 0308 	add.w	r3, r4, #8
 80013a2:	225c      	movs	r2, #92	; 0x5c
 80013a4:	4619      	mov	r1, r3
 80013a6:	f004 f829 	bl	80053fc <memcpy>
 80013aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80013ae:	4629      	mov	r1, r5
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff fa05 	bl	80007c0 <ltc6811_wrcfg>
		ltc6811_adcv(MD_1, DCP_1, CH_1,hspi1);
 80013b6:	4c35      	ldr	r4, [pc, #212]	; (800148c <main+0x1f4>)
 80013b8:	4668      	mov	r0, sp
 80013ba:	1d23      	adds	r3, r4, #4
 80013bc:	2260      	movs	r2, #96	; 0x60
 80013be:	4619      	mov	r1, r3
 80013c0:	f004 f81c 	bl	80053fc <memcpy>
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2002      	movs	r0, #2
 80013cc:	f7ff fabd 	bl	800094a <ltc6811_adcv>
		PEC_ERROR = ltc6811_rdcv(REG_VOLT, ICn, cell_codes,hspi1, htim1);
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <main+0x21c>)
 80013d2:	781d      	ldrb	r5, [r3, #0]
 80013d4:	4c2d      	ldr	r4, [pc, #180]	; (800148c <main+0x1f4>)
 80013d6:	4a2e      	ldr	r2, [pc, #184]	; (8001490 <main+0x1f8>)
 80013d8:	ab18      	add	r3, sp, #96	; 0x60
 80013da:	4611      	mov	r1, r2
 80013dc:	224c      	movs	r2, #76	; 0x4c
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 f80c 	bl	80053fc <memcpy>
 80013e4:	4668      	mov	r0, sp
 80013e6:	1d23      	adds	r3, r4, #4
 80013e8:	2260      	movs	r2, #96	; 0x60
 80013ea:	4619      	mov	r1, r3
 80013ec:	f004 f806 	bl	80053fc <memcpy>
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <main+0x210>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	4628      	mov	r0, r5
 80013f8:	f7ff fafd 	bl	80009f6 <ltc6811_rdcv>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <main+0x220>)
 8001402:	701a      	strb	r2, [r3, #0]
		ltc6811_wrcfg(ICn,config,hspi1, htim1);
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <main+0x218>)
 8001406:	681d      	ldr	r5, [r3, #0]
 8001408:	4c20      	ldr	r4, [pc, #128]	; (800148c <main+0x1f4>)
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <main+0x1f8>)
 800140c:	ab17      	add	r3, sp, #92	; 0x5c
 800140e:	4611      	mov	r1, r2
 8001410:	224c      	movs	r2, #76	; 0x4c
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fff2 	bl	80053fc <memcpy>
 8001418:	4668      	mov	r0, sp
 800141a:	f104 0308 	add.w	r3, r4, #8
 800141e:	225c      	movs	r2, #92	; 0x5c
 8001420:	4619      	mov	r1, r3
 8001422:	f003 ffeb 	bl	80053fc <memcpy>
 8001426:	e894 000c 	ldmia.w	r4, {r2, r3}
 800142a:	4629      	mov	r1, r5
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff f9c7 	bl	80007c0 <ltc6811_wrcfg>
	 	ltc6811_adax(MD_1,CHG,hspi1);
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <main+0x224>)
 8001434:	781d      	ldrb	r5, [r3, #0]
 8001436:	4c15      	ldr	r4, [pc, #84]	; (800148c <main+0x1f4>)
 8001438:	4668      	mov	r0, sp
 800143a:	f104 0308 	add.w	r3, r4, #8
 800143e:	225c      	movs	r2, #92	; 0x5c
 8001440:	4619      	mov	r1, r3
 8001442:	f003 ffdb 	bl	80053fc <memcpy>
 8001446:	e894 000c 	ldmia.w	r4, {r2, r3}
 800144a:	4629      	mov	r1, r5
 800144c:	2002      	movs	r0, #2
 800144e:	f7ff fc9f 	bl	8000d90 <ltc6811_adax>
	  	PEC_ERROR = ltc6811_rdaux(REG_TEMP, ICn, aux_codes, hspi1, htim1);
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <main+0x228>)
 8001454:	781d      	ldrb	r5, [r3, #0]
 8001456:	4c0d      	ldr	r4, [pc, #52]	; (800148c <main+0x1f4>)
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <main+0x1f8>)
 800145a:	ab18      	add	r3, sp, #96	; 0x60
 800145c:	4611      	mov	r1, r2
 800145e:	224c      	movs	r2, #76	; 0x4c
 8001460:	4618      	mov	r0, r3
 8001462:	f003 ffcb 	bl	80053fc <memcpy>
 8001466:	4668      	mov	r0, sp
 8001468:	1d23      	adds	r3, r4, #4
 800146a:	2260      	movs	r2, #96	; 0x60
 800146c:	4619      	mov	r1, r3
 800146e:	f003 ffc5 	bl	80053fc <memcpy>
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <main+0x22c>)
 8001476:	2101      	movs	r1, #1
 8001478:	4628      	mov	r0, r5
 800147a:	f7ff fcdb 	bl	8000e34 <ltc6811_rdaux>
 800147e:	4603      	mov	r3, r0
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <main+0x220>)
 8001484:	701a      	strb	r2, [r3, #0]
  {
 8001486:	e765      	b.n	8001354 <main+0xbc>
 8001488:	20000204 	.word	0x20000204
 800148c:	20000288 	.word	0x20000288
 8001490:	200002ec 	.word	0x200002ec
 8001494:	2000084c 	.word	0x2000084c
 8001498:	20000208 	.word	0x20000208
 800149c:	20000206 	.word	0x20000206
 80014a0:	2000020a 	.word	0x2000020a
 80014a4:	2000020c 	.word	0x2000020c
 80014a8:	20000854 	.word	0x20000854
 80014ac:	20000203 	.word	0x20000203
 80014b0:	20000848 	.word	0x20000848
 80014b4:	20000844 	.word	0x20000844
 80014b8:	20000850 	.word	0x20000850
 80014bc:	20000201 	.word	0x20000201
 80014c0:	20000202 	.word	0x20000202
 80014c4:	2000086c 	.word	0x2000086c

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	; 0x58
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2244      	movs	r2, #68	; 0x44
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 ff4c 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	463b      	mov	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ee:	f001 f809 	bl	8002504 <HAL_PWREx_ControlVoltageScaling>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014f8:	f000 f9b2 	bl	8001860 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014fc:	f000 ffe4 	bl	80024c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <SystemClock_Config+0xc4>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <SystemClock_Config+0xc4>)
 8001508:	f023 0318 	bic.w	r3, r3, #24
 800150c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001510:	2314      	movs	r3, #20
 8001512:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001518:	2301      	movs	r3, #1
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001520:	2360      	movs	r3, #96	; 0x60
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001524:	2302      	movs	r3, #2
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001528:	2301      	movs	r3, #1
 800152a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001530:	2328      	movs	r3, #40	; 0x28
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001534:	2302      	movs	r3, #2
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4618      	mov	r0, r3
 8001546:	f001 f853 	bl	80025f0 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001550:	f000 f986 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001558:	2303      	movs	r3, #3
 800155a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800156a:	463b      	mov	r3, r7
 800156c:	2104      	movs	r1, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fc58 	bl	8002e24 <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800157a:	f000 f971 	bl	8001860 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800157e:	f002 f939 	bl	80037f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001582:	bf00      	nop
 8001584:	3758      	adds	r7, #88	; 0x58
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_SPI1_Init+0x74>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <MX_SPI1_Init+0x78>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_SPI1_Init+0x74>)
 800159c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_SPI1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_SPI1_Init+0x74>)
 80015aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_SPI1_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_SPI1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_SPI1_Init+0x74>)
 80015be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_SPI1_Init+0x74>)
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_SPI1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_SPI1_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_SPI1_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_SPI1_Init+0x74>)
 80015de:	2207      	movs	r2, #7
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_SPI1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_SPI1_Init+0x74>)
 80015ea:	2208      	movs	r2, #8
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_SPI1_Init+0x74>)
 80015f0:	f002 fade 	bl	8003bb0 <HAL_SPI_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 f931 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000288 	.word	0x20000288
 8001608:	40013000 	.word	0x40013000

0800160c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <MX_TIM1_Init+0xa0>)
 800162c:	4a20      	ldr	r2, [pc, #128]	; (80016b0 <MX_TIM1_Init+0xa4>)
 800162e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001632:	224f      	movs	r2, #79	; 0x4f
 8001634:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_TIM1_Init+0xa0>)
 800163e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001642:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_TIM1_Init+0xa0>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001656:	4815      	ldr	r0, [pc, #84]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001658:	f003 f848 	bl	80046ec <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001662:	f000 f8fd 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001674:	f003 f891 	bl	800479a <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800167e:	f000 f8ef 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_TIM1_Init+0xa0>)
 8001694:	f003 fa7e 	bl	8004b94 <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800169e:	f000 f8df 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002ec 	.word	0x200002ec
 80016b0:	40012c00 	.word	0x40012c00

080016b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c2:	2206      	movs	r2, #6
 80016c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c8:	2202      	movs	r2, #2
 80016ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f8:	f000 fd9e 	bl	8002238 <HAL_PCD_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001702:	f000 f8ad 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000338 	.word	0x20000338

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <MX_GPIO_Init+0x140>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a49      	ldr	r2, [pc, #292]	; (8001850 <MX_GPIO_Init+0x140>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <MX_GPIO_Init+0x140>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <MX_GPIO_Init+0x140>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a43      	ldr	r2, [pc, #268]	; (8001850 <MX_GPIO_Init+0x140>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <MX_GPIO_Init+0x140>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <MX_GPIO_Init+0x140>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	4a3d      	ldr	r2, [pc, #244]	; (8001850 <MX_GPIO_Init+0x140>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <MX_GPIO_Init+0x140>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <MX_GPIO_Init+0x140>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	4a37      	ldr	r2, [pc, #220]	; (8001850 <MX_GPIO_Init+0x140>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177a:	4b35      	ldr	r3, [pc, #212]	; (8001850 <MX_GPIO_Init+0x140>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <MX_GPIO_Init+0x140>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a31      	ldr	r2, [pc, #196]	; (8001850 <MX_GPIO_Init+0x140>)
 800178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <MX_GPIO_Init+0x140>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800179e:	f000 ff17 	bl	80025d0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80017a8:	482a      	ldr	r0, [pc, #168]	; (8001854 <MX_GPIO_Init+0x144>)
 80017aa:	f000 fd2d 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2140      	movs	r1, #64	; 0x40
 80017b2:	4829      	ldr	r0, [pc, #164]	; (8001858 <MX_GPIO_Init+0x148>)
 80017b4:	f000 fd28 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4823      	ldr	r0, [pc, #140]	; (800185c <MX_GPIO_Init+0x14c>)
 80017d0:	f000 fb88 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80017d4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4819      	ldr	r0, [pc, #100]	; (8001854 <MX_GPIO_Init+0x144>)
 80017ee:	f000 fb79 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017f2:	2320      	movs	r3, #32
 80017f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_GPIO_Init+0x148>)
 8001806:	f000 fb6d 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_GPIO_Init+0x148>)
 8001822:	f000 fb5f 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001826:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001838:	2308      	movs	r3, #8
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_GPIO_Init+0x148>)
 8001844:	f000 fb4e 	bl	8001ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	48000400 	.word	0x48000400
 8001858:	48001800 	.word	0x48001800
 800185c:	48000800 	.word	0x48000800

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x44>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_MspInit+0x44>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6613      	str	r3, [r2, #96]	; 0x60
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_MspInit+0x44>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x44>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x44>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6593      	str	r3, [r2, #88]	; 0x58
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x44>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_SPI_MspInit+0x7c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d128      	bne.n	8001928 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_SPI_MspInit+0x80>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018da:	4a16      	ldr	r2, [pc, #88]	; (8001934 <HAL_SPI_MspInit+0x80>)
 80018dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e0:	6613      	str	r3, [r2, #96]	; 0x60
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_SPI_MspInit+0x80>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_SPI_MspInit+0x80>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_SPI_MspInit+0x80>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_SPI_MspInit+0x80>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001906:	23d2      	movs	r3, #210	; 0xd2
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001916:	2305      	movs	r3, #5
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001924:	f000 fade 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40013000 	.word	0x40013000
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_TIM_Base_MspInit+0x38>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10b      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001954:	6613      	str	r3, [r2, #96]	; 0x60
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40012c00 	.word	0x40012c00
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b0ae      	sub	sp, #184	; 0xb8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	228c      	movs	r2, #140	; 0x8c
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fceb 	bl	8005374 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a6:	d17c      	bne.n	8001aa2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80019be:	2318      	movs	r3, #24
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80019c2:	2302      	movs	r3, #2
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80019ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 fc0f 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80019e4:	f7ff ff3c 	bl	8001860 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_PCD_MspInit+0x134>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <HAL_PCD_MspInit+0x134>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_PCD_MspInit+0x134>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a00:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f000 fa5b 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f000 fa4a 	bl	8001ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d114      	bne.n	8001a9e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001a8c:	f000 fd90 	bl	80025b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_PCD_MspInit+0x134>)
 8001a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a9c:	e001      	b.n	8001aa2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001a9e:	f000 fd87 	bl	80025b0 <HAL_PWREx_EnableVddUSB>
}
 8001aa2:	bf00      	nop
 8001aa4:	37b8      	adds	r7, #184	; 0xb8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afc:	f000 f8c8 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f003 fc36 	bl	80053a4 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20050000 	.word	0x20050000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20000878 	.word	0x20000878
 8001b6c:	200009c8 	.word	0x200009c8

08001b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b98:	f7ff ffea 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <LoopForever+0xe>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <LoopForever+0x16>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f003 fbf5 	bl	80053b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc6:	f7ff fb67 	bl	8001298 <main>

08001bca <LoopForever>:

LoopForever:
    b LoopForever
 8001bca:	e7fe      	b.n	8001bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bcc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8001bd8:	08005510 	.word	0x08005510
  ldr r2, =_sbss
 8001bdc:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8001be0:	200009c8 	.word	0x200009c8

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>

08001be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f943 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f80e 	bl	8001c18 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	71fb      	strb	r3, [r7, #7]
 8001c06:	e001      	b.n	8001c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c08:	f7ff fe30 	bl	800186c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_InitTick+0x6c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d023      	beq.n	8001c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_InitTick+0x70>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_InitTick+0x6c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f941 	bl	8001eca <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10f      	bne.n	8001c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d809      	bhi.n	8001c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f919 	bl	8001e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_InitTick+0x74>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e007      	b.n	8001c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e004      	b.n	8001c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e001      	b.n	8001c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000218 	.word	0x20000218
 8001c88:	20000210 	.word	0x20000210
 8001c8c:	20000214 	.word	0x20000214

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000218 	.word	0x20000218
 8001cb4:	2000087c 	.word	0x2000087c

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000087c 	.word	0x2000087c

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ffee 	bl	8001cb8 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000218 	.word	0x20000218

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	; (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e48:	d301      	bcc.n	8001e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00f      	b.n	8001e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <SysTick_Config+0x40>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e56:	210f      	movs	r1, #15
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f7ff ff8e 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <SysTick_Config+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <SysTick_Config+0x40>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	e000e010 	.word	0xe000e010

08001e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff47 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff5c 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff8e 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffb0 	bl	8001e38 <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef2:	e166      	b.n	80021c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8158 	beq.w	80021bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d005      	beq.n	8001f24 <HAL_GPIO_Init+0x40>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d130      	bne.n	8001f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 0201 	and.w	r2, r3, #1
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d017      	beq.n	8001fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d123      	bne.n	8002016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	08da      	lsrs	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3208      	adds	r2, #8
 8001fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	6939      	ldr	r1, [r7, #16]
 8002012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0203 	and.w	r2, r3, #3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80b2 	beq.w	80021bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002058:	4b61      	ldr	r3, [pc, #388]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 800205a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205c:	4a60      	ldr	r2, [pc, #384]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6613      	str	r3, [r2, #96]	; 0x60
 8002064:	4b5e      	ldr	r3, [pc, #376]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 8002066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002070:	4a5c      	ldr	r2, [pc, #368]	; (80021e4 <HAL_GPIO_Init+0x300>)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220f      	movs	r2, #15
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800209a:	d02b      	beq.n	80020f4 <HAL_GPIO_Init+0x210>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_GPIO_Init+0x304>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d025      	beq.n	80020f0 <HAL_GPIO_Init+0x20c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_GPIO_Init+0x308>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d01f      	beq.n	80020ec <HAL_GPIO_Init+0x208>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_GPIO_Init+0x30c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d019      	beq.n	80020e8 <HAL_GPIO_Init+0x204>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_GPIO_Init+0x310>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <HAL_GPIO_Init+0x200>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <HAL_GPIO_Init+0x314>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00d      	beq.n	80020e0 <HAL_GPIO_Init+0x1fc>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_GPIO_Init+0x318>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d007      	beq.n	80020dc <HAL_GPIO_Init+0x1f8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_GPIO_Init+0x31c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_GPIO_Init+0x1f4>
 80020d4:	2307      	movs	r3, #7
 80020d6:	e00e      	b.n	80020f6 <HAL_GPIO_Init+0x212>
 80020d8:	2308      	movs	r3, #8
 80020da:	e00c      	b.n	80020f6 <HAL_GPIO_Init+0x212>
 80020dc:	2306      	movs	r3, #6
 80020de:	e00a      	b.n	80020f6 <HAL_GPIO_Init+0x212>
 80020e0:	2305      	movs	r3, #5
 80020e2:	e008      	b.n	80020f6 <HAL_GPIO_Init+0x212>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e006      	b.n	80020f6 <HAL_GPIO_Init+0x212>
 80020e8:	2303      	movs	r3, #3
 80020ea:	e004      	b.n	80020f6 <HAL_GPIO_Init+0x212>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e002      	b.n	80020f6 <HAL_GPIO_Init+0x212>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_GPIO_Init+0x212>
 80020f4:	2300      	movs	r3, #0
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	f002 0203 	and.w	r2, r2, #3
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	4093      	lsls	r3, r2
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002106:	4937      	ldr	r1, [pc, #220]	; (80021e4 <HAL_GPIO_Init+0x300>)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_GPIO_Init+0x320>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002138:	4a32      	ldr	r2, [pc, #200]	; (8002204 <HAL_GPIO_Init+0x320>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800213e:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_GPIO_Init+0x320>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002162:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_GPIO_Init+0x320>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_GPIO_Init+0x320>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800218c:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_GPIO_Init+0x320>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_GPIO_Init+0x320>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_GPIO_Init+0x320>)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3301      	adds	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f47f ae91 	bne.w	8001ef4 <HAL_GPIO_Init+0x10>
  }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40010000 	.word	0x40010000
 80021e8:	48000400 	.word	0x48000400
 80021ec:	48000800 	.word	0x48000800
 80021f0:	48000c00 	.word	0x48000c00
 80021f4:	48001000 	.word	0x48001000
 80021f8:	48001400 	.word	0x48001400
 80021fc:	48001800 	.word	0x48001800
 8002200:	48001c00 	.word	0x48001c00
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002224:	e002      	b.n	800222c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223a:	b08f      	sub	sp, #60	; 0x3c
 800223c:	af0a      	add	r7, sp, #40	; 0x28
 800223e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e116      	b.n	8002478 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fb87 	bl	8001978 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f002 fd37 	bl	8004cfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	687e      	ldr	r6, [r7, #4]
 8002296:	466d      	mov	r5, sp
 8002298:	f106 0410 	add.w	r4, r6, #16
 800229c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ac:	1d33      	adds	r3, r6, #4
 80022ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b0:	6838      	ldr	r0, [r7, #0]
 80022b2:	f002 fcf7 	bl	8004ca4 <USB_CoreInit>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0d7      	b.n	8002478 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fd25 	bl	8004d1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e04a      	b.n	8002370 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	333d      	adds	r3, #61	; 0x3d
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	333c      	adds	r3, #60	; 0x3c
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	b298      	uxth	r0, r3
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3356      	adds	r3, #86	; 0x56
 8002316:	4602      	mov	r2, r0
 8002318:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	3340      	adds	r3, #64	; 0x40
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3344      	adds	r3, #68	; 0x44
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3348      	adds	r3, #72	; 0x48
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	334c      	adds	r3, #76	; 0x4c
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	3301      	adds	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d3af      	bcc.n	80022da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e044      	b.n	800240a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	3301      	adds	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d3b5      	bcc.n	8002380 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	687e      	ldr	r6, [r7, #4]
 800241c:	466d      	mov	r5, sp
 800241e:	f106 0410 	add.w	r4, r6, #16
 8002422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800242e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002432:	1d33      	adds	r3, r6, #4
 8002434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002436:	6838      	ldr	r0, [r7, #0]
 8002438:	f002 fcbe 	bl	8004db8 <USB_DevInit>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e014      	b.n	8002478 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2b01      	cmp	r3, #1
 8002464:	d102      	bne.n	800246c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f80a 	bl	8002480 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fe60 	bl	8005136 <USB_DevDisconnect>

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002480 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b2:	f043 0303 	orr.w	r3, r3, #3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40007000 	.word	0x40007000

080024e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_PWREx_GetVoltageRange+0x18>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000

08002504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002512:	d130      	bne.n	8002576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002520:	d038      	beq.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2232      	movs	r2, #50	; 0x32
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	4a1b      	ldr	r2, [pc, #108]	; (80025ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	3301      	adds	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002548:	e002      	b.n	8002550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3b01      	subs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255c:	d102      	bne.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f2      	bne.n	800254a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002570:	d110      	bne.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e00f      	b.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002582:	d007      	beq.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800258c:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40007000 	.word	0x40007000
 80025a8:	20000210 	.word	0x20000210
 80025ac:	431bde83 	.word	0x431bde83

080025b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80025ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025be:	6053      	str	r3, [r2, #4]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80025da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025de:	6053      	str	r3, [r2, #4]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000

080025f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f000 bc08 	b.w	8002e14 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002604:	4b96      	ldr	r3, [pc, #600]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800260e:	4b94      	ldr	r3, [pc, #592]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80e4 	beq.w	80027ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_RCC_OscConfig+0x4c>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	f040 808b 	bne.w	800274a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b01      	cmp	r3, #1
 8002638:	f040 8087 	bne.w	800274a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800263c:	4b88      	ldr	r3, [pc, #544]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_OscConfig+0x64>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e3df      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_RCC_OscConfig+0x7e>
 8002664:	4b7e      	ldr	r3, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266c:	e005      	b.n	800267a <HAL_RCC_OscConfig+0x8a>
 800266e:	4b7c      	ldr	r3, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267a:	4293      	cmp	r3, r2
 800267c:	d223      	bcs.n	80026c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fd5a 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e3c0      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a72      	ldr	r2, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b70      	ldr	r3, [pc, #448]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	496d      	ldr	r1, [pc, #436]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b0:	4b6b      	ldr	r3, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	4968      	ldr	r1, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	e025      	b.n	8002712 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c6:	4b66      	ldr	r3, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a65      	ldr	r2, [pc, #404]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b63      	ldr	r3, [pc, #396]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4960      	ldr	r1, [pc, #384]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e4:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	495b      	ldr	r1, [pc, #364]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fd1a 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e380      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002712:	f000 fc87 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b51      	ldr	r3, [pc, #324]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4950      	ldr	r1, [pc, #320]	; (8002864 <HAL_RCC_OscConfig+0x274>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	4a4e      	ldr	r2, [pc, #312]	; (8002868 <HAL_RCC_OscConfig+0x278>)
 8002730:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002732:	4b4e      	ldr	r3, [pc, #312]	; (800286c <HAL_RCC_OscConfig+0x27c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fa6e 	bl	8001c18 <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d052      	beq.n	80027ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	e364      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d032      	beq.n	80027b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a42      	ldr	r2, [pc, #264]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800275e:	f7ff faab 	bl	8001cb8 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002766:	f7ff faa7 	bl	8001cb8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e34d      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002778:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a35      	ldr	r2, [pc, #212]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4930      	ldr	r1, [pc, #192]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a2:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	492b      	ldr	r1, [pc, #172]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
 80027b6:	e01a      	b.n	80027ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b8:	4b29      	ldr	r3, [pc, #164]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a28      	ldr	r2, [pc, #160]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027c4:	f7ff fa78 	bl	8001cb8 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027cc:	f7ff fa74 	bl	8001cb8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e31a      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1dc>
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d073      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d005      	beq.n	800280c <HAL_RCC_OscConfig+0x21c>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d10e      	bne.n	8002824 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d10b      	bne.n	8002824 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d063      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d15f      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e2f7      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282c:	d106      	bne.n	800283c <HAL_RCC_OscConfig+0x24c>
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e025      	b.n	8002888 <HAL_RCC_OscConfig+0x298>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002844:	d114      	bne.n	8002870 <HAL_RCC_OscConfig+0x280>
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800284c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a02      	ldr	r2, [pc, #8]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e013      	b.n	8002888 <HAL_RCC_OscConfig+0x298>
 8002860:	40021000 	.word	0x40021000
 8002864:	080054c8 	.word	0x080054c8
 8002868:	20000210 	.word	0x20000210
 800286c:	20000214 	.word	0x20000214
 8002870:	4ba0      	ldr	r3, [pc, #640]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a9f      	ldr	r2, [pc, #636]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b9d      	ldr	r3, [pc, #628]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a9c      	ldr	r2, [pc, #624]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff fa12 	bl	8001cb8 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff fa0e 	bl	8001cb8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e2b4      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028aa:	4b92      	ldr	r3, [pc, #584]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x2a8>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7ff f9fe 	bl	8001cb8 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff f9fa 	bl	8001cb8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e2a0      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d2:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2d0>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d060      	beq.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_OscConfig+0x310>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d119      	bne.n	800292e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d116      	bne.n	800292e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002900:	4b7c      	ldr	r3, [pc, #496]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x328>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e27d      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	4973      	ldr	r1, [pc, #460]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	e040      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d023      	beq.n	800297e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002936:	4b6f      	ldr	r3, [pc, #444]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6e      	ldr	r2, [pc, #440]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7ff f9b9 	bl	8001cb8 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294a:	f7ff f9b5 	bl	8001cb8 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e25b      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b62      	ldr	r3, [pc, #392]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	495f      	ldr	r1, [pc, #380]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	e018      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5c      	ldr	r2, [pc, #368]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff f995 	bl	8001cb8 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7ff f991 	bl	8001cb8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e237      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01c      	beq.n	80029fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ca:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff f970 	bl	8001cb8 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff f96c 	bl	8001cb8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e212      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ee:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <HAL_RCC_OscConfig+0x3ec>
 80029fc:	e01b      	b.n	8002a36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fe:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a04:	4a3b      	ldr	r2, [pc, #236]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7ff f953 	bl	8001cb8 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a16:	f7ff f94f 	bl	8001cb8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1f5      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a28:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ef      	bne.n	8002a16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80a6 	beq.w	8002b90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d118      	bne.n	8002aae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7ff f916 	bl	8001cb8 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7ff f912 	bl	8001cb8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1b8      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4d8>
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac6:	e029      	b.n	8002b1c <HAL_RCC_OscConfig+0x52c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d115      	bne.n	8002afc <HAL_RCC_OscConfig+0x50c>
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	4a03      	ldr	r2, [pc, #12]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x52c>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
 8002afc:	4b9d      	ldr	r3, [pc, #628]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a9c      	ldr	r2, [pc, #624]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0c:	4b99      	ldr	r3, [pc, #612]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a98      	ldr	r2, [pc, #608]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d016      	beq.n	8002b52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7ff f8c8 	bl	8001cb8 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7ff f8c4 	bl	8001cb8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e168      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b42:	4b8c      	ldr	r3, [pc, #560]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ed      	beq.n	8002b2c <HAL_RCC_OscConfig+0x53c>
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7ff f8b1 	bl	8001cb8 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7ff f8ad 	bl	8001cb8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e151      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b70:	4b80      	ldr	r3, [pc, #512]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ed      	bne.n	8002b5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7e:	7ffb      	ldrb	r3, [r7, #31]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	4a7a      	ldr	r2, [pc, #488]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d03c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01c      	beq.n	8002bde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ba4:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002baa:	4a72      	ldr	r2, [pc, #456]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7ff f880 	bl	8001cb8 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bbc:	f7ff f87c 	bl	8001cb8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e122      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bce:	4b69      	ldr	r3, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ef      	beq.n	8002bbc <HAL_RCC_OscConfig+0x5cc>
 8002bdc:	e01b      	b.n	8002c16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be4:	4a63      	ldr	r2, [pc, #396]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7ff f863 	bl	8001cb8 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf6:	f7ff f85f 	bl	8001cb8 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e105      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c08:	4b5a      	ldr	r3, [pc, #360]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ef      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80f9 	beq.w	8002e12 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	f040 80cf 	bne.w	8002dc8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c2a:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0203 	and.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d12c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d123      	bne.n	8002c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d11b      	bne.n	8002c98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d113      	bne.n	8002c98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d109      	bne.n	8002c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	3b01      	subs	r3, #1
 8002c92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d071      	beq.n	8002d7c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d068      	beq.n	8002d70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c9e:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002caa:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0ac      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cba:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2d      	ldr	r2, [pc, #180]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc6:	f7fe fff7 	bl	8001cb8 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe fff3 	bl	8001cb8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e099      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCC_OscConfig+0x788>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cfc:	3a01      	subs	r2, #1
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d06:	0212      	lsls	r2, r2, #8
 8002d08:	4311      	orrs	r1, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d0e:	0852      	lsrs	r2, r2, #1
 8002d10:	3a01      	subs	r2, #1
 8002d12:	0552      	lsls	r2, r2, #21
 8002d14:	4311      	orrs	r1, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d1a:	0852      	lsrs	r2, r2, #1
 8002d1c:	3a01      	subs	r2, #1
 8002d1e:	0652      	lsls	r2, r2, #25
 8002d20:	4311      	orrs	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d26:	06d2      	lsls	r2, r2, #27
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	4912      	ldr	r1, [pc, #72]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d48:	f7fe ffb6 	bl	8001cb8 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe ffb2 	bl	8001cb8 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e058      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d6e:	e050      	b.n	8002e12 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e04f      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d144      	bne.n	8002e12 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002da0:	f7fe ff8a 	bl	8001cb8 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe ff86 	bl	8001cb8 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e02c      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dba:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x7b8>
 8002dc6:	e024      	b.n	8002e12 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d01f      	beq.n	8002e0e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe ff6d 	bl	8001cb8 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe ff69 	bl	8001cb8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e00f      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	4905      	ldr	r1, [pc, #20]	; (8002e1c <HAL_RCC_OscConfig+0x82c>)
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x830>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60cb      	str	r3, [r1, #12]
 8002e0c:	e001      	b.n	8002e12 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	feeefffc 	.word	0xfeeefffc

08002e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0e7      	b.n	8003008 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b75      	ldr	r3, [pc, #468]	; (8003010 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d910      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b72      	ldr	r3, [pc, #456]	; (8003010 <HAL_RCC_ClockConfig+0x1ec>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4970      	ldr	r1, [pc, #448]	; (8003010 <HAL_RCC_ClockConfig+0x1ec>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b6e      	ldr	r3, [pc, #440]	; (8003010 <HAL_RCC_ClockConfig+0x1ec>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0cf      	b.n	8003008 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b66      	ldr	r3, [pc, #408]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d908      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4960      	ldr	r1, [pc, #384]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d04c      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	4b5a      	ldr	r3, [pc, #360]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d121      	bne.n	8002efa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0a6      	b.n	8003008 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec2:	4b54      	ldr	r3, [pc, #336]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d115      	bne.n	8002efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e09a      	b.n	8003008 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eda:	4b4e      	ldr	r3, [pc, #312]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e08e      	b.n	8003008 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eea:	4b4a      	ldr	r3, [pc, #296]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e086      	b.n	8003008 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002efa:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f023 0203 	bic.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4943      	ldr	r1, [pc, #268]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0c:	f7fe fed4 	bl	8001cb8 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f14:	f7fe fed0 	bl	8001cb8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e06e      	b.n	8003008 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 020c 	and.w	r2, r3, #12
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d1eb      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d010      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d208      	bcs.n	8002f6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	492b      	ldr	r1, [pc, #172]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6a:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_RCC_ClockConfig+0x1ec>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d210      	bcs.n	8002f9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCC_ClockConfig+0x1ec>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 0207 	bic.w	r2, r3, #7
 8002f80:	4923      	ldr	r1, [pc, #140]	; (8003010 <HAL_RCC_ClockConfig+0x1ec>)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_RCC_ClockConfig+0x1ec>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e036      	b.n	8003008 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4918      	ldr	r1, [pc, #96]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4910      	ldr	r1, [pc, #64]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fd8:	f000 f824 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	490b      	ldr	r1, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x1f4>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1f8>)
 8002ff6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1fc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe fe0b 	bl	8001c18 <HAL_InitTick>
 8003002:	4603      	mov	r3, r0
 8003004:	72fb      	strb	r3, [r7, #11]

  return status;
 8003006:	7afb      	ldrb	r3, [r7, #11]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40022000 	.word	0x40022000
 8003014:	40021000 	.word	0x40021000
 8003018:	080054c8 	.word	0x080054c8
 800301c:	20000210 	.word	0x20000210
 8003020:	20000214 	.word	0x20000214

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d121      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d11e      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003058:	4b34      	ldr	r3, [pc, #208]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e005      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003080:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <HAL_RCC_GetSysClockFreq+0x110>)
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	e004      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030a8:	4b23      	ldr	r3, [pc, #140]	; (8003138 <HAL_RCC_GetSysClockFreq+0x114>)
 80030aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d134      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0xa6>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d003      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0xac>
 80030c8:	e005      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <HAL_RCC_GetSysClockFreq+0x110>)
 80030cc:	617b      	str	r3, [r7, #20]
      break;
 80030ce:	e005      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_GetSysClockFreq+0x114>)
 80030d2:	617b      	str	r3, [r7, #20]
      break;
 80030d4:	e002      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	617b      	str	r3, [r7, #20]
      break;
 80030da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	3301      	adds	r3, #1
 80030e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	fb03 f202 	mul.w	r2, r3, r2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	0e5b      	lsrs	r3, r3, #25
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	3301      	adds	r3, #1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800311c:	69bb      	ldr	r3, [r7, #24]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	080054d8 	.word	0x080054d8
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f9c8 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
 800315a:	e014      	b.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003166:	6593      	str	r3, [r2, #88]	; 0x58
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003174:	f7ff f9b8 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 8003178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318c:	d10b      	bne.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d919      	bls.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2ba0      	cmp	r3, #160	; 0xa0
 8003198:	d902      	bls.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800319a:	2302      	movs	r3, #2
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e013      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a0:	2301      	movs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e010      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d902      	bls.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031ac:	2303      	movs	r3, #3
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e00a      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d102      	bne.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b8:	2302      	movs	r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e004      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d101      	bne.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 0207 	bic.w	r2, r3, #7
 80031d0:	4909      	ldr	r1, [pc, #36]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40022000 	.word	0x40022000

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003204:	2300      	movs	r3, #0
 8003206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003208:	2300      	movs	r3, #0
 800320a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	d041      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800321c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003220:	d02a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003226:	d824      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800322c:	d008      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800322e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003232:	d81e      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323c:	d010      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323e:	e018      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003240:	4b86      	ldr	r3, [pc, #536]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a85      	ldr	r2, [pc, #532]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324c:	e015      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fadd 	bl	8003814 <RCCEx_PLLSAI1_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325e:	e00c      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3320      	adds	r3, #32
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fbc6 	bl	80039f8 <RCCEx_PLLSAI2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	74fb      	strb	r3, [r7, #19]
      break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003280:	4b76      	ldr	r3, [pc, #472]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328e:	4973      	ldr	r1, [pc, #460]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003296:	e001      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d041      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b0:	d02a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b6:	d824      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032c2:	d81e      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d010      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ce:	e018      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d0:	4b62      	ldr	r3, [pc, #392]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032dc:	e015      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fa95 	bl	8003814 <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ee:	e00c      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3320      	adds	r3, #32
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fb7e 	bl	80039f8 <RCCEx_PLLSAI2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	74fb      	strb	r3, [r7, #19]
      break;
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003310:	4b52      	ldr	r3, [pc, #328]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331e:	494f      	ldr	r1, [pc, #316]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a0 	beq.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a40      	ldr	r2, [pc, #256]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337c:	f7fe fc9c 	bl	8001cb8 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003382:	e009      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe fc98 	bl	8001cb8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	74fb      	strb	r3, [r7, #19]
        break;
 8003396:	e005      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d15c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033aa:	4b2c      	ldr	r3, [pc, #176]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d019      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe fc57 	bl	8001cb8 <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340c:	e00b      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fc53 	bl	8001cb8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d902      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	74fb      	strb	r3, [r7, #19]
            break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ec      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7c7b      	ldrb	r3, [r7, #17]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4ba6      	ldr	r3, [pc, #664]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4aa5      	ldr	r2, [pc, #660]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003486:	4ba0      	ldr	r3, [pc, #640]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f023 0203 	bic.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	499c      	ldr	r1, [pc, #624]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a8:	4b97      	ldr	r3, [pc, #604]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f023 020c 	bic.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	4994      	ldr	r1, [pc, #592]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ca:	4b8f      	ldr	r3, [pc, #572]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	498b      	ldr	r1, [pc, #556]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ec:	4b86      	ldr	r3, [pc, #536]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	4983      	ldr	r1, [pc, #524]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350e:	4b7e      	ldr	r3, [pc, #504]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351c:	497a      	ldr	r1, [pc, #488]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003530:	4b75      	ldr	r3, [pc, #468]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	4972      	ldr	r1, [pc, #456]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003552:	4b6d      	ldr	r3, [pc, #436]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	4969      	ldr	r1, [pc, #420]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003574:	4b64      	ldr	r3, [pc, #400]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003582:	4961      	ldr	r1, [pc, #388]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b5c      	ldr	r3, [pc, #368]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	4958      	ldr	r1, [pc, #352]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b8:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	4950      	ldr	r1, [pc, #320]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	4947      	ldr	r1, [pc, #284]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035fc:	4b42      	ldr	r3, [pc, #264]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	493f      	ldr	r1, [pc, #252]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d028      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800361e:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003624:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4936      	ldr	r1, [pc, #216]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800363c:	d106      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363e:	4b32      	ldr	r3, [pc, #200]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a31      	ldr	r2, [pc, #196]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003648:	60d3      	str	r3, [r2, #12]
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f000 f8d9 	bl	8003814 <RCCEx_PLLSAI1_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d028      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800367c:	4b22      	ldr	r3, [pc, #136]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368a:	491f      	ldr	r1, [pc, #124]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800369a:	d106      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a6:	60d3      	str	r3, [r2, #12]
 80036a8:	e011      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b2:	d10c      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f8aa 	bl	8003814 <RCCEx_PLLSAI1_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e8:	4907      	ldr	r1, [pc, #28]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f8:	d108      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fa:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4a02      	ldr	r2, [pc, #8]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003704:	60d3      	str	r3, [r2, #12]
 8003706:	e013      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003708:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003714:	d10c      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f879 	bl	8003814 <RCCEx_PLLSAI1_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d02f      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374a:	4929      	ldr	r1, [pc, #164]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800375a:	d10d      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	2102      	movs	r1, #2
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f856 	bl	8003814 <RCCEx_PLLSAI1_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d014      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	74bb      	strb	r3, [r7, #18]
 8003776:	e011      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003780:	d10c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3320      	adds	r3, #32
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f935 	bl	80039f8 <RCCEx_PLLSAI2_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b8:	490d      	ldr	r1, [pc, #52]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	4904      	ldr	r1, [pc, #16]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000

080037f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037fe:	f043 0304 	orr.w	r3, r3, #4
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000

08003814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003822:	4b74      	ldr	r3, [pc, #464]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d018      	beq.n	8003860 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800382e:	4b71      	ldr	r3, [pc, #452]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0203 	and.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d10d      	bne.n	800385a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
       ||
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003846:	4b6b      	ldr	r3, [pc, #428]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
       ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d047      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	e044      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d018      	beq.n	800389a <RCCEx_PLLSAI1_Config+0x86>
 8003868:	2b03      	cmp	r3, #3
 800386a:	d825      	bhi.n	80038b8 <RCCEx_PLLSAI1_Config+0xa4>
 800386c:	2b01      	cmp	r3, #1
 800386e:	d002      	beq.n	8003876 <RCCEx_PLLSAI1_Config+0x62>
 8003870:	2b02      	cmp	r3, #2
 8003872:	d009      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x74>
 8003874:	e020      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003876:	4b5f      	ldr	r3, [pc, #380]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11d      	bne.n	80038be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003886:	e01a      	b.n	80038be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003888:	4b5a      	ldr	r3, [pc, #360]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d116      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003898:	e013      	b.n	80038c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800389a:	4b56      	ldr	r3, [pc, #344]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10f      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038a6:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038b6:	e006      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e004      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ce:	4b49      	ldr	r3, [pc, #292]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6819      	ldr	r1, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	430b      	orrs	r3, r1
 80038e4:	4943      	ldr	r1, [pc, #268]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d17c      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038f0:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a3f      	ldr	r2, [pc, #252]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fc:	f7fe f9dc 	bl	8001cb8 <HAL_GetTick>
 8003900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003902:	e009      	b.n	8003918 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003904:	f7fe f9d8 	bl	8001cb8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d902      	bls.n	8003918 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	73fb      	strb	r3, [r7, #15]
        break;
 8003916:	e005      	b.n	8003924 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ef      	bne.n	8003904 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d15f      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d110      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003930:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003938:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6892      	ldr	r2, [r2, #8]
 8003940:	0211      	lsls	r1, r2, #8
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68d2      	ldr	r2, [r2, #12]
 8003946:	06d2      	lsls	r2, r2, #27
 8003948:	430a      	orrs	r2, r1
 800394a:	492a      	ldr	r1, [pc, #168]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800394c:	4313      	orrs	r3, r2
 800394e:	610b      	str	r3, [r1, #16]
 8003950:	e027      	b.n	80039a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d112      	bne.n	800397e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003958:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003960:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6892      	ldr	r2, [r2, #8]
 8003968:	0211      	lsls	r1, r2, #8
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6912      	ldr	r2, [r2, #16]
 800396e:	0852      	lsrs	r2, r2, #1
 8003970:	3a01      	subs	r2, #1
 8003972:	0552      	lsls	r2, r2, #21
 8003974:	430a      	orrs	r2, r1
 8003976:	491f      	ldr	r1, [pc, #124]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	610b      	str	r3, [r1, #16]
 800397c:	e011      	b.n	80039a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003986:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6892      	ldr	r2, [r2, #8]
 800398e:	0211      	lsls	r1, r2, #8
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6952      	ldr	r2, [r2, #20]
 8003994:	0852      	lsrs	r2, r2, #1
 8003996:	3a01      	subs	r2, #1
 8003998:	0652      	lsls	r2, r2, #25
 800399a:	430a      	orrs	r2, r1
 800399c:	4915      	ldr	r1, [pc, #84]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fe f983 	bl	8001cb8 <HAL_GetTick>
 80039b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039b4:	e009      	b.n	80039ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b6:	f7fe f97f 	bl	8001cb8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d902      	bls.n	80039ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	73fb      	strb	r3, [r7, #15]
          break;
 80039c8:	e005      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0ef      	beq.n	80039b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000

080039f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a06:	4b69      	ldr	r3, [pc, #420]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a12:	4b66      	ldr	r3, [pc, #408]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d10d      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
       ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a2a:	4b60      	ldr	r3, [pc, #384]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
       ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d047      	beq.n	8003ace <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e044      	b.n	8003ace <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d018      	beq.n	8003a7e <RCCEx_PLLSAI2_Config+0x86>
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d825      	bhi.n	8003a9c <RCCEx_PLLSAI2_Config+0xa4>
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d002      	beq.n	8003a5a <RCCEx_PLLSAI2_Config+0x62>
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d009      	beq.n	8003a6c <RCCEx_PLLSAI2_Config+0x74>
 8003a58:	e020      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5a:	4b54      	ldr	r3, [pc, #336]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11d      	bne.n	8003aa2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6a:	e01a      	b.n	8003aa2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d116      	bne.n	8003aa6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e013      	b.n	8003aa6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8a:	4b48      	ldr	r3, [pc, #288]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9a:	e006      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e004      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	4938      	ldr	r1, [pc, #224]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d166      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ad4:	4b35      	ldr	r3, [pc, #212]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a34      	ldr	r2, [pc, #208]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae0:	f7fe f8ea 	bl	8001cb8 <HAL_GetTick>
 8003ae4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ae6:	e009      	b.n	8003afc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ae8:	f7fe f8e6 	bl	8001cb8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d902      	bls.n	8003afc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	73fb      	strb	r3, [r7, #15]
        break;
 8003afa:	e005      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ef      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d149      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d110      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	0211      	lsls	r1, r2, #8
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68d2      	ldr	r2, [r2, #12]
 8003b2a:	06d2      	lsls	r2, r2, #27
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	491f      	ldr	r1, [pc, #124]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	614b      	str	r3, [r1, #20]
 8003b34:	e011      	b.n	8003b5a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6892      	ldr	r2, [r2, #8]
 8003b46:	0211      	lsls	r1, r2, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6912      	ldr	r2, [r2, #16]
 8003b4c:	0852      	lsrs	r2, r2, #1
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0652      	lsls	r2, r2, #25
 8003b52:	430a      	orrs	r2, r1
 8003b54:	4915      	ldr	r1, [pc, #84]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b66:	f7fe f8a7 	bl	8001cb8 <HAL_GetTick>
 8003b6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b6c:	e009      	b.n	8003b82 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b6e:	f7fe f8a3 	bl	8001cb8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d902      	bls.n	8003b82 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8003b80:	e005      	b.n	8003b8e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ef      	beq.n	8003b6e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	4903      	ldr	r1, [pc, #12]	; (8003bac <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000

08003bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e095      	b.n	8003cee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd2:	d009      	beq.n	8003be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
 8003bda:	e005      	b.n	8003be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fe56 	bl	80018b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c28:	d902      	bls.n	8003c30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	e002      	b.n	8003c36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c3e:	d007      	beq.n	8003c50 <HAL_SPI_Init+0xa0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c48:	d002      	beq.n	8003c50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	ea42 0103 	orr.w	r1, r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	f003 0204 	and.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ccc:	ea42 0103 	orr.w	r1, r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b088      	sub	sp, #32
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_SPI_Transmit+0x22>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e15f      	b.n	8003fd8 <HAL_SPI_Transmit+0x2e2>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d20:	f7fd ffca 	bl	8001cb8 <HAL_GetTick>
 8003d24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d002      	beq.n	8003d3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d3a:	e148      	b.n	8003fce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_SPI_Transmit+0x52>
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d4c:	e13f      	b.n	8003fce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2203      	movs	r2, #3
 8003d52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d98:	d10f      	bne.n	8003dba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d007      	beq.n	8003dd8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003de0:	d94f      	bls.n	8003e82 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_SPI_Transmit+0xfa>
 8003dea:	8afb      	ldrh	r3, [r7, #22]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d142      	bne.n	8003e76 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	1c9a      	adds	r2, r3, #2
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e14:	e02f      	b.n	8003e76 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d112      	bne.n	8003e4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e48:	e015      	b.n	8003e76 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4a:	f7fd ff35 	bl	8001cb8 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d803      	bhi.n	8003e62 <HAL_SPI_Transmit+0x16c>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d102      	bne.n	8003e68 <HAL_SPI_Transmit+0x172>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003e74:	e0ab      	b.n	8003fce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ca      	bne.n	8003e16 <HAL_SPI_Transmit+0x120>
 8003e80:	e080      	b.n	8003f84 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_SPI_Transmit+0x19a>
 8003e8a:	8afb      	ldrh	r3, [r7, #22]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d174      	bne.n	8003f7a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d912      	bls.n	8003ec0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	881a      	ldrh	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b02      	subs	r3, #2
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ebe:	e05c      	b.n	8003f7a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	7812      	ldrb	r2, [r2, #0]
 8003ecc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ee6:	e048      	b.n	8003f7a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d12b      	bne.n	8003f4e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d912      	bls.n	8003f26 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	1c9a      	adds	r2, r3, #2
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b02      	subs	r3, #2
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f24:	e029      	b.n	8003f7a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	7812      	ldrb	r2, [r2, #0]
 8003f32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f4c:	e015      	b.n	8003f7a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f4e:	f7fd feb3 	bl	8001cb8 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d803      	bhi.n	8003f66 <HAL_SPI_Transmit+0x270>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d102      	bne.n	8003f6c <HAL_SPI_Transmit+0x276>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003f78:	e029      	b.n	8003fce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1b1      	bne.n	8003ee8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	6839      	ldr	r1, [r7, #0]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fb69 	bl	8004660 <SPI_EndRxTxTransaction>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e003      	b.n	8003fce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x26>
 8004002:	2302      	movs	r3, #2
 8004004:	e20a      	b.n	800441c <HAL_SPI_TransmitReceive+0x43c>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800400e:	f7fd fe53 	bl	8001cb8 <HAL_GetTick>
 8004012:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800401a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800402a:	7efb      	ldrb	r3, [r7, #27]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d00e      	beq.n	800404e <HAL_SPI_TransmitReceive+0x6e>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004036:	d106      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x66>
 8004040:	7efb      	ldrb	r3, [r7, #27]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004046:	2302      	movs	r3, #2
 8004048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800404c:	e1e0      	b.n	8004410 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x80>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x80>
 800405a:	887b      	ldrh	r3, [r7, #2]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004066:	e1d3      	b.n	8004410 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b04      	cmp	r3, #4
 8004072:	d003      	beq.n	800407c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2205      	movs	r2, #5
 8004078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	887a      	ldrh	r2, [r7, #2]
 80040a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040be:	d802      	bhi.n	80040c6 <HAL_SPI_TransmitReceive+0xe6>
 80040c0:	8a3b      	ldrh	r3, [r7, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d908      	bls.n	80040d8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	e007      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d007      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800410e:	f240 8081 	bls.w	8004214 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x140>
 800411a:	8a7b      	ldrh	r3, [r7, #18]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d16d      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	881a      	ldrh	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004144:	e05a      	b.n	80041fc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d11b      	bne.n	800418c <HAL_SPI_TransmitReceive+0x1ac>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <HAL_SPI_TransmitReceive+0x1ac>
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2b01      	cmp	r3, #1
 8004162:	d113      	bne.n	800418c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b01      	cmp	r3, #1
 8004198:	d11c      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x1f4>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	b292      	uxth	r2, r2
 80041b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041d0:	2301      	movs	r3, #1
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041d4:	f7fd fd70 	bl	8001cb8 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d80b      	bhi.n	80041fc <HAL_SPI_TransmitReceive+0x21c>
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d007      	beq.n	80041fc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80041fa:	e109      	b.n	8004410 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d19f      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x166>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d199      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x166>
 8004212:	e0e3      	b.n	80043dc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x244>
 800421c:	8a7b      	ldrh	r3, [r7, #18]
 800421e:	2b01      	cmp	r3, #1
 8004220:	f040 80cf 	bne.w	80043c2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d912      	bls.n	8004254 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	881a      	ldrh	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	1c9a      	adds	r2, r3, #2
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b02      	subs	r3, #2
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004252:	e0b6      	b.n	80043c2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427a:	e0a2      	b.n	80043c2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d134      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x314>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02f      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x314>
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	2b01      	cmp	r3, #1
 8004298:	d12c      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d912      	bls.n	80042ca <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	881a      	ldrh	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	1c9a      	adds	r2, r3, #2
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b02      	subs	r3, #2
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042c8:	e012      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d148      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x3b4>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d042      	beq.n	8004394 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d923      	bls.n	8004362 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	b292      	uxth	r2, r2
 8004326:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	1c9a      	adds	r2, r3, #2
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b02      	subs	r3, #2
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d81f      	bhi.n	8004390 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800435e:	605a      	str	r2, [r3, #4]
 8004360:	e016      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f103 020c 	add.w	r2, r3, #12
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004390:	2301      	movs	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004394:	f7fd fc90 	bl	8001cb8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d803      	bhi.n	80043ac <HAL_SPI_TransmitReceive+0x3cc>
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d102      	bne.n	80043b2 <HAL_SPI_TransmitReceive+0x3d2>
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d107      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80043c0:	e026      	b.n	8004410 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f47f af57 	bne.w	800427c <HAL_SPI_TransmitReceive+0x29c>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f47f af50 	bne.w	800427c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f93d 	bl	8004660 <SPI_EndRxTxTransaction>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e003      	b.n	8004410 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004434:	f7fd fc40 	bl	8001cb8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004444:	f7fd fc38 	bl	8001cb8 <HAL_GetTick>
 8004448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	0d1b      	lsrs	r3, r3, #20
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445a:	e054      	b.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d050      	beq.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004464:	f7fd fc28 	bl	8001cb8 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	429a      	cmp	r2, r3
 8004472:	d902      	bls.n	800447a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d13d      	bne.n	80044f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004492:	d111      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449c:	d004      	beq.n	80044a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a6:	d107      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c0:	d10f      	bne.n	80044e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e017      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3b01      	subs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	429a      	cmp	r2, r3
 8004522:	d19b      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000210 	.word	0x20000210

08004534 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004546:	f7fd fbb7 	bl	8001cb8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	4413      	add	r3, r2
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004556:	f7fd fbaf 	bl	8001cb8 <HAL_GetTick>
 800455a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004564:	4b3d      	ldr	r3, [pc, #244]	; (800465c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	00da      	lsls	r2, r3, #3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	0d1b      	lsrs	r3, r3, #20
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800457c:	e060      	b.n	8004640 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004584:	d107      	bne.n	8004596 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004594:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d050      	beq.n	8004640 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800459e:	f7fd fb8b 	bl	8001cb8 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d902      	bls.n	80045b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d13d      	bne.n	8004630 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045cc:	d111      	bne.n	80045f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d6:	d004      	beq.n	80045e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e0:	d107      	bne.n	80045f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fa:	d10f      	bne.n	800461c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800461a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e010      	b.n	8004652 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3b01      	subs	r3, #1
 800463e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	429a      	cmp	r2, r3
 800464e:	d196      	bne.n	800457e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3728      	adds	r7, #40	; 0x28
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000210 	.word	0x20000210

08004660 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ff5b 	bl	8004534 <SPI_WaitFifoStateUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e027      	b.n	80046e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fec0 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ae:	f043 0220 	orr.w	r2, r3, #32
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e014      	b.n	80046e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff ff34 	bl	8004534 <SPI_WaitFifoStateUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e000      	b.n	80046e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e049      	b.n	8004792 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd f910 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f000 f8fe 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_ConfigClockSource+0x1c>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e0b6      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x18a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f2:	d03e      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0xd8>
 80047f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f8:	f200 8087 	bhi.w	800490a <HAL_TIM_ConfigClockSource+0x170>
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	f000 8086 	beq.w	8004910 <HAL_TIM_ConfigClockSource+0x176>
 8004804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004808:	d87f      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x170>
 800480a:	2b70      	cmp	r3, #112	; 0x70
 800480c:	d01a      	beq.n	8004844 <HAL_TIM_ConfigClockSource+0xaa>
 800480e:	2b70      	cmp	r3, #112	; 0x70
 8004810:	d87b      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x170>
 8004812:	2b60      	cmp	r3, #96	; 0x60
 8004814:	d050      	beq.n	80048b8 <HAL_TIM_ConfigClockSource+0x11e>
 8004816:	2b60      	cmp	r3, #96	; 0x60
 8004818:	d877      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x170>
 800481a:	2b50      	cmp	r3, #80	; 0x50
 800481c:	d03c      	beq.n	8004898 <HAL_TIM_ConfigClockSource+0xfe>
 800481e:	2b50      	cmp	r3, #80	; 0x50
 8004820:	d873      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x170>
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d058      	beq.n	80048d8 <HAL_TIM_ConfigClockSource+0x13e>
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d86f      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x170>
 800482a:	2b30      	cmp	r3, #48	; 0x30
 800482c:	d064      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x15e>
 800482e:	2b30      	cmp	r3, #48	; 0x30
 8004830:	d86b      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x170>
 8004832:	2b20      	cmp	r3, #32
 8004834:	d060      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x15e>
 8004836:	2b20      	cmp	r3, #32
 8004838:	d867      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x170>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d05c      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x15e>
 800483e:	2b10      	cmp	r3, #16
 8004840:	d05a      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x15e>
 8004842:	e062      	b.n	800490a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004854:	f000 f97e 	bl	8004b54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004866:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	609a      	str	r2, [r3, #8]
      break;
 8004870:	e04f      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004882:	f000 f967 	bl	8004b54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004894:	609a      	str	r2, [r3, #8]
      break;
 8004896:	e03c      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a4:	461a      	mov	r2, r3
 80048a6:	f000 f8db 	bl	8004a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2150      	movs	r1, #80	; 0x50
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f934 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 80048b6:	e02c      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048c4:	461a      	mov	r2, r3
 80048c6:	f000 f8fa 	bl	8004abe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2160      	movs	r1, #96	; 0x60
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 f924 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 80048d6:	e01c      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e4:	461a      	mov	r2, r3
 80048e6:	f000 f8bb 	bl	8004a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2140      	movs	r1, #64	; 0x40
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f914 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 80048f6:	e00c      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 f90b 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 8004908:	e003      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
      break;
 800490e:	e000      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004910:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d00f      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3d      	ldr	r2, [pc, #244]	; (8004a44 <TIM_Base_SetConfig+0x118>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3c      	ldr	r2, [pc, #240]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <TIM_Base_SetConfig+0x120>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3a      	ldr	r2, [pc, #232]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2f      	ldr	r2, [pc, #188]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498c:	d01b      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <TIM_Base_SetConfig+0x118>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d017      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <TIM_Base_SetConfig+0x120>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a29      	ldr	r2, [pc, #164]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <TIM_Base_SetConfig+0x128>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <TIM_Base_SetConfig+0x12c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <TIM_Base_SetConfig+0x130>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0xf8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a12      	ldr	r2, [pc, #72]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0xf8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a11      	ldr	r2, [pc, #68]	; (8004a54 <TIM_Base_SetConfig+0x128>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0xf8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a10      	ldr	r2, [pc, #64]	; (8004a58 <TIM_Base_SetConfig+0x12c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0xf8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <TIM_Base_SetConfig+0x130>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d103      	bne.n	8004a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	615a      	str	r2, [r3, #20]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40013400 	.word	0x40013400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800

08004a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0201 	bic.w	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f023 030a 	bic.w	r3, r3, #10
 8004a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b087      	sub	sp, #28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f023 0210 	bic.w	r2, r3, #16
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	031b      	lsls	r3, r3, #12
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004afa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f043 0307 	orr.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e068      	b.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2e      	ldr	r2, [pc, #184]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2d      	ldr	r2, [pc, #180]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d108      	bne.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004be6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1e:	d018      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1a      	ldr	r2, [pc, #104]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a18      	ldr	r2, [pc, #96]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10c      	bne.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40013400 	.word	0x40013400
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40014000 	.word	0x40014000

08004ca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	f107 001c 	add.w	r0, r7, #28
 8004cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa66 	bl	8005194 <USB_CoreReset>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8004cde:	e005      	b.n	8004cec <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf8:	b004      	add	sp, #16
 8004cfa:	4770      	bx	lr

08004cfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 0201 	bic.w	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d115      	bne.n	8004d6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f7fc ffbf 	bl	8001cd0 <HAL_Delay>
      ms++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fa0d 	bl	8005178 <USB_GetMode>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d01e      	beq.n	8004da2 <USB_SetCurrentMode+0x84>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b31      	cmp	r3, #49	; 0x31
 8004d68:	d9f0      	bls.n	8004d4c <USB_SetCurrentMode+0x2e>
 8004d6a:	e01a      	b.n	8004da2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d115      	bne.n	8004d9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f7fc ffa6 	bl	8001cd0 <HAL_Delay>
      ms++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f9f4 	bl	8005178 <USB_GetMode>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <USB_SetCurrentMode+0x84>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b31      	cmp	r3, #49	; 0x31
 8004d9a:	d9f0      	bls.n	8004d7e <USB_SetCurrentMode+0x60>
 8004d9c:	e001      	b.n	8004da2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e005      	b.n	8004dae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b32      	cmp	r3, #50	; 0x32
 8004da6:	d101      	bne.n	8004dac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db8:	b084      	sub	sp, #16
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b086      	sub	sp, #24
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	e009      	b.n	8004dec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3340      	adds	r3, #64	; 0x40
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	2200      	movs	r2, #0
 8004de4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3301      	adds	r3, #1
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b0e      	cmp	r3, #14
 8004df0:	d9f2      	bls.n	8004dd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d11c      	bne.n	8004e32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e06:	f043 0302 	orr.w	r3, r3, #2
 8004e0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e005      	b.n	8004e3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e44:	461a      	mov	r2, r3
 8004e46:	2300      	movs	r3, #0
 8004e48:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e4a:	2103      	movs	r1, #3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f959 	bl	8005104 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e52:	2110      	movs	r1, #16
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f8f1 	bl	800503c <USB_FlushTxFifo>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f91d 	bl	80050a4 <USB_FlushRxFifo>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	461a      	mov	r2, r3
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	461a      	mov	r2, r3
 8004e94:	2300      	movs	r3, #0
 8004e96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	e043      	b.n	8004f26 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eb4:	d118      	bne.n	8004ee8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e013      	b.n	8004efa <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e008      	b.n	8004efa <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	461a      	mov	r2, r3
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	3301      	adds	r3, #1
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3b7      	bcc.n	8004e9e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e043      	b.n	8004fbc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f4a:	d118      	bne.n	8004f7e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e013      	b.n	8004f90 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	461a      	mov	r2, r3
 8004f76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e008      	b.n	8004f90 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3b7      	bcc.n	8004f34 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fe4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f043 0210 	orr.w	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	4b10      	ldr	r3, [pc, #64]	; (8005038 <USB_DevInit+0x280>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f043 0208 	orr.w	r2, r3, #8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005012:	2b01      	cmp	r3, #1
 8005014:	d107      	bne.n	8005026 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501e:	f043 0304 	orr.w	r3, r3, #4
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005026:	7dfb      	ldrb	r3, [r7, #23]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005032:	b004      	add	sp, #16
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	803c3800 	.word	0x803c3800

0800503c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <USB_FlushTxFifo+0x64>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e01b      	b.n	8005094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	daf2      	bge.n	800504a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	019b      	lsls	r3, r3, #6
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a08      	ldr	r2, [pc, #32]	; (80050a0 <USB_FlushTxFifo+0x64>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e006      	b.n	8005094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b20      	cmp	r3, #32
 8005090:	d0f0      	beq.n	8005074 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	00030d40 	.word	0x00030d40

080050a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4a11      	ldr	r2, [pc, #68]	; (8005100 <USB_FlushRxFifo+0x5c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e018      	b.n	80050f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	daf2      	bge.n	80050b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2210      	movs	r2, #16
 80050d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a08      	ldr	r2, [pc, #32]	; (8005100 <USB_FlushRxFifo+0x5c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e006      	b.n	80050f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d0f0      	beq.n	80050d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	00030d40 	.word	0x00030d40

08005104 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005150:	f023 0303 	bic.w	r3, r3, #3
 8005154:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005164:	f043 0302 	orr.w	r3, r3, #2
 8005168:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f003 0301 	and.w	r3, r3, #1
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <USB_CoreReset+0x64>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e01b      	b.n	80051ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	daf2      	bge.n	80051a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f043 0201 	orr.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <USB_CoreReset+0x64>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e006      	b.n	80051ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d0f0      	beq.n	80051ca <USB_CoreReset+0x36>

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	00030d40 	.word	0x00030d40

080051fc <malloc>:
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <malloc+0xc>)
 80051fe:	4601      	mov	r1, r0
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	f000 b82b 	b.w	800525c <_malloc_r>
 8005206:	bf00      	nop
 8005208:	20000268 	.word	0x20000268

0800520c <free>:
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <free+0xc>)
 800520e:	4601      	mov	r1, r0
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f000 b901 	b.w	8005418 <_free_r>
 8005216:	bf00      	nop
 8005218:	20000268 	.word	0x20000268

0800521c <sbrk_aligned>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4e0e      	ldr	r6, [pc, #56]	; (8005258 <sbrk_aligned+0x3c>)
 8005220:	460c      	mov	r4, r1
 8005222:	6831      	ldr	r1, [r6, #0]
 8005224:	4605      	mov	r5, r0
 8005226:	b911      	cbnz	r1, 800522e <sbrk_aligned+0x12>
 8005228:	f000 f8ac 	bl	8005384 <_sbrk_r>
 800522c:	6030      	str	r0, [r6, #0]
 800522e:	4621      	mov	r1, r4
 8005230:	4628      	mov	r0, r5
 8005232:	f000 f8a7 	bl	8005384 <_sbrk_r>
 8005236:	1c43      	adds	r3, r0, #1
 8005238:	d00a      	beq.n	8005250 <sbrk_aligned+0x34>
 800523a:	1cc4      	adds	r4, r0, #3
 800523c:	f024 0403 	bic.w	r4, r4, #3
 8005240:	42a0      	cmp	r0, r4
 8005242:	d007      	beq.n	8005254 <sbrk_aligned+0x38>
 8005244:	1a21      	subs	r1, r4, r0
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f89c 	bl	8005384 <_sbrk_r>
 800524c:	3001      	adds	r0, #1
 800524e:	d101      	bne.n	8005254 <sbrk_aligned+0x38>
 8005250:	f04f 34ff 	mov.w	r4, #4294967295
 8005254:	4620      	mov	r0, r4
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	20000884 	.word	0x20000884

0800525c <_malloc_r>:
 800525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005260:	1ccd      	adds	r5, r1, #3
 8005262:	f025 0503 	bic.w	r5, r5, #3
 8005266:	3508      	adds	r5, #8
 8005268:	2d0c      	cmp	r5, #12
 800526a:	bf38      	it	cc
 800526c:	250c      	movcc	r5, #12
 800526e:	2d00      	cmp	r5, #0
 8005270:	4607      	mov	r7, r0
 8005272:	db01      	blt.n	8005278 <_malloc_r+0x1c>
 8005274:	42a9      	cmp	r1, r5
 8005276:	d905      	bls.n	8005284 <_malloc_r+0x28>
 8005278:	230c      	movs	r3, #12
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	2600      	movs	r6, #0
 800527e:	4630      	mov	r0, r6
 8005280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005284:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005358 <_malloc_r+0xfc>
 8005288:	f000 f868 	bl	800535c <__malloc_lock>
 800528c:	f8d8 3000 	ldr.w	r3, [r8]
 8005290:	461c      	mov	r4, r3
 8005292:	bb5c      	cbnz	r4, 80052ec <_malloc_r+0x90>
 8005294:	4629      	mov	r1, r5
 8005296:	4638      	mov	r0, r7
 8005298:	f7ff ffc0 	bl	800521c <sbrk_aligned>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	4604      	mov	r4, r0
 80052a0:	d155      	bne.n	800534e <_malloc_r+0xf2>
 80052a2:	f8d8 4000 	ldr.w	r4, [r8]
 80052a6:	4626      	mov	r6, r4
 80052a8:	2e00      	cmp	r6, #0
 80052aa:	d145      	bne.n	8005338 <_malloc_r+0xdc>
 80052ac:	2c00      	cmp	r4, #0
 80052ae:	d048      	beq.n	8005342 <_malloc_r+0xe6>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	4631      	mov	r1, r6
 80052b4:	4638      	mov	r0, r7
 80052b6:	eb04 0903 	add.w	r9, r4, r3
 80052ba:	f000 f863 	bl	8005384 <_sbrk_r>
 80052be:	4581      	cmp	r9, r0
 80052c0:	d13f      	bne.n	8005342 <_malloc_r+0xe6>
 80052c2:	6821      	ldr	r1, [r4, #0]
 80052c4:	1a6d      	subs	r5, r5, r1
 80052c6:	4629      	mov	r1, r5
 80052c8:	4638      	mov	r0, r7
 80052ca:	f7ff ffa7 	bl	800521c <sbrk_aligned>
 80052ce:	3001      	adds	r0, #1
 80052d0:	d037      	beq.n	8005342 <_malloc_r+0xe6>
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	442b      	add	r3, r5
 80052d6:	6023      	str	r3, [r4, #0]
 80052d8:	f8d8 3000 	ldr.w	r3, [r8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d038      	beq.n	8005352 <_malloc_r+0xf6>
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	42a2      	cmp	r2, r4
 80052e4:	d12b      	bne.n	800533e <_malloc_r+0xe2>
 80052e6:	2200      	movs	r2, #0
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	e00f      	b.n	800530c <_malloc_r+0xb0>
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	1b52      	subs	r2, r2, r5
 80052f0:	d41f      	bmi.n	8005332 <_malloc_r+0xd6>
 80052f2:	2a0b      	cmp	r2, #11
 80052f4:	d917      	bls.n	8005326 <_malloc_r+0xca>
 80052f6:	1961      	adds	r1, r4, r5
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	6025      	str	r5, [r4, #0]
 80052fc:	bf18      	it	ne
 80052fe:	6059      	strne	r1, [r3, #4]
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	bf08      	it	eq
 8005304:	f8c8 1000 	streq.w	r1, [r8]
 8005308:	5162      	str	r2, [r4, r5]
 800530a:	604b      	str	r3, [r1, #4]
 800530c:	4638      	mov	r0, r7
 800530e:	f104 060b 	add.w	r6, r4, #11
 8005312:	f000 f829 	bl	8005368 <__malloc_unlock>
 8005316:	f026 0607 	bic.w	r6, r6, #7
 800531a:	1d23      	adds	r3, r4, #4
 800531c:	1af2      	subs	r2, r6, r3
 800531e:	d0ae      	beq.n	800527e <_malloc_r+0x22>
 8005320:	1b9b      	subs	r3, r3, r6
 8005322:	50a3      	str	r3, [r4, r2]
 8005324:	e7ab      	b.n	800527e <_malloc_r+0x22>
 8005326:	42a3      	cmp	r3, r4
 8005328:	6862      	ldr	r2, [r4, #4]
 800532a:	d1dd      	bne.n	80052e8 <_malloc_r+0x8c>
 800532c:	f8c8 2000 	str.w	r2, [r8]
 8005330:	e7ec      	b.n	800530c <_malloc_r+0xb0>
 8005332:	4623      	mov	r3, r4
 8005334:	6864      	ldr	r4, [r4, #4]
 8005336:	e7ac      	b.n	8005292 <_malloc_r+0x36>
 8005338:	4634      	mov	r4, r6
 800533a:	6876      	ldr	r6, [r6, #4]
 800533c:	e7b4      	b.n	80052a8 <_malloc_r+0x4c>
 800533e:	4613      	mov	r3, r2
 8005340:	e7cc      	b.n	80052dc <_malloc_r+0x80>
 8005342:	230c      	movs	r3, #12
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	4638      	mov	r0, r7
 8005348:	f000 f80e 	bl	8005368 <__malloc_unlock>
 800534c:	e797      	b.n	800527e <_malloc_r+0x22>
 800534e:	6025      	str	r5, [r4, #0]
 8005350:	e7dc      	b.n	800530c <_malloc_r+0xb0>
 8005352:	605b      	str	r3, [r3, #4]
 8005354:	deff      	udf	#255	; 0xff
 8005356:	bf00      	nop
 8005358:	20000880 	.word	0x20000880

0800535c <__malloc_lock>:
 800535c:	4801      	ldr	r0, [pc, #4]	; (8005364 <__malloc_lock+0x8>)
 800535e:	f000 b84b 	b.w	80053f8 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	200009c4 	.word	0x200009c4

08005368 <__malloc_unlock>:
 8005368:	4801      	ldr	r0, [pc, #4]	; (8005370 <__malloc_unlock+0x8>)
 800536a:	f000 b846 	b.w	80053fa <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	200009c4 	.word	0x200009c4

08005374 <memset>:
 8005374:	4402      	add	r2, r0
 8005376:	4603      	mov	r3, r0
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	f803 1b01 	strb.w	r1, [r3], #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <_sbrk_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d06      	ldr	r5, [pc, #24]	; (80053a0 <_sbrk_r+0x1c>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fc fbb8 	bl	8001b04 <_sbrk>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_sbrk_r+0x1a>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_sbrk_r+0x1a>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	200009c0 	.word	0x200009c0

080053a4 <__errno>:
 80053a4:	4b01      	ldr	r3, [pc, #4]	; (80053ac <__errno+0x8>)
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000268 	.word	0x20000268

080053b0 <__libc_init_array>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	4d0d      	ldr	r5, [pc, #52]	; (80053e8 <__libc_init_array+0x38>)
 80053b4:	4c0d      	ldr	r4, [pc, #52]	; (80053ec <__libc_init_array+0x3c>)
 80053b6:	1b64      	subs	r4, r4, r5
 80053b8:	10a4      	asrs	r4, r4, #2
 80053ba:	2600      	movs	r6, #0
 80053bc:	42a6      	cmp	r6, r4
 80053be:	d109      	bne.n	80053d4 <__libc_init_array+0x24>
 80053c0:	4d0b      	ldr	r5, [pc, #44]	; (80053f0 <__libc_init_array+0x40>)
 80053c2:	4c0c      	ldr	r4, [pc, #48]	; (80053f4 <__libc_init_array+0x44>)
 80053c4:	f000 f874 	bl	80054b0 <_init>
 80053c8:	1b64      	subs	r4, r4, r5
 80053ca:	10a4      	asrs	r4, r4, #2
 80053cc:	2600      	movs	r6, #0
 80053ce:	42a6      	cmp	r6, r4
 80053d0:	d105      	bne.n	80053de <__libc_init_array+0x2e>
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d8:	4798      	blx	r3
 80053da:	3601      	adds	r6, #1
 80053dc:	e7ee      	b.n	80053bc <__libc_init_array+0xc>
 80053de:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e2:	4798      	blx	r3
 80053e4:	3601      	adds	r6, #1
 80053e6:	e7f2      	b.n	80053ce <__libc_init_array+0x1e>
 80053e8:	08005508 	.word	0x08005508
 80053ec:	08005508 	.word	0x08005508
 80053f0:	08005508 	.word	0x08005508
 80053f4:	0800550c 	.word	0x0800550c

080053f8 <__retarget_lock_acquire_recursive>:
 80053f8:	4770      	bx	lr

080053fa <__retarget_lock_release_recursive>:
 80053fa:	4770      	bx	lr

080053fc <memcpy>:
 80053fc:	440a      	add	r2, r1
 80053fe:	4291      	cmp	r1, r2
 8005400:	f100 33ff 	add.w	r3, r0, #4294967295
 8005404:	d100      	bne.n	8005408 <memcpy+0xc>
 8005406:	4770      	bx	lr
 8005408:	b510      	push	{r4, lr}
 800540a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800540e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005412:	4291      	cmp	r1, r2
 8005414:	d1f9      	bne.n	800540a <memcpy+0xe>
 8005416:	bd10      	pop	{r4, pc}

08005418 <_free_r>:
 8005418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800541a:	2900      	cmp	r1, #0
 800541c:	d044      	beq.n	80054a8 <_free_r+0x90>
 800541e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005422:	9001      	str	r0, [sp, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f1a1 0404 	sub.w	r4, r1, #4
 800542a:	bfb8      	it	lt
 800542c:	18e4      	addlt	r4, r4, r3
 800542e:	f7ff ff95 	bl	800535c <__malloc_lock>
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <_free_r+0x94>)
 8005434:	9801      	ldr	r0, [sp, #4]
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	b933      	cbnz	r3, 8005448 <_free_r+0x30>
 800543a:	6063      	str	r3, [r4, #4]
 800543c:	6014      	str	r4, [r2, #0]
 800543e:	b003      	add	sp, #12
 8005440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005444:	f7ff bf90 	b.w	8005368 <__malloc_unlock>
 8005448:	42a3      	cmp	r3, r4
 800544a:	d908      	bls.n	800545e <_free_r+0x46>
 800544c:	6825      	ldr	r5, [r4, #0]
 800544e:	1961      	adds	r1, r4, r5
 8005450:	428b      	cmp	r3, r1
 8005452:	bf01      	itttt	eq
 8005454:	6819      	ldreq	r1, [r3, #0]
 8005456:	685b      	ldreq	r3, [r3, #4]
 8005458:	1949      	addeq	r1, r1, r5
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	e7ed      	b.n	800543a <_free_r+0x22>
 800545e:	461a      	mov	r2, r3
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b10b      	cbz	r3, 8005468 <_free_r+0x50>
 8005464:	42a3      	cmp	r3, r4
 8005466:	d9fa      	bls.n	800545e <_free_r+0x46>
 8005468:	6811      	ldr	r1, [r2, #0]
 800546a:	1855      	adds	r5, r2, r1
 800546c:	42a5      	cmp	r5, r4
 800546e:	d10b      	bne.n	8005488 <_free_r+0x70>
 8005470:	6824      	ldr	r4, [r4, #0]
 8005472:	4421      	add	r1, r4
 8005474:	1854      	adds	r4, r2, r1
 8005476:	42a3      	cmp	r3, r4
 8005478:	6011      	str	r1, [r2, #0]
 800547a:	d1e0      	bne.n	800543e <_free_r+0x26>
 800547c:	681c      	ldr	r4, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	6053      	str	r3, [r2, #4]
 8005482:	440c      	add	r4, r1
 8005484:	6014      	str	r4, [r2, #0]
 8005486:	e7da      	b.n	800543e <_free_r+0x26>
 8005488:	d902      	bls.n	8005490 <_free_r+0x78>
 800548a:	230c      	movs	r3, #12
 800548c:	6003      	str	r3, [r0, #0]
 800548e:	e7d6      	b.n	800543e <_free_r+0x26>
 8005490:	6825      	ldr	r5, [r4, #0]
 8005492:	1961      	adds	r1, r4, r5
 8005494:	428b      	cmp	r3, r1
 8005496:	bf04      	itt	eq
 8005498:	6819      	ldreq	r1, [r3, #0]
 800549a:	685b      	ldreq	r3, [r3, #4]
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	bf04      	itt	eq
 80054a0:	1949      	addeq	r1, r1, r5
 80054a2:	6021      	streq	r1, [r4, #0]
 80054a4:	6054      	str	r4, [r2, #4]
 80054a6:	e7ca      	b.n	800543e <_free_r+0x26>
 80054a8:	b003      	add	sp, #12
 80054aa:	bd30      	pop	{r4, r5, pc}
 80054ac:	20000880 	.word	0x20000880

080054b0 <_init>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr

080054bc <_fini>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	bf00      	nop
 80054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c2:	bc08      	pop	{r3}
 80054c4:	469e      	mov	lr, r3
 80054c6:	4770      	bx	lr
