
VALIDATION_CAN_MASTER_TRUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c80  08004c80  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004c80  08004c80  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c80  08004c80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001954  20000010  08004c98  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001964  08004c98  00021964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102ea  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad4  00000000  00000000  0003036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00032e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3d  00000000  00000000  00033d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000028ea  00000000  00000000  0003486d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f36e  00000000  00000000  00037157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc922  00000000  00000000  000464c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cbc  00000000  00000000  00142de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00146aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004be0 	.word	0x08004be0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004be0 	.word	0x08004be0

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 fa55 	bl	80006a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f818 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f8a0 	bl	8000340 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000200:	f000 f868 	bl	80002d4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000204:	f001 ff60 	bl	80020c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000208:	4a05      	ldr	r2, [pc, #20]	; (8000220 <main+0x30>)
 800020a:	2100      	movs	r1, #0
 800020c:	4805      	ldr	r0, [pc, #20]	; (8000224 <main+0x34>)
 800020e:	f001 ffa5 	bl	800215c <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <main+0x38>)
 8000216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f001 ff7a 	bl	8002110 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x2c>
 800021e:	bf00      	nop
 8000220:	08004c1c 	.word	0x08004c1c
 8000224:	080004cd 	.word	0x080004cd
 8000228:	20000054 	.word	0x20000054

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b096      	sub	sp, #88	; 0x58
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2244      	movs	r2, #68	; 0x44
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f004 fc96 	bl	8004b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	463b      	mov	r3, r7
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800024e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000252:	f001 f899 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800025c:	f000 f93e 	bl	80004dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000260:	2310      	movs	r3, #16
 8000262:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800026c:	2360      	movs	r3, #96	; 0x60
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	2302      	movs	r3, #2
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000274:	2301      	movs	r3, #1
 8000276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000278:	2301      	movs	r3, #1
 800027a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800027c:	2328      	movs	r3, #40	; 0x28
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000280:	2302      	movs	r3, #2
 8000282:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000284:	2302      	movs	r3, #2
 8000286:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000288:	2302      	movs	r3, #2
 800028a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	4618      	mov	r0, r3
 8000292:	f001 f8df 	bl	8001454 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800029c:	f000 f91e 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2303      	movs	r3, #3
 80002a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b6:	463b      	mov	r3, r7
 80002b8:	2104      	movs	r1, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fce4 	bl	8001c88 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002c6:	f000 f909 	bl	80004dc <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3758      	adds	r7, #88	; 0x58
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80002d8:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_CAN1_Init+0x64>)
 80002da:	4a18      	ldr	r2, [pc, #96]	; (800033c <MX_CAN1_Init+0x68>)
 80002dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <MX_CAN1_Init+0x64>)
 80002e0:	2210      	movs	r2, #16
 80002e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80002e4:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_CAN1_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ea:	4b13      	ldr	r3, [pc, #76]	; (8000338 <MX_CAN1_Init+0x64>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_CAN1_Init+0x64>)
 80002f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_CAN1_Init+0x64>)
 80002fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <MX_CAN1_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_CAN1_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <MX_CAN1_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_CAN1_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <MX_CAN1_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_CAN1_Init+0x64>)
 8000320:	2200      	movs	r2, #0
 8000322:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <MX_CAN1_Init+0x64>)
 8000326:	f000 fa31 	bl	800078c <HAL_CAN_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000330:	f000 f8d4 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000002c 	.word	0x2000002c
 800033c:	40006400 	.word	0x40006400

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08c      	sub	sp, #48	; 0x30
 8000344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	f107 031c 	add.w	r3, r7, #28
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000356:	4b59      	ldr	r3, [pc, #356]	; (80004bc <MX_GPIO_Init+0x17c>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	4a58      	ldr	r2, [pc, #352]	; (80004bc <MX_GPIO_Init+0x17c>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000362:	4b56      	ldr	r3, [pc, #344]	; (80004bc <MX_GPIO_Init+0x17c>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	61bb      	str	r3, [r7, #24]
 800036c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800036e:	4b53      	ldr	r3, [pc, #332]	; (80004bc <MX_GPIO_Init+0x17c>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a52      	ldr	r2, [pc, #328]	; (80004bc <MX_GPIO_Init+0x17c>)
 8000374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b50      	ldr	r3, [pc, #320]	; (80004bc <MX_GPIO_Init+0x17c>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	4b4d      	ldr	r3, [pc, #308]	; (80004bc <MX_GPIO_Init+0x17c>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4a4c      	ldr	r2, [pc, #304]	; (80004bc <MX_GPIO_Init+0x17c>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4b4a      	ldr	r3, [pc, #296]	; (80004bc <MX_GPIO_Init+0x17c>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800039e:	4b47      	ldr	r3, [pc, #284]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	4a46      	ldr	r2, [pc, #280]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003aa:	4b44      	ldr	r3, [pc, #272]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80003b6:	f001 f83d 	bl	8001434 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b40      	ldr	r3, [pc, #256]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	4a3f      	ldr	r2, [pc, #252]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c6:	4b3d      	ldr	r3, [pc, #244]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d2:	4b3a      	ldr	r3, [pc, #232]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a39      	ldr	r2, [pc, #228]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003d8:	f043 0308 	orr.w	r3, r3, #8
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b37      	ldr	r3, [pc, #220]	; (80004bc <MX_GPIO_Init+0x17c>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0308 	and.w	r3, r3, #8
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80003f0:	4833      	ldr	r0, [pc, #204]	; (80004c0 <MX_GPIO_Init+0x180>)
 80003f2:	f000 ffa3 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	4832      	ldr	r0, [pc, #200]	; (80004c4 <MX_GPIO_Init+0x184>)
 80003fc:	f000 ff9e 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000406:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800040a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800040c:	2301      	movs	r3, #1
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	4619      	mov	r1, r3
 8000416:	482c      	ldr	r0, [pc, #176]	; (80004c8 <MX_GPIO_Init+0x188>)
 8000418:	f000 fdfe 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800041c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2300      	movs	r3, #0
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	f107 031c 	add.w	r3, r7, #28
 8000432:	4619      	mov	r1, r3
 8000434:	4822      	ldr	r0, [pc, #136]	; (80004c0 <MX_GPIO_Init+0x180>)
 8000436:	f000 fdef 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800043a:	2320      	movs	r3, #32
 800043c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	4619      	mov	r1, r3
 800044c:	481d      	ldr	r0, [pc, #116]	; (80004c4 <MX_GPIO_Init+0x184>)
 800044e:	f000 fde3 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000452:	2340      	movs	r3, #64	; 0x40
 8000454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2300      	movs	r3, #0
 8000460:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	4619      	mov	r1, r3
 8000468:	4816      	ldr	r0, [pc, #88]	; (80004c4 <MX_GPIO_Init+0x184>)
 800046a:	f000 fdd5 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800046e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000474:	2302      	movs	r3, #2
 8000476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800047c:	2303      	movs	r3, #3
 800047e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000480:	2308      	movs	r3, #8
 8000482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000484:	f107 031c 	add.w	r3, r7, #28
 8000488:	4619      	mov	r1, r3
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <MX_GPIO_Init+0x184>)
 800048c:	f000 fdc4 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000490:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000496:	2302      	movs	r3, #2
 8000498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800049e:	2303      	movs	r3, #3
 80004a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80004a2:	230a      	movs	r3, #10
 80004a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f107 031c 	add.w	r3, r7, #28
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b0:	f000 fdb2 	bl	8001018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b4:	bf00      	nop
 80004b6:	3730      	adds	r7, #48	; 0x30
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48000400 	.word	0x48000400
 80004c4:	48001800 	.word	0x48001800
 80004c8:	48000800 	.word	0x48000800

080004cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f001 fed3 	bl	8002280 <osDelay>
 80004da:	e7fb      	b.n	80004d4 <StartDefaultTask+0x8>

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <HAL_MspInit+0x4c>)
 80004f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f2:	4a10      	ldr	r2, [pc, #64]	; (8000534 <HAL_MspInit+0x4c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6613      	str	r3, [r2, #96]	; 0x60
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_MspInit+0x4c>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <HAL_MspInit+0x4c>)
 8000508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <HAL_MspInit+0x4c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	6593      	str	r3, [r2, #88]	; 0x58
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_MspInit+0x4c>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	210f      	movs	r1, #15
 8000522:	f06f 0001 	mvn.w	r0, #1
 8000526:	f000 fd40 	bl	8000faa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <HAL_CAN_MspInit+0x8c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d12f      	bne.n	80005ba <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <HAL_CAN_MspInit+0x90>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <HAL_CAN_MspInit+0x90>)
 8000560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <HAL_CAN_MspInit+0x90>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <HAL_CAN_MspInit+0x90>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <HAL_CAN_MspInit+0x90>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_CAN_MspInit+0x90>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800058a:	2303      	movs	r3, #3
 800058c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000596:	2303      	movs	r3, #3
 8000598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800059a:	2309      	movs	r3, #9
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <HAL_CAN_MspInit+0x94>)
 80005a6:	f000 fd37 	bl	8001018 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2105      	movs	r1, #5
 80005ae:	2014      	movs	r0, #20
 80005b0:	f000 fcfb 	bl	8000faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005b4:	2014      	movs	r0, #20
 80005b6:	f000 fd14 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	; 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40006400 	.word	0x40006400
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48000c00 	.word	0x48000c00

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d4:	e7fe      	b.n	80005d4 <NMI_Handler+0x4>

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <MemManage_Handler+0x4>

080005e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <UsageFault_Handler+0x4>

080005ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f8a4 	bl	800074c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000604:	f003 fa4a 	bl	8003a9c <xTaskGetSchedulerState>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d001      	beq.n	8000612 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800060e:	f004 f833 	bl	8004678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <CAN1_RX0_IRQHandler+0x10>)
 800061e:	f000 f9b0 	bl	8000982 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000002c 	.word	0x2000002c

0800062c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <SystemInit+0x20>)
 8000632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <SystemInit+0x20>)
 8000638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800063c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000654:	f7ff ffea 	bl	800062c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	; (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067e:	f004 fa7d 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000682:	f7ff fdb5 	bl	80001f0 <main>

08000686 <LoopForever>:

LoopForever:
    b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000688:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000694:	08004c88 	.word	0x08004c88
  ldr r2, =_sbss
 8000698:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800069c:	20001964 	.word	0x20001964

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>

080006a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006a8:	2300      	movs	r3, #0
 80006aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 fc71 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006b2:	200f      	movs	r0, #15
 80006b4:	f000 f80e 	bl	80006d4 <HAL_InitTick>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e001      	b.n	80006c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006c4:	f7ff ff10 	bl	80004e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_InitTick+0x6c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d023      	beq.n	8000730 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_InitTick+0x70>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_InitTick+0x6c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fc7d 	bl	8000ffe <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10f      	bne.n	800072a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d809      	bhi.n	8000724 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000710:	2200      	movs	r2, #0
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	f04f 30ff 	mov.w	r0, #4294967295
 8000718:	f000 fc47 	bl	8000faa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_InitTick+0x74>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e007      	b.n	8000734 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000724:	2301      	movs	r3, #1
 8000726:	73fb      	strb	r3, [r7, #15]
 8000728:	e004      	b.n	8000734 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	e001      	b.n	8000734 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000730:	2301      	movs	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000008 	.word	0x20000008
 8000744:	20000000 	.word	0x20000000
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_IncTick+0x20>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x24>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_IncTick+0x24>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008
 8000770:	20000058 	.word	0x20000058

08000774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_GetTick+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000058 	.word	0x20000058

0800078c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e0ed      	b.n	800097a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d102      	bne.n	80007b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fec4 	bl	8000538 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f042 0201 	orr.w	r2, r2, #1
 80007be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007c0:	f7ff ffd8 	bl	8000774 <HAL_GetTick>
 80007c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007c6:	e012      	b.n	80007ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007c8:	f7ff ffd4 	bl	8000774 <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	2b0a      	cmp	r3, #10
 80007d4:	d90b      	bls.n	80007ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2205      	movs	r2, #5
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e0c5      	b.n	800097a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0e5      	beq.n	80007c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0202 	bic.w	r2, r2, #2
 800080a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800080c:	f7ff ffb2 	bl	8000774 <HAL_GetTick>
 8000810:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000812:	e012      	b.n	800083a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000814:	f7ff ffae 	bl	8000774 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	2b0a      	cmp	r3, #10
 8000820:	d90b      	bls.n	800083a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2205      	movs	r2, #5
 8000832:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e09f      	b.n	800097a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1e5      	bne.n	8000814 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7e1b      	ldrb	r3, [r3, #24]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d108      	bne.n	8000862 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e007      	b.n	8000872 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000870:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7e5b      	ldrb	r3, [r3, #25]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d108      	bne.n	800088c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e007      	b.n	800089c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800089a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7e9b      	ldrb	r3, [r3, #26]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d108      	bne.n	80008b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0220 	orr.w	r2, r2, #32
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 0220 	bic.w	r2, r2, #32
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7edb      	ldrb	r3, [r3, #27]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f022 0210 	bic.w	r2, r2, #16
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	e007      	b.n	80008f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f042 0210 	orr.w	r2, r2, #16
 80008ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7f1b      	ldrb	r3, [r3, #28]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d108      	bne.n	800090a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f042 0208 	orr.w	r2, r2, #8
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e007      	b.n	800091a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0208 	bic.w	r2, r2, #8
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7f5b      	ldrb	r3, [r3, #29]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d108      	bne.n	8000934 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f042 0204 	orr.w	r2, r2, #4
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e007      	b.n	8000944 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f022 0204 	bic.w	r2, r2, #4
 8000942:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	431a      	orrs	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	431a      	orrs	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	ea42 0103 	orr.w	r1, r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	1e5a      	subs	r2, r3, #1
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	430a      	orrs	r2, r1
 8000968:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2201      	movs	r2, #1
 8000974:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b08a      	sub	sp, #40	; 0x28
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d07c      	beq.n	8000ac2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d023      	beq.n	8000a1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2201      	movs	r2, #1
 80009d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f983 	bl	8000cf0 <HAL_CAN_TxMailbox0CompleteCallback>
 80009ea:	e016      	b.n	8000a1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d004      	beq.n	8000a00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
 80009fe:	e00c      	b.n	8000a1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
 8000a12:	e002      	b.n	8000a1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f989 	bl	8000d2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d024      	beq.n	8000a6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f963 	bl	8000d04 <HAL_CAN_TxMailbox1CompleteCallback>
 8000a3e:	e016      	b.n	8000a6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
 8000a52:	e00c      	b.n	8000a6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	e002      	b.n	8000a6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f969 	bl	8000d40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d024      	beq.n	8000ac2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f943 	bl	8000d18 <HAL_CAN_TxMailbox2CompleteCallback>
 8000a92:	e016      	b.n	8000ac2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d004      	beq.n	8000aa8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa6:	e00c      	b.n	8000ac2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d004      	beq.n	8000abc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aba:	e002      	b.n	8000ac2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 f949 	bl	8000d54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00c      	beq.n	8000ae6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2208      	movs	r2, #8
 8000b00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f93a 	bl	8000d7c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d009      	beq.n	8000b26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f921 	bl	8000d68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00c      	beq.n	8000b4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d007      	beq.n	8000b4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2210      	movs	r2, #16
 8000b48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	f003 0320 	and.w	r3, r3, #32
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00b      	beq.n	8000b6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2208      	movs	r2, #8
 8000b64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 f91c 	bl	8000da4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d009      	beq.n	8000b8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 f903 	bl	8000d90 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00b      	beq.n	8000bac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d006      	beq.n	8000bac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2210      	movs	r2, #16
 8000ba4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f906 	bl	8000db8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00b      	beq.n	8000bce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 f8ff 	bl	8000dcc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d07b      	beq.n	8000cd0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d072      	beq.n	8000cc8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d008      	beq.n	8000bfe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000bfe:	6a3b      	ldr	r3, [r7, #32]
 8000c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d008      	beq.n	8000c1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d008      	beq.n	8000c36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d043      	beq.n	8000cc8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d03e      	beq.n	8000cc8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000c50:	2b60      	cmp	r3, #96	; 0x60
 8000c52:	d02b      	beq.n	8000cac <HAL_CAN_IRQHandler+0x32a>
 8000c54:	2b60      	cmp	r3, #96	; 0x60
 8000c56:	d82e      	bhi.n	8000cb6 <HAL_CAN_IRQHandler+0x334>
 8000c58:	2b50      	cmp	r3, #80	; 0x50
 8000c5a:	d022      	beq.n	8000ca2 <HAL_CAN_IRQHandler+0x320>
 8000c5c:	2b50      	cmp	r3, #80	; 0x50
 8000c5e:	d82a      	bhi.n	8000cb6 <HAL_CAN_IRQHandler+0x334>
 8000c60:	2b40      	cmp	r3, #64	; 0x40
 8000c62:	d019      	beq.n	8000c98 <HAL_CAN_IRQHandler+0x316>
 8000c64:	2b40      	cmp	r3, #64	; 0x40
 8000c66:	d826      	bhi.n	8000cb6 <HAL_CAN_IRQHandler+0x334>
 8000c68:	2b30      	cmp	r3, #48	; 0x30
 8000c6a:	d010      	beq.n	8000c8e <HAL_CAN_IRQHandler+0x30c>
 8000c6c:	2b30      	cmp	r3, #48	; 0x30
 8000c6e:	d822      	bhi.n	8000cb6 <HAL_CAN_IRQHandler+0x334>
 8000c70:	2b10      	cmp	r3, #16
 8000c72:	d002      	beq.n	8000c7a <HAL_CAN_IRQHandler+0x2f8>
 8000c74:	2b20      	cmp	r3, #32
 8000c76:	d005      	beq.n	8000c84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000c78:	e01d      	b.n	8000cb6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c82:	e019      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c8c:	e014      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c96:	e00f      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ca0:	e00a      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000caa:	e005      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000cb4:	e000      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x336>
            break;
 8000cb6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	699a      	ldr	r2, [r3, #24]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000cc6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2204      	movs	r2, #4
 8000cce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d008      	beq.n	8000ce8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 f87c 	bl	8000de0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff29 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff3e 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff8e 	bl	8000ee8 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff31 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e166      	b.n	80012f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8158 	beq.w	80012f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80b2 	beq.w	80012f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b61      	ldr	r3, [pc, #388]	; (8001314 <HAL_GPIO_Init+0x2fc>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	4a60      	ldr	r2, [pc, #384]	; (8001314 <HAL_GPIO_Init+0x2fc>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	; 0x60
 8001198:	4b5e      	ldr	r3, [pc, #376]	; (8001314 <HAL_GPIO_Init+0x2fc>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <HAL_GPIO_Init+0x300>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ce:	d02b      	beq.n	8001228 <HAL_GPIO_Init+0x210>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x304>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d025      	beq.n	8001224 <HAL_GPIO_Init+0x20c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a51      	ldr	r2, [pc, #324]	; (8001320 <HAL_GPIO_Init+0x308>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d01f      	beq.n	8001220 <HAL_GPIO_Init+0x208>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a50      	ldr	r2, [pc, #320]	; (8001324 <HAL_GPIO_Init+0x30c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d019      	beq.n	800121c <HAL_GPIO_Init+0x204>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <HAL_GPIO_Init+0x310>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x200>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a4e      	ldr	r2, [pc, #312]	; (800132c <HAL_GPIO_Init+0x314>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1fc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <HAL_GPIO_Init+0x318>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1f8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <HAL_GPIO_Init+0x31c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1f4>
 8001208:	2307      	movs	r3, #7
 800120a:	e00e      	b.n	800122a <HAL_GPIO_Init+0x212>
 800120c:	2308      	movs	r3, #8
 800120e:	e00c      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001210:	2306      	movs	r3, #6
 8001212:	e00a      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001214:	2305      	movs	r3, #5
 8001216:	e008      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001218:	2304      	movs	r3, #4
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x212>
 800121c:	2303      	movs	r3, #3
 800121e:	e004      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001220:	2302      	movs	r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001228:	2300      	movs	r3, #0
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	f002 0203 	and.w	r2, r2, #3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4093      	lsls	r3, r2
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800123a:	4937      	ldr	r1, [pc, #220]	; (8001318 <HAL_GPIO_Init+0x300>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001248:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_GPIO_Init+0x320>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800126c:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_GPIO_Init+0x320>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <HAL_GPIO_Init+0x320>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <HAL_GPIO_Init+0x320>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_GPIO_Init+0x320>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_GPIO_Init+0x320>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_GPIO_Init+0x320>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_GPIO_Init+0x320>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	f47f ae91 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	48000400 	.word	0x48000400
 8001320:	48000800 	.word	0x48000800
 8001324:	48000c00 	.word	0x48000c00
 8001328:	48001000 	.word	0x48001000
 800132c:	48001400 	.word	0x48001400
 8001330:	48001800 	.word	0x48001800
 8001334:	48001c00 	.word	0x48001c00
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001358:	e002      	b.n	8001360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_PWREx_GetVoltageRange+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001396:	d130      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a4:	d038      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2232      	movs	r2, #50	; 0x32
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013cc:	e002      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d102      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f2      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f4:	d110      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e00f      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001406:	d007      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_PWREx_EnableVddIO2+0x1c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_PWREx_EnableVddIO2+0x1c>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001442:	6053      	str	r3, [r2, #4]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40007000 	.word	0x40007000

08001454 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	f000 bc08 	b.w	8001c78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001468:	4b96      	ldr	r3, [pc, #600]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001472:	4b94      	ldr	r3, [pc, #592]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80e4 	beq.w	8001652 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <HAL_RCC_OscConfig+0x4c>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	f040 808b 	bne.w	80015ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b01      	cmp	r3, #1
 800149c:	f040 8087 	bne.w	80015ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x64>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e3df      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <HAL_RCC_OscConfig+0x7e>
 80014c8:	4b7e      	ldr	r3, [pc, #504]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d0:	e005      	b.n	80014de <HAL_RCC_OscConfig+0x8a>
 80014d2:	4b7c      	ldr	r3, [pc, #496]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80014d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014de:	4293      	cmp	r3, r2
 80014e0:	d223      	bcs.n	800152a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fd5a 	bl	8001fa0 <RCC_SetFlashLatencyFromMSIRange>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e3c0      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f6:	4b73      	ldr	r3, [pc, #460]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a72      	ldr	r2, [pc, #456]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	496d      	ldr	r1, [pc, #436]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001514:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	4968      	ldr	r1, [pc, #416]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
 8001528:	e025      	b.n	8001576 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152a:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a65      	ldr	r2, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4960      	ldr	r1, [pc, #384]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001548:	4b5e      	ldr	r3, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	495b      	ldr	r1, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fd1a 	bl	8001fa0 <RCC_SetFlashLatencyFromMSIRange>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e380      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001576:	f000 fc87 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 800157a:	4602      	mov	r2, r0
 800157c:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	4950      	ldr	r1, [pc, #320]	; (80016c8 <HAL_RCC_OscConfig+0x274>)
 8001588:	5ccb      	ldrb	r3, [r1, r3]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	4a4e      	ldr	r2, [pc, #312]	; (80016cc <HAL_RCC_OscConfig+0x278>)
 8001594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001596:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_RCC_OscConfig+0x27c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f89a 	bl	80006d4 <HAL_InitTick>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d052      	beq.n	8001650 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	e364      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d032      	beq.n	800161c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015b6:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a42      	ldr	r2, [pc, #264]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c2:	f7ff f8d7 	bl	8000774 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ca:	f7ff f8d3 	bl	8000774 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e34d      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e8:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a35      	ldr	r2, [pc, #212]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4930      	ldr	r1, [pc, #192]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	492b      	ldr	r1, [pc, #172]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
 800161a:	e01a      	b.n	8001652 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800161c:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001628:	f7ff f8a4 	bl	8000774 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001630:	f7ff f8a0 	bl	8000774 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e31a      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1dc>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d073      	beq.n	8001746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x21c>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b0c      	cmp	r3, #12
 8001668:	d10e      	bne.n	8001688 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d10b      	bne.n	8001688 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d063      	beq.n	8001744 <HAL_RCC_OscConfig+0x2f0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d15f      	bne.n	8001744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e2f7      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x24c>
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e025      	b.n	80016ec <HAL_RCC_OscConfig+0x298>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a8:	d114      	bne.n	80016d4 <HAL_RCC_OscConfig+0x280>
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a02      	ldr	r2, [pc, #8]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e013      	b.n	80016ec <HAL_RCC_OscConfig+0x298>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	08004c40 	.word	0x08004c40
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000004 	.word	0x20000004
 80016d4:	4ba0      	ldr	r3, [pc, #640]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a9f      	ldr	r2, [pc, #636]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80016da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b9d      	ldr	r3, [pc, #628]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a9c      	ldr	r2, [pc, #624]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d013      	beq.n	800171c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff f83e 	bl	8000774 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff f83a 	bl	8000774 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e2b4      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170e:	4b92      	ldr	r3, [pc, #584]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x2a8>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff f82a 	bl	8000774 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff f826 	bl	8000774 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e2a0      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001736:	4b88      	ldr	r3, [pc, #544]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x2d0>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d060      	beq.n	8001814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b04      	cmp	r3, #4
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x310>
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2b0c      	cmp	r3, #12
 800175c:	d119      	bne.n	8001792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d116      	bne.n	8001792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001764:	4b7c      	ldr	r3, [pc, #496]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_OscConfig+0x328>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e27d      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	4973      	ldr	r1, [pc, #460]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001790:	e040      	b.n	8001814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d023      	beq.n	80017e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179a:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7fe ffe5 	bl	8000774 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ae:	f7fe ffe1 	bl	8000774 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e25b      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c0:	4b65      	ldr	r3, [pc, #404]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b62      	ldr	r3, [pc, #392]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	495f      	ldr	r1, [pc, #380]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
 80017e0:	e018      	b.n	8001814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a5c      	ldr	r2, [pc, #368]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80017e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7fe ffc1 	bl	8000774 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f6:	f7fe ffbd 	bl	8000774 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e237      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d03c      	beq.n	800189a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01c      	beq.n	8001862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001828:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182e:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7fe ff9c 	bl	8000774 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7fe ff98 	bl	8000774 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e212      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001852:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ef      	beq.n	8001840 <HAL_RCC_OscConfig+0x3ec>
 8001860:	e01b      	b.n	800189a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001868:	4a3b      	ldr	r2, [pc, #236]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7fe ff7f 	bl	8000774 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187a:	f7fe ff7b 	bl	8000774 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1f5      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800188c:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ef      	bne.n	800187a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80a6 	beq.w	80019f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	4a26      	ldr	r2, [pc, #152]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80018be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6593      	str	r3, [r2, #88]	; 0x58
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d0:	2301      	movs	r3, #1
 80018d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_RCC_OscConfig+0x508>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d118      	bne.n	8001912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_OscConfig+0x508>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1d      	ldr	r2, [pc, #116]	; (800195c <HAL_RCC_OscConfig+0x508>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ec:	f7fe ff42 	bl	8000774 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7fe ff3e 	bl	8000774 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1b8      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0x508>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_RCC_OscConfig+0x4d8>
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192a:	e029      	b.n	8001980 <HAL_RCC_OscConfig+0x52c>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d115      	bne.n	8001960 <HAL_RCC_OscConfig+0x50c>
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	4a03      	ldr	r2, [pc, #12]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001954:	e014      	b.n	8001980 <HAL_RCC_OscConfig+0x52c>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40007000 	.word	0x40007000
 8001960:	4b9d      	ldr	r3, [pc, #628]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	4a9c      	ldr	r2, [pc, #624]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001970:	4b99      	ldr	r3, [pc, #612]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001976:	4a98      	ldr	r2, [pc, #608]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d016      	beq.n	80019b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7fe fef4 	bl	8000774 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7fe fef0 	bl	8000774 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e168      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a6:	4b8c      	ldr	r3, [pc, #560]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ed      	beq.n	8001990 <HAL_RCC_OscConfig+0x53c>
 80019b4:	e015      	b.n	80019e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7fe fedd 	bl	8000774 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7fe fed9 	bl	8000774 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e151      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d4:	4b80      	ldr	r3, [pc, #512]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ed      	bne.n	80019be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e8:	4b7b      	ldr	r3, [pc, #492]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	4a7a      	ldr	r2, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 80019ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a08:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0e:	4a72      	ldr	r2, [pc, #456]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7fe feac 	bl	8000774 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a20:	f7fe fea8 	bl	8000774 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e122      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a32:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ef      	beq.n	8001a20 <HAL_RCC_OscConfig+0x5cc>
 8001a40:	e01b      	b.n	8001a7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a42:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a48:	4a63      	ldr	r2, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7fe fe8f 	bl	8000774 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5a:	f7fe fe8b 	bl	8000774 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e105      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a6c:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ef      	bne.n	8001a5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80f9 	beq.w	8001c76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	f040 80cf 	bne.w	8001c2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0203 	and.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d12c      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	3b01      	subs	r3, #1
 8001aae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d123      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d11b      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d113      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d109      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	3b01      	subs	r3, #1
 8001af6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d071      	beq.n	8001be0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d068      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0ac      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b2a:	f7fe fe23 	bl	8000774 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe fe1f 	bl	8000774 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e099      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_RCC_OscConfig+0x788>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b60:	3a01      	subs	r2, #1
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b6a:	0212      	lsls	r2, r2, #8
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b72:	0852      	lsrs	r2, r2, #1
 8001b74:	3a01      	subs	r2, #1
 8001b76:	0552      	lsls	r2, r2, #21
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b7e:	0852      	lsrs	r2, r2, #1
 8001b80:	3a01      	subs	r2, #1
 8001b82:	0652      	lsls	r2, r2, #25
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b8a:	06d2      	lsls	r2, r2, #27
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	4912      	ldr	r1, [pc, #72]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001baa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bac:	f7fe fde2 	bl	8000774 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7fe fdde 	bl	8000774 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e058      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_RCC_OscConfig+0x784>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd2:	e050      	b.n	8001c76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e04f      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d144      	bne.n	8001c76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c04:	f7fe fdb6 	bl	8000774 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe fdb2 	bl	8000774 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e02c      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x7b8>
 8001c2a:	e024      	b.n	8001c76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d01f      	beq.n	8001c72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7fe fd99 	bl	8000774 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7fe fd95 	bl	8000774 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e00f      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4905      	ldr	r1, [pc, #20]	; (8001c80 <HAL_RCC_OscConfig+0x82c>)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_OscConfig+0x830>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
 8001c70:	e001      	b.n	8001c76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	feeefffc 	.word	0xfeeefffc

08001c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0e7      	b.n	8001e6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b75      	ldr	r3, [pc, #468]	; (8001e74 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	4970      	ldr	r1, [pc, #448]	; (8001e74 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b6e      	ldr	r3, [pc, #440]	; (8001e74 <HAL_RCC_ClockConfig+0x1ec>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0cf      	b.n	8001e6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d010      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d908      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4960      	ldr	r1, [pc, #384]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d04c      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d121      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0a6      	b.n	8001e6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d26:	4b54      	ldr	r3, [pc, #336]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e09a      	b.n	8001e6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e08e      	b.n	8001e6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e086      	b.n	8001e6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4943      	ldr	r1, [pc, #268]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d70:	f7fe fd00 	bl	8000774 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7fe fcfc 	bl	8000774 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e06e      	b.n	8001e6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d208      	bcs.n	8001dce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	492b      	ldr	r1, [pc, #172]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d210      	bcs.n	8001dfe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_RCC_ClockConfig+0x1ec>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 0207 	bic.w	r2, r3, #7
 8001de4:	4923      	ldr	r1, [pc, #140]	; (8001e74 <HAL_RCC_ClockConfig+0x1ec>)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dec:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_RCC_ClockConfig+0x1ec>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e036      	b.n	8001e6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4918      	ldr	r1, [pc, #96]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4910      	ldr	r1, [pc, #64]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e3c:	f000 f824 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	490b      	ldr	r1, [pc, #44]	; (8001e7c <HAL_RCC_ClockConfig+0x1f4>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x1fc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fc37 	bl	80006d4 <HAL_InitTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08004c40 	.word	0x08004c40
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e96:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x34>
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d121      	bne.n	8001efa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d11e      	bne.n	8001efa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ebc:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e005      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d102      	bne.n	8001f06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	e004      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d134      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d003      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0xac>
 8001f2c:	e005      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f30:	617b      	str	r3, [r7, #20]
      break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f36:	617b      	str	r3, [r7, #20]
      break;
 8001f38:	e002      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	617b      	str	r3, [r7, #20]
      break;
 8001f3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	fb03 f202 	mul.w	r2, r3, r2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	0e5b      	lsrs	r3, r3, #25
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	3301      	adds	r3, #1
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f80:	69bb      	ldr	r3, [r7, #24]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08004c50 	.word	0x08004c50
 8001f98:	00f42400 	.word	0x00f42400
 8001f9c:	007a1200 	.word	0x007a1200

08001fa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fb8:	f7ff f9d8 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8001fbc:	6178      	str	r0, [r7, #20]
 8001fbe:	e014      	b.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	4a24      	ldr	r2, [pc, #144]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fca:	6593      	str	r3, [r2, #88]	; 0x58
 8001fcc:	4b22      	ldr	r3, [pc, #136]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fd8:	f7ff f9c8 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8001fdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d10b      	bne.n	800200a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d919      	bls.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2ba0      	cmp	r3, #160	; 0xa0
 8001ffc:	d902      	bls.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ffe:	2302      	movs	r3, #2
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	e013      	b.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002004:	2301      	movs	r3, #1
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	e010      	b.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d902      	bls.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002010:	2303      	movs	r3, #3
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	e00a      	b.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b80      	cmp	r3, #128	; 0x80
 800201a:	d102      	bne.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800201c:	2302      	movs	r3, #2
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	e004      	b.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b70      	cmp	r3, #112	; 0x70
 8002026:	d101      	bne.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002028:	2301      	movs	r3, #1
 800202a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 0207 	bic.w	r2, r3, #7
 8002034:	4909      	ldr	r1, [pc, #36]	; (800205c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	429a      	cmp	r2, r3
 8002048:	d001      	beq.n	800204e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	40022000 	.word	0x40022000

08002060 <__NVIC_SetPriority>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80020b8:	2100      	movs	r1, #0
 80020ba:	f06f 0004 	mvn.w	r0, #4
 80020be:	f7ff ffcf 	bl	8002060 <__NVIC_SetPriority>
#endif
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020ce:	f3ef 8305 	mrs	r3, IPSR
 80020d2:	603b      	str	r3, [r7, #0]
  return(result);
 80020d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80020da:	f06f 0305 	mvn.w	r3, #5
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	e00c      	b.n	80020fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <osKernelInitialize+0x44>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <osKernelInitialize+0x44>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	e002      	b.n	80020fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	2000005c 	.word	0x2000005c

08002110 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002116:	f3ef 8305 	mrs	r3, IPSR
 800211a:	603b      	str	r3, [r7, #0]
  return(result);
 800211c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002122:	f06f 0305 	mvn.w	r3, #5
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	e010      	b.n	800214c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <osKernelStart+0x48>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d109      	bne.n	8002146 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002132:	f7ff ffbf 	bl	80020b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <osKernelStart+0x48>)
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800213c:	f001 f866 	bl	800320c <vTaskStartScheduler>
      stat = osOK;
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	e002      	b.n	800214c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000005c 	.word	0x2000005c

0800215c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af04      	add	r7, sp, #16
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800216c:	f3ef 8305 	mrs	r3, IPSR
 8002170:	617b      	str	r3, [r7, #20]
  return(result);
 8002172:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002174:	2b00      	cmp	r3, #0
 8002176:	d17e      	bne.n	8002276 <osThreadNew+0x11a>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d07b      	beq.n	8002276 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002182:	2318      	movs	r3, #24
 8002184:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d045      	beq.n	8002222 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <osThreadNew+0x48>
        name = attr->name;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <osThreadNew+0x6e>
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b38      	cmp	r3, #56	; 0x38
 80021bc:	d805      	bhi.n	80021ca <osThreadNew+0x6e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <osThreadNew+0x72>
        return (NULL);
 80021ca:	2300      	movs	r3, #0
 80021cc:	e054      	b.n	8002278 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00e      	beq.n	8002204 <osThreadNew+0xa8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b5b      	cmp	r3, #91	; 0x5b
 80021ec:	d90a      	bls.n	8002204 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <osThreadNew+0xa8>
        mem = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	e010      	b.n	8002226 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10c      	bne.n	8002226 <osThreadNew+0xca>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d108      	bne.n	8002226 <osThreadNew+0xca>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <osThreadNew+0xca>
          mem = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e001      	b.n	8002226 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d110      	bne.n	800224e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002234:	9202      	str	r2, [sp, #8]
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6a3a      	ldr	r2, [r7, #32]
 8002240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fe0c 	bl	8002e60 <xTaskCreateStatic>
 8002248:	4603      	mov	r3, r0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e013      	b.n	8002276 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d110      	bne.n	8002276 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	b29a      	uxth	r2, r3
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fe57 	bl	8002f1a <xTaskCreate>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <osThreadNew+0x11a>
            hTask = NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002276:	693b      	ldr	r3, [r7, #16]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002288:	f3ef 8305 	mrs	r3, IPSR
 800228c:	60bb      	str	r3, [r7, #8]
  return(result);
 800228e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <osDelay+0x1c>
    stat = osErrorISR;
 8002294:	f06f 0305 	mvn.w	r3, #5
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	e007      	b.n	80022ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 ff7c 	bl	80031a4 <vTaskDelay>
    }
  }

  return (stat);
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80022c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <vApplicationGetIdleTaskMemory+0x30>)
 80022ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000060 	.word	0x20000060
 80022e8:	200000bc 	.word	0x200000bc

080022ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a07      	ldr	r2, [pc, #28]	; (8002318 <vApplicationGetTimerTaskMemory+0x2c>)
 80022fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <vApplicationGetTimerTaskMemory+0x30>)
 8002302:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	200002bc 	.word	0x200002bc
 800231c:	20000318 	.word	0x20000318

08002320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f103 0208 	add.w	r2, r3, #8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f103 0208 	add.w	r2, r3, #8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f103 0208 	add.w	r2, r3, #8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d103      	bne.n	80023e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e00c      	b.n	80023fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3308      	adds	r3, #8
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e002      	b.n	80023f0 <vListInsert+0x2e>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d2f6      	bcs.n	80023ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6892      	ldr	r2, [r2, #8]
 800244a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6852      	ldr	r2, [r2, #4]
 8002454:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	d103      	bne.n	8002468 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	1e5a      	subs	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80024b2:	f002 f84f 	bl	8004554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	441a      	add	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	3b01      	subs	r3, #1
 80024e4:	68f9      	ldr	r1, [r7, #12]
 80024e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	441a      	add	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22ff      	movs	r2, #255	; 0xff
 80024f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d114      	bne.n	8002532 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01a      	beq.n	8002546 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3310      	adds	r3, #16
 8002514:	4618      	mov	r0, r3
 8002516:	f001 f903 	bl	8003720 <xTaskRemoveFromEventList>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <xQueueGenericReset+0xcc>)
 8002522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	e009      	b.n	8002546 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3310      	adds	r3, #16
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fef2 	bl	8002320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff feed 	bl	8002320 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002546:	f002 f835 	bl	80045b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800254a:	2301      	movs	r3, #1
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	e000ed04 	.word	0xe000ed04

08002558 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002570:	f383 8811 	msr	BASEPRI, r3
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800257e:	bf00      	nop
 8002580:	e7fe      	b.n	8002580 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
}
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <xQueueGenericCreateStatic+0x52>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <xQueueGenericCreateStatic+0x56>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <xQueueGenericCreateStatic+0x58>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	623b      	str	r3, [r7, #32]
}
 80025c6:	bf00      	nop
 80025c8:	e7fe      	b.n	80025c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <xQueueGenericCreateStatic+0x7e>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <xQueueGenericCreateStatic+0x82>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <xQueueGenericCreateStatic+0x84>
 80025da:	2300      	movs	r3, #0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	61fb      	str	r3, [r7, #28]
}
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80025f6:	2350      	movs	r3, #80	; 0x50
 80025f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b50      	cmp	r3, #80	; 0x50
 80025fe:	d00a      	beq.n	8002616 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	61bb      	str	r3, [r7, #24]
}
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002616:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800262a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f805 	bl	8002648 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002640:	4618      	mov	r0, r3
 8002642:	3730      	adds	r7, #48	; 0x30
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e002      	b.n	800266a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002676:	2101      	movs	r1, #1
 8002678:	69b8      	ldr	r0, [r7, #24]
 800267a:	f7ff ff05 	bl	8002488 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08e      	sub	sp, #56	; 0x38
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <xQueueGenericSend+0x32>
	__asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d103      	bne.n	80026d0 <xQueueGenericSend+0x40>
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <xQueueGenericSend+0x44>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <xQueueGenericSend+0x46>
 80026d4:	2300      	movs	r3, #0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <xQueueGenericSend+0x60>
	__asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026ec:	bf00      	nop
 80026ee:	e7fe      	b.n	80026ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d103      	bne.n	80026fe <xQueueGenericSend+0x6e>
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <xQueueGenericSend+0x72>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <xQueueGenericSend+0x74>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <xQueueGenericSend+0x8e>
	__asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	623b      	str	r3, [r7, #32]
}
 800271a:	bf00      	nop
 800271c:	e7fe      	b.n	800271c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800271e:	f001 f9bd 	bl	8003a9c <xTaskGetSchedulerState>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <xQueueGenericSend+0x9e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <xQueueGenericSend+0xa2>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <xQueueGenericSend+0xa4>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <xQueueGenericSend+0xbe>
	__asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	61fb      	str	r3, [r7, #28]
}
 800274a:	bf00      	nop
 800274c:	e7fe      	b.n	800274c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800274e:	f001 ff01 	bl	8004554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <xQueueGenericSend+0xd4>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d129      	bne.n	80027b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800276a:	f000 fa0b 	bl	8002b84 <prvCopyDataToQueue>
 800276e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	3324      	adds	r3, #36	; 0x24
 800277c:	4618      	mov	r0, r3
 800277e:	f000 ffcf 	bl	8003720 <xTaskRemoveFromEventList>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002788:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <xQueueGenericSend+0x1f8>)
 800278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	e00a      	b.n	80027b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <xQueueGenericSend+0x1f8>)
 80027a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027b0:	f001 ff00 	bl	80045b4 <vPortExitCritical>
				return pdPASS;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e063      	b.n	8002880 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027be:	f001 fef9 	bl	80045b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e05c      	b.n	8002880 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 f809 	bl	80037e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027da:	f001 feeb 	bl	80045b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027de:	f000 fd7b 	bl	80032d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027e2:	f001 feb7 	bl	8004554 <vPortEnterCritical>
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ec:	b25b      	sxtb	r3, r3
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d103      	bne.n	80027fc <xQueueGenericSend+0x16c>
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002802:	b25b      	sxtb	r3, r3
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d103      	bne.n	8002812 <xQueueGenericSend+0x182>
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002812:	f001 fecf 	bl	80045b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002816:	1d3a      	adds	r2, r7, #4
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fff8 	bl	8003814 <xTaskCheckForTimeOut>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d124      	bne.n	8002874 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800282a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800282c:	f000 faa2 	bl	8002d74 <prvIsQueueFull>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d018      	beq.n	8002868 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	3310      	adds	r3, #16
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f000 ff1e 	bl	8003680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002846:	f000 fa2d 	bl	8002ca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800284a:	f000 fd53 	bl	80032f4 <xTaskResumeAll>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f47f af7c 	bne.w	800274e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <xQueueGenericSend+0x1f8>)
 8002858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	e772      	b.n	800274e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286a:	f000 fa1b 	bl	8002ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800286e:	f000 fd41 	bl	80032f4 <xTaskResumeAll>
 8002872:	e76c      	b.n	800274e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002876:	f000 fa15 	bl	8002ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800287a:	f000 fd3b 	bl	80032f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800287e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002880:	4618      	mov	r0, r3
 8002882:	3738      	adds	r7, #56	; 0x38
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b090      	sub	sp, #64	; 0x40
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <xQueueGenericSendFromISR+0x3c>
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <xQueueGenericSendFromISR+0x40>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <xQueueGenericSendFromISR+0x42>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d103      	bne.n	80028f6 <xQueueGenericSendFromISR+0x6a>
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <xQueueGenericSendFromISR+0x6e>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <xQueueGenericSendFromISR+0x70>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	623b      	str	r3, [r7, #32]
}
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002916:	f001 feff 	bl	8004718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800291a:	f3ef 8211 	mrs	r2, BASEPRI
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	61fa      	str	r2, [r7, #28]
 8002930:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002932:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <xQueueGenericSendFromISR+0xbc>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d12f      	bne.n	80029a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800294e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800295e:	f000 f911 	bl	8002b84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002962:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d112      	bne.n	8002992 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	3324      	adds	r3, #36	; 0x24
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fed1 	bl	8003720 <xTaskRemoveFromEventList>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e007      	b.n	80029a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002992:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002996:	3301      	adds	r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	b25a      	sxtb	r2, r3
 800299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80029a2:	2301      	movs	r3, #1
 80029a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80029a6:	e001      	b.n	80029ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3740      	adds	r7, #64	; 0x40
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	; 0x30
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <xQueueReceive+0x30>
	__asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	623b      	str	r3, [r7, #32]
}
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <xQueueReceive+0x3e>
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <xQueueReceive+0x42>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xQueueReceive+0x44>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xQueueReceive+0x5e>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	61fb      	str	r3, [r7, #28]
}
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a22:	f001 f83b 	bl	8003a9c <xTaskGetSchedulerState>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <xQueueReceive+0x6e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <xQueueReceive+0x72>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueReceive+0x74>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <xQueueReceive+0x8e>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	61bb      	str	r3, [r7, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a52:	f001 fd7f 	bl	8004554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01f      	beq.n	8002aa2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a66:	f000 f8f7 	bl	8002c58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00f      	beq.n	8002a9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	3310      	adds	r3, #16
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fe4e 	bl	8003720 <xTaskRemoveFromEventList>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <xQueueReceive+0x1bc>)
 8002a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a9a:	f001 fd8b 	bl	80045b4 <vPortExitCritical>
				return pdPASS;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e069      	b.n	8002b76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aa8:	f001 fd84 	bl	80045b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e062      	b.n	8002b76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ab6:	f107 0310 	add.w	r3, r7, #16
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fe94 	bl	80037e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ac4:	f001 fd76 	bl	80045b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ac8:	f000 fc06 	bl	80032d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002acc:	f001 fd42 	bl	8004554 <vPortEnterCritical>
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d103      	bne.n	8002ae6 <xQueueReceive+0x122>
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aec:	b25b      	sxtb	r3, r3
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af2:	d103      	bne.n	8002afc <xQueueReceive+0x138>
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002afc:	f001 fd5a 	bl	80045b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b00:	1d3a      	adds	r2, r7, #4
 8002b02:	f107 0310 	add.w	r3, r7, #16
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fe83 	bl	8003814 <xTaskCheckForTimeOut>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d123      	bne.n	8002b5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b16:	f000 f917 	bl	8002d48 <prvIsQueueEmpty>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d017      	beq.n	8002b50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	3324      	adds	r3, #36	; 0x24
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fda9 	bl	8003680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b30:	f000 f8b8 	bl	8002ca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b34:	f000 fbde 	bl	80032f4 <xTaskResumeAll>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d189      	bne.n	8002a52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <xQueueReceive+0x1bc>)
 8002b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	e780      	b.n	8002a52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b52:	f000 f8a7 	bl	8002ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b56:	f000 fbcd 	bl	80032f4 <xTaskResumeAll>
 8002b5a:	e77a      	b.n	8002a52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b5e:	f000 f8a1 	bl	8002ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b62:	f000 fbc7 	bl	80032f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b68:	f000 f8ee 	bl	8002d48 <prvIsQueueEmpty>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f43f af6f 	beq.w	8002a52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3730      	adds	r7, #48	; 0x30
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000ed04 	.word	0xe000ed04

08002b84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10d      	bne.n	8002bbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d14d      	bne.n	8002c46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 ff92 	bl	8003ad8 <xTaskPriorityDisinherit>
 8002bb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	e043      	b.n	8002c46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d119      	bne.n	8002bf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6858      	ldr	r0, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	f001 fff8 	bl	8004bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	441a      	add	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d32b      	bcc.n	8002c46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	e026      	b.n	8002c46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68d8      	ldr	r0, [r3, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	461a      	mov	r2, r3
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	f001 ffde 	bl	8004bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	425b      	negs	r3, r3
 8002c12:	441a      	add	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d207      	bcs.n	8002c34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	425b      	negs	r3, r3
 8002c2e:	441a      	add	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d105      	bne.n	8002c46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c4e:	697b      	ldr	r3, [r7, #20]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d018      	beq.n	8002c9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d303      	bcc.n	8002c8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68d9      	ldr	r1, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	461a      	mov	r2, r3
 8002c96:	6838      	ldr	r0, [r7, #0]
 8002c98:	f001 ff94 	bl	8004bc4 <memcpy>
	}
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cac:	f001 fc52 	bl	8004554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cb8:	e011      	b.n	8002cde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3324      	adds	r3, #36	; 0x24
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fd2a 	bl	8003720 <xTaskRemoveFromEventList>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002cd2:	f000 fe01 	bl	80038d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	dce9      	bgt.n	8002cba <prvUnlockQueue+0x16>
 8002ce6:	e000      	b.n	8002cea <prvUnlockQueue+0x46>
					break;
 8002ce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002cf2:	f001 fc5f 	bl	80045b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cf6:	f001 fc2d 	bl	8004554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d02:	e011      	b.n	8002d28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d012      	beq.n	8002d32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3310      	adds	r3, #16
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fd05 	bl	8003720 <xTaskRemoveFromEventList>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d1c:	f000 fddc 	bl	80038d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d20:	7bbb      	ldrb	r3, [r7, #14]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dce9      	bgt.n	8002d04 <prvUnlockQueue+0x60>
 8002d30:	e000      	b.n	8002d34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	22ff      	movs	r2, #255	; 0xff
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d3c:	f001 fc3a 	bl	80045b4 <vPortExitCritical>
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d50:	f001 fc00 	bl	8004554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d102      	bne.n	8002d62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e001      	b.n	8002d66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d66:	f001 fc25 	bl	80045b4 <vPortExitCritical>

	return xReturn;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d7c:	f001 fbea 	bl	8004554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d102      	bne.n	8002d92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e001      	b.n	8002d96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d96:	f001 fc0d 	bl	80045b4 <vPortExitCritical>

	return xReturn;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e014      	b.n	8002dde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <vQueueAddToRegistry+0x50>)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <vQueueAddToRegistry+0x50>)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <vQueueAddToRegistry+0x50>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002dd6:	e006      	b.n	8002de6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b07      	cmp	r3, #7
 8002de2:	d9e7      	bls.n	8002db4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000718 	.word	0x20000718

08002df8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e08:	f001 fba4 	bl	8004554 <vPortEnterCritical>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e12:	b25b      	sxtb	r3, r3
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d103      	bne.n	8002e22 <vQueueWaitForMessageRestricted+0x2a>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2e:	d103      	bne.n	8002e38 <vQueueWaitForMessageRestricted+0x40>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e38:	f001 fbbc 	bl	80045b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3324      	adds	r3, #36	; 0x24
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fc3b 	bl	80036c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff ff26 	bl	8002ca4 <prvUnlockQueue>
	}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08e      	sub	sp, #56	; 0x38
 8002e64:	af04      	add	r7, sp, #16
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	623b      	str	r3, [r7, #32]
}
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	61fb      	str	r3, [r7, #28]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ea6:	235c      	movs	r3, #92	; 0x5c
 8002ea8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b5c      	cmp	r3, #92	; 0x5c
 8002eae:	d00a      	beq.n	8002ec6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	61bb      	str	r3, [r7, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ec6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01e      	beq.n	8002f0c <xTaskCreateStatic+0xac>
 8002ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01b      	beq.n	8002f0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9303      	str	r3, [sp, #12]
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f850 	bl	8002fa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f06:	f000 f8dd 	bl	80030c4 <prvAddNewTaskToReadyList>
 8002f0a:	e001      	b.n	8002f10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f10:	697b      	ldr	r3, [r7, #20]
	}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b08c      	sub	sp, #48	; 0x30
 8002f1e:	af04      	add	r7, sp, #16
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fc32 	bl	8004798 <pvPortMalloc>
 8002f34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00e      	beq.n	8002f5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f3c:	205c      	movs	r0, #92	; 0x5c
 8002f3e:	f001 fc2b 	bl	8004798 <pvPortMalloc>
 8002f42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f50:	e005      	b.n	8002f5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f001 fcec 	bl	8004930 <vPortFree>
 8002f58:	e001      	b.n	8002f5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d017      	beq.n	8002f94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9303      	str	r3, [sp, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	9302      	str	r3, [sp, #8]
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f80e 	bl	8002fa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f88:	69f8      	ldr	r0, [r7, #28]
 8002f8a:	f000 f89b 	bl	80030c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	e002      	b.n	8002f9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
	}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	21a5      	movs	r1, #165	; 0xa5
 8002fbe:	f001 fdd5 	bl	8004b6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f023 0307 	bic.w	r3, r3, #7
 8002fda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <prvInitialiseNewTask+0x58>
	__asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	617b      	str	r3, [r7, #20]
}
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01f      	beq.n	8003042 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e012      	b.n	800302e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	7819      	ldrb	r1, [r3, #0]
 8003010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	3334      	adds	r3, #52	; 0x34
 8003018:	460a      	mov	r2, r1
 800301a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d006      	beq.n	8003036 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b0f      	cmp	r3, #15
 8003032:	d9e9      	bls.n	8003008 <prvInitialiseNewTask+0x64>
 8003034:	e000      	b.n	8003038 <prvInitialiseNewTask+0x94>
			{
				break;
 8003036:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003040:	e003      	b.n	800304a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	2b37      	cmp	r3, #55	; 0x37
 800304e:	d901      	bls.n	8003054 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003050:	2337      	movs	r3, #55	; 0x37
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003058:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	2200      	movs	r2, #0
 8003064:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	3304      	adds	r3, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f978 	bl	8002360 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	3318      	adds	r3, #24
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff f973 	bl	8002360 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	2200      	movs	r2, #0
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	69b8      	ldr	r0, [r7, #24]
 80030a4:	f001 f928 	bl	80042f8 <pxPortInitialiseStack>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030cc:	f001 fa42 	bl	8004554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030d0:	4b2d      	ldr	r3, [pc, #180]	; (8003188 <prvAddNewTaskToReadyList+0xc4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	4a2c      	ldr	r2, [pc, #176]	; (8003188 <prvAddNewTaskToReadyList+0xc4>)
 80030d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <prvAddNewTaskToReadyList+0xc8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030e2:	4a2a      	ldr	r2, [pc, #168]	; (800318c <prvAddNewTaskToReadyList+0xc8>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030e8:	4b27      	ldr	r3, [pc, #156]	; (8003188 <prvAddNewTaskToReadyList+0xc4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d110      	bne.n	8003112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030f0:	f000 fc16 	bl	8003920 <prvInitialiseTaskLists>
 80030f4:	e00d      	b.n	8003112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030f6:	4b26      	ldr	r3, [pc, #152]	; (8003190 <prvAddNewTaskToReadyList+0xcc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <prvAddNewTaskToReadyList+0xc8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	429a      	cmp	r2, r3
 800310a:	d802      	bhi.n	8003112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <prvAddNewTaskToReadyList+0xc8>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003112:	4b20      	ldr	r3, [pc, #128]	; (8003194 <prvAddNewTaskToReadyList+0xd0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <prvAddNewTaskToReadyList+0xd0>)
 800311a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <prvAddNewTaskToReadyList+0xd0>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <prvAddNewTaskToReadyList+0xd4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d903      	bls.n	8003138 <prvAddNewTaskToReadyList+0x74>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <prvAddNewTaskToReadyList+0xd4>)
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <prvAddNewTaskToReadyList+0xd8>)
 8003146:	441a      	add	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7ff f913 	bl	800237a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003154:	f001 fa2e 	bl	80045b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <prvAddNewTaskToReadyList+0xcc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00e      	beq.n	800317e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <prvAddNewTaskToReadyList+0xc8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	429a      	cmp	r2, r3
 800316c:	d207      	bcs.n	800317e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800316e:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <prvAddNewTaskToReadyList+0xdc>)
 8003170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000c2c 	.word	0x20000c2c
 800318c:	20000758 	.word	0x20000758
 8003190:	20000c38 	.word	0x20000c38
 8003194:	20000c48 	.word	0x20000c48
 8003198:	20000c34 	.word	0x20000c34
 800319c:	2000075c 	.word	0x2000075c
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <vTaskDelay+0x60>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <vTaskDelay+0x30>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	60bb      	str	r3, [r7, #8]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031d4:	f000 f880 	bl	80032d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031d8:	2100      	movs	r1, #0
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fcea 	bl	8003bb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031e0:	f000 f888 	bl	80032f4 <xTaskResumeAll>
 80031e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <vTaskDelay+0x64>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000c54 	.word	0x20000c54
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800321a:	463a      	mov	r2, r7
 800321c:	1d39      	adds	r1, r7, #4
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f848 	bl	80022b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	9202      	str	r2, [sp, #8]
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	460a      	mov	r2, r1
 800323a:	4921      	ldr	r1, [pc, #132]	; (80032c0 <vTaskStartScheduler+0xb4>)
 800323c:	4821      	ldr	r0, [pc, #132]	; (80032c4 <vTaskStartScheduler+0xb8>)
 800323e:	f7ff fe0f 	bl	8002e60 <xTaskCreateStatic>
 8003242:	4603      	mov	r3, r0
 8003244:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <vTaskStartScheduler+0xbc>)
 8003246:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <vTaskStartScheduler+0xbc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003250:	2301      	movs	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e001      	b.n	800325a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003260:	f000 fcfc 	bl	8003c5c <xTimerCreateTimerTask>
 8003264:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d116      	bne.n	800329a <vTaskStartScheduler+0x8e>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	613b      	str	r3, [r7, #16]
}
 800327e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <vTaskStartScheduler+0xc0>)
 8003282:	f04f 32ff 	mov.w	r2, #4294967295
 8003286:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <vTaskStartScheduler+0xc4>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <vTaskStartScheduler+0xc8>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003294:	f001 f8bc 	bl	8004410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003298:	e00e      	b.n	80032b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d10a      	bne.n	80032b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	60fb      	str	r3, [r7, #12]
}
 80032b4:	bf00      	nop
 80032b6:	e7fe      	b.n	80032b6 <vTaskStartScheduler+0xaa>
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	08004c04 	.word	0x08004c04
 80032c4:	080038f1 	.word	0x080038f1
 80032c8:	20000c50 	.word	0x20000c50
 80032cc:	20000c4c 	.word	0x20000c4c
 80032d0:	20000c38 	.word	0x20000c38
 80032d4:	20000c30 	.word	0x20000c30

080032d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <vTaskSuspendAll+0x18>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a03      	ldr	r2, [pc, #12]	; (80032f0 <vTaskSuspendAll+0x18>)
 80032e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	20000c54 	.word	0x20000c54

080032f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003302:	4b42      	ldr	r3, [pc, #264]	; (800340c <xTaskResumeAll+0x118>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <xTaskResumeAll+0x2c>
	__asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	603b      	str	r3, [r7, #0]
}
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003320:	f001 f918 	bl	8004554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003324:	4b39      	ldr	r3, [pc, #228]	; (800340c <xTaskResumeAll+0x118>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3b01      	subs	r3, #1
 800332a:	4a38      	ldr	r2, [pc, #224]	; (800340c <xTaskResumeAll+0x118>)
 800332c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800332e:	4b37      	ldr	r3, [pc, #220]	; (800340c <xTaskResumeAll+0x118>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d162      	bne.n	80033fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003336:	4b36      	ldr	r3, [pc, #216]	; (8003410 <xTaskResumeAll+0x11c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d05e      	beq.n	80033fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800333e:	e02f      	b.n	80033a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003340:	4b34      	ldr	r3, [pc, #208]	; (8003414 <xTaskResumeAll+0x120>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3318      	adds	r3, #24
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff f871 	bl	8002434 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3304      	adds	r3, #4
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff f86c 	bl	8002434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <xTaskResumeAll+0x124>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d903      	bls.n	8003370 <xTaskResumeAll+0x7c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <xTaskResumeAll+0x124>)
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <xTaskResumeAll+0x128>)
 800337e:	441a      	add	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3304      	adds	r3, #4
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f7fe fff7 	bl	800237a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <xTaskResumeAll+0x12c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <xTaskResumeAll+0x130>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033a0:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <xTaskResumeAll+0x120>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1cb      	bne.n	8003340 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033ae:	f000 fb55 	bl	8003a5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033b2:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <xTaskResumeAll+0x134>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d010      	beq.n	80033e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033be:	f000 f847 	bl	8003450 <xTaskIncrementTick>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <xTaskResumeAll+0x130>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f1      	bne.n	80033be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <xTaskResumeAll+0x134>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033e0:	4b10      	ldr	r3, [pc, #64]	; (8003424 <xTaskResumeAll+0x130>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033e8:	2301      	movs	r3, #1
 80033ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <xTaskResumeAll+0x138>)
 80033ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033fc:	f001 f8da 	bl	80045b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003400:	68bb      	ldr	r3, [r7, #8]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000c54 	.word	0x20000c54
 8003410:	20000c2c 	.word	0x20000c2c
 8003414:	20000bec 	.word	0x20000bec
 8003418:	20000c34 	.word	0x20000c34
 800341c:	2000075c 	.word	0x2000075c
 8003420:	20000758 	.word	0x20000758
 8003424:	20000c40 	.word	0x20000c40
 8003428:	20000c3c 	.word	0x20000c3c
 800342c:	e000ed04 	.word	0xe000ed04

08003430 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <xTaskGetTickCount+0x1c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800343c:	687b      	ldr	r3, [r7, #4]
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20000c30 	.word	0x20000c30

08003450 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800345a:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <xTaskIncrementTick+0x148>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 808f 	bne.w	8003582 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003464:	4b4d      	ldr	r3, [pc, #308]	; (800359c <xTaskIncrementTick+0x14c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800346c:	4a4b      	ldr	r2, [pc, #300]	; (800359c <xTaskIncrementTick+0x14c>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d120      	bne.n	80034ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003478:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <xTaskIncrementTick+0x150>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <xTaskIncrementTick+0x48>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	603b      	str	r3, [r7, #0]
}
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <xTaskIncrementTick+0x46>
 8003498:	4b41      	ldr	r3, [pc, #260]	; (80035a0 <xTaskIncrementTick+0x150>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <xTaskIncrementTick+0x154>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a3f      	ldr	r2, [pc, #252]	; (80035a0 <xTaskIncrementTick+0x150>)
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4a3f      	ldr	r2, [pc, #252]	; (80035a4 <xTaskIncrementTick+0x154>)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <xTaskIncrementTick+0x158>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a3d      	ldr	r2, [pc, #244]	; (80035a8 <xTaskIncrementTick+0x158>)
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	f000 fad1 	bl	8003a5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034ba:	4b3c      	ldr	r3, [pc, #240]	; (80035ac <xTaskIncrementTick+0x15c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d349      	bcc.n	8003558 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <xTaskIncrementTick+0x150>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d104      	bne.n	80034d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <xTaskIncrementTick+0x15c>)
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	601a      	str	r2, [r3, #0]
					break;
 80034d6:	e03f      	b.n	8003558 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <xTaskIncrementTick+0x150>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d203      	bcs.n	80034f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034f0:	4a2e      	ldr	r2, [pc, #184]	; (80035ac <xTaskIncrementTick+0x15c>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034f6:	e02f      	b.n	8003558 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe ff99 	bl	8002434 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3318      	adds	r3, #24
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe ff90 	bl	8002434 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <xTaskIncrementTick+0x160>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d903      	bls.n	8003528 <xTaskIncrementTick+0xd8>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <xTaskIncrementTick+0x160>)
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <xTaskIncrementTick+0x164>)
 8003536:	441a      	add	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7fe ff1b 	bl	800237a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <xTaskIncrementTick+0x168>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	429a      	cmp	r2, r3
 8003550:	d3b8      	bcc.n	80034c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003552:	2301      	movs	r3, #1
 8003554:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003556:	e7b5      	b.n	80034c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003558:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <xTaskIncrementTick+0x168>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	4915      	ldr	r1, [pc, #84]	; (80035b4 <xTaskIncrementTick+0x164>)
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d901      	bls.n	8003574 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003570:	2301      	movs	r3, #1
 8003572:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <xTaskIncrementTick+0x16c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800357c:	2301      	movs	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e004      	b.n	800358c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <xTaskIncrementTick+0x170>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <xTaskIncrementTick+0x170>)
 800358a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800358c:	697b      	ldr	r3, [r7, #20]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000c54 	.word	0x20000c54
 800359c:	20000c30 	.word	0x20000c30
 80035a0:	20000be4 	.word	0x20000be4
 80035a4:	20000be8 	.word	0x20000be8
 80035a8:	20000c44 	.word	0x20000c44
 80035ac:	20000c4c 	.word	0x20000c4c
 80035b0:	20000c34 	.word	0x20000c34
 80035b4:	2000075c 	.word	0x2000075c
 80035b8:	20000758 	.word	0x20000758
 80035bc:	20000c40 	.word	0x20000c40
 80035c0:	20000c3c 	.word	0x20000c3c

080035c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035ca:	4b28      	ldr	r3, [pc, #160]	; (800366c <vTaskSwitchContext+0xa8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <vTaskSwitchContext+0xac>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035d8:	e041      	b.n	800365e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80035da:	4b25      	ldr	r3, [pc, #148]	; (8003670 <vTaskSwitchContext+0xac>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <vTaskSwitchContext+0xb0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e010      	b.n	800360a <vTaskSwitchContext+0x46>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <vTaskSwitchContext+0x40>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	607b      	str	r3, [r7, #4]
}
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <vTaskSwitchContext+0x3e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3b01      	subs	r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	491b      	ldr	r1, [pc, #108]	; (8003678 <vTaskSwitchContext+0xb4>)
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0e4      	beq.n	80035e8 <vTaskSwitchContext+0x24>
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <vTaskSwitchContext+0xb4>)
 800362a:	4413      	add	r3, r2
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	3308      	adds	r3, #8
 8003640:	429a      	cmp	r2, r3
 8003642:	d104      	bne.n	800364e <vTaskSwitchContext+0x8a>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a09      	ldr	r2, [pc, #36]	; (800367c <vTaskSwitchContext+0xb8>)
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4a06      	ldr	r2, [pc, #24]	; (8003674 <vTaskSwitchContext+0xb0>)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6013      	str	r3, [r2, #0]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000c54 	.word	0x20000c54
 8003670:	20000c40 	.word	0x20000c40
 8003674:	20000c34 	.word	0x20000c34
 8003678:	2000075c 	.word	0x2000075c
 800367c:	20000758 	.word	0x20000758

08003680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	60fb      	str	r3, [r7, #12]
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036a6:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <vTaskPlaceOnEventList+0x44>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3318      	adds	r3, #24
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fe fe87 	bl	80023c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036b4:	2101      	movs	r1, #1
 80036b6:	6838      	ldr	r0, [r7, #0]
 80036b8:	f000 fa7c 	bl	8003bb4 <prvAddCurrentTaskToDelayedList>
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000758 	.word	0x20000758

080036c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	617b      	str	r3, [r7, #20]
}
 80036ec:	bf00      	nop
 80036ee:	e7fe      	b.n	80036ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <vTaskPlaceOnEventListRestricted+0x54>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3318      	adds	r3, #24
 80036f6:	4619      	mov	r1, r3
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fe fe3e 	bl	800237a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295
 8003708:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	68b8      	ldr	r0, [r7, #8]
 800370e:	f000 fa51 	bl	8003bb4 <prvAddCurrentTaskToDelayedList>
	}
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000758 	.word	0x20000758

08003720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	60fb      	str	r3, [r7, #12]
}
 8003748:	bf00      	nop
 800374a:	e7fe      	b.n	800374a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3318      	adds	r3, #24
 8003750:	4618      	mov	r0, r3
 8003752:	f7fe fe6f 	bl	8002434 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <xTaskRemoveFromEventList+0xb0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d11d      	bne.n	800379a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fe66 	bl	8002434 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <xTaskRemoveFromEventList+0xb4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d903      	bls.n	800377c <xTaskRemoveFromEventList+0x5c>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <xTaskRemoveFromEventList+0xb4>)
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <xTaskRemoveFromEventList+0xb8>)
 800378a:	441a      	add	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7fe fdf1 	bl	800237a <vListInsertEnd>
 8003798:	e005      	b.n	80037a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3318      	adds	r3, #24
 800379e:	4619      	mov	r1, r3
 80037a0:	480e      	ldr	r0, [pc, #56]	; (80037dc <xTaskRemoveFromEventList+0xbc>)
 80037a2:	f7fe fdea 	bl	800237a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <xTaskRemoveFromEventList+0xc0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d905      	bls.n	80037c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <xTaskRemoveFromEventList+0xc4>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e001      	b.n	80037c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037c4:	697b      	ldr	r3, [r7, #20]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000c54 	.word	0x20000c54
 80037d4:	20000c34 	.word	0x20000c34
 80037d8:	2000075c 	.word	0x2000075c
 80037dc:	20000bec 	.word	0x20000bec
 80037e0:	20000758 	.word	0x20000758
 80037e4:	20000c40 	.word	0x20000c40

080037e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <vTaskInternalSetTimeOutState+0x24>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <vTaskInternalSetTimeOutState+0x28>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	605a      	str	r2, [r3, #4]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	20000c44 	.word	0x20000c44
 8003810:	20000c30 	.word	0x20000c30

08003814 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	613b      	str	r3, [r7, #16]
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60fb      	str	r3, [r7, #12]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003856:	f000 fe7d 	bl	8004554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <xTaskCheckForTimeOut+0xbc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d102      	bne.n	800387a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e023      	b.n	80038c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <xTaskCheckForTimeOut+0xc0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d007      	beq.n	8003896 <xTaskCheckForTimeOut+0x82>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e015      	b.n	80038c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	d20b      	bcs.n	80038b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad2      	subs	r2, r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff9b 	bl	80037e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e004      	b.n	80038c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038c2:	f000 fe77 	bl	80045b4 <vPortExitCritical>

	return xReturn;
 80038c6:	69fb      	ldr	r3, [r7, #28]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000c30 	.word	0x20000c30
 80038d4:	20000c44 	.word	0x20000c44

080038d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <vTaskMissedYield+0x14>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
}
 80038e2:	bf00      	nop
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	20000c40 	.word	0x20000c40

080038f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038f8:	f000 f852 	bl	80039a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvIdleTask+0x28>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d9f9      	bls.n	80038f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <prvIdleTask+0x2c>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003914:	e7f0      	b.n	80038f8 <prvIdleTask+0x8>
 8003916:	bf00      	nop
 8003918:	2000075c 	.word	0x2000075c
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	e00c      	b.n	8003946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <prvInitialiseTaskLists+0x60>)
 8003938:	4413      	add	r3, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fcf0 	bl	8002320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3301      	adds	r3, #1
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b37      	cmp	r3, #55	; 0x37
 800394a:	d9ef      	bls.n	800392c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800394c:	480d      	ldr	r0, [pc, #52]	; (8003984 <prvInitialiseTaskLists+0x64>)
 800394e:	f7fe fce7 	bl	8002320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003952:	480d      	ldr	r0, [pc, #52]	; (8003988 <prvInitialiseTaskLists+0x68>)
 8003954:	f7fe fce4 	bl	8002320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003958:	480c      	ldr	r0, [pc, #48]	; (800398c <prvInitialiseTaskLists+0x6c>)
 800395a:	f7fe fce1 	bl	8002320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800395e:	480c      	ldr	r0, [pc, #48]	; (8003990 <prvInitialiseTaskLists+0x70>)
 8003960:	f7fe fcde 	bl	8002320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003964:	480b      	ldr	r0, [pc, #44]	; (8003994 <prvInitialiseTaskLists+0x74>)
 8003966:	f7fe fcdb 	bl	8002320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <prvInitialiseTaskLists+0x78>)
 800396c:	4a05      	ldr	r2, [pc, #20]	; (8003984 <prvInitialiseTaskLists+0x64>)
 800396e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <prvInitialiseTaskLists+0x7c>)
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <prvInitialiseTaskLists+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000075c 	.word	0x2000075c
 8003984:	20000bbc 	.word	0x20000bbc
 8003988:	20000bd0 	.word	0x20000bd0
 800398c:	20000bec 	.word	0x20000bec
 8003990:	20000c00 	.word	0x20000c00
 8003994:	20000c18 	.word	0x20000c18
 8003998:	20000be4 	.word	0x20000be4
 800399c:	20000be8 	.word	0x20000be8

080039a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a6:	e019      	b.n	80039dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039a8:	f000 fdd4 	bl	8004554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <prvCheckTasksWaitingTermination+0x50>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fd3b 	bl	8002434 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <prvCheckTasksWaitingTermination+0x54>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <prvCheckTasksWaitingTermination+0x54>)
 80039c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039d2:	f000 fdef 	bl	80045b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f810 	bl	80039fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e1      	bne.n	80039a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000c00 	.word	0x20000c00
 80039f4:	20000c2c 	.word	0x20000c2c
 80039f8:	20000c14 	.word	0x20000c14

080039fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 ff8c 	bl	8004930 <vPortFree>
				vPortFree( pxTCB );
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 ff89 	bl	8004930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a1e:	e018      	b.n	8003a52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d103      	bne.n	8003a32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 ff80 	bl	8004930 <vPortFree>
	}
 8003a30:	e00f      	b.n	8003a52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d00a      	beq.n	8003a52 <prvDeleteTCB+0x56>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	60fb      	str	r3, [r7, #12]
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <prvDeleteTCB+0x54>
	}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <prvResetNextTaskUnblockTime+0x38>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <prvResetNextTaskUnblockTime+0x3c>)
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a74:	e008      	b.n	8003a88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <prvResetNextTaskUnblockTime+0x38>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <prvResetNextTaskUnblockTime+0x3c>)
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20000be4 	.word	0x20000be4
 8003a98:	20000c4c 	.word	0x20000c4c

08003a9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <xTaskGetSchedulerState+0x34>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	e008      	b.n	8003ac2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <xTaskGetSchedulerState+0x38>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e001      	b.n	8003ac2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ac2:	687b      	ldr	r3, [r7, #4]
	}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	20000c38 	.word	0x20000c38
 8003ad4:	20000c54 	.word	0x20000c54

08003ad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d056      	beq.n	8003b9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003aee:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <xTaskPriorityDisinherit+0xd0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d00a      	beq.n	8003b0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	60fb      	str	r3, [r7, #12]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	60bb      	str	r3, [r7, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	1e5a      	subs	r2, r3, #1
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d02c      	beq.n	8003b9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d128      	bne.n	8003b9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fc70 	bl	8002434 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <xTaskPriorityDisinherit+0xd4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d903      	bls.n	8003b7c <xTaskPriorityDisinherit+0xa4>
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <xTaskPriorityDisinherit+0xd4>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <xTaskPriorityDisinherit+0xd8>)
 8003b8a:	441a      	add	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe fbf1 	bl	800237a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b9c:	697b      	ldr	r3, [r7, #20]
	}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000758 	.word	0x20000758
 8003bac:	20000c34 	.word	0x20000c34
 8003bb0:	2000075c 	.word	0x2000075c

08003bb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bbe:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <prvAddCurrentTaskToDelayedList+0x90>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fc32 	bl	8002434 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d10a      	bne.n	8003bee <prvAddCurrentTaskToDelayedList+0x3a>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4619      	mov	r1, r3
 8003be6:	4819      	ldr	r0, [pc, #100]	; (8003c4c <prvAddCurrentTaskToDelayedList+0x98>)
 8003be8:	f7fe fbc7 	bl	800237a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bec:	e026      	b.n	8003c3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bf6:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d209      	bcs.n	8003c1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7fe fbd5 	bl	80023c2 <vListInsert>
}
 8003c18:	e010      	b.n	8003c3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f7fe fbcb 	bl	80023c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d202      	bcs.n	8003c3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000c30 	.word	0x20000c30
 8003c48:	20000758 	.word	0x20000758
 8003c4c:	20000c18 	.word	0x20000c18
 8003c50:	20000be8 	.word	0x20000be8
 8003c54:	20000be4 	.word	0x20000be4
 8003c58:	20000c4c 	.word	0x20000c4c

08003c5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c66:	f000 fb07 	bl	8004278 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c6a:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <xTimerCreateTimerTask+0x80>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d021      	beq.n	8003cb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c7a:	1d3a      	adds	r2, r7, #4
 8003c7c:	f107 0108 	add.w	r1, r7, #8
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fb31 	bl	80022ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	9202      	str	r2, [sp, #8]
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	2302      	movs	r3, #2
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	4910      	ldr	r1, [pc, #64]	; (8003ce0 <xTimerCreateTimerTask+0x84>)
 8003c9e:	4811      	ldr	r0, [pc, #68]	; (8003ce4 <xTimerCreateTimerTask+0x88>)
 8003ca0:	f7ff f8de 	bl	8002e60 <xTaskCreateStatic>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <xTimerCreateTimerTask+0x8c>)
 8003ca8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <xTimerCreateTimerTask+0x8c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	613b      	str	r3, [r7, #16]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003cd2:	697b      	ldr	r3, [r7, #20]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000c88 	.word	0x20000c88
 8003ce0:	08004c0c 	.word	0x08004c0c
 8003ce4:	08003e21 	.word	0x08003e21
 8003ce8:	20000c8c 	.word	0x20000c8c

08003cec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	623b      	str	r3, [r7, #32]
}
 8003d16:	bf00      	nop
 8003d18:	e7fe      	b.n	8003d18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <xTimerGenericCommand+0x98>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d02a      	beq.n	8003d78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	dc18      	bgt.n	8003d66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d34:	f7ff feb2 	bl	8003a9c <xTaskGetSchedulerState>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d109      	bne.n	8003d52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <xTimerGenericCommand+0x98>)
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	f107 0110 	add.w	r1, r7, #16
 8003d46:	2300      	movs	r3, #0
 8003d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4a:	f7fe fca1 	bl	8002690 <xQueueGenericSend>
 8003d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003d50:	e012      	b.n	8003d78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d52:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <xTimerGenericCommand+0x98>)
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	f107 0110 	add.w	r1, r7, #16
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f7fe fc97 	bl	8002690 <xQueueGenericSend>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24
 8003d64:	e008      	b.n	8003d78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <xTimerGenericCommand+0x98>)
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	f107 0110 	add.w	r1, r7, #16
 8003d6e:	2300      	movs	r3, #0
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	f7fe fd8b 	bl	800288c <xQueueGenericSendFromISR>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3728      	adds	r7, #40	; 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000c88 	.word	0x20000c88

08003d88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <prvProcessExpiredTimer+0x94>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fb47 	bl	8002434 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d022      	beq.n	8003dfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	18d1      	adds	r1, r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	6978      	ldr	r0, [r7, #20]
 8003dc2:	f000 f8d1 	bl	8003f68 <prvInsertTimerInActiveList>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01f      	beq.n	8003e0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	f7ff ff88 	bl	8003cec <xTimerGenericCommand>
 8003ddc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d113      	bne.n	8003e0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	60fb      	str	r3, [r7, #12]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	6978      	ldr	r0, [r7, #20]
 8003e12:	4798      	blx	r3
}
 8003e14:	bf00      	nop
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000c80 	.word	0x20000c80

08003e20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e28:	f107 0308 	add.w	r3, r7, #8
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f857 	bl	8003ee0 <prvGetNextExpireTime>
 8003e32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4619      	mov	r1, r3
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f803 	bl	8003e44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e3e:	f000 f8d5 	bl	8003fec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e42:	e7f1      	b.n	8003e28 <prvTimerTask+0x8>

08003e44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e4e:	f7ff fa43 	bl	80032d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e52:	f107 0308 	add.w	r3, r7, #8
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f866 	bl	8003f28 <prvSampleTimeNow>
 8003e5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d130      	bne.n	8003ec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <prvProcessTimerOrBlockTask+0x3c>
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d806      	bhi.n	8003e80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e72:	f7ff fa3f 	bl	80032f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff85 	bl	8003d88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e7e:	e024      	b.n	8003eca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <prvProcessTimerOrBlockTask+0x90>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <prvProcessTimerOrBlockTask+0x50>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <prvProcessTimerOrBlockTask+0x52>
 8003e94:	2300      	movs	r3, #0
 8003e96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <prvProcessTimerOrBlockTask+0x94>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f7fe ffa7 	bl	8002df8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003eaa:	f7ff fa23 	bl	80032f4 <xTaskResumeAll>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <prvProcessTimerOrBlockTask+0x98>)
 8003eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
}
 8003ec4:	e001      	b.n	8003eca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003ec6:	f7ff fa15 	bl	80032f4 <xTaskResumeAll>
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000c84 	.word	0x20000c84
 8003ed8:	20000c88 	.word	0x20000c88
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <prvGetNextExpireTime+0x44>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <prvGetNextExpireTime+0x16>
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	e000      	b.n	8003ef8 <prvGetNextExpireTime+0x18>
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d105      	bne.n	8003f10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <prvGetNextExpireTime+0x44>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e001      	b.n	8003f14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f14:	68fb      	ldr	r3, [r7, #12]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000c80 	.word	0x20000c80

08003f28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f30:	f7ff fa7e 	bl	8003430 <xTaskGetTickCount>
 8003f34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <prvSampleTimeNow+0x3c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d205      	bcs.n	8003f4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f40:	f000 f936 	bl	80041b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	e002      	b.n	8003f52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f52:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <prvSampleTimeNow+0x3c>)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f58:	68fb      	ldr	r3, [r7, #12]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000c90 	.word	0x20000c90

08003f68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d812      	bhi.n	8003fb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	1ad2      	subs	r2, r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	e01b      	b.n	8003fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <prvInsertTimerInActiveList+0x7c>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7fe fa08 	bl	80023c2 <vListInsert>
 8003fb2:	e012      	b.n	8003fda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d206      	bcs.n	8003fca <prvInsertTimerInActiveList+0x62>
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e007      	b.n	8003fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <prvInsertTimerInActiveList+0x80>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f7fe f9f4 	bl	80023c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003fda:	697b      	ldr	r3, [r7, #20]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000c84 	.word	0x20000c84
 8003fe8:	20000c80 	.word	0x20000c80

08003fec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08e      	sub	sp, #56	; 0x38
 8003ff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ff2:	e0ca      	b.n	800418a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da18      	bge.n	800402c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	61fb      	str	r3, [r7, #28]
}
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004022:	6850      	ldr	r0, [r2, #4]
 8004024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004026:	6892      	ldr	r2, [r2, #8]
 8004028:	4611      	mov	r1, r2
 800402a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f2c0 80ab 	blt.w	800418a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	3304      	adds	r3, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe f9f5 	bl	8002434 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800404a:	463b      	mov	r3, r7
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff6b 	bl	8003f28 <prvSampleTimeNow>
 8004052:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b09      	cmp	r3, #9
 8004058:	f200 8096 	bhi.w	8004188 <prvProcessReceivedCommands+0x19c>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <prvProcessReceivedCommands+0x78>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	0800408d 	.word	0x0800408d
 8004068:	0800408d 	.word	0x0800408d
 800406c:	0800408d 	.word	0x0800408d
 8004070:	08004101 	.word	0x08004101
 8004074:	08004115 	.word	0x08004115
 8004078:	0800415f 	.word	0x0800415f
 800407c:	0800408d 	.word	0x0800408d
 8004080:	0800408d 	.word	0x0800408d
 8004084:	08004101 	.word	0x08004101
 8004088:	08004115 	.word	0x08004115
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	b2da      	uxtb	r2, r3
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	18d1      	adds	r1, r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ac:	f7ff ff5c 	bl	8003f68 <prvInsertTimerInActiveList>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d069      	beq.n	800418a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05e      	beq.n	800418a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	441a      	add	r2, r3
 80040d4:	2300      	movs	r3, #0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2300      	movs	r3, #0
 80040da:	2100      	movs	r1, #0
 80040dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040de:	f7ff fe05 	bl	8003cec <xTimerGenericCommand>
 80040e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d14f      	bne.n	800418a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	61bb      	str	r3, [r7, #24]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004112:	e03a      	b.n	800418a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	617b      	str	r3, [r7, #20]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	18d1      	adds	r1, r2, r3
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004158:	f7ff ff06 	bl	8003f68 <prvInsertTimerInActiveList>
					break;
 800415c:	e015      	b.n	800418a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800416c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800416e:	f000 fbdf 	bl	8004930 <vPortFree>
 8004172:	e00a      	b.n	800418a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004186:	e000      	b.n	800418a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <prvProcessReceivedCommands+0x1c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	1d39      	adds	r1, r7, #4
 8004190:	2200      	movs	r2, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fc16 	bl	80029c4 <xQueueReceive>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	f47f af2a 	bne.w	8003ff4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3730      	adds	r7, #48	; 0x30
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000c88 	.word	0x20000c88

080041b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041b6:	e048      	b.n	800424a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041b8:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <prvSwitchTimerLists+0xc0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c2:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <prvSwitchTimerLists+0xc0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe f92f 	bl	8002434 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02e      	beq.n	800424a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4413      	add	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d90e      	bls.n	800421c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800420a:	4b19      	ldr	r3, [pc, #100]	; (8004270 <prvSwitchTimerLists+0xc0>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7fe f8d4 	bl	80023c2 <vListInsert>
 800421a:	e016      	b.n	800424a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800421c:	2300      	movs	r3, #0
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2300      	movs	r3, #0
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	2100      	movs	r1, #0
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff fd60 	bl	8003cec <xTimerGenericCommand>
 800422c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	603b      	str	r3, [r7, #0]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <prvSwitchTimerLists+0xc0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1b1      	bne.n	80041b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <prvSwitchTimerLists+0xc0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <prvSwitchTimerLists+0xc4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a04      	ldr	r2, [pc, #16]	; (8004270 <prvSwitchTimerLists+0xc0>)
 8004260:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004262:	4a04      	ldr	r2, [pc, #16]	; (8004274 <prvSwitchTimerLists+0xc4>)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000c80 	.word	0x20000c80
 8004274:	20000c84 	.word	0x20000c84

08004278 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800427e:	f000 f969 	bl	8004554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <prvCheckForValidListAndQueue+0x60>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d120      	bne.n	80042cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800428a:	4814      	ldr	r0, [pc, #80]	; (80042dc <prvCheckForValidListAndQueue+0x64>)
 800428c:	f7fe f848 	bl	8002320 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004290:	4813      	ldr	r0, [pc, #76]	; (80042e0 <prvCheckForValidListAndQueue+0x68>)
 8004292:	f7fe f845 	bl	8002320 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <prvCheckForValidListAndQueue+0x6c>)
 8004298:	4a10      	ldr	r2, [pc, #64]	; (80042dc <prvCheckForValidListAndQueue+0x64>)
 800429a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <prvCheckForValidListAndQueue+0x70>)
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <prvCheckForValidListAndQueue+0x68>)
 80042a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042a2:	2300      	movs	r3, #0
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <prvCheckForValidListAndQueue+0x74>)
 80042a8:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <prvCheckForValidListAndQueue+0x78>)
 80042aa:	2110      	movs	r1, #16
 80042ac:	200a      	movs	r0, #10
 80042ae:	f7fe f953 	bl	8002558 <xQueueGenericCreateStatic>
 80042b2:	4603      	mov	r3, r0
 80042b4:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <prvCheckForValidListAndQueue+0x60>)
 80042b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <prvCheckForValidListAndQueue+0x60>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <prvCheckForValidListAndQueue+0x60>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	490b      	ldr	r1, [pc, #44]	; (80042f4 <prvCheckForValidListAndQueue+0x7c>)
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fd6c 	bl	8002da4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042cc:	f000 f972 	bl	80045b4 <vPortExitCritical>
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000c88 	.word	0x20000c88
 80042dc:	20000c58 	.word	0x20000c58
 80042e0:	20000c6c 	.word	0x20000c6c
 80042e4:	20000c80 	.word	0x20000c80
 80042e8:	20000c84 	.word	0x20000c84
 80042ec:	20000d34 	.word	0x20000d34
 80042f0:	20000c94 	.word	0x20000c94
 80042f4:	08004c14 	.word	0x08004c14

080042f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b04      	subs	r3, #4
 8004308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3b04      	subs	r3, #4
 8004316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b04      	subs	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004328:	4a0c      	ldr	r2, [pc, #48]	; (800435c <pxPortInitialiseStack+0x64>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b14      	subs	r3, #20
 8004332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b04      	subs	r3, #4
 800433e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f06f 0202 	mvn.w	r2, #2
 8004346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3b20      	subs	r3, #32
 800434c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	08004361 	.word	0x08004361

08004360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <prvTaskExitError+0x54>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d00a      	beq.n	800438a <prvTaskExitError+0x2a>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60fb      	str	r3, [r7, #12]
}
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <prvTaskExitError+0x28>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60bb      	str	r3, [r7, #8]
}
 800439c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800439e:	bf00      	nop
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0fc      	beq.n	80043a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	2000000c 	.word	0x2000000c
	...

080043c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <pxCurrentTCBConst2>)
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	6808      	ldr	r0, [r1, #0]
 80043c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ca:	f380 8809 	msr	PSP, r0
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8811 	msr	BASEPRI, r0
 80043da:	4770      	bx	lr
 80043dc:	f3af 8000 	nop.w

080043e0 <pxCurrentTCBConst2>:
 80043e0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop

080043e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043e8:	4808      	ldr	r0, [pc, #32]	; (800440c <prvPortStartFirstTask+0x24>)
 80043ea:	6800      	ldr	r0, [r0, #0]
 80043ec:	6800      	ldr	r0, [r0, #0]
 80043ee:	f380 8808 	msr	MSP, r0
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f380 8814 	msr	CONTROL, r0
 80043fa:	b662      	cpsie	i
 80043fc:	b661      	cpsie	f
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	df00      	svc	0
 8004408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800440a:	bf00      	nop
 800440c:	e000ed08 	.word	0xe000ed08

08004410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004416:	4b46      	ldr	r3, [pc, #280]	; (8004530 <xPortStartScheduler+0x120>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a46      	ldr	r2, [pc, #280]	; (8004534 <xPortStartScheduler+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d10a      	bne.n	8004436 <xPortStartScheduler+0x26>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	613b      	str	r3, [r7, #16]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004436:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <xPortStartScheduler+0x120>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <xPortStartScheduler+0x128>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10a      	bne.n	8004456 <xPortStartScheduler+0x46>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60fb      	str	r3, [r7, #12]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <xPortStartScheduler+0x12c>)
 8004458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	22ff      	movs	r2, #255	; 0xff
 8004466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4b31      	ldr	r3, [pc, #196]	; (8004540 <xPortStartScheduler+0x130>)
 800447c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800447e:	4b31      	ldr	r3, [pc, #196]	; (8004544 <xPortStartScheduler+0x134>)
 8004480:	2207      	movs	r2, #7
 8004482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004484:	e009      	b.n	800449a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004486:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <xPortStartScheduler+0x134>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <xPortStartScheduler+0x134>)
 800448e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	b2db      	uxtb	r3, r3
 8004498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d0ef      	beq.n	8004486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044a6:	4b27      	ldr	r3, [pc, #156]	; (8004544 <xPortStartScheduler+0x134>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1c3 0307 	rsb	r3, r3, #7
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d00a      	beq.n	80044c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60bb      	str	r3, [r7, #8]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <xPortStartScheduler+0x134>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <xPortStartScheduler+0x134>)
 80044d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044d2:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <xPortStartScheduler+0x134>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044da:	4a1a      	ldr	r2, [pc, #104]	; (8004544 <xPortStartScheduler+0x134>)
 80044dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044e6:	4b18      	ldr	r3, [pc, #96]	; (8004548 <xPortStartScheduler+0x138>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <xPortStartScheduler+0x138>)
 80044ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <xPortStartScheduler+0x138>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a14      	ldr	r2, [pc, #80]	; (8004548 <xPortStartScheduler+0x138>)
 80044f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044fe:	f000 f8dd 	bl	80046bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <xPortStartScheduler+0x13c>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004508:	f000 f8fc 	bl	8004704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <xPortStartScheduler+0x140>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0f      	ldr	r2, [pc, #60]	; (8004550 <xPortStartScheduler+0x140>)
 8004512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004518:	f7ff ff66 	bl	80043e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800451c:	f7ff f852 	bl	80035c4 <vTaskSwitchContext>
	prvTaskExitError();
 8004520:	f7ff ff1e 	bl	8004360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	e000ed00 	.word	0xe000ed00
 8004534:	410fc271 	.word	0x410fc271
 8004538:	410fc270 	.word	0x410fc270
 800453c:	e000e400 	.word	0xe000e400
 8004540:	20000d84 	.word	0x20000d84
 8004544:	20000d88 	.word	0x20000d88
 8004548:	e000ed20 	.word	0xe000ed20
 800454c:	2000000c 	.word	0x2000000c
 8004550:	e000ef34 	.word	0xe000ef34

08004554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	607b      	str	r3, [r7, #4]
}
 800456c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <vPortEnterCritical+0x58>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3301      	adds	r3, #1
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <vPortEnterCritical+0x58>)
 8004576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <vPortEnterCritical+0x58>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10f      	bne.n	80045a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <vPortEnterCritical+0x5c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	603b      	str	r3, [r7, #0]
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <vPortEnterCritical+0x4a>
	}
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	2000000c 	.word	0x2000000c
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <vPortExitCritical+0x50>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <vPortExitCritical+0x24>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	607b      	str	r3, [r7, #4]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <vPortExitCritical+0x50>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3b01      	subs	r3, #1
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <vPortExitCritical+0x50>)
 80045e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <vPortExitCritical+0x50>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d105      	bne.n	80045f6 <vPortExitCritical+0x42>
 80045ea:	2300      	movs	r3, #0
 80045ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f383 8811 	msr	BASEPRI, r3
}
 80045f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	2000000c 	.word	0x2000000c
	...

08004610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004610:	f3ef 8009 	mrs	r0, PSP
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	4b15      	ldr	r3, [pc, #84]	; (8004670 <pxCurrentTCBConst>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	f01e 0f10 	tst.w	lr, #16
 8004620:	bf08      	it	eq
 8004622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462a:	6010      	str	r0, [r2, #0]
 800462c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004634:	f380 8811 	msr	BASEPRI, r0
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f7fe ffc0 	bl	80035c4 <vTaskSwitchContext>
 8004644:	f04f 0000 	mov.w	r0, #0
 8004648:	f380 8811 	msr	BASEPRI, r0
 800464c:	bc09      	pop	{r0, r3}
 800464e:	6819      	ldr	r1, [r3, #0]
 8004650:	6808      	ldr	r0, [r1, #0]
 8004652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004656:	f01e 0f10 	tst.w	lr, #16
 800465a:	bf08      	it	eq
 800465c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004660:	f380 8809 	msr	PSP, r0
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	f3af 8000 	nop.w

08004670 <pxCurrentTCBConst>:
 8004670:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop

08004678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	607b      	str	r3, [r7, #4]
}
 8004690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004692:	f7fe fedd 	bl	8003450 <xTaskIncrementTick>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <xPortSysTickHandler+0x40>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f383 8811 	msr	BASEPRI, r3
}
 80046ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <vPortSetupTimerInterrupt+0x34>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <vPortSetupTimerInterrupt+0x38>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <vPortSetupTimerInterrupt+0x3c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <vPortSetupTimerInterrupt+0x40>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	4a09      	ldr	r2, [pc, #36]	; (8004700 <vPortSetupTimerInterrupt+0x44>)
 80046da:	3b01      	subs	r3, #1
 80046dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046de:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <vPortSetupTimerInterrupt+0x34>)
 80046e0:	2207      	movs	r2, #7
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000e010 	.word	0xe000e010
 80046f4:	e000e018 	.word	0xe000e018
 80046f8:	20000000 	.word	0x20000000
 80046fc:	10624dd3 	.word	0x10624dd3
 8004700:	e000e014 	.word	0xe000e014

08004704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004714 <vPortEnableVFP+0x10>
 8004708:	6801      	ldr	r1, [r0, #0]
 800470a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800470e:	6001      	str	r1, [r0, #0]
 8004710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004712:	bf00      	nop
 8004714:	e000ed88 	.word	0xe000ed88

08004718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800471e:	f3ef 8305 	mrs	r3, IPSR
 8004722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d914      	bls.n	8004754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800472a:	4a17      	ldr	r2, [pc, #92]	; (8004788 <vPortValidateInterruptPriority+0x70>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004734:	4b15      	ldr	r3, [pc, #84]	; (800478c <vPortValidateInterruptPriority+0x74>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	7afa      	ldrb	r2, [r7, #11]
 800473a:	429a      	cmp	r2, r3
 800473c:	d20a      	bcs.n	8004754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	607b      	str	r3, [r7, #4]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <vPortValidateInterruptPriority+0x78>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800475c:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <vPortValidateInterruptPriority+0x7c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d90a      	bls.n	800477a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	603b      	str	r3, [r7, #0]
}
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <vPortValidateInterruptPriority+0x60>
	}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	e000e3f0 	.word	0xe000e3f0
 800478c:	20000d84 	.word	0x20000d84
 8004790:	e000ed0c 	.word	0xe000ed0c
 8004794:	20000d88 	.word	0x20000d88

08004798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047a4:	f7fe fd98 	bl	80032d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047a8:	4b5b      	ldr	r3, [pc, #364]	; (8004918 <pvPortMalloc+0x180>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047b0:	f000 f920 	bl	80049f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047b4:	4b59      	ldr	r3, [pc, #356]	; (800491c <pvPortMalloc+0x184>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 8093 	bne.w	80048e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01d      	beq.n	8004804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80047c8:	2208      	movs	r2, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f023 0307 	bic.w	r3, r3, #7
 80047e0:	3308      	adds	r3, #8
 80047e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <pvPortMalloc+0x6c>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	617b      	str	r3, [r7, #20]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d06e      	beq.n	80048e8 <pvPortMalloc+0x150>
 800480a:	4b45      	ldr	r3, [pc, #276]	; (8004920 <pvPortMalloc+0x188>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	d869      	bhi.n	80048e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004814:	4b43      	ldr	r3, [pc, #268]	; (8004924 <pvPortMalloc+0x18c>)
 8004816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004818:	4b42      	ldr	r3, [pc, #264]	; (8004924 <pvPortMalloc+0x18c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800481e:	e004      	b.n	800482a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d903      	bls.n	800483c <pvPortMalloc+0xa4>
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f1      	bne.n	8004820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <pvPortMalloc+0x180>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004842:	429a      	cmp	r2, r3
 8004844:	d050      	beq.n	80048e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2208      	movs	r2, #8
 800484c:	4413      	add	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	2308      	movs	r3, #8
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	429a      	cmp	r2, r3
 8004866:	d91f      	bls.n	80048a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <pvPortMalloc+0xf8>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	613b      	str	r3, [r7, #16]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	1ad2      	subs	r2, r2, r3
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048a2:	69b8      	ldr	r0, [r7, #24]
 80048a4:	f000 f908 	bl	8004ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <pvPortMalloc+0x188>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <pvPortMalloc+0x188>)
 80048b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <pvPortMalloc+0x188>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <pvPortMalloc+0x190>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d203      	bcs.n	80048ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048c2:	4b17      	ldr	r3, [pc, #92]	; (8004920 <pvPortMalloc+0x188>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a18      	ldr	r2, [pc, #96]	; (8004928 <pvPortMalloc+0x190>)
 80048c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	4b13      	ldr	r3, [pc, #76]	; (800491c <pvPortMalloc+0x184>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <pvPortMalloc+0x194>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	4a11      	ldr	r2, [pc, #68]	; (800492c <pvPortMalloc+0x194>)
 80048e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048e8:	f7fe fd04 	bl	80032f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <pvPortMalloc+0x174>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	60fb      	str	r3, [r7, #12]
}
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <pvPortMalloc+0x172>
	return pvReturn;
 800490c:	69fb      	ldr	r3, [r7, #28]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3728      	adds	r7, #40	; 0x28
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	2000194c 	.word	0x2000194c
 800491c:	20001960 	.word	0x20001960
 8004920:	20001950 	.word	0x20001950
 8004924:	20001944 	.word	0x20001944
 8004928:	20001954 	.word	0x20001954
 800492c:	20001958 	.word	0x20001958

08004930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d04d      	beq.n	80049de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004942:	2308      	movs	r3, #8
 8004944:	425b      	negs	r3, r3
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <vPortFree+0xb8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <vPortFree+0x44>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	60fb      	str	r3, [r7, #12]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <vPortFree+0x62>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	60bb      	str	r3, [r7, #8]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <vPortFree+0xb8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01e      	beq.n	80049de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d11a      	bne.n	80049de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <vPortFree+0xb8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	401a      	ands	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049b8:	f7fe fc8e 	bl	80032d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <vPortFree+0xbc>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4413      	add	r3, r2
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <vPortFree+0xbc>)
 80049c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049ca:	6938      	ldr	r0, [r7, #16]
 80049cc:	f000 f874 	bl	8004ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <vPortFree+0xc0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	4a06      	ldr	r2, [pc, #24]	; (80049f0 <vPortFree+0xc0>)
 80049d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80049da:	f7fe fc8b 	bl	80032f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049de:	bf00      	nop
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20001960 	.word	0x20001960
 80049ec:	20001950 	.word	0x20001950
 80049f0:	2000195c 	.word	0x2000195c

080049f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80049fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a00:	4b27      	ldr	r3, [pc, #156]	; (8004aa0 <prvHeapInit+0xac>)
 8004a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3307      	adds	r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0307 	bic.w	r3, r3, #7
 8004a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	4a1f      	ldr	r2, [pc, #124]	; (8004aa0 <prvHeapInit+0xac>)
 8004a24:	4413      	add	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <prvHeapInit+0xb0>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a32:	4b1c      	ldr	r3, [pc, #112]	; (8004aa4 <prvHeapInit+0xb0>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a40:	2208      	movs	r2, #8
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0307 	bic.w	r3, r3, #7
 8004a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <prvHeapInit+0xb4>)
 8004a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <prvHeapInit+0xb4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <prvHeapInit+0xb4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	1ad2      	subs	r2, r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <prvHeapInit+0xb4>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <prvHeapInit+0xb8>)
 8004a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <prvHeapInit+0xbc>)
 8004a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <prvHeapInit+0xc0>)
 8004a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20000d8c 	.word	0x20000d8c
 8004aa4:	20001944 	.word	0x20001944
 8004aa8:	2000194c 	.word	0x2000194c
 8004aac:	20001954 	.word	0x20001954
 8004ab0:	20001950 	.word	0x20001950
 8004ab4:	20001960 	.word	0x20001960

08004ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ac0:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <prvInsertBlockIntoFreeList+0xac>)
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e002      	b.n	8004acc <prvInsertBlockIntoFreeList+0x14>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d8f7      	bhi.n	8004ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d108      	bne.n	8004afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	441a      	add	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	441a      	add	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d118      	bne.n	8004b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <prvInsertBlockIntoFreeList+0xb0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d00d      	beq.n	8004b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e008      	b.n	8004b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b36:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <prvInsertBlockIntoFreeList+0xb0>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e003      	b.n	8004b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d002      	beq.n	8004b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20001944 	.word	0x20001944
 8004b68:	2000194c 	.word	0x2000194c

08004b6c <memset>:
 8004b6c:	4402      	add	r2, r0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d100      	bne.n	8004b76 <memset+0xa>
 8004b74:	4770      	bx	lr
 8004b76:	f803 1b01 	strb.w	r1, [r3], #1
 8004b7a:	e7f9      	b.n	8004b70 <memset+0x4>

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4d0d      	ldr	r5, [pc, #52]	; (8004bb4 <__libc_init_array+0x38>)
 8004b80:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b82:	1b64      	subs	r4, r4, r5
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	2600      	movs	r6, #0
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	4d0b      	ldr	r5, [pc, #44]	; (8004bbc <__libc_init_array+0x40>)
 8004b8e:	4c0c      	ldr	r4, [pc, #48]	; (8004bc0 <__libc_init_array+0x44>)
 8004b90:	f000 f826 	bl	8004be0 <_init>
 8004b94:	1b64      	subs	r4, r4, r5
 8004b96:	10a4      	asrs	r4, r4, #2
 8004b98:	2600      	movs	r6, #0
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08004c80 	.word	0x08004c80
 8004bb8:	08004c80 	.word	0x08004c80
 8004bbc:	08004c80 	.word	0x08004c80
 8004bc0:	08004c84 	.word	0x08004c84

08004bc4 <memcpy>:
 8004bc4:	440a      	add	r2, r1
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	4770      	bx	lr
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bda:	4291      	cmp	r1, r2
 8004bdc:	d1f9      	bne.n	8004bd2 <memcpy+0xe>
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <_init>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr

08004bec <_fini>:
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	bf00      	nop
 8004bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf2:	bc08      	pop	{r3}
 8004bf4:	469e      	mov	lr, r3
 8004bf6:	4770      	bx	lr
